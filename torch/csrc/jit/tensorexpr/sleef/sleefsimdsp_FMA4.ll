; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vint2 = type { <2 x i64>, <2 x i64> }
%struct.vfloat2 = type { <8 x float>, <8 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [15 x i8] c"AVX + AMD FMA4\00", align 1
@rempitabsp = external local_unnamed_addr constant [0 x float], align 4

; Function Attrs: nounwind uwtable
define void @Sleef_ilogbf8_fma4(%struct.vint2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = bitcast <2 x i64> %12 to <4 x i32>
  %16 = lshr <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %17 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = bitcast <2 x i64> %17 to <16 x i8>
  %20 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %19) #8
  %21 = bitcast <2 x i64> %18 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %21) #8
  %23 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %24 = bitcast <16 x i8> %20 to <4 x i32>
  %25 = sub <4 x i32> %23, %24
  %26 = and <4 x i32> %16, <i32 255, i32 255, i32 255, i32 255>
  %27 = bitcast <16 x i8> %22 to <4 x i32>
  %28 = sub <4 x i32> %26, %27
  %29 = fcmp oeq <8 x float> %1, zeroinitializer
  %30 = sext <8 x i1> %29 to <8 x i32>
  %31 = bitcast <8 x i32> %30 to <4 x i64>
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = bitcast <4 x i32> %25 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <16 x i8> %35) #8
  %37 = bitcast <4 x i32> %28 to <16 x i8>
  %38 = bitcast <2 x i64> %33 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <16 x i8> %38) #8
  %40 = fcmp uno <8 x float> %1, zeroinitializer
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %36, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %45) #8
  %47 = bitcast <2 x i64> %44 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %47) #8
  %49 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %50 = sext <8 x i1> %49 to <8 x i32>
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %46, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %54) #8
  %56 = bitcast <2 x i64> %53 to <16 x i8>
  %57 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %48, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %56) #8
  %58 = bitcast %struct.vint2* %0 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %58, align 16
  %59 = getelementptr inbounds %struct.vint2, %struct.vint2* %0, i64 0, i32 1
  %60 = bitcast <2 x i64>* %59 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %60, align 16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly uwtable
define <8 x float> @Sleef_ldexpf8_fma4(<8 x float>, %struct.vint2* byval nocapture readonly align 16) local_unnamed_addr #2 {
  %3 = bitcast %struct.vint2* %1 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16
  %5 = getelementptr %struct.vint2, %struct.vint2* %1, i64 0, i32 1
  %6 = bitcast <2 x i64>* %5 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 16
  %8 = ashr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %9 = ashr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %10 = add <4 x i32> %8, %4
  %11 = add <4 x i32> %9, %7
  %12 = ashr <4 x i32> %10, <i32 6, i32 6, i32 6, i32 6>
  %13 = ashr <4 x i32> %11, <i32 6, i32 6, i32 6, i32 6>
  %14 = sub nsw <4 x i32> %12, %8
  %15 = sub nsw <4 x i32> %13, %9
  %16 = shl nsw <4 x i32> %14, <i32 4, i32 4, i32 4, i32 4>
  %17 = shl nsw <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %18 = shl <4 x i32> %14, <i32 6, i32 6, i32 6, i32 6>
  %19 = shl <4 x i32> %15, <i32 6, i32 6, i32 6, i32 6>
  %20 = sub <4 x i32> %4, %18
  %21 = sub <4 x i32> %7, %19
  %22 = add nsw <4 x i32> %16, <i32 127, i32 127, i32 127, i32 127>
  %23 = add nsw <4 x i32> %17, <i32 127, i32 127, i32 127, i32 127>
  %24 = icmp sgt <4 x i32> %14, <i32 -8, i32 -8, i32 -8, i32 -8>
  %25 = icmp sgt <4 x i32> %15, <i32 -8, i32 -8, i32 -8, i32 -8>
  %26 = select <4 x i1> %24, <4 x i32> %22, <4 x i32> zeroinitializer
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = select <4 x i1> %25, <4 x i32> %23, <4 x i32> zeroinitializer
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = icmp sgt <4 x i32> %26, <i32 255, i32 255, i32 255, i32 255>
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = icmp sgt <4 x i32> %28, <i32 255, i32 255, i32 255, i32 255>
  %33 = sext <4 x i1> %32 to <4 x i32>
  %34 = bitcast <4 x i32> %31 to <2 x i64>
  %35 = bitcast <4 x i32> %33 to <2 x i64>
  %36 = xor <2 x i64> %34, <i64 -1, i64 -1>
  %37 = and <2 x i64> %36, %27
  %38 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %39 = and <2 x i64> %38, %29
  %40 = and <2 x i64> %34, <i64 1095216660735, i64 1095216660735>
  %41 = and <2 x i64> %35, <i64 1095216660735, i64 1095216660735>
  %42 = or <2 x i64> %40, %37
  %43 = or <2 x i64> %41, %39
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fmul <8 x float> %53, %0
  %55 = fmul <8 x float> %54, %53
  %56 = fmul <8 x float> %55, %53
  %57 = fmul <8 x float> %56, %53
  %58 = shl <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %61 = add <4 x i32> %60, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %62 = bitcast <4 x i32> %59 to <2 x i64>
  %63 = bitcast <4 x i32> %61 to <2 x i64>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = fmul <8 x float> %57, %67
  ret <8 x float> %68
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #8
  %15 = bitcast <8 x i32> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>, <8 x float> %0) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>, <8 x float> %19) #8
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>, <8 x float> %20) #8
  br label %314

; <label>:22:                                     ; preds = %1
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %41, label %30, !prof !2

; <label>:30:                                     ; preds = %22
  %31 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #8
  %33 = bitcast <8 x i32> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %36 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %32) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>, <8 x float> %0) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>, <8 x float> %38) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>, <8 x float> %39) #8
  br label %314

; <label>:41:                                     ; preds = %22
  %42 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = lshr <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = lshr <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = and <4 x i32> %45, <i32 255, i32 255, i32 255, i32 255>
  %49 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %50 = add nsw <4 x i32> %48, <i32 -152, i32 -152, i32 -152, i32 -152>
  %51 = add nsw <4 x i32> %49, <i32 -152, i32 -152, i32 -152, i32 -152>
  %52 = icmp ugt <4 x i32> %48, <i32 217, i32 217, i32 217, i32 217>
  %53 = icmp ugt <4 x i32> %49, <i32 217, i32 217, i32 217, i32 217>
  %54 = select <4 x i1> %52, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %55 = select <4 x i1> %53, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %56 = add <4 x i32> %54, %44
  %57 = add <4 x i32> %55, %46
  %58 = bitcast <4 x i32> %56 to <2 x i64>
  %59 = bitcast <4 x i32> %57 to <2 x i64>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = ashr <4 x i32> %50, <i32 31, i32 31, i32 31, i32 31>
  %65 = ashr <4 x i32> %51, <i32 31, i32 31, i32 31, i32 31>
  %66 = xor <4 x i32> %64, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %67 = and <4 x i32> %66, %50
  %68 = shl <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %69 = xor <4 x i32> %65, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %70 = and <4 x i32> %69, %51
  %71 = shl <4 x i32> %70, <i32 2, i32 2, i32 2, i32 2>
  %72 = extractelement <4 x i32> %71, i32 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3, !noalias !7
  %76 = extractelement <4 x i32> %71, i32 2
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !7
  %80 = extractelement <4 x i32> %71, i32 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !7
  %84 = extractelement <4 x i32> %71, i32 0
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !7
  %88 = extractelement <4 x i32> %68, i32 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !7
  %92 = extractelement <4 x i32> %68, i32 2
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !7
  %96 = extractelement <4 x i32> %68, i32 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !7
  %100 = extractelement <4 x i32> %68, i32 0
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !7
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = insertelement <8 x float> %104, float %99, i32 1
  %106 = insertelement <8 x float> %105, float %95, i32 2
  %107 = insertelement <8 x float> %106, float %91, i32 3
  %108 = insertelement <8 x float> %107, float %87, i32 4
  %109 = insertelement <8 x float> %108, float %83, i32 5
  %110 = insertelement <8 x float> %109, float %79, i32 6
  %111 = insertelement <8 x float> %110, float %75, i32 7
  %112 = fmul <8 x float> %111, %63
  %113 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %112
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %111, <8 x float> %113) #8
  %115 = fmul <8 x float> %112, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %116 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %115, i32 8) #8
  %117 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %112, i32 8) #8
  %118 = fmul <8 x float> %117, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %119 = fsub <8 x float> %116, %118
  %120 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %119) #8
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = shufflevector <4 x i64> %121, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = shufflevector <4 x i64> %121, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %124 = fmul <8 x float> %116, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %125 = fsub <8 x float> %112, %124
  %126 = fadd <8 x float> %114, %125
  %127 = fsub <8 x float> %125, %126
  %128 = fadd <8 x float> %114, %127
  %129 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %73
  %130 = load float, float* %129, align 4, !tbaa !3, !noalias !7
  %131 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !7
  %133 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %134 = load float, float* %133, align 4, !tbaa !3, !noalias !7
  %135 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %136 = load float, float* %135, align 4, !tbaa !3, !noalias !7
  %137 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %138 = load float, float* %137, align 4, !tbaa !3, !noalias !7
  %139 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %140 = load float, float* %139, align 4, !tbaa !3, !noalias !7
  %141 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %142 = load float, float* %141, align 4, !tbaa !3, !noalias !7
  %143 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %101
  %144 = load float, float* %143, align 4, !tbaa !3, !noalias !7
  %145 = insertelement <8 x float> undef, float %144, i32 0
  %146 = insertelement <8 x float> %145, float %142, i32 1
  %147 = insertelement <8 x float> %146, float %140, i32 2
  %148 = insertelement <8 x float> %147, float %138, i32 3
  %149 = insertelement <8 x float> %148, float %136, i32 4
  %150 = insertelement <8 x float> %149, float %134, i32 5
  %151 = insertelement <8 x float> %150, float %132, i32 6
  %152 = insertelement <8 x float> %151, float %130, i32 7
  %153 = fmul <8 x float> %152, %63
  %154 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %153
  %155 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %152, <8 x float> %154) #8
  %156 = fadd <8 x float> %126, %153
  %157 = fsub <8 x float> %156, %126
  %158 = fsub <8 x float> %156, %157
  %159 = fsub <8 x float> %126, %158
  %160 = fsub <8 x float> %153, %157
  %161 = fadd <8 x float> %160, %159
  %162 = fadd <8 x float> %128, %155
  %163 = fadd <8 x float> %162, %161
  %164 = fmul <8 x float> %156, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %165 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %164, i32 8) #8
  %166 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %156, i32 8) #8
  %167 = fmul <8 x float> %166, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %168 = fsub <8 x float> %165, %167
  %169 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %168) #8
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %172 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %173 = fmul <8 x float> %165, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %174 = fsub <8 x float> %156, %173
  %175 = bitcast <2 x i64> %122 to <4 x i32>
  %176 = bitcast <2 x i64> %171 to <4 x i32>
  %177 = add <4 x i32> %176, %175
  %178 = bitcast <2 x i64> %123 to <4 x i32>
  %179 = bitcast <2 x i64> %172 to <4 x i32>
  %180 = add <4 x i32> %179, %178
  %181 = fadd <8 x float> %174, %163
  %182 = fsub <8 x float> %174, %181
  %183 = fadd <8 x float> %163, %182
  %184 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %73
  %185 = load float, float* %184, align 4, !tbaa !3, !noalias !7
  %186 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %187 = load float, float* %186, align 4, !tbaa !3, !noalias !7
  %188 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %189 = load float, float* %188, align 4, !tbaa !3, !noalias !7
  %190 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %191 = load float, float* %190, align 4, !tbaa !3, !noalias !7
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !7
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !7
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !7
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %101
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !7
  %200 = insertelement <8 x float> undef, float %199, i32 0
  %201 = insertelement <8 x float> %200, float %197, i32 1
  %202 = insertelement <8 x float> %201, float %195, i32 2
  %203 = insertelement <8 x float> %202, float %193, i32 3
  %204 = insertelement <8 x float> %203, float %191, i32 4
  %205 = insertelement <8 x float> %204, float %189, i32 5
  %206 = insertelement <8 x float> %205, float %187, i32 6
  %207 = insertelement <8 x float> %206, float %185, i32 7
  %208 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %73
  %209 = load float, float* %208, align 4, !tbaa !3, !noalias !7
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !7
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !7
  %214 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %215 = load float, float* %214, align 4, !tbaa !3, !noalias !7
  %216 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %217 = load float, float* %216, align 4, !tbaa !3, !noalias !7
  %218 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %219 = load float, float* %218, align 4, !tbaa !3, !noalias !7
  %220 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %221 = load float, float* %220, align 4, !tbaa !3, !noalias !7
  %222 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %101
  %223 = load float, float* %222, align 4, !tbaa !3, !noalias !7
  %224 = insertelement <8 x float> undef, float %223, i32 0
  %225 = insertelement <8 x float> %224, float %221, i32 1
  %226 = insertelement <8 x float> %225, float %219, i32 2
  %227 = insertelement <8 x float> %226, float %217, i32 3
  %228 = insertelement <8 x float> %227, float %215, i32 4
  %229 = insertelement <8 x float> %228, float %213, i32 5
  %230 = insertelement <8 x float> %229, float %211, i32 6
  %231 = insertelement <8 x float> %230, float %209, i32 7
  %232 = fmul <8 x float> %207, %63
  %233 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %232
  %234 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %207, <8 x float> %63, <8 x float> %233) #8
  %235 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %231, <8 x float> %63, <8 x float> %234) #8
  %236 = fadd <8 x float> %181, %232
  %237 = fsub <8 x float> %236, %181
  %238 = fsub <8 x float> %236, %237
  %239 = fsub <8 x float> %181, %238
  %240 = fsub <8 x float> %232, %237
  %241 = fadd <8 x float> %240, %239
  %242 = fadd <8 x float> %183, %235
  %243 = fadd <8 x float> %242, %241
  %244 = fadd <8 x float> %236, %243
  %245 = fsub <8 x float> %236, %244
  %246 = fadd <8 x float> %243, %245
  %247 = fmul <8 x float> %244, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %248 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %247
  %249 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %244, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %248) #8
  %250 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %246, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %249) #8
  %251 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %244, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %250) #8
  %252 = and <4 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %253 = bitcast <4 x i64> %252 to <8 x float>
  %254 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %253, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %255 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %247, <8 x float> %63, <8 x float> %254) #8
  %256 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %251, <8 x float> zeroinitializer, <8 x float> %254) #8
  %257 = shl <4 x i32> %177, <i32 1, i32 1, i32 1, i32 1>
  %258 = and <4 x i32> %257, <i32 6, i32 6, i32 6, i32 6>
  %259 = shl <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %260 = and <4 x i32> %259, <i32 6, i32 6, i32 6, i32 6>
  %261 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %255, <8 x float> zeroinitializer, i8 30) #8
  %262 = bitcast <8 x float> %261 to <4 x i64>
  %263 = shufflevector <4 x i64> %262, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %264 = shufflevector <4 x i64> %262, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %265 = bitcast <2 x i64> %263 to <16 x i8>
  %266 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %265) #8
  %267 = bitcast <2 x i64> %264 to <16 x i8>
  %268 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %267) #8
  %269 = bitcast <16 x i8> %266 to <4 x i32>
  %270 = add <4 x i32> %258, %269
  %271 = bitcast <16 x i8> %268 to <4 x i32>
  %272 = add <4 x i32> %260, %271
  %273 = ashr <4 x i32> %270, <i32 2, i32 2, i32 2, i32 2>
  %274 = ashr <4 x i32> %272, <i32 2, i32 2, i32 2, i32 2>
  %275 = bitcast <4 x i32> %273 to <2 x i64>
  %276 = bitcast <4 x i32> %274 to <2 x i64>
  %277 = and <4 x i32> %177, <i32 1, i32 1, i32 1, i32 1>
  %278 = icmp ne <4 x i32> %277, zeroinitializer
  %279 = sext <4 x i1> %278 to <4 x i32>
  %280 = bitcast <4 x i32> %279 to <2 x i64>
  %281 = and <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %282 = icmp ne <4 x i32> %281, zeroinitializer
  %283 = sext <4 x i1> %282 to <4 x i32>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = shufflevector <2 x i64> %280, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %286 = shufflevector <2 x i64> %284, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %287 = shufflevector <4 x i64> %285, <4 x i64> %286, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %288 = bitcast <8 x float> %255 to <4 x i64>
  %289 = and <4 x i64> %288, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %290 = xor <4 x i64> %289, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %291 = bitcast <4 x i64> %290 to <8 x float>
  %292 = or <4 x i64> %289, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %293 = bitcast <4 x i64> %292 to <8 x float>
  %294 = fadd <8 x float> %255, %291
  %295 = fsub <8 x float> %294, %255
  %296 = fsub <8 x float> %294, %295
  %297 = fsub <8 x float> %255, %296
  %298 = fsub <8 x float> %291, %295
  %299 = fadd <8 x float> %298, %297
  %300 = fadd <8 x float> %256, %293
  %301 = fadd <8 x float> %300, %299
  %302 = bitcast <4 x i64> %287 to <8 x float>
  %303 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %255, <8 x float> %294, <8 x float> %302) #8
  %304 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %256, <8 x float> %301, <8 x float> %302) #8
  %305 = fadd <8 x float> %303, %304
  %306 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %307 = fcmp uno <8 x float> %0, zeroinitializer
  %308 = or <8 x i1> %306, %307
  %309 = sext <8 x i1> %308 to <8 x i32>
  %310 = bitcast <8 x i32> %309 to <4 x i64>
  %311 = bitcast <8 x float> %305 to <4 x i64>
  %312 = or <4 x i64> %311, %310
  %313 = bitcast <4 x i64> %312 to <8 x float>
  br label %314

; <label>:314:                                    ; preds = %30, %41, %12
  %315 = phi <2 x i64> [ %275, %41 ], [ %34, %30 ], [ %16, %12 ]
  %316 = phi <2 x i64> [ %276, %41 ], [ %35, %30 ], [ %17, %12 ]
  %317 = phi <8 x float> [ %313, %41 ], [ %40, %30 ], [ %21, %12 ]
  %318 = fmul <8 x float> %317, %317
  %319 = bitcast <2 x i64> %315 to <4 x i32>
  %320 = and <4 x i32> %319, <i32 1, i32 1, i32 1, i32 1>
  %321 = icmp ne <4 x i32> %320, zeroinitializer
  %322 = sext <4 x i1> %321 to <4 x i32>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = bitcast <2 x i64> %316 to <4 x i32>
  %325 = and <4 x i32> %324, <i32 1, i32 1, i32 1, i32 1>
  %326 = icmp ne <4 x i32> %325, zeroinitializer
  %327 = sext <4 x i1> %326 to <4 x i32>
  %328 = bitcast <4 x i32> %327 to <2 x i64>
  %329 = shufflevector <2 x i64> %323, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %330 = shufflevector <2 x i64> %328, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %331 = shufflevector <4 x i64> %329, <4 x i64> %330, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %332 = and <4 x i64> %331, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %333 = bitcast <8 x float> %317 to <4 x i64>
  %334 = xor <4 x i64> %332, %333
  %335 = bitcast <4 x i64> %334 to <8 x float>
  %336 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %318, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #8
  %337 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %336, <8 x float> %318, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #8
  %338 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %337, <8 x float> %318, <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>) #8
  %339 = fmul <8 x float> %338, %335
  %340 = fmul <8 x float> %318, %339
  %341 = fadd <8 x float> %340, %335
  %342 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %343 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %344 = bitcast <2 x i64> %342 to <4 x i32>
  %345 = icmp eq <4 x i32> %344, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %346 = sext <4 x i1> %345 to <4 x i32>
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = bitcast <2 x i64> %343 to <4 x i32>
  %349 = icmp eq <4 x i32> %348, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %350 = sext <4 x i1> %349 to <4 x i32>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = shufflevector <2 x i64> %347, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %353 = shufflevector <2 x i64> %351, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %354 = shufflevector <4 x i64> %352, <4 x i64> %353, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %355 = bitcast <4 x i64> %354 to <8 x float>
  %356 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %341, <8 x float> %0, <8 x float> %355) #8
  ret <8 x float> %356
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %35, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = fadd <8 x float> %13, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = bitcast <2 x i64> %17 to <4 x i32>
  %20 = shl <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = shl <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = bitcast <4 x i32> %20 to <2 x i64>
  %24 = or <2 x i64> %23, <i64 4294967297, i64 4294967297>
  %25 = bitcast <4 x i32> %22 to <2 x i64>
  %26 = or <2 x i64> %25, <i64 4294967297, i64 4294967297>
  %27 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = bitcast <4 x i64> %29 to <8 x i32>
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %33) #8
  br label %341

; <label>:35:                                     ; preds = %1
  %36 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %37 = bitcast <8 x float> %36 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %39, %38
  %41 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %40, <2 x i64> <i64 -1, i64 -1>) #8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %67, label %43, !prof !2

; <label>:43:                                     ; preds = %35
  %44 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %45 = fadd <8 x float> %44, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %46 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %45) #8
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %50 = bitcast <2 x i64> %48 to <4 x i32>
  %51 = shl <4 x i32> %50, <i32 1, i32 1, i32 1, i32 1>
  %52 = bitcast <2 x i64> %49 to <4 x i32>
  %53 = shl <4 x i32> %52, <i32 1, i32 1, i32 1, i32 1>
  %54 = bitcast <4 x i32> %51 to <2 x i64>
  %55 = or <2 x i64> %54, <i64 4294967297, i64 4294967297>
  %56 = bitcast <4 x i32> %53 to <2 x i64>
  %57 = or <2 x i64> %56, <i64 4294967297, i64 4294967297>
  %58 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <4 x i64> %58, <4 x i64> %59, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %61 = bitcast <4 x i64> %60 to <8 x i32>
  %62 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %0) #8
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %64) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %65) #8
  br label %341

; <label>:67:                                     ; preds = %35
  %68 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %70 = bitcast <2 x i64> %68 to <4 x i32>
  %71 = lshr <4 x i32> %70, <i32 23, i32 23, i32 23, i32 23>
  %72 = bitcast <2 x i64> %69 to <4 x i32>
  %73 = lshr <4 x i32> %72, <i32 23, i32 23, i32 23, i32 23>
  %74 = and <4 x i32> %71, <i32 255, i32 255, i32 255, i32 255>
  %75 = and <4 x i32> %73, <i32 255, i32 255, i32 255, i32 255>
  %76 = add nsw <4 x i32> %74, <i32 -152, i32 -152, i32 -152, i32 -152>
  %77 = add nsw <4 x i32> %75, <i32 -152, i32 -152, i32 -152, i32 -152>
  %78 = icmp ugt <4 x i32> %74, <i32 217, i32 217, i32 217, i32 217>
  %79 = icmp ugt <4 x i32> %75, <i32 217, i32 217, i32 217, i32 217>
  %80 = select <4 x i1> %78, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %81 = select <4 x i1> %79, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %82 = add <4 x i32> %80, %70
  %83 = add <4 x i32> %81, %72
  %84 = bitcast <4 x i32> %82 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = ashr <4 x i32> %76, <i32 31, i32 31, i32 31, i32 31>
  %91 = ashr <4 x i32> %77, <i32 31, i32 31, i32 31, i32 31>
  %92 = xor <4 x i32> %90, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %93 = and <4 x i32> %92, %76
  %94 = shl <4 x i32> %93, <i32 2, i32 2, i32 2, i32 2>
  %95 = xor <4 x i32> %91, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %96 = and <4 x i32> %95, %77
  %97 = shl <4 x i32> %96, <i32 2, i32 2, i32 2, i32 2>
  %98 = extractelement <4 x i32> %97, i32 3
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !3, !noalias !10
  %102 = extractelement <4 x i32> %97, i32 2
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !3, !noalias !10
  %106 = extractelement <4 x i32> %97, i32 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !3, !noalias !10
  %110 = extractelement <4 x i32> %97, i32 0
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !3, !noalias !10
  %114 = extractelement <4 x i32> %94, i32 3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !3, !noalias !10
  %118 = extractelement <4 x i32> %94, i32 2
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !3, !noalias !10
  %122 = extractelement <4 x i32> %94, i32 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !3, !noalias !10
  %126 = extractelement <4 x i32> %94, i32 0
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !10
  %130 = insertelement <8 x float> undef, float %129, i32 0
  %131 = insertelement <8 x float> %130, float %125, i32 1
  %132 = insertelement <8 x float> %131, float %121, i32 2
  %133 = insertelement <8 x float> %132, float %117, i32 3
  %134 = insertelement <8 x float> %133, float %113, i32 4
  %135 = insertelement <8 x float> %134, float %109, i32 5
  %136 = insertelement <8 x float> %135, float %105, i32 6
  %137 = insertelement <8 x float> %136, float %101, i32 7
  %138 = fmul <8 x float> %137, %89
  %139 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %138
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %137, <8 x float> %139) #8
  %141 = fmul <8 x float> %138, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %142 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %141, i32 8) #8
  %143 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %138, i32 8) #8
  %144 = fmul <8 x float> %143, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %145 = fsub <8 x float> %142, %144
  %146 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %145) #8
  %147 = bitcast <8 x i32> %146 to <4 x i64>
  %148 = shufflevector <4 x i64> %147, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %149 = shufflevector <4 x i64> %147, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %150 = fmul <8 x float> %142, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %151 = fsub <8 x float> %138, %150
  %152 = fadd <8 x float> %140, %151
  %153 = fsub <8 x float> %151, %152
  %154 = fadd <8 x float> %140, %153
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %99
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !10
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %103
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !10
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %107
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !10
  %161 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %111
  %162 = load float, float* %161, align 4, !tbaa !3, !noalias !10
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %115
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !10
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %119
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !10
  %167 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %123
  %168 = load float, float* %167, align 4, !tbaa !3, !noalias !10
  %169 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %127
  %170 = load float, float* %169, align 4, !tbaa !3, !noalias !10
  %171 = insertelement <8 x float> undef, float %170, i32 0
  %172 = insertelement <8 x float> %171, float %168, i32 1
  %173 = insertelement <8 x float> %172, float %166, i32 2
  %174 = insertelement <8 x float> %173, float %164, i32 3
  %175 = insertelement <8 x float> %174, float %162, i32 4
  %176 = insertelement <8 x float> %175, float %160, i32 5
  %177 = insertelement <8 x float> %176, float %158, i32 6
  %178 = insertelement <8 x float> %177, float %156, i32 7
  %179 = fmul <8 x float> %178, %89
  %180 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %179
  %181 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %178, <8 x float> %180) #8
  %182 = fadd <8 x float> %152, %179
  %183 = fsub <8 x float> %182, %152
  %184 = fsub <8 x float> %182, %183
  %185 = fsub <8 x float> %152, %184
  %186 = fsub <8 x float> %179, %183
  %187 = fadd <8 x float> %186, %185
  %188 = fadd <8 x float> %154, %181
  %189 = fadd <8 x float> %188, %187
  %190 = fmul <8 x float> %182, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %191 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %190, i32 8) #8
  %192 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %182, i32 8) #8
  %193 = fmul <8 x float> %192, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %194 = fsub <8 x float> %191, %193
  %195 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %194) #8
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = shufflevector <4 x i64> %196, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %198 = shufflevector <4 x i64> %196, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %199 = fmul <8 x float> %191, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %200 = fsub <8 x float> %182, %199
  %201 = bitcast <2 x i64> %148 to <4 x i32>
  %202 = bitcast <2 x i64> %197 to <4 x i32>
  %203 = add <4 x i32> %202, %201
  %204 = bitcast <2 x i64> %149 to <4 x i32>
  %205 = bitcast <2 x i64> %198 to <4 x i32>
  %206 = add <4 x i32> %205, %204
  %207 = fadd <8 x float> %200, %189
  %208 = fsub <8 x float> %200, %207
  %209 = fadd <8 x float> %189, %208
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %99
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !10
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %103
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !10
  %214 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %107
  %215 = load float, float* %214, align 4, !tbaa !3, !noalias !10
  %216 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %111
  %217 = load float, float* %216, align 4, !tbaa !3, !noalias !10
  %218 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %115
  %219 = load float, float* %218, align 4, !tbaa !3, !noalias !10
  %220 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %119
  %221 = load float, float* %220, align 4, !tbaa !3, !noalias !10
  %222 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %123
  %223 = load float, float* %222, align 4, !tbaa !3, !noalias !10
  %224 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %127
  %225 = load float, float* %224, align 4, !tbaa !3, !noalias !10
  %226 = insertelement <8 x float> undef, float %225, i32 0
  %227 = insertelement <8 x float> %226, float %223, i32 1
  %228 = insertelement <8 x float> %227, float %221, i32 2
  %229 = insertelement <8 x float> %228, float %219, i32 3
  %230 = insertelement <8 x float> %229, float %217, i32 4
  %231 = insertelement <8 x float> %230, float %215, i32 5
  %232 = insertelement <8 x float> %231, float %213, i32 6
  %233 = insertelement <8 x float> %232, float %211, i32 7
  %234 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %99
  %235 = load float, float* %234, align 4, !tbaa !3, !noalias !10
  %236 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %103
  %237 = load float, float* %236, align 4, !tbaa !3, !noalias !10
  %238 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %107
  %239 = load float, float* %238, align 4, !tbaa !3, !noalias !10
  %240 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %111
  %241 = load float, float* %240, align 4, !tbaa !3, !noalias !10
  %242 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %115
  %243 = load float, float* %242, align 4, !tbaa !3, !noalias !10
  %244 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %119
  %245 = load float, float* %244, align 4, !tbaa !3, !noalias !10
  %246 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %123
  %247 = load float, float* %246, align 4, !tbaa !3, !noalias !10
  %248 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %127
  %249 = load float, float* %248, align 4, !tbaa !3, !noalias !10
  %250 = insertelement <8 x float> undef, float %249, i32 0
  %251 = insertelement <8 x float> %250, float %247, i32 1
  %252 = insertelement <8 x float> %251, float %245, i32 2
  %253 = insertelement <8 x float> %252, float %243, i32 3
  %254 = insertelement <8 x float> %253, float %241, i32 4
  %255 = insertelement <8 x float> %254, float %239, i32 5
  %256 = insertelement <8 x float> %255, float %237, i32 6
  %257 = insertelement <8 x float> %256, float %235, i32 7
  %258 = fmul <8 x float> %233, %89
  %259 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %258
  %260 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %233, <8 x float> %89, <8 x float> %259) #8
  %261 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %257, <8 x float> %89, <8 x float> %260) #8
  %262 = fadd <8 x float> %207, %258
  %263 = fsub <8 x float> %262, %207
  %264 = fsub <8 x float> %262, %263
  %265 = fsub <8 x float> %207, %264
  %266 = fsub <8 x float> %258, %263
  %267 = fadd <8 x float> %266, %265
  %268 = fadd <8 x float> %209, %261
  %269 = fadd <8 x float> %268, %267
  %270 = fadd <8 x float> %262, %269
  %271 = fsub <8 x float> %262, %270
  %272 = fadd <8 x float> %269, %271
  %273 = fmul <8 x float> %270, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %274 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %273
  %275 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %270, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %274) #8
  %276 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %272, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %275) #8
  %277 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %270, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %276) #8
  %278 = and <4 x i64> %88, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %279 = bitcast <4 x i64> %278 to <8 x float>
  %280 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %279, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %281 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %273, <8 x float> %89, <8 x float> %280) #8
  %282 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %277, <8 x float> zeroinitializer, <8 x float> %280) #8
  %283 = shl <4 x i32> %203, <i32 1, i32 1, i32 1, i32 1>
  %284 = and <4 x i32> %283, <i32 6, i32 6, i32 6, i32 6>
  %285 = shl <4 x i32> %206, <i32 1, i32 1, i32 1, i32 1>
  %286 = and <4 x i32> %285, <i32 6, i32 6, i32 6, i32 6>
  %287 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %281, <8 x float> zeroinitializer, i8 30) #8
  %288 = bitcast <8 x float> %287 to <4 x i64>
  %289 = shufflevector <4 x i64> %288, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %290 = shufflevector <4 x i64> %288, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %291 = bitcast <2 x i64> %289 to <16 x i8>
  %292 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %291) #8
  %293 = bitcast <2 x i64> %290 to <16 x i8>
  %294 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %293) #8
  %295 = bitcast <16 x i8> %292 to <4 x i32>
  %296 = add <4 x i32> %284, %295
  %297 = bitcast <16 x i8> %294 to <4 x i32>
  %298 = add <4 x i32> %286, %297
  %299 = ashr <4 x i32> %296, <i32 1, i32 1, i32 1, i32 1>
  %300 = ashr <4 x i32> %298, <i32 1, i32 1, i32 1, i32 1>
  %301 = bitcast <4 x i32> %299 to <2 x i64>
  %302 = bitcast <4 x i32> %300 to <2 x i64>
  %303 = and <4 x i32> %203, <i32 1, i32 1, i32 1, i32 1>
  %304 = icmp eq <4 x i32> %303, zeroinitializer
  %305 = sext <4 x i1> %304 to <4 x i32>
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = and <4 x i32> %206, <i32 1, i32 1, i32 1, i32 1>
  %308 = icmp eq <4 x i32> %307, zeroinitializer
  %309 = sext <4 x i1> %308 to <4 x i32>
  %310 = bitcast <4 x i32> %309 to <2 x i64>
  %311 = shufflevector <2 x i64> %306, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %312 = shufflevector <2 x i64> %310, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %313 = shufflevector <4 x i64> %311, <4 x i64> %312, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %314 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %287) #8
  %315 = bitcast <8 x float> %314 to <4 x i64>
  %316 = and <4 x i64> %315, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %317 = xor <4 x i64> %316, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = or <4 x i64> %316, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %320 = bitcast <4 x i64> %319 to <8 x float>
  %321 = fadd <8 x float> %281, %318
  %322 = fsub <8 x float> %321, %281
  %323 = fsub <8 x float> %321, %322
  %324 = fsub <8 x float> %281, %323
  %325 = fsub <8 x float> %318, %322
  %326 = fadd <8 x float> %325, %324
  %327 = fadd <8 x float> %282, %320
  %328 = fadd <8 x float> %327, %326
  %329 = bitcast <4 x i64> %313 to <8 x float>
  %330 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %281, <8 x float> %321, <8 x float> %329) #8
  %331 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %282, <8 x float> %328, <8 x float> %329) #8
  %332 = fadd <8 x float> %330, %331
  %333 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %334 = fcmp uno <8 x float> %0, zeroinitializer
  %335 = or <8 x i1> %333, %334
  %336 = sext <8 x i1> %335 to <8 x i32>
  %337 = bitcast <8 x i32> %336 to <4 x i64>
  %338 = bitcast <8 x float> %332 to <4 x i64>
  %339 = or <4 x i64> %338, %337
  %340 = bitcast <4 x i64> %339 to <8 x float>
  br label %341

; <label>:341:                                    ; preds = %43, %67, %12
  %342 = phi <2 x i64> [ %301, %67 ], [ %55, %43 ], [ %24, %12 ]
  %343 = phi <2 x i64> [ %302, %67 ], [ %57, %43 ], [ %26, %12 ]
  %344 = phi <8 x float> [ %340, %67 ], [ %66, %43 ], [ %34, %12 ]
  %345 = fmul <8 x float> %344, %344
  %346 = bitcast <2 x i64> %342 to <4 x i32>
  %347 = and <4 x i32> %346, <i32 2, i32 2, i32 2, i32 2>
  %348 = icmp eq <4 x i32> %347, zeroinitializer
  %349 = sext <4 x i1> %348 to <4 x i32>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = bitcast <2 x i64> %343 to <4 x i32>
  %352 = and <4 x i32> %351, <i32 2, i32 2, i32 2, i32 2>
  %353 = icmp eq <4 x i32> %352, zeroinitializer
  %354 = sext <4 x i1> %353 to <4 x i32>
  %355 = bitcast <4 x i32> %354 to <2 x i64>
  %356 = shufflevector <2 x i64> %350, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %357 = shufflevector <2 x i64> %355, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %358 = shufflevector <4 x i64> %356, <4 x i64> %357, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %359 = and <4 x i64> %358, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %360 = bitcast <8 x float> %344 to <4 x i64>
  %361 = xor <4 x i64> %359, %360
  %362 = bitcast <4 x i64> %361 to <8 x float>
  %363 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %345, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #8
  %364 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %363, <8 x float> %345, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #8
  %365 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %364, <8 x float> %345, <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>) #8
  %366 = fmul <8 x float> %365, %362
  %367 = fmul <8 x float> %345, %366
  %368 = fadd <8 x float> %367, %362
  ret <8 x float> %368
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #8
  %15 = bitcast <8 x i32> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %19) #8
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %20) #8
  br label %279

; <label>:22:                                     ; preds = %1
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %41, label %30, !prof !2

; <label>:30:                                     ; preds = %22
  %31 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #8
  %33 = bitcast <8 x i32> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %36 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %32) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %0) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %38) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %39) #8
  br label %279

; <label>:41:                                     ; preds = %22
  %42 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = lshr <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = lshr <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = and <4 x i32> %45, <i32 255, i32 255, i32 255, i32 255>
  %49 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %50 = add nsw <4 x i32> %48, <i32 -152, i32 -152, i32 -152, i32 -152>
  %51 = add nsw <4 x i32> %49, <i32 -152, i32 -152, i32 -152, i32 -152>
  %52 = icmp ugt <4 x i32> %48, <i32 217, i32 217, i32 217, i32 217>
  %53 = icmp ugt <4 x i32> %49, <i32 217, i32 217, i32 217, i32 217>
  %54 = select <4 x i1> %52, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %55 = select <4 x i1> %53, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %56 = add <4 x i32> %54, %44
  %57 = add <4 x i32> %55, %46
  %58 = bitcast <4 x i32> %56 to <2 x i64>
  %59 = bitcast <4 x i32> %57 to <2 x i64>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = ashr <4 x i32> %50, <i32 31, i32 31, i32 31, i32 31>
  %65 = ashr <4 x i32> %51, <i32 31, i32 31, i32 31, i32 31>
  %66 = xor <4 x i32> %64, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %67 = and <4 x i32> %66, %50
  %68 = shl <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %69 = xor <4 x i32> %65, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %70 = and <4 x i32> %69, %51
  %71 = shl <4 x i32> %70, <i32 2, i32 2, i32 2, i32 2>
  %72 = extractelement <4 x i32> %71, i32 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3, !noalias !13
  %76 = extractelement <4 x i32> %71, i32 2
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !13
  %80 = extractelement <4 x i32> %71, i32 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !13
  %84 = extractelement <4 x i32> %71, i32 0
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !13
  %88 = extractelement <4 x i32> %68, i32 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !13
  %92 = extractelement <4 x i32> %68, i32 2
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !13
  %96 = extractelement <4 x i32> %68, i32 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !13
  %100 = extractelement <4 x i32> %68, i32 0
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !13
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = insertelement <8 x float> %104, float %99, i32 1
  %106 = insertelement <8 x float> %105, float %95, i32 2
  %107 = insertelement <8 x float> %106, float %91, i32 3
  %108 = insertelement <8 x float> %107, float %87, i32 4
  %109 = insertelement <8 x float> %108, float %83, i32 5
  %110 = insertelement <8 x float> %109, float %79, i32 6
  %111 = insertelement <8 x float> %110, float %75, i32 7
  %112 = fmul <8 x float> %111, %63
  %113 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %112
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %111, <8 x float> %113) #8
  %115 = fmul <8 x float> %112, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %116 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %115, i32 8) #8
  %117 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %112, i32 8) #8
  %118 = fmul <8 x float> %117, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %119 = fsub <8 x float> %116, %118
  %120 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %119) #8
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = shufflevector <4 x i64> %121, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = shufflevector <4 x i64> %121, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %124 = fmul <8 x float> %116, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %125 = fsub <8 x float> %112, %124
  %126 = fadd <8 x float> %114, %125
  %127 = fsub <8 x float> %125, %126
  %128 = fadd <8 x float> %114, %127
  %129 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %73
  %130 = load float, float* %129, align 4, !tbaa !3, !noalias !13
  %131 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !13
  %133 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %134 = load float, float* %133, align 4, !tbaa !3, !noalias !13
  %135 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %136 = load float, float* %135, align 4, !tbaa !3, !noalias !13
  %137 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %138 = load float, float* %137, align 4, !tbaa !3, !noalias !13
  %139 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %140 = load float, float* %139, align 4, !tbaa !3, !noalias !13
  %141 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %142 = load float, float* %141, align 4, !tbaa !3, !noalias !13
  %143 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %101
  %144 = load float, float* %143, align 4, !tbaa !3, !noalias !13
  %145 = insertelement <8 x float> undef, float %144, i32 0
  %146 = insertelement <8 x float> %145, float %142, i32 1
  %147 = insertelement <8 x float> %146, float %140, i32 2
  %148 = insertelement <8 x float> %147, float %138, i32 3
  %149 = insertelement <8 x float> %148, float %136, i32 4
  %150 = insertelement <8 x float> %149, float %134, i32 5
  %151 = insertelement <8 x float> %150, float %132, i32 6
  %152 = insertelement <8 x float> %151, float %130, i32 7
  %153 = fmul <8 x float> %152, %63
  %154 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %153
  %155 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %152, <8 x float> %154) #8
  %156 = fadd <8 x float> %126, %153
  %157 = fsub <8 x float> %156, %126
  %158 = fsub <8 x float> %156, %157
  %159 = fsub <8 x float> %126, %158
  %160 = fsub <8 x float> %153, %157
  %161 = fadd <8 x float> %160, %159
  %162 = fadd <8 x float> %128, %155
  %163 = fadd <8 x float> %162, %161
  %164 = fmul <8 x float> %156, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %165 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %164, i32 8) #8
  %166 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %156, i32 8) #8
  %167 = fmul <8 x float> %166, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %168 = fsub <8 x float> %165, %167
  %169 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %168) #8
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %172 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %173 = fmul <8 x float> %165, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %174 = fsub <8 x float> %156, %173
  %175 = bitcast <2 x i64> %122 to <4 x i32>
  %176 = bitcast <2 x i64> %171 to <4 x i32>
  %177 = add <4 x i32> %176, %175
  %178 = bitcast <2 x i64> %123 to <4 x i32>
  %179 = bitcast <2 x i64> %172 to <4 x i32>
  %180 = add <4 x i32> %179, %178
  %181 = fadd <8 x float> %174, %163
  %182 = fsub <8 x float> %174, %181
  %183 = fadd <8 x float> %163, %182
  %184 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %73
  %185 = load float, float* %184, align 4, !tbaa !3, !noalias !13
  %186 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %187 = load float, float* %186, align 4, !tbaa !3, !noalias !13
  %188 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %189 = load float, float* %188, align 4, !tbaa !3, !noalias !13
  %190 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %191 = load float, float* %190, align 4, !tbaa !3, !noalias !13
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !13
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !13
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !13
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %101
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !13
  %200 = insertelement <8 x float> undef, float %199, i32 0
  %201 = insertelement <8 x float> %200, float %197, i32 1
  %202 = insertelement <8 x float> %201, float %195, i32 2
  %203 = insertelement <8 x float> %202, float %193, i32 3
  %204 = insertelement <8 x float> %203, float %191, i32 4
  %205 = insertelement <8 x float> %204, float %189, i32 5
  %206 = insertelement <8 x float> %205, float %187, i32 6
  %207 = insertelement <8 x float> %206, float %185, i32 7
  %208 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %73
  %209 = load float, float* %208, align 4, !tbaa !3, !noalias !13
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !13
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !13
  %214 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %215 = load float, float* %214, align 4, !tbaa !3, !noalias !13
  %216 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %217 = load float, float* %216, align 4, !tbaa !3, !noalias !13
  %218 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %219 = load float, float* %218, align 4, !tbaa !3, !noalias !13
  %220 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %221 = load float, float* %220, align 4, !tbaa !3, !noalias !13
  %222 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %101
  %223 = load float, float* %222, align 4, !tbaa !3, !noalias !13
  %224 = insertelement <8 x float> undef, float %223, i32 0
  %225 = insertelement <8 x float> %224, float %221, i32 1
  %226 = insertelement <8 x float> %225, float %219, i32 2
  %227 = insertelement <8 x float> %226, float %217, i32 3
  %228 = insertelement <8 x float> %227, float %215, i32 4
  %229 = insertelement <8 x float> %228, float %213, i32 5
  %230 = insertelement <8 x float> %229, float %211, i32 6
  %231 = insertelement <8 x float> %230, float %209, i32 7
  %232 = fmul <8 x float> %207, %63
  %233 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %232
  %234 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %207, <8 x float> %63, <8 x float> %233) #8
  %235 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %231, <8 x float> %63, <8 x float> %234) #8
  %236 = fadd <8 x float> %181, %232
  %237 = fsub <8 x float> %236, %181
  %238 = fsub <8 x float> %236, %237
  %239 = fsub <8 x float> %181, %238
  %240 = fsub <8 x float> %232, %237
  %241 = fadd <8 x float> %240, %239
  %242 = fadd <8 x float> %183, %235
  %243 = fadd <8 x float> %242, %241
  %244 = fadd <8 x float> %236, %243
  %245 = fsub <8 x float> %236, %244
  %246 = fadd <8 x float> %243, %245
  %247 = fmul <8 x float> %244, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %248 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %247
  %249 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %244, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %248) #8
  %250 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %246, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %249) #8
  %251 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %244, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %250) #8
  %252 = and <4 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %253 = bitcast <4 x i64> %252 to <8 x float>
  %254 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %253, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %255 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %247, <8 x float> %63, <8 x float> %254) #8
  %256 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %251, <8 x float> zeroinitializer, <8 x float> %254) #8
  %257 = bitcast <4 x i32> %177 to <2 x i64>
  %258 = bitcast <4 x i32> %180 to <2 x i64>
  %259 = fadd <8 x float> %255, %256
  %260 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %261 = fcmp uno <8 x float> %0, zeroinitializer
  %262 = or <8 x i1> %260, %261
  %263 = sext <8 x i1> %262 to <8 x i32>
  %264 = bitcast <8 x i32> %263 to <4 x i64>
  %265 = bitcast <8 x float> %259 to <4 x i64>
  %266 = or <4 x i64> %265, %264
  %267 = bitcast <4 x i64> %266 to <8 x float>
  %268 = icmp eq <4 x i32> %44, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = icmp eq <4 x i32> %46, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %272 = sext <4 x i1> %271 to <4 x i32>
  %273 = bitcast <4 x i32> %272 to <2 x i64>
  %274 = shufflevector <2 x i64> %270, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = shufflevector <2 x i64> %273, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <4 x i64> %274, <4 x i64> %275, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %277 = bitcast <4 x i64> %276 to <8 x float>
  %278 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %267, <8 x float> %0, <8 x float> %277) #8
  br label %279

; <label>:279:                                    ; preds = %30, %41, %12
  %280 = phi <2 x i64> [ %257, %41 ], [ %34, %30 ], [ %16, %12 ]
  %281 = phi <2 x i64> [ %258, %41 ], [ %35, %30 ], [ %17, %12 ]
  %282 = phi <8 x float> [ %278, %41 ], [ %40, %30 ], [ %21, %12 ]
  %283 = fmul <8 x float> %282, %282
  %284 = bitcast <2 x i64> %280 to <4 x i32>
  %285 = and <4 x i32> %284, <i32 1, i32 1, i32 1, i32 1>
  %286 = icmp ne <4 x i32> %285, zeroinitializer
  %287 = sext <4 x i1> %286 to <4 x i32>
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = bitcast <2 x i64> %281 to <4 x i32>
  %290 = and <4 x i32> %289, <i32 1, i32 1, i32 1, i32 1>
  %291 = icmp ne <4 x i32> %290, zeroinitializer
  %292 = sext <4 x i1> %291 to <4 x i32>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %295 = shufflevector <2 x i64> %293, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %296 = shufflevector <4 x i64> %294, <4 x i64> %295, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %297 = and <4 x i64> %296, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %298 = bitcast <8 x float> %282 to <4 x i64>
  %299 = xor <4 x i64> %297, %298
  %300 = bitcast <4 x i64> %299 to <8 x float>
  %301 = fmul <8 x float> %283, %283
  %302 = fmul <8 x float> %301, %301
  %303 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %283, <8 x float> <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>, <8 x float> <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>) #8
  %304 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %283, <8 x float> <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>, <8 x float> <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>) #8
  %305 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %283, <8 x float> <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>, <8 x float> <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>) #8
  %306 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %301, <8 x float> %304, <8 x float> %305) #8
  %307 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %302, <8 x float> %303, <8 x float> %306) #8
  %308 = fmul <8 x float> %307, %300
  %309 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %283, <8 x float> %308, <8 x float> %300) #8
  %310 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %309
  %311 = bitcast <4 x i64> %296 to <8 x float>
  %312 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %309, <8 x float> %310, <8 x float> %311) #8
  ret <8 x float> %312
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %36, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #8
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>, <8 x float> %0) #8
  %20 = fmul <8 x float> %14, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %21 = fadd <8 x float> %20, %19
  %22 = fsub <8 x float> %21, %19
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %19, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %14, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %28 = fadd <8 x float> %27, %21
  %29 = fsub <8 x float> %21, %28
  %30 = fadd <8 x float> %27, %29
  %31 = fadd <8 x float> %30, %26
  %32 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = bitcast <2 x i64> %32 to <4 x i32>
  %35 = bitcast <2 x i64> %33 to <4 x i32>
  br label %311

; <label>:36:                                     ; preds = %1
  %37 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <2 x i64> %37 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = bitcast <2 x i64> %38 to <4 x i32>
  %42 = lshr <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %44 = and <4 x i32> %42, <i32 255, i32 255, i32 255, i32 255>
  %45 = add nsw <4 x i32> %43, <i32 -152, i32 -152, i32 -152, i32 -152>
  %46 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %47 = icmp ugt <4 x i32> %43, <i32 217, i32 217, i32 217, i32 217>
  %48 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %49 = select <4 x i1> %47, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %50 = select <4 x i1> %48, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = add <4 x i32> %49, %39
  %52 = add <4 x i32> %50, %41
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = ashr <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %60 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %61 = xor <4 x i32> %59, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %62 = and <4 x i32> %61, %45
  %63 = shl <4 x i32> %62, <i32 2, i32 2, i32 2, i32 2>
  %64 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %65 = and <4 x i32> %64, %46
  %66 = shl <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = extractelement <4 x i32> %66, i32 3
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !3, !noalias !16
  %71 = extractelement <4 x i32> %66, i32 2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !3, !noalias !16
  %75 = extractelement <4 x i32> %66, i32 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !3, !noalias !16
  %79 = extractelement <4 x i32> %66, i32 0
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !3, !noalias !16
  %83 = extractelement <4 x i32> %63, i32 3
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !3, !noalias !16
  %87 = extractelement <4 x i32> %63, i32 2
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !3, !noalias !16
  %91 = extractelement <4 x i32> %63, i32 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !16
  %95 = extractelement <4 x i32> %63, i32 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !16
  %99 = insertelement <8 x float> undef, float %98, i32 0
  %100 = insertelement <8 x float> %99, float %94, i32 1
  %101 = insertelement <8 x float> %100, float %90, i32 2
  %102 = insertelement <8 x float> %101, float %86, i32 3
  %103 = insertelement <8 x float> %102, float %82, i32 4
  %104 = insertelement <8 x float> %103, float %78, i32 5
  %105 = insertelement <8 x float> %104, float %74, i32 6
  %106 = insertelement <8 x float> %105, float %70, i32 7
  %107 = fmul <8 x float> %106, %58
  %108 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %107
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %106, <8 x float> %108) #8
  %110 = fmul <8 x float> %107, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %111 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %110, i32 8) #8
  %112 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %107, i32 8) #8
  %113 = fmul <8 x float> %112, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %114 = fsub <8 x float> %111, %113
  %115 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %114) #8
  %116 = bitcast <8 x i32> %115 to <4 x i64>
  %117 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %118 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %119 = fmul <8 x float> %111, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %120 = fsub <8 x float> %107, %119
  %121 = fadd <8 x float> %109, %120
  %122 = fsub <8 x float> %120, %121
  %123 = fadd <8 x float> %109, %122
  %124 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %68
  %125 = load float, float* %124, align 4, !tbaa !3, !noalias !16
  %126 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %72
  %127 = load float, float* %126, align 4, !tbaa !3, !noalias !16
  %128 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %76
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !16
  %130 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %80
  %131 = load float, float* %130, align 4, !tbaa !3, !noalias !16
  %132 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %84
  %133 = load float, float* %132, align 4, !tbaa !3, !noalias !16
  %134 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %88
  %135 = load float, float* %134, align 4, !tbaa !3, !noalias !16
  %136 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %92
  %137 = load float, float* %136, align 4, !tbaa !3, !noalias !16
  %138 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %96
  %139 = load float, float* %138, align 4, !tbaa !3, !noalias !16
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = insertelement <8 x float> %140, float %137, i32 1
  %142 = insertelement <8 x float> %141, float %135, i32 2
  %143 = insertelement <8 x float> %142, float %133, i32 3
  %144 = insertelement <8 x float> %143, float %131, i32 4
  %145 = insertelement <8 x float> %144, float %129, i32 5
  %146 = insertelement <8 x float> %145, float %127, i32 6
  %147 = insertelement <8 x float> %146, float %125, i32 7
  %148 = fmul <8 x float> %147, %58
  %149 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %148
  %150 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %147, <8 x float> %149) #8
  %151 = fadd <8 x float> %121, %148
  %152 = fsub <8 x float> %151, %121
  %153 = fsub <8 x float> %151, %152
  %154 = fsub <8 x float> %121, %153
  %155 = fsub <8 x float> %148, %152
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %123, %150
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %151, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %160 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %159, i32 8) #8
  %161 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %151, i32 8) #8
  %162 = fmul <8 x float> %161, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %163 = fsub <8 x float> %160, %162
  %164 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %163) #8
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %167 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %168 = fmul <8 x float> %160, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %169 = fsub <8 x float> %151, %168
  %170 = bitcast <2 x i64> %117 to <4 x i32>
  %171 = bitcast <2 x i64> %166 to <4 x i32>
  %172 = add <4 x i32> %171, %170
  %173 = bitcast <2 x i64> %118 to <4 x i32>
  %174 = bitcast <2 x i64> %167 to <4 x i32>
  %175 = add <4 x i32> %174, %173
  %176 = fadd <8 x float> %169, %158
  %177 = fsub <8 x float> %169, %176
  %178 = fadd <8 x float> %158, %177
  %179 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %68
  %180 = load float, float* %179, align 4, !tbaa !3, !noalias !16
  %181 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %72
  %182 = load float, float* %181, align 4, !tbaa !3, !noalias !16
  %183 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %76
  %184 = load float, float* %183, align 4, !tbaa !3, !noalias !16
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %80
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !16
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %84
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !16
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %88
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !16
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %92
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !16
  %193 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %96
  %194 = load float, float* %193, align 4, !tbaa !3, !noalias !16
  %195 = insertelement <8 x float> undef, float %194, i32 0
  %196 = insertelement <8 x float> %195, float %192, i32 1
  %197 = insertelement <8 x float> %196, float %190, i32 2
  %198 = insertelement <8 x float> %197, float %188, i32 3
  %199 = insertelement <8 x float> %198, float %186, i32 4
  %200 = insertelement <8 x float> %199, float %184, i32 5
  %201 = insertelement <8 x float> %200, float %182, i32 6
  %202 = insertelement <8 x float> %201, float %180, i32 7
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %68
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !16
  %205 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %72
  %206 = load float, float* %205, align 4, !tbaa !3, !noalias !16
  %207 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %76
  %208 = load float, float* %207, align 4, !tbaa !3, !noalias !16
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %80
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !16
  %211 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %84
  %212 = load float, float* %211, align 4, !tbaa !3, !noalias !16
  %213 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %88
  %214 = load float, float* %213, align 4, !tbaa !3, !noalias !16
  %215 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %92
  %216 = load float, float* %215, align 4, !tbaa !3, !noalias !16
  %217 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %96
  %218 = load float, float* %217, align 4, !tbaa !3, !noalias !16
  %219 = insertelement <8 x float> undef, float %218, i32 0
  %220 = insertelement <8 x float> %219, float %216, i32 1
  %221 = insertelement <8 x float> %220, float %214, i32 2
  %222 = insertelement <8 x float> %221, float %212, i32 3
  %223 = insertelement <8 x float> %222, float %210, i32 4
  %224 = insertelement <8 x float> %223, float %208, i32 5
  %225 = insertelement <8 x float> %224, float %206, i32 6
  %226 = insertelement <8 x float> %225, float %204, i32 7
  %227 = fmul <8 x float> %202, %58
  %228 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %227
  %229 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %202, <8 x float> %58, <8 x float> %228) #8
  %230 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %226, <8 x float> %58, <8 x float> %229) #8
  %231 = fadd <8 x float> %176, %227
  %232 = fsub <8 x float> %231, %176
  %233 = fsub <8 x float> %231, %232
  %234 = fsub <8 x float> %176, %233
  %235 = fsub <8 x float> %227, %232
  %236 = fadd <8 x float> %235, %234
  %237 = fadd <8 x float> %178, %230
  %238 = fadd <8 x float> %237, %236
  %239 = fadd <8 x float> %231, %238
  %240 = fsub <8 x float> %231, %239
  %241 = fadd <8 x float> %238, %240
  %242 = fmul <8 x float> %239, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %243 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %242
  %244 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %239, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %243) #8
  %245 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %241, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %244) #8
  %246 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %239, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %245) #8
  %247 = and <4 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %248 = bitcast <4 x i64> %247 to <8 x float>
  %249 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %248, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %250 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %242, <8 x float> %58, <8 x float> %249) #8
  %251 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %246, <8 x float> zeroinitializer, <8 x float> %249) #8
  %252 = shl <4 x i32> %172, <i32 1, i32 1, i32 1, i32 1>
  %253 = and <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %254 = shl <4 x i32> %175, <i32 1, i32 1, i32 1, i32 1>
  %255 = and <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %256 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %250, <8 x float> zeroinitializer, i8 30) #8
  %257 = bitcast <8 x float> %256 to <4 x i64>
  %258 = shufflevector <4 x i64> %257, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %259 = shufflevector <4 x i64> %257, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %260 = bitcast <2 x i64> %258 to <16 x i8>
  %261 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %260) #8
  %262 = bitcast <2 x i64> %259 to <16 x i8>
  %263 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %262) #8
  %264 = bitcast <16 x i8> %261 to <4 x i32>
  %265 = add <4 x i32> %253, %264
  %266 = bitcast <16 x i8> %263 to <4 x i32>
  %267 = add <4 x i32> %255, %266
  %268 = ashr <4 x i32> %265, <i32 2, i32 2, i32 2, i32 2>
  %269 = ashr <4 x i32> %267, <i32 2, i32 2, i32 2, i32 2>
  %270 = bitcast <4 x i32> %268 to <2 x i64>
  %271 = bitcast <4 x i32> %269 to <2 x i64>
  %272 = and <4 x i32> %172, <i32 1, i32 1, i32 1, i32 1>
  %273 = icmp ne <4 x i32> %272, zeroinitializer
  %274 = sext <4 x i1> %273 to <4 x i32>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = and <4 x i32> %175, <i32 1, i32 1, i32 1, i32 1>
  %277 = icmp ne <4 x i32> %276, zeroinitializer
  %278 = sext <4 x i1> %277 to <4 x i32>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = shufflevector <2 x i64> %275, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = shufflevector <2 x i64> %279, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %282 = shufflevector <4 x i64> %280, <4 x i64> %281, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %283 = bitcast <8 x float> %250 to <4 x i64>
  %284 = and <4 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = xor <4 x i64> %284, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %286 = bitcast <4 x i64> %285 to <8 x float>
  %287 = or <4 x i64> %284, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %288 = bitcast <4 x i64> %287 to <8 x float>
  %289 = fadd <8 x float> %250, %286
  %290 = fsub <8 x float> %289, %250
  %291 = fsub <8 x float> %289, %290
  %292 = fsub <8 x float> %250, %291
  %293 = fsub <8 x float> %286, %290
  %294 = fadd <8 x float> %293, %292
  %295 = fadd <8 x float> %251, %288
  %296 = fadd <8 x float> %295, %294
  %297 = bitcast <4 x i64> %282 to <8 x float>
  %298 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %250, <8 x float> %289, <8 x float> %297) #8
  %299 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %251, <8 x float> %296, <8 x float> %297) #8
  %300 = fadd <8 x float> %298, %299
  %301 = fsub <8 x float> %298, %300
  %302 = fadd <8 x float> %299, %301
  %303 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %304 = fcmp uno <8 x float> %0, zeroinitializer
  %305 = or <8 x i1> %303, %304
  %306 = sext <8 x i1> %305 to <8 x i32>
  %307 = bitcast <8 x i32> %306 to <4 x i64>
  %308 = bitcast <8 x float> %300 to <4 x i64>
  %309 = or <4 x i64> %308, %307
  %310 = bitcast <4 x i64> %309 to <8 x float>
  br label %311

; <label>:311:                                    ; preds = %36, %12
  %312 = phi <4 x i32> [ %41, %36 ], [ %35, %12 ]
  %313 = phi <4 x i32> [ %39, %36 ], [ %34, %12 ]
  %314 = phi <8 x float> [ %310, %36 ], [ %28, %12 ]
  %315 = phi <8 x float> [ %302, %36 ], [ %31, %12 ]
  %316 = phi <2 x i64> [ %270, %36 ], [ %17, %12 ]
  %317 = phi <2 x i64> [ %271, %36 ], [ %18, %12 ]
  %318 = fmul <8 x float> %314, %314
  %319 = fadd <8 x float> %314, %314
  %320 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %318
  %321 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %314, <8 x float> %314, <8 x float> %320) #8
  %322 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %319, <8 x float> %315, <8 x float> %321) #8
  %323 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %318, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #8
  %324 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %323, <8 x float> %318, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #8
  %325 = fmul <8 x float> %318, %324
  %326 = fadd <8 x float> %325, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %327 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %326
  %328 = fadd <8 x float> %325, %327
  %329 = fmul <8 x float> %318, %326
  %330 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %329
  %331 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %326, <8 x float> %318, <8 x float> %330) #8
  %332 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %328, <8 x float> %318, <8 x float> %331) #8
  %333 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %326, <8 x float> %322, <8 x float> %332) #8
  %334 = fadd <8 x float> %329, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %335 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %334
  %336 = fadd <8 x float> %329, %335
  %337 = fadd <8 x float> %333, %336
  %338 = fmul <8 x float> %314, %337
  %339 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %315, <8 x float> %334, <8 x float> %338) #8
  %340 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %314, <8 x float> %334, <8 x float> %339) #8
  %341 = bitcast <2 x i64> %316 to <4 x i32>
  %342 = and <4 x i32> %341, <i32 1, i32 1, i32 1, i32 1>
  %343 = icmp ne <4 x i32> %342, zeroinitializer
  %344 = sext <4 x i1> %343 to <4 x i32>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = bitcast <2 x i64> %317 to <4 x i32>
  %347 = and <4 x i32> %346, <i32 1, i32 1, i32 1, i32 1>
  %348 = icmp ne <4 x i32> %347, zeroinitializer
  %349 = sext <4 x i1> %348 to <4 x i32>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %352 = shufflevector <2 x i64> %350, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %353 = shufflevector <4 x i64> %351, <4 x i64> %352, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %354 = and <4 x i64> %353, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %355 = bitcast <8 x float> %340 to <4 x i64>
  %356 = xor <4 x i64> %354, %355
  %357 = bitcast <4 x i64> %356 to <8 x float>
  %358 = icmp eq <4 x i32> %313, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %359 = sext <4 x i1> %358 to <4 x i32>
  %360 = bitcast <4 x i32> %359 to <2 x i64>
  %361 = icmp eq <4 x i32> %312, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %362 = sext <4 x i1> %361 to <4 x i32>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = shufflevector <2 x i64> %360, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %365 = shufflevector <2 x i64> %363, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %366 = shufflevector <4 x i64> %364, <4 x i64> %365, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %367 = bitcast <4 x i64> %366 to <8 x float>
  %368 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %357, <8 x float> %0, <8 x float> %367) #8
  ret <8 x float> %368
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %43, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #8
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %16 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %15) #8
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %19 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %20 = fmul <8 x float> %15, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %21 = fadd <8 x float> %20, %0
  %22 = fsub <8 x float> %21, %0
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %0, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %28 = fadd <8 x float> %27, %21
  %29 = fsub <8 x float> %28, %21
  %30 = fsub <8 x float> %28, %29
  %31 = fsub <8 x float> %21, %30
  %32 = fsub <8 x float> %27, %29
  %33 = fadd <8 x float> %32, %31
  %34 = fadd <8 x float> %26, %33
  %35 = fmul <8 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %36 = fadd <8 x float> %35, %28
  %37 = fsub <8 x float> %36, %28
  %38 = fsub <8 x float> %36, %37
  %39 = fsub <8 x float> %28, %38
  %40 = fsub <8 x float> %35, %37
  %41 = fadd <8 x float> %40, %39
  %42 = fadd <8 x float> %41, %34
  br label %319

; <label>:43:                                     ; preds = %1
  %44 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %45 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %46 = bitcast <2 x i64> %44 to <4 x i32>
  %47 = lshr <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = bitcast <2 x i64> %45 to <4 x i32>
  %49 = lshr <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %50 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %51 = and <4 x i32> %49, <i32 255, i32 255, i32 255, i32 255>
  %52 = add nsw <4 x i32> %50, <i32 -152, i32 -152, i32 -152, i32 -152>
  %53 = add nsw <4 x i32> %51, <i32 -152, i32 -152, i32 -152, i32 -152>
  %54 = icmp ugt <4 x i32> %50, <i32 217, i32 217, i32 217, i32 217>
  %55 = icmp ugt <4 x i32> %51, <i32 217, i32 217, i32 217, i32 217>
  %56 = select <4 x i1> %54, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %57 = select <4 x i1> %55, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %58 = add <4 x i32> %56, %46
  %59 = add <4 x i32> %57, %48
  %60 = bitcast <4 x i32> %58 to <2 x i64>
  %61 = bitcast <4 x i32> %59 to <2 x i64>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x i64> %62, <4 x i64> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %67 = ashr <4 x i32> %53, <i32 31, i32 31, i32 31, i32 31>
  %68 = xor <4 x i32> %66, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %69 = and <4 x i32> %68, %52
  %70 = shl <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %71 = xor <4 x i32> %67, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %72 = and <4 x i32> %71, %53
  %73 = shl <4 x i32> %72, <i32 2, i32 2, i32 2, i32 2>
  %74 = extractelement <4 x i32> %73, i32 3
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !3, !noalias !19
  %78 = extractelement <4 x i32> %73, i32 2
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !3, !noalias !19
  %82 = extractelement <4 x i32> %73, i32 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !3, !noalias !19
  %86 = extractelement <4 x i32> %73, i32 0
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !3, !noalias !19
  %90 = extractelement <4 x i32> %70, i32 3
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !3, !noalias !19
  %94 = extractelement <4 x i32> %70, i32 2
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !3, !noalias !19
  %98 = extractelement <4 x i32> %70, i32 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !3, !noalias !19
  %102 = extractelement <4 x i32> %70, i32 0
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !3, !noalias !19
  %106 = insertelement <8 x float> undef, float %105, i32 0
  %107 = insertelement <8 x float> %106, float %101, i32 1
  %108 = insertelement <8 x float> %107, float %97, i32 2
  %109 = insertelement <8 x float> %108, float %93, i32 3
  %110 = insertelement <8 x float> %109, float %89, i32 4
  %111 = insertelement <8 x float> %110, float %85, i32 5
  %112 = insertelement <8 x float> %111, float %81, i32 6
  %113 = insertelement <8 x float> %112, float %77, i32 7
  %114 = fmul <8 x float> %113, %65
  %115 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %113, <8 x float> %115) #8
  %117 = fmul <8 x float> %114, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %118 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %117, i32 8) #8
  %119 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %114, i32 8) #8
  %120 = fmul <8 x float> %119, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %121 = fsub <8 x float> %118, %120
  %122 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %121) #8
  %123 = bitcast <8 x i32> %122 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %126 = fmul <8 x float> %118, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %127 = fsub <8 x float> %114, %126
  %128 = fadd <8 x float> %116, %127
  %129 = fsub <8 x float> %127, %128
  %130 = fadd <8 x float> %116, %129
  %131 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %75
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !19
  %133 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %79
  %134 = load float, float* %133, align 4, !tbaa !3, !noalias !19
  %135 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %83
  %136 = load float, float* %135, align 4, !tbaa !3, !noalias !19
  %137 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %87
  %138 = load float, float* %137, align 4, !tbaa !3, !noalias !19
  %139 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %91
  %140 = load float, float* %139, align 4, !tbaa !3, !noalias !19
  %141 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %95
  %142 = load float, float* %141, align 4, !tbaa !3, !noalias !19
  %143 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %99
  %144 = load float, float* %143, align 4, !tbaa !3, !noalias !19
  %145 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %103
  %146 = load float, float* %145, align 4, !tbaa !3, !noalias !19
  %147 = insertelement <8 x float> undef, float %146, i32 0
  %148 = insertelement <8 x float> %147, float %144, i32 1
  %149 = insertelement <8 x float> %148, float %142, i32 2
  %150 = insertelement <8 x float> %149, float %140, i32 3
  %151 = insertelement <8 x float> %150, float %138, i32 4
  %152 = insertelement <8 x float> %151, float %136, i32 5
  %153 = insertelement <8 x float> %152, float %134, i32 6
  %154 = insertelement <8 x float> %153, float %132, i32 7
  %155 = fmul <8 x float> %154, %65
  %156 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %155
  %157 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %154, <8 x float> %156) #8
  %158 = fadd <8 x float> %128, %155
  %159 = fsub <8 x float> %158, %128
  %160 = fsub <8 x float> %158, %159
  %161 = fsub <8 x float> %128, %160
  %162 = fsub <8 x float> %155, %159
  %163 = fadd <8 x float> %162, %161
  %164 = fadd <8 x float> %130, %157
  %165 = fadd <8 x float> %164, %163
  %166 = fmul <8 x float> %158, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %167 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %166, i32 8) #8
  %168 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %158, i32 8) #8
  %169 = fmul <8 x float> %168, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %170 = fsub <8 x float> %167, %169
  %171 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %170) #8
  %172 = bitcast <8 x i32> %171 to <4 x i64>
  %173 = shufflevector <4 x i64> %172, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %174 = shufflevector <4 x i64> %172, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %175 = fmul <8 x float> %167, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %176 = fsub <8 x float> %158, %175
  %177 = bitcast <2 x i64> %124 to <4 x i32>
  %178 = bitcast <2 x i64> %173 to <4 x i32>
  %179 = add <4 x i32> %178, %177
  %180 = bitcast <2 x i64> %125 to <4 x i32>
  %181 = bitcast <2 x i64> %174 to <4 x i32>
  %182 = add <4 x i32> %181, %180
  %183 = fadd <8 x float> %176, %165
  %184 = fsub <8 x float> %176, %183
  %185 = fadd <8 x float> %165, %184
  %186 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %75
  %187 = load float, float* %186, align 4, !tbaa !3, !noalias !19
  %188 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %79
  %189 = load float, float* %188, align 4, !tbaa !3, !noalias !19
  %190 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %83
  %191 = load float, float* %190, align 4, !tbaa !3, !noalias !19
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %87
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !19
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %91
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !19
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %95
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !19
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %99
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !19
  %200 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %103
  %201 = load float, float* %200, align 4, !tbaa !3, !noalias !19
  %202 = insertelement <8 x float> undef, float %201, i32 0
  %203 = insertelement <8 x float> %202, float %199, i32 1
  %204 = insertelement <8 x float> %203, float %197, i32 2
  %205 = insertelement <8 x float> %204, float %195, i32 3
  %206 = insertelement <8 x float> %205, float %193, i32 4
  %207 = insertelement <8 x float> %206, float %191, i32 5
  %208 = insertelement <8 x float> %207, float %189, i32 6
  %209 = insertelement <8 x float> %208, float %187, i32 7
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %75
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !19
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %79
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !19
  %214 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %83
  %215 = load float, float* %214, align 4, !tbaa !3, !noalias !19
  %216 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %87
  %217 = load float, float* %216, align 4, !tbaa !3, !noalias !19
  %218 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %91
  %219 = load float, float* %218, align 4, !tbaa !3, !noalias !19
  %220 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %95
  %221 = load float, float* %220, align 4, !tbaa !3, !noalias !19
  %222 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %99
  %223 = load float, float* %222, align 4, !tbaa !3, !noalias !19
  %224 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %103
  %225 = load float, float* %224, align 4, !tbaa !3, !noalias !19
  %226 = insertelement <8 x float> undef, float %225, i32 0
  %227 = insertelement <8 x float> %226, float %223, i32 1
  %228 = insertelement <8 x float> %227, float %221, i32 2
  %229 = insertelement <8 x float> %228, float %219, i32 3
  %230 = insertelement <8 x float> %229, float %217, i32 4
  %231 = insertelement <8 x float> %230, float %215, i32 5
  %232 = insertelement <8 x float> %231, float %213, i32 6
  %233 = insertelement <8 x float> %232, float %211, i32 7
  %234 = fmul <8 x float> %209, %65
  %235 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %234
  %236 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %209, <8 x float> %65, <8 x float> %235) #8
  %237 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %233, <8 x float> %65, <8 x float> %236) #8
  %238 = fadd <8 x float> %183, %234
  %239 = fsub <8 x float> %238, %183
  %240 = fsub <8 x float> %238, %239
  %241 = fsub <8 x float> %183, %240
  %242 = fsub <8 x float> %234, %239
  %243 = fadd <8 x float> %242, %241
  %244 = fadd <8 x float> %185, %237
  %245 = fadd <8 x float> %244, %243
  %246 = fadd <8 x float> %238, %245
  %247 = fsub <8 x float> %238, %246
  %248 = fadd <8 x float> %245, %247
  %249 = fmul <8 x float> %246, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %250 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %249
  %251 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %246, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %250) #8
  %252 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %248, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %251) #8
  %253 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %246, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %252) #8
  %254 = and <4 x i64> %64, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %255 = bitcast <4 x i64> %254 to <8 x float>
  %256 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %255, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %257 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %249, <8 x float> %65, <8 x float> %256) #8
  %258 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %253, <8 x float> zeroinitializer, <8 x float> %256) #8
  %259 = shl <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %260 = and <4 x i32> %259, <i32 6, i32 6, i32 6, i32 6>
  %261 = shl <4 x i32> %182, <i32 1, i32 1, i32 1, i32 1>
  %262 = and <4 x i32> %261, <i32 6, i32 6, i32 6, i32 6>
  %263 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %257, <8 x float> zeroinitializer, i8 30) #8
  %264 = bitcast <8 x float> %263 to <4 x i64>
  %265 = shufflevector <4 x i64> %264, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %266 = shufflevector <4 x i64> %264, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %267 = bitcast <2 x i64> %265 to <16 x i8>
  %268 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %267) #8
  %269 = bitcast <2 x i64> %266 to <16 x i8>
  %270 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %269) #8
  %271 = bitcast <16 x i8> %268 to <4 x i32>
  %272 = add <4 x i32> %260, %271
  %273 = bitcast <16 x i8> %270 to <4 x i32>
  %274 = add <4 x i32> %262, %273
  %275 = ashr <4 x i32> %272, <i32 1, i32 1, i32 1, i32 1>
  %276 = ashr <4 x i32> %274, <i32 1, i32 1, i32 1, i32 1>
  %277 = bitcast <4 x i32> %275 to <2 x i64>
  %278 = bitcast <4 x i32> %276 to <2 x i64>
  %279 = and <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %280 = icmp eq <4 x i32> %279, zeroinitializer
  %281 = sext <4 x i1> %280 to <4 x i32>
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = and <4 x i32> %182, <i32 1, i32 1, i32 1, i32 1>
  %284 = icmp eq <4 x i32> %283, zeroinitializer
  %285 = sext <4 x i1> %284 to <4 x i32>
  %286 = bitcast <4 x i32> %285 to <2 x i64>
  %287 = shufflevector <2 x i64> %282, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <2 x i64> %286, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %289 = shufflevector <4 x i64> %287, <4 x i64> %288, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %290 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %263) #8
  %291 = bitcast <8 x float> %290 to <4 x i64>
  %292 = and <4 x i64> %291, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %293 = xor <4 x i64> %292, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %294 = bitcast <4 x i64> %293 to <8 x float>
  %295 = or <4 x i64> %292, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %296 = bitcast <4 x i64> %295 to <8 x float>
  %297 = fadd <8 x float> %257, %294
  %298 = fsub <8 x float> %297, %257
  %299 = fsub <8 x float> %297, %298
  %300 = fsub <8 x float> %257, %299
  %301 = fsub <8 x float> %294, %298
  %302 = fadd <8 x float> %301, %300
  %303 = fadd <8 x float> %258, %296
  %304 = fadd <8 x float> %303, %302
  %305 = bitcast <4 x i64> %289 to <8 x float>
  %306 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %257, <8 x float> %297, <8 x float> %305) #8
  %307 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %258, <8 x float> %304, <8 x float> %305) #8
  %308 = fadd <8 x float> %306, %307
  %309 = fsub <8 x float> %306, %308
  %310 = fadd <8 x float> %307, %309
  %311 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %312 = fcmp uno <8 x float> %0, zeroinitializer
  %313 = or <8 x i1> %311, %312
  %314 = sext <8 x i1> %313 to <8 x i32>
  %315 = bitcast <8 x i32> %314 to <4 x i64>
  %316 = bitcast <8 x float> %308 to <4 x i64>
  %317 = or <4 x i64> %316, %315
  %318 = bitcast <4 x i64> %317 to <8 x float>
  br label %319

; <label>:319:                                    ; preds = %43, %12
  %320 = phi <8 x float> [ %318, %43 ], [ %36, %12 ]
  %321 = phi <8 x float> [ %310, %43 ], [ %42, %12 ]
  %322 = phi <2 x i64> [ %277, %43 ], [ %18, %12 ]
  %323 = phi <2 x i64> [ %278, %43 ], [ %19, %12 ]
  %324 = fmul <8 x float> %320, %320
  %325 = fadd <8 x float> %320, %320
  %326 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %324
  %327 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %320, <8 x float> %320, <8 x float> %326) #8
  %328 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %325, <8 x float> %321, <8 x float> %327) #8
  %329 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %324, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #8
  %330 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %329, <8 x float> %324, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #8
  %331 = fmul <8 x float> %324, %330
  %332 = fadd <8 x float> %331, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %333 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %332
  %334 = fadd <8 x float> %331, %333
  %335 = fmul <8 x float> %324, %332
  %336 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %335
  %337 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %332, <8 x float> %324, <8 x float> %336) #8
  %338 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %334, <8 x float> %324, <8 x float> %337) #8
  %339 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %332, <8 x float> %328, <8 x float> %338) #8
  %340 = fadd <8 x float> %335, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %341 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %340
  %342 = fadd <8 x float> %335, %341
  %343 = fadd <8 x float> %339, %342
  %344 = fmul <8 x float> %320, %343
  %345 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %321, <8 x float> %340, <8 x float> %344) #8
  %346 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %320, <8 x float> %340, <8 x float> %345) #8
  %347 = bitcast <2 x i64> %322 to <4 x i32>
  %348 = and <4 x i32> %347, <i32 2, i32 2, i32 2, i32 2>
  %349 = icmp eq <4 x i32> %348, zeroinitializer
  %350 = sext <4 x i1> %349 to <4 x i32>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = bitcast <2 x i64> %323 to <4 x i32>
  %353 = and <4 x i32> %352, <i32 2, i32 2, i32 2, i32 2>
  %354 = icmp eq <4 x i32> %353, zeroinitializer
  %355 = sext <4 x i1> %354 to <4 x i32>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <2 x i64> %351, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %358 = shufflevector <2 x i64> %356, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %359 = shufflevector <4 x i64> %357, <4 x i64> %358, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %360 = and <4 x i64> %359, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %361 = bitcast <8 x float> %346 to <4 x i64>
  %362 = xor <4 x i64> %360, %361
  %363 = bitcast <4 x i64> %362 to <8 x float>
  ret <8 x float> %363
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastsinf8_u3500fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>, <8 x float> %0) #8
  %9 = fmul <8 x float> %8, %8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>, <8 x float> %9, <8 x float> <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>) #8
  %12 = fmul <8 x float> %8, %9
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %11, <8 x float> %8) #8
  %14 = bitcast <2 x i64> %6 to <4 x i32>
  %15 = and <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = icmp ne <4 x i32> %15, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = bitcast <2 x i64> %7 to <4 x i32>
  %20 = and <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = icmp ne <4 x i32> %20, zeroinitializer
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = and <4 x i64> %26, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = bitcast <8 x float> %13 to <4 x i64>
  %29 = xor <4 x i64> %27, %28
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = bitcast <8 x float> %0 to <4 x i64>
  %32 = and <4 x i64> %31, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %33, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #8
  %35 = bitcast <8 x float> %34 to <4 x i64>
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %38 = and <2 x i64> %37, %36
  %39 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %38, <2 x i64> <i64 -1, i64 -1>) #8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %44, !prof !2

; <label>:41:                                     ; preds = %1
  %42 = tail call <8 x float> @Sleef_sinf8_u35fma4(<8 x float> %0)
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> %30, <8 x float> %34) #8
  br label %44

; <label>:44:                                     ; preds = %1, %41
  %45 = phi <8 x float> [ %43, %41 ], [ %30, %1 ]
  ret <8 x float> %45
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastcosf8_u3500fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #8
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fadd <8 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>, <8 x float> %8) #8
  %10 = fmul <8 x float> %9, %9
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>, <8 x float> %10, <8 x float> <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %10, <8 x float> <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>) #8
  %13 = fmul <8 x float> %9, %10
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %12, <8 x float> %9) #8
  %15 = bitcast <2 x i64> %6 to <4 x i32>
  %16 = and <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = icmp eq <4 x i32> %16, zeroinitializer
  %18 = sext <4 x i1> %17 to <4 x i32>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = bitcast <2 x i64> %7 to <4 x i32>
  %21 = and <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = icmp eq <4 x i32> %21, zeroinitializer
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = and <4 x i64> %27, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = bitcast <8 x float> %14 to <4 x i64>
  %30 = xor <4 x i64> %28, %29
  %31 = bitcast <4 x i64> %30 to <8 x float>
  %32 = bitcast <8 x float> %0 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %34, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #8
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = and <2 x i64> %38, %37
  %40 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %39, <2 x i64> <i64 -1, i64 -1>) #8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %45, !prof !2

; <label>:42:                                     ; preds = %1
  %43 = tail call <8 x float> @Sleef_cosf8_u35fma4(<8 x float> %0)
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> %31, <8 x float> %35) #8
  br label %45

; <label>:45:                                     ; preds = %1, %42
  %46 = phi <8 x float> [ %44, %42 ], [ %31, %1 ]
  ret <8 x float> %46
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u35fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %1) #8
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %20) #8
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %21) #8
  br label %269

; <label>:23:                                     ; preds = %2
  %24 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %25 = bitcast <8 x float> %24 to <4 x i64>
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %28 = and <2 x i64> %27, %26
  %29 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %28, <2 x i64> <i64 -1, i64 -1>) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %42, label %31, !prof !2

; <label>:31:                                     ; preds = %23
  %32 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %33 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %32) #8
  %34 = bitcast <8 x i32> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %1) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %38) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %40) #8
  br label %269

; <label>:42:                                     ; preds = %23
  %43 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <4 x i32>
  %46 = lshr <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = bitcast <2 x i64> %44 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %49 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %50 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %51 = add nsw <4 x i32> %49, <i32 -152, i32 -152, i32 -152, i32 -152>
  %52 = add nsw <4 x i32> %50, <i32 -152, i32 -152, i32 -152, i32 -152>
  %53 = icmp ugt <4 x i32> %49, <i32 217, i32 217, i32 217, i32 217>
  %54 = icmp ugt <4 x i32> %50, <i32 217, i32 217, i32 217, i32 217>
  %55 = select <4 x i1> %53, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %56 = select <4 x i1> %54, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %57 = add <4 x i32> %55, %45
  %58 = add <4 x i32> %56, %47
  %59 = bitcast <4 x i32> %57 to <2 x i64>
  %60 = bitcast <4 x i32> %58 to <2 x i64>
  %61 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = ashr <4 x i32> %51, <i32 31, i32 31, i32 31, i32 31>
  %66 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %67 = xor <4 x i32> %65, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %68 = and <4 x i32> %67, %51
  %69 = shl <4 x i32> %68, <i32 2, i32 2, i32 2, i32 2>
  %70 = xor <4 x i32> %66, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %71 = and <4 x i32> %70, %52
  %72 = shl <4 x i32> %71, <i32 2, i32 2, i32 2, i32 2>
  %73 = extractelement <4 x i32> %72, i32 3
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !3, !noalias !22
  %77 = extractelement <4 x i32> %72, i32 2
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !3, !noalias !22
  %81 = extractelement <4 x i32> %72, i32 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !3, !noalias !22
  %85 = extractelement <4 x i32> %72, i32 0
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !3, !noalias !22
  %89 = extractelement <4 x i32> %69, i32 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !3, !noalias !22
  %93 = extractelement <4 x i32> %69, i32 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !3, !noalias !22
  %97 = extractelement <4 x i32> %69, i32 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !3, !noalias !22
  %101 = extractelement <4 x i32> %69, i32 0
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !3, !noalias !22
  %105 = insertelement <8 x float> undef, float %104, i32 0
  %106 = insertelement <8 x float> %105, float %100, i32 1
  %107 = insertelement <8 x float> %106, float %96, i32 2
  %108 = insertelement <8 x float> %107, float %92, i32 3
  %109 = insertelement <8 x float> %108, float %88, i32 4
  %110 = insertelement <8 x float> %109, float %84, i32 5
  %111 = insertelement <8 x float> %110, float %80, i32 6
  %112 = insertelement <8 x float> %111, float %76, i32 7
  %113 = fmul <8 x float> %112, %64
  %114 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %112, <8 x float> %114) #8
  %116 = fmul <8 x float> %113, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %117 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %116, i32 8) #8
  %118 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %113, i32 8) #8
  %119 = fmul <8 x float> %118, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %120 = fsub <8 x float> %117, %119
  %121 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %120) #8
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %124 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %125 = fmul <8 x float> %117, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %126 = fsub <8 x float> %113, %125
  %127 = fadd <8 x float> %115, %126
  %128 = fsub <8 x float> %126, %127
  %129 = fadd <8 x float> %115, %128
  %130 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %74
  %131 = load float, float* %130, align 4, !tbaa !3, !noalias !22
  %132 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %78
  %133 = load float, float* %132, align 4, !tbaa !3, !noalias !22
  %134 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %82
  %135 = load float, float* %134, align 4, !tbaa !3, !noalias !22
  %136 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %86
  %137 = load float, float* %136, align 4, !tbaa !3, !noalias !22
  %138 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %90
  %139 = load float, float* %138, align 4, !tbaa !3, !noalias !22
  %140 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %94
  %141 = load float, float* %140, align 4, !tbaa !3, !noalias !22
  %142 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %98
  %143 = load float, float* %142, align 4, !tbaa !3, !noalias !22
  %144 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %102
  %145 = load float, float* %144, align 4, !tbaa !3, !noalias !22
  %146 = insertelement <8 x float> undef, float %145, i32 0
  %147 = insertelement <8 x float> %146, float %143, i32 1
  %148 = insertelement <8 x float> %147, float %141, i32 2
  %149 = insertelement <8 x float> %148, float %139, i32 3
  %150 = insertelement <8 x float> %149, float %137, i32 4
  %151 = insertelement <8 x float> %150, float %135, i32 5
  %152 = insertelement <8 x float> %151, float %133, i32 6
  %153 = insertelement <8 x float> %152, float %131, i32 7
  %154 = fmul <8 x float> %153, %64
  %155 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %154
  %156 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %153, <8 x float> %155) #8
  %157 = fadd <8 x float> %127, %154
  %158 = fsub <8 x float> %157, %127
  %159 = fsub <8 x float> %157, %158
  %160 = fsub <8 x float> %127, %159
  %161 = fsub <8 x float> %154, %158
  %162 = fadd <8 x float> %161, %160
  %163 = fadd <8 x float> %129, %156
  %164 = fadd <8 x float> %163, %162
  %165 = fmul <8 x float> %157, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %166 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %165, i32 8) #8
  %167 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %157, i32 8) #8
  %168 = fmul <8 x float> %167, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %169 = fsub <8 x float> %166, %168
  %170 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %169) #8
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %173 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %174 = fmul <8 x float> %166, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %175 = fsub <8 x float> %157, %174
  %176 = bitcast <2 x i64> %123 to <4 x i32>
  %177 = bitcast <2 x i64> %172 to <4 x i32>
  %178 = add <4 x i32> %177, %176
  %179 = bitcast <2 x i64> %124 to <4 x i32>
  %180 = bitcast <2 x i64> %173 to <4 x i32>
  %181 = add <4 x i32> %180, %179
  %182 = fadd <8 x float> %175, %164
  %183 = fsub <8 x float> %175, %182
  %184 = fadd <8 x float> %164, %183
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %74
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !22
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %78
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !22
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %82
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !22
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %86
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !22
  %193 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %90
  %194 = load float, float* %193, align 4, !tbaa !3, !noalias !22
  %195 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %94
  %196 = load float, float* %195, align 4, !tbaa !3, !noalias !22
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %98
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !22
  %199 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %102
  %200 = load float, float* %199, align 4, !tbaa !3, !noalias !22
  %201 = insertelement <8 x float> undef, float %200, i32 0
  %202 = insertelement <8 x float> %201, float %198, i32 1
  %203 = insertelement <8 x float> %202, float %196, i32 2
  %204 = insertelement <8 x float> %203, float %194, i32 3
  %205 = insertelement <8 x float> %204, float %192, i32 4
  %206 = insertelement <8 x float> %205, float %190, i32 5
  %207 = insertelement <8 x float> %206, float %188, i32 6
  %208 = insertelement <8 x float> %207, float %186, i32 7
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %74
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !22
  %211 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %78
  %212 = load float, float* %211, align 4, !tbaa !3, !noalias !22
  %213 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %82
  %214 = load float, float* %213, align 4, !tbaa !3, !noalias !22
  %215 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %86
  %216 = load float, float* %215, align 4, !tbaa !3, !noalias !22
  %217 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %90
  %218 = load float, float* %217, align 4, !tbaa !3, !noalias !22
  %219 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %94
  %220 = load float, float* %219, align 4, !tbaa !3, !noalias !22
  %221 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %98
  %222 = load float, float* %221, align 4, !tbaa !3, !noalias !22
  %223 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %102
  %224 = load float, float* %223, align 4, !tbaa !3, !noalias !22
  %225 = insertelement <8 x float> undef, float %224, i32 0
  %226 = insertelement <8 x float> %225, float %222, i32 1
  %227 = insertelement <8 x float> %226, float %220, i32 2
  %228 = insertelement <8 x float> %227, float %218, i32 3
  %229 = insertelement <8 x float> %228, float %216, i32 4
  %230 = insertelement <8 x float> %229, float %214, i32 5
  %231 = insertelement <8 x float> %230, float %212, i32 6
  %232 = insertelement <8 x float> %231, float %210, i32 7
  %233 = fmul <8 x float> %208, %64
  %234 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %233
  %235 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %208, <8 x float> %64, <8 x float> %234) #8
  %236 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %232, <8 x float> %64, <8 x float> %235) #8
  %237 = fadd <8 x float> %182, %233
  %238 = fsub <8 x float> %237, %182
  %239 = fsub <8 x float> %237, %238
  %240 = fsub <8 x float> %182, %239
  %241 = fsub <8 x float> %233, %238
  %242 = fadd <8 x float> %241, %240
  %243 = fadd <8 x float> %184, %236
  %244 = fadd <8 x float> %243, %242
  %245 = fadd <8 x float> %237, %244
  %246 = fsub <8 x float> %237, %245
  %247 = fadd <8 x float> %244, %246
  %248 = fmul <8 x float> %245, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %249 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %248
  %250 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %245, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %249) #8
  %251 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %247, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %250) #8
  %252 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %245, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %251) #8
  %253 = and <4 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %254 = bitcast <4 x i64> %253 to <8 x float>
  %255 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %254, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %256 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %248, <8 x float> %64, <8 x float> %255) #8
  %257 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %252, <8 x float> zeroinitializer, <8 x float> %255) #8
  %258 = bitcast <4 x i32> %178 to <2 x i64>
  %259 = bitcast <4 x i32> %181 to <2 x i64>
  %260 = fadd <8 x float> %256, %257
  %261 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %262 = fcmp uno <8 x float> %1, zeroinitializer
  %263 = or <8 x i1> %261, %262
  %264 = sext <8 x i1> %263 to <8 x i32>
  %265 = bitcast <8 x i32> %264 to <4 x i64>
  %266 = bitcast <8 x float> %260 to <4 x i64>
  %267 = or <4 x i64> %266, %265
  %268 = bitcast <4 x i64> %267 to <8 x float>
  br label %269

; <label>:269:                                    ; preds = %31, %42, %13
  %270 = phi <2 x i64> [ %258, %42 ], [ %35, %31 ], [ %17, %13 ]
  %271 = phi <2 x i64> [ %259, %42 ], [ %36, %31 ], [ %18, %13 ]
  %272 = phi <8 x float> [ %268, %42 ], [ %41, %31 ], [ %22, %13 ]
  %273 = fmul <8 x float> %272, %272
  %274 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>, <8 x float> %273, <8 x float> <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>) #8
  %275 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %274, <8 x float> %273, <8 x float> <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>) #8
  %276 = fmul <8 x float> %273, %275
  %277 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %276, <8 x float> %272, <8 x float> %272) #8
  %278 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %279 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %280 = bitcast <2 x i64> %278 to <4 x i32>
  %281 = icmp eq <4 x i32> %280, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = bitcast <2 x i64> %279 to <4 x i32>
  %285 = icmp eq <4 x i32> %284, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %286 = sext <4 x i1> %285 to <4 x i32>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = shufflevector <2 x i64> %283, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %289 = shufflevector <2 x i64> %287, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = shufflevector <4 x i64> %288, <4 x i64> %289, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %291 = bitcast <4 x i64> %290 to <8 x float>
  %292 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %277, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %291) #8
  %293 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>, <8 x float> %273, <8 x float> <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>) #8
  %294 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %293, <8 x float> %273, <8 x float> <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>) #8
  %295 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %294, <8 x float> %273, <8 x float> <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>) #8
  %296 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %295, <8 x float> %273, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #8
  %297 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %273, <8 x float> %296, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %298 = bitcast <2 x i64> %270 to <4 x i32>
  %299 = and <4 x i32> %298, <i32 1, i32 1, i32 1, i32 1>
  %300 = icmp eq <4 x i32> %299, zeroinitializer
  %301 = sext <4 x i1> %300 to <4 x i32>
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = bitcast <2 x i64> %271 to <4 x i32>
  %304 = and <4 x i32> %303, <i32 1, i32 1, i32 1, i32 1>
  %305 = icmp eq <4 x i32> %304, zeroinitializer
  %306 = sext <4 x i1> %305 to <4 x i32>
  %307 = bitcast <4 x i32> %306 to <2 x i64>
  %308 = shufflevector <2 x i64> %302, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %309 = shufflevector <2 x i64> %307, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %310 = shufflevector <4 x i64> %308, <4 x i64> %309, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %311 = bitcast <4 x i64> %310 to <8 x float>
  %312 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %297, <8 x float> %292, <8 x float> %311) #8
  %313 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %292, <8 x float> %297, <8 x float> %311) #8
  %314 = and <4 x i32> %298, <i32 2, i32 2, i32 2, i32 2>
  %315 = icmp ne <4 x i32> %314, zeroinitializer
  %316 = sext <4 x i1> %315 to <4 x i32>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = and <4 x i32> %303, <i32 2, i32 2, i32 2, i32 2>
  %319 = icmp ne <4 x i32> %318, zeroinitializer
  %320 = sext <4 x i1> %319 to <4 x i32>
  %321 = bitcast <4 x i32> %320 to <2 x i64>
  %322 = shufflevector <2 x i64> %317, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %323 = shufflevector <2 x i64> %321, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %324 = shufflevector <4 x i64> %322, <4 x i64> %323, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %325 = and <4 x i64> %324, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %326 = bitcast <8 x float> %312 to <4 x i64>
  %327 = xor <4 x i64> %325, %326
  %328 = add <4 x i32> %298, <i32 1, i32 1, i32 1, i32 1>
  %329 = add <4 x i32> %303, <i32 1, i32 1, i32 1, i32 1>
  %330 = and <4 x i32> %328, <i32 2, i32 2, i32 2, i32 2>
  %331 = icmp ne <4 x i32> %330, zeroinitializer
  %332 = sext <4 x i1> %331 to <4 x i32>
  %333 = bitcast <4 x i32> %332 to <2 x i64>
  %334 = and <4 x i32> %329, <i32 2, i32 2, i32 2, i32 2>
  %335 = icmp ne <4 x i32> %334, zeroinitializer
  %336 = sext <4 x i1> %335 to <4 x i32>
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = shufflevector <2 x i64> %333, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %339 = shufflevector <2 x i64> %337, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %340 = shufflevector <4 x i64> %338, <4 x i64> %339, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %341 = and <4 x i64> %340, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %342 = bitcast <8 x float> %313 to <4 x i64>
  %343 = xor <4 x i64> %341, %342
  %344 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %327, <4 x i64>* %344, align 32
  %345 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %346 = bitcast <8 x float>* %345 to <4 x i64>*
  store <4 x i64> %343, <4 x i64>* %346, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u10fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %37, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %14, i32 8) #8
  %16 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %15) #8
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %19 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %1) #8
  %21 = fmul <8 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %22 = fadd <8 x float> %21, %20
  %23 = fsub <8 x float> %22, %20
  %24 = fsub <8 x float> %22, %23
  %25 = fsub <8 x float> %20, %24
  %26 = fsub <8 x float> %21, %23
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %29 = fadd <8 x float> %28, %22
  %30 = fsub <8 x float> %22, %29
  %31 = fadd <8 x float> %28, %30
  %32 = fadd <8 x float> %31, %27
  %33 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <2 x i64> %33 to <4 x i32>
  %36 = bitcast <2 x i64> %34 to <4 x i32>
  br label %263

; <label>:37:                                     ; preds = %2
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = bitcast <2 x i64> %38 to <4 x i32>
  %41 = lshr <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = bitcast <2 x i64> %39 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %44 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %45 = and <4 x i32> %43, <i32 255, i32 255, i32 255, i32 255>
  %46 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %47 = add nsw <4 x i32> %45, <i32 -152, i32 -152, i32 -152, i32 -152>
  %48 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %49 = icmp ugt <4 x i32> %45, <i32 217, i32 217, i32 217, i32 217>
  %50 = select <4 x i1> %48, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %52 = add <4 x i32> %50, %40
  %53 = add <4 x i32> %51, %42
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %61 = ashr <4 x i32> %47, <i32 31, i32 31, i32 31, i32 31>
  %62 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %63 = and <4 x i32> %62, %46
  %64 = shl <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = xor <4 x i32> %61, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %66 = and <4 x i32> %65, %47
  %67 = shl <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %68 = extractelement <4 x i32> %67, i32 3
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !3, !noalias !25
  %72 = extractelement <4 x i32> %67, i32 2
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3, !noalias !25
  %76 = extractelement <4 x i32> %67, i32 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !25
  %80 = extractelement <4 x i32> %67, i32 0
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !25
  %84 = extractelement <4 x i32> %64, i32 3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !25
  %88 = extractelement <4 x i32> %64, i32 2
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !25
  %92 = extractelement <4 x i32> %64, i32 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !25
  %96 = extractelement <4 x i32> %64, i32 0
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !25
  %100 = insertelement <8 x float> undef, float %99, i32 0
  %101 = insertelement <8 x float> %100, float %95, i32 1
  %102 = insertelement <8 x float> %101, float %91, i32 2
  %103 = insertelement <8 x float> %102, float %87, i32 3
  %104 = insertelement <8 x float> %103, float %83, i32 4
  %105 = insertelement <8 x float> %104, float %79, i32 5
  %106 = insertelement <8 x float> %105, float %75, i32 6
  %107 = insertelement <8 x float> %106, float %71, i32 7
  %108 = fmul <8 x float> %107, %59
  %109 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %108
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %107, <8 x float> %109) #8
  %111 = fmul <8 x float> %108, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %112 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %111, i32 8) #8
  %113 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %108, i32 8) #8
  %114 = fmul <8 x float> %113, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %115 = fsub <8 x float> %112, %114
  %116 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %115) #8
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = shufflevector <4 x i64> %117, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %119 = shufflevector <4 x i64> %117, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %120 = fmul <8 x float> %112, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %121 = fsub <8 x float> %108, %120
  %122 = fadd <8 x float> %110, %121
  %123 = fsub <8 x float> %121, %122
  %124 = fadd <8 x float> %110, %123
  %125 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %69
  %126 = load float, float* %125, align 4, !tbaa !3, !noalias !25
  %127 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %73
  %128 = load float, float* %127, align 4, !tbaa !3, !noalias !25
  %129 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %130 = load float, float* %129, align 4, !tbaa !3, !noalias !25
  %131 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !25
  %133 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %134 = load float, float* %133, align 4, !tbaa !3, !noalias !25
  %135 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %136 = load float, float* %135, align 4, !tbaa !3, !noalias !25
  %137 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %138 = load float, float* %137, align 4, !tbaa !3, !noalias !25
  %139 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %140 = load float, float* %139, align 4, !tbaa !3, !noalias !25
  %141 = insertelement <8 x float> undef, float %140, i32 0
  %142 = insertelement <8 x float> %141, float %138, i32 1
  %143 = insertelement <8 x float> %142, float %136, i32 2
  %144 = insertelement <8 x float> %143, float %134, i32 3
  %145 = insertelement <8 x float> %144, float %132, i32 4
  %146 = insertelement <8 x float> %145, float %130, i32 5
  %147 = insertelement <8 x float> %146, float %128, i32 6
  %148 = insertelement <8 x float> %147, float %126, i32 7
  %149 = fmul <8 x float> %148, %59
  %150 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %149
  %151 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %148, <8 x float> %150) #8
  %152 = fadd <8 x float> %122, %149
  %153 = fsub <8 x float> %152, %122
  %154 = fsub <8 x float> %152, %153
  %155 = fsub <8 x float> %122, %154
  %156 = fsub <8 x float> %149, %153
  %157 = fadd <8 x float> %156, %155
  %158 = fadd <8 x float> %124, %151
  %159 = fadd <8 x float> %158, %157
  %160 = fmul <8 x float> %152, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %161 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %160, i32 8) #8
  %162 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %152, i32 8) #8
  %163 = fmul <8 x float> %162, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %164 = fsub <8 x float> %161, %163
  %165 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %164) #8
  %166 = bitcast <8 x i32> %165 to <4 x i64>
  %167 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %168 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %169 = fmul <8 x float> %161, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %170 = fsub <8 x float> %152, %169
  %171 = bitcast <2 x i64> %118 to <4 x i32>
  %172 = bitcast <2 x i64> %167 to <4 x i32>
  %173 = add <4 x i32> %172, %171
  %174 = bitcast <2 x i64> %119 to <4 x i32>
  %175 = bitcast <2 x i64> %168 to <4 x i32>
  %176 = add <4 x i32> %175, %174
  %177 = fadd <8 x float> %170, %159
  %178 = fsub <8 x float> %170, %177
  %179 = fadd <8 x float> %159, %178
  %180 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %69
  %181 = load float, float* %180, align 4, !tbaa !3, !noalias !25
  %182 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %73
  %183 = load float, float* %182, align 4, !tbaa !3, !noalias !25
  %184 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %185 = load float, float* %184, align 4, !tbaa !3, !noalias !25
  %186 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %187 = load float, float* %186, align 4, !tbaa !3, !noalias !25
  %188 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %189 = load float, float* %188, align 4, !tbaa !3, !noalias !25
  %190 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %191 = load float, float* %190, align 4, !tbaa !3, !noalias !25
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !25
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !25
  %196 = insertelement <8 x float> undef, float %195, i32 0
  %197 = insertelement <8 x float> %196, float %193, i32 1
  %198 = insertelement <8 x float> %197, float %191, i32 2
  %199 = insertelement <8 x float> %198, float %189, i32 3
  %200 = insertelement <8 x float> %199, float %187, i32 4
  %201 = insertelement <8 x float> %200, float %185, i32 5
  %202 = insertelement <8 x float> %201, float %183, i32 6
  %203 = insertelement <8 x float> %202, float %181, i32 7
  %204 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %69
  %205 = load float, float* %204, align 4, !tbaa !3, !noalias !25
  %206 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %73
  %207 = load float, float* %206, align 4, !tbaa !3, !noalias !25
  %208 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %209 = load float, float* %208, align 4, !tbaa !3, !noalias !25
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !25
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !25
  %214 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %215 = load float, float* %214, align 4, !tbaa !3, !noalias !25
  %216 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %217 = load float, float* %216, align 4, !tbaa !3, !noalias !25
  %218 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %219 = load float, float* %218, align 4, !tbaa !3, !noalias !25
  %220 = insertelement <8 x float> undef, float %219, i32 0
  %221 = insertelement <8 x float> %220, float %217, i32 1
  %222 = insertelement <8 x float> %221, float %215, i32 2
  %223 = insertelement <8 x float> %222, float %213, i32 3
  %224 = insertelement <8 x float> %223, float %211, i32 4
  %225 = insertelement <8 x float> %224, float %209, i32 5
  %226 = insertelement <8 x float> %225, float %207, i32 6
  %227 = insertelement <8 x float> %226, float %205, i32 7
  %228 = fmul <8 x float> %203, %59
  %229 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %228
  %230 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %203, <8 x float> %59, <8 x float> %229) #8
  %231 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %227, <8 x float> %59, <8 x float> %230) #8
  %232 = fadd <8 x float> %177, %228
  %233 = fsub <8 x float> %232, %177
  %234 = fsub <8 x float> %232, %233
  %235 = fsub <8 x float> %177, %234
  %236 = fsub <8 x float> %228, %233
  %237 = fadd <8 x float> %236, %235
  %238 = fadd <8 x float> %179, %231
  %239 = fadd <8 x float> %238, %237
  %240 = fadd <8 x float> %232, %239
  %241 = fsub <8 x float> %232, %240
  %242 = fadd <8 x float> %239, %241
  %243 = fmul <8 x float> %240, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %244 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %243
  %245 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %240, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %244) #8
  %246 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %242, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %245) #8
  %247 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %240, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %246) #8
  %248 = and <4 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %249 = bitcast <4 x i64> %248 to <8 x float>
  %250 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %249, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %251 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %243, <8 x float> %59, <8 x float> %250) #8
  %252 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %247, <8 x float> zeroinitializer, <8 x float> %250) #8
  %253 = bitcast <4 x i32> %173 to <2 x i64>
  %254 = bitcast <4 x i32> %176 to <2 x i64>
  %255 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %256 = fcmp uno <8 x float> %1, zeroinitializer
  %257 = or <8 x i1> %255, %256
  %258 = sext <8 x i1> %257 to <8 x i32>
  %259 = bitcast <8 x i32> %258 to <4 x i64>
  %260 = bitcast <8 x float> %251 to <4 x i64>
  %261 = or <4 x i64> %260, %259
  %262 = bitcast <4 x i64> %261 to <8 x float>
  br label %263

; <label>:263:                                    ; preds = %37, %13
  %264 = phi <4 x i32> [ %42, %37 ], [ %36, %13 ]
  %265 = phi <4 x i32> [ %40, %37 ], [ %35, %13 ]
  %266 = phi <8 x float> [ %262, %37 ], [ %29, %13 ]
  %267 = phi <8 x float> [ %252, %37 ], [ %32, %13 ]
  %268 = phi <2 x i64> [ %253, %37 ], [ %18, %13 ]
  %269 = phi <2 x i64> [ %254, %37 ], [ %19, %13 ]
  %270 = fmul <8 x float> %266, %267
  %271 = fadd <8 x float> %270, %270
  %272 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %266, <8 x float> %266, <8 x float> %271) #8
  %273 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>, <8 x float> %272, <8 x float> <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>) #8
  %274 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %273, <8 x float> %272, <8 x float> <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>) #8
  %275 = fmul <8 x float> %266, %272
  %276 = fmul <8 x float> %275, %274
  %277 = fadd <8 x float> %266, %276
  %278 = fsub <8 x float> %266, %277
  %279 = fadd <8 x float> %276, %278
  %280 = fadd <8 x float> %267, %279
  %281 = fadd <8 x float> %277, %280
  %282 = icmp eq <4 x i32> %265, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %283 = sext <4 x i1> %282 to <4 x i32>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = icmp eq <4 x i32> %264, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %286 = sext <4 x i1> %285 to <4 x i32>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = shufflevector <2 x i64> %284, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %289 = shufflevector <2 x i64> %287, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = shufflevector <4 x i64> %288, <4 x i64> %289, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %291 = bitcast <4 x i64> %290 to <8 x float>
  %292 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %281, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %291) #8
  %293 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>, <8 x float> %272, <8 x float> <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>) #8
  %294 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %293, <8 x float> %272, <8 x float> <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>) #8
  %295 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %294, <8 x float> %272, <8 x float> <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>) #8
  %296 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %295, <8 x float> %272, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #8
  %297 = fmul <8 x float> %272, %296
  %298 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %297
  %299 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %272, <8 x float> %296, <8 x float> %298) #8
  %300 = fadd <8 x float> %297, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %301 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %300
  %302 = fadd <8 x float> %297, %301
  %303 = fadd <8 x float> %299, %302
  %304 = fadd <8 x float> %300, %303
  %305 = bitcast <2 x i64> %268 to <4 x i32>
  %306 = and <4 x i32> %305, <i32 1, i32 1, i32 1, i32 1>
  %307 = icmp eq <4 x i32> %306, zeroinitializer
  %308 = sext <4 x i1> %307 to <4 x i32>
  %309 = bitcast <4 x i32> %308 to <2 x i64>
  %310 = bitcast <2 x i64> %269 to <4 x i32>
  %311 = and <4 x i32> %310, <i32 1, i32 1, i32 1, i32 1>
  %312 = icmp eq <4 x i32> %311, zeroinitializer
  %313 = sext <4 x i1> %312 to <4 x i32>
  %314 = bitcast <4 x i32> %313 to <2 x i64>
  %315 = shufflevector <2 x i64> %309, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %316 = shufflevector <2 x i64> %314, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %317 = shufflevector <4 x i64> %315, <4 x i64> %316, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %304, <8 x float> %292, <8 x float> %318) #8
  %320 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %292, <8 x float> %304, <8 x float> %318) #8
  %321 = and <4 x i32> %305, <i32 2, i32 2, i32 2, i32 2>
  %322 = icmp ne <4 x i32> %321, zeroinitializer
  %323 = sext <4 x i1> %322 to <4 x i32>
  %324 = bitcast <4 x i32> %323 to <2 x i64>
  %325 = and <4 x i32> %310, <i32 2, i32 2, i32 2, i32 2>
  %326 = icmp ne <4 x i32> %325, zeroinitializer
  %327 = sext <4 x i1> %326 to <4 x i32>
  %328 = bitcast <4 x i32> %327 to <2 x i64>
  %329 = shufflevector <2 x i64> %324, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %330 = shufflevector <2 x i64> %328, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %331 = shufflevector <4 x i64> %329, <4 x i64> %330, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %332 = and <4 x i64> %331, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %333 = bitcast <8 x float> %319 to <4 x i64>
  %334 = xor <4 x i64> %332, %333
  %335 = add <4 x i32> %305, <i32 1, i32 1, i32 1, i32 1>
  %336 = add <4 x i32> %310, <i32 1, i32 1, i32 1, i32 1>
  %337 = and <4 x i32> %335, <i32 2, i32 2, i32 2, i32 2>
  %338 = icmp ne <4 x i32> %337, zeroinitializer
  %339 = sext <4 x i1> %338 to <4 x i32>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = and <4 x i32> %336, <i32 2, i32 2, i32 2, i32 2>
  %342 = icmp ne <4 x i32> %341, zeroinitializer
  %343 = sext <4 x i1> %342 to <4 x i32>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = shufflevector <2 x i64> %340, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %346 = shufflevector <2 x i64> %344, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %347 = shufflevector <4 x i64> %345, <4 x i64> %346, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %348 = and <4 x i64> %347, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %349 = bitcast <8 x float> %320 to <4 x i64>
  %350 = xor <4 x i64> %348, %349
  %351 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %334, <4 x i64>* %351, align 32
  %352 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %353 = bitcast <8 x float>* %352 to <4 x i64>*
  store <4 x i64> %350, <4 x i64>* %353, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u05fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %25, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> %26, <8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %26, <8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>) #8
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %33 = fsub <8 x float> %32, %31
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %31, %34
  %36 = fsub <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %37, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %39 = fmul <8 x float> %26, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %32, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %32, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %38, <8 x float> %42) #8
  %44 = fadd <8 x float> %39, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %51 = fadd <8 x float> %50, %49
  %52 = fmul <8 x float> %25, %44
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %25, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %25, <8 x float> %54) #8
  %56 = fadd <8 x float> %52, %55
  %57 = bitcast <8 x float> %1 to <4 x i64>
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %59 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %60 = bitcast <2 x i64> %58 to <4 x i32>
  %61 = icmp eq <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = bitcast <2 x i64> %59 to <4 x i32>
  %65 = icmp eq <4 x i32> %64, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %66 = sext <4 x i1> %65 to <4 x i32>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <4 x i64> %68, <4 x i64> %69, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %26, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %26, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>) #8
  %75 = fmul <8 x float> %26, %74
  %76 = fadd <8 x float> %75, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %77 = fsub <8 x float> %76, %75
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %75, %78
  %80 = fsub <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %81, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %83 = fmul <8 x float> %26, %76
  %84 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %83
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %76, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %76, <8 x float> %85) #8
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %82, <8 x float> %86) #8
  %88 = fadd <8 x float> %83, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %89 = fsub <8 x float> %88, %83
  %90 = fsub <8 x float> %88, %89
  %91 = fsub <8 x float> %83, %90
  %92 = fsub <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %89
  %93 = fadd <8 x float> %92, %91
  %94 = fadd <8 x float> %87, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %95 = fadd <8 x float> %94, %93
  %96 = fmul <8 x float> %26, %88
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %96
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %26, <8 x float> %97) #8
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %26, <8 x float> %98) #8
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %28, <8 x float> %99) #8
  %101 = fadd <8 x float> %96, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %102 = fsub <8 x float> %101, %96
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %96, %103
  %105 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %100, %106
  %108 = fadd <8 x float> %101, %107
  %109 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %110 = icmp eq <4 x i32> %109, zeroinitializer
  %111 = sext <4 x i1> %110 to <4 x i32>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %114 = icmp eq <4 x i32> %113, zeroinitializer
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <2 x i64> %116, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %119 = shufflevector <4 x i64> %117, <4 x i64> %118, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %120 = bitcast <4 x i64> %119 to <8 x float>
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> %72, <8 x float> %120) #8
  %122 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %108, <8 x float> %120) #8
  %123 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %124 = icmp ne <4 x i32> %123, zeroinitializer
  %125 = sext <4 x i1> %124 to <4 x i32>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %128 = icmp ne <4 x i32> %127, zeroinitializer
  %129 = sext <4 x i1> %128 to <4 x i32>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <4 x i64> %131, <4 x i64> %132, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <8 x float> %121 to <4 x i64>
  %136 = xor <4 x i64> %134, %135
  %137 = bitcast <2 x i64> %18 to <4 x i32>
  %138 = add <4 x i32> %137, <i32 2, i32 2, i32 2, i32 2>
  %139 = bitcast <2 x i64> %19 to <4 x i32>
  %140 = add <4 x i32> %139, <i32 2, i32 2, i32 2, i32 2>
  %141 = and <4 x i32> %138, <i32 4, i32 4, i32 4, i32 4>
  %142 = icmp ne <4 x i32> %141, zeroinitializer
  %143 = sext <4 x i1> %142 to <4 x i32>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = and <4 x i32> %140, <i32 4, i32 4, i32 4, i32 4>
  %146 = icmp ne <4 x i32> %145, zeroinitializer
  %147 = sext <4 x i1> %146 to <4 x i32>
  %148 = bitcast <4 x i32> %147 to <2 x i64>
  %149 = shufflevector <2 x i64> %144, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %151 = shufflevector <4 x i64> %149, <4 x i64> %150, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %152 = and <4 x i64> %151, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %153 = bitcast <8 x float> %122 to <4 x i64>
  %154 = xor <4 x i64> %152, %153
  %155 = and <4 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %156 = bitcast <4 x i64> %155 to <8 x float>
  %157 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %156, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %158 = bitcast <8 x float> %157 to <4 x i64>
  %159 = xor <4 x i64> %158, <i64 -1, i64 -1, i64 -1, i64 -1>
  %160 = and <4 x i64> %136, %159
  %161 = and <4 x i64> %154, %159
  %162 = fcmp oeq <8 x float> %156, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %163 = sext <8 x i1> %162 to <8 x i32>
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = or <4 x i64> %160, %164
  %166 = or <4 x i64> %161, %164
  %167 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %165, <4 x i64>* %167, align 32
  %168 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %169 = bitcast <8 x float>* %168 to <4 x i64>*
  store <4 x i64> %166, <4 x i64>* %169, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u35fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>, <8 x float> %26, <8 x float> <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %26, <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %26, <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>) #8
  %30 = fmul <8 x float> %25, %29
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>, <8 x float> %26, <8 x float> <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %26, <8 x float> <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %26, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %26, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %35 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %36 = icmp eq <4 x i32> %35, zeroinitializer
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %40 = icmp eq <4 x i32> %39, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %30, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %34, <8 x float> %46) #8
  %49 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %50 = icmp ne <4 x i32> %49, zeroinitializer
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %54 = icmp ne <4 x i32> %53, zeroinitializer
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = and <4 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <8 x float> %47 to <4 x i64>
  %62 = xor <4 x i64> %60, %61
  %63 = bitcast <2 x i64> %18 to <4 x i32>
  %64 = add <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = bitcast <2 x i64> %19 to <4 x i32>
  %66 = add <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = and <4 x i32> %64, <i32 4, i32 4, i32 4, i32 4>
  %68 = icmp ne <4 x i32> %67, zeroinitializer
  %69 = sext <4 x i1> %68 to <4 x i32>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = and <4 x i32> %66, <i32 4, i32 4, i32 4, i32 4>
  %72 = icmp ne <4 x i32> %71, zeroinitializer
  %73 = sext <4 x i1> %72 to <4 x i32>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = shufflevector <2 x i64> %70, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <2 x i64> %74, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <4 x i64> %75, <4 x i64> %76, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %78 = and <4 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %79 = bitcast <8 x float> %48 to <4 x i64>
  %80 = xor <4 x i64> %78, %79
  %81 = bitcast <8 x float> %1 to <4 x i64>
  %82 = and <4 x i64> %81, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %83, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = xor <4 x i64> %85, <i64 -1, i64 -1, i64 -1, i64 -1>
  %87 = and <4 x i64> %62, %86
  %88 = and <4 x i64> %80, %86
  %89 = fcmp oeq <8 x float> %83, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %90 = sext <8 x i1> %89 to <8 x i32>
  %91 = bitcast <8 x i32> %90 to <4 x i64>
  %92 = or <4 x i64> %87, %91
  %93 = or <4 x i64> %88, %91
  %94 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %92, <4 x i64>* %94, align 32
  %95 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %96 = bitcast <8 x float>* %95 to <4 x i64>*
  store <4 x i64> %93, <4 x i64>* %96, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff8_fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %36, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #8
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #8
  %20 = fmul <8 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %21 = fadd <8 x float> %20, %19
  %22 = fsub <8 x float> %21, %19
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %19, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %28 = fadd <8 x float> %27, %21
  %29 = fsub <8 x float> %21, %28
  %30 = fadd <8 x float> %27, %29
  %31 = fadd <8 x float> %30, %26
  %32 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = bitcast <2 x i64> %32 to <4 x i32>
  %35 = bitcast <2 x i64> %33 to <4 x i32>
  br label %265

; <label>:36:                                     ; preds = %1
  %37 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <2 x i64> %37 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = bitcast <2 x i64> %38 to <4 x i32>
  %42 = lshr <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %44 = and <4 x i32> %42, <i32 255, i32 255, i32 255, i32 255>
  %45 = add nsw <4 x i32> %43, <i32 -152, i32 -152, i32 -152, i32 -152>
  %46 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %47 = icmp ugt <4 x i32> %43, <i32 217, i32 217, i32 217, i32 217>
  %48 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %49 = select <4 x i1> %47, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %50 = select <4 x i1> %48, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = add <4 x i32> %49, %39
  %52 = add <4 x i32> %50, %41
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = ashr <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %60 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %61 = xor <4 x i32> %59, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %62 = and <4 x i32> %61, %45
  %63 = shl <4 x i32> %62, <i32 2, i32 2, i32 2, i32 2>
  %64 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %65 = and <4 x i32> %64, %46
  %66 = shl <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = extractelement <4 x i32> %66, i32 3
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !3, !noalias !28
  %71 = extractelement <4 x i32> %66, i32 2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !3, !noalias !28
  %75 = extractelement <4 x i32> %66, i32 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !3, !noalias !28
  %79 = extractelement <4 x i32> %66, i32 0
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !3, !noalias !28
  %83 = extractelement <4 x i32> %63, i32 3
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !3, !noalias !28
  %87 = extractelement <4 x i32> %63, i32 2
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !3, !noalias !28
  %91 = extractelement <4 x i32> %63, i32 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !28
  %95 = extractelement <4 x i32> %63, i32 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !28
  %99 = insertelement <8 x float> undef, float %98, i32 0
  %100 = insertelement <8 x float> %99, float %94, i32 1
  %101 = insertelement <8 x float> %100, float %90, i32 2
  %102 = insertelement <8 x float> %101, float %86, i32 3
  %103 = insertelement <8 x float> %102, float %82, i32 4
  %104 = insertelement <8 x float> %103, float %78, i32 5
  %105 = insertelement <8 x float> %104, float %74, i32 6
  %106 = insertelement <8 x float> %105, float %70, i32 7
  %107 = fmul <8 x float> %106, %58
  %108 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %107
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %106, <8 x float> %108) #8
  %110 = fmul <8 x float> %107, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %111 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %110, i32 8) #8
  %112 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %107, i32 8) #8
  %113 = fmul <8 x float> %112, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %114 = fsub <8 x float> %111, %113
  %115 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %114) #8
  %116 = bitcast <8 x i32> %115 to <4 x i64>
  %117 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %118 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %119 = fmul <8 x float> %111, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %120 = fsub <8 x float> %107, %119
  %121 = fadd <8 x float> %109, %120
  %122 = fsub <8 x float> %120, %121
  %123 = fadd <8 x float> %109, %122
  %124 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %68
  %125 = load float, float* %124, align 4, !tbaa !3, !noalias !28
  %126 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %72
  %127 = load float, float* %126, align 4, !tbaa !3, !noalias !28
  %128 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %76
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !28
  %130 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %80
  %131 = load float, float* %130, align 4, !tbaa !3, !noalias !28
  %132 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %84
  %133 = load float, float* %132, align 4, !tbaa !3, !noalias !28
  %134 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %88
  %135 = load float, float* %134, align 4, !tbaa !3, !noalias !28
  %136 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %92
  %137 = load float, float* %136, align 4, !tbaa !3, !noalias !28
  %138 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %96
  %139 = load float, float* %138, align 4, !tbaa !3, !noalias !28
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = insertelement <8 x float> %140, float %137, i32 1
  %142 = insertelement <8 x float> %141, float %135, i32 2
  %143 = insertelement <8 x float> %142, float %133, i32 3
  %144 = insertelement <8 x float> %143, float %131, i32 4
  %145 = insertelement <8 x float> %144, float %129, i32 5
  %146 = insertelement <8 x float> %145, float %127, i32 6
  %147 = insertelement <8 x float> %146, float %125, i32 7
  %148 = fmul <8 x float> %147, %58
  %149 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %148
  %150 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %147, <8 x float> %149) #8
  %151 = fadd <8 x float> %121, %148
  %152 = fsub <8 x float> %151, %121
  %153 = fsub <8 x float> %151, %152
  %154 = fsub <8 x float> %121, %153
  %155 = fsub <8 x float> %148, %152
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %123, %150
  %158 = fadd <8 x float> %157, %156
  %159 = fmul <8 x float> %151, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %160 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %159, i32 8) #8
  %161 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %151, i32 8) #8
  %162 = fmul <8 x float> %161, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %163 = fsub <8 x float> %160, %162
  %164 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %163) #8
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %167 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %168 = fmul <8 x float> %160, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %169 = fsub <8 x float> %151, %168
  %170 = bitcast <2 x i64> %117 to <4 x i32>
  %171 = bitcast <2 x i64> %166 to <4 x i32>
  %172 = add <4 x i32> %171, %170
  %173 = bitcast <2 x i64> %118 to <4 x i32>
  %174 = bitcast <2 x i64> %167 to <4 x i32>
  %175 = add <4 x i32> %174, %173
  %176 = fadd <8 x float> %169, %158
  %177 = fsub <8 x float> %169, %176
  %178 = fadd <8 x float> %158, %177
  %179 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %68
  %180 = load float, float* %179, align 4, !tbaa !3, !noalias !28
  %181 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %72
  %182 = load float, float* %181, align 4, !tbaa !3, !noalias !28
  %183 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %76
  %184 = load float, float* %183, align 4, !tbaa !3, !noalias !28
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %80
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !28
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %84
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !28
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %88
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !28
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %92
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !28
  %193 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %96
  %194 = load float, float* %193, align 4, !tbaa !3, !noalias !28
  %195 = insertelement <8 x float> undef, float %194, i32 0
  %196 = insertelement <8 x float> %195, float %192, i32 1
  %197 = insertelement <8 x float> %196, float %190, i32 2
  %198 = insertelement <8 x float> %197, float %188, i32 3
  %199 = insertelement <8 x float> %198, float %186, i32 4
  %200 = insertelement <8 x float> %199, float %184, i32 5
  %201 = insertelement <8 x float> %200, float %182, i32 6
  %202 = insertelement <8 x float> %201, float %180, i32 7
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %68
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !28
  %205 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %72
  %206 = load float, float* %205, align 4, !tbaa !3, !noalias !28
  %207 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %76
  %208 = load float, float* %207, align 4, !tbaa !3, !noalias !28
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %80
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !28
  %211 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %84
  %212 = load float, float* %211, align 4, !tbaa !3, !noalias !28
  %213 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %88
  %214 = load float, float* %213, align 4, !tbaa !3, !noalias !28
  %215 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %92
  %216 = load float, float* %215, align 4, !tbaa !3, !noalias !28
  %217 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %96
  %218 = load float, float* %217, align 4, !tbaa !3, !noalias !28
  %219 = insertelement <8 x float> undef, float %218, i32 0
  %220 = insertelement <8 x float> %219, float %216, i32 1
  %221 = insertelement <8 x float> %220, float %214, i32 2
  %222 = insertelement <8 x float> %221, float %212, i32 3
  %223 = insertelement <8 x float> %222, float %210, i32 4
  %224 = insertelement <8 x float> %223, float %208, i32 5
  %225 = insertelement <8 x float> %224, float %206, i32 6
  %226 = insertelement <8 x float> %225, float %204, i32 7
  %227 = fmul <8 x float> %202, %58
  %228 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %227
  %229 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %202, <8 x float> %58, <8 x float> %228) #8
  %230 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %226, <8 x float> %58, <8 x float> %229) #8
  %231 = fadd <8 x float> %176, %227
  %232 = fsub <8 x float> %231, %176
  %233 = fsub <8 x float> %231, %232
  %234 = fsub <8 x float> %176, %233
  %235 = fsub <8 x float> %227, %232
  %236 = fadd <8 x float> %235, %234
  %237 = fadd <8 x float> %178, %230
  %238 = fadd <8 x float> %237, %236
  %239 = fadd <8 x float> %231, %238
  %240 = fsub <8 x float> %231, %239
  %241 = fadd <8 x float> %238, %240
  %242 = fmul <8 x float> %239, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %243 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %242
  %244 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %239, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %243) #8
  %245 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %241, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %244) #8
  %246 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %239, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %245) #8
  %247 = and <4 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %248 = bitcast <4 x i64> %247 to <8 x float>
  %249 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %248, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %250 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %242, <8 x float> %58, <8 x float> %249) #8
  %251 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %246, <8 x float> zeroinitializer, <8 x float> %249) #8
  %252 = bitcast <4 x i32> %172 to <2 x i64>
  %253 = bitcast <4 x i32> %175 to <2 x i64>
  %254 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %255 = fcmp uno <8 x float> %0, zeroinitializer
  %256 = or <8 x i1> %254, %255
  %257 = sext <8 x i1> %256 to <8 x i32>
  %258 = bitcast <8 x i32> %257 to <4 x i64>
  %259 = bitcast <8 x float> %250 to <4 x i64>
  %260 = or <4 x i64> %259, %258
  %261 = bitcast <4 x i64> %260 to <8 x float>
  %262 = bitcast <8 x float> %251 to <4 x i64>
  %263 = or <4 x i64> %262, %258
  %264 = bitcast <4 x i64> %263 to <8 x float>
  br label %265

; <label>:265:                                    ; preds = %36, %12
  %266 = phi <4 x i32> [ %41, %36 ], [ %35, %12 ]
  %267 = phi <4 x i32> [ %39, %36 ], [ %34, %12 ]
  %268 = phi <8 x float> [ %261, %36 ], [ %28, %12 ]
  %269 = phi <8 x float> [ %264, %36 ], [ %31, %12 ]
  %270 = phi <2 x i64> [ %252, %36 ], [ %17, %12 ]
  %271 = phi <2 x i64> [ %253, %36 ], [ %18, %12 ]
  %272 = bitcast <2 x i64> %270 to <4 x i32>
  %273 = and <4 x i32> %272, <i32 1, i32 1, i32 1, i32 1>
  %274 = icmp ne <4 x i32> %273, zeroinitializer
  %275 = sext <4 x i1> %274 to <4 x i32>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = bitcast <2 x i64> %271 to <4 x i32>
  %278 = and <4 x i32> %277, <i32 1, i32 1, i32 1, i32 1>
  %279 = icmp ne <4 x i32> %278, zeroinitializer
  %280 = sext <4 x i1> %279 to <4 x i32>
  %281 = bitcast <4 x i32> %280 to <2 x i64>
  %282 = shufflevector <2 x i64> %276, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %283 = shufflevector <2 x i64> %281, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %284 = shufflevector <4 x i64> %282, <4 x i64> %283, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %285 = and <4 x i64> %284, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %286 = bitcast <8 x float> %268 to <4 x i64>
  %287 = xor <4 x i64> %285, %286
  %288 = bitcast <4 x i64> %287 to <8 x float>
  %289 = bitcast <8 x float> %269 to <4 x i64>
  %290 = xor <4 x i64> %285, %289
  %291 = bitcast <4 x i64> %290 to <8 x float>
  %292 = fmul <8 x float> %288, %288
  %293 = fadd <8 x float> %288, %288
  %294 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %292
  %295 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %288, <8 x float> %288, <8 x float> %294) #8
  %296 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %293, <8 x float> %291, <8 x float> %295) #8
  %297 = fadd <8 x float> %296, %292
  %298 = fsub <8 x float> %292, %297
  %299 = fadd <8 x float> %296, %298
  %300 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>, <8 x float> %297, <8 x float> <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>) #8
  %301 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %300, <8 x float> %297, <8 x float> <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>) #8
  %302 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %301, <8 x float> %297, <8 x float> <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>) #8
  %303 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %302, <8 x float> %297, <8 x float> <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>) #8
  %304 = fmul <8 x float> %303, %297
  %305 = fadd <8 x float> %304, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %306 = fsub <8 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %305
  %307 = fadd <8 x float> %304, %306
  %308 = fmul <8 x float> %297, %305
  %309 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %308
  %310 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %297, <8 x float> %305, <8 x float> %309) #8
  %311 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %299, <8 x float> %305, <8 x float> %310) #8
  %312 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %297, <8 x float> %307, <8 x float> %311) #8
  %313 = fadd <8 x float> %308, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %314 = fsub <8 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %313
  %315 = fadd <8 x float> %308, %314
  %316 = fadd <8 x float> %312, %315
  %317 = fmul <8 x float> %297, %313
  %318 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %317
  %319 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %313, <8 x float> %297, <8 x float> %318) #8
  %320 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %316, <8 x float> %297, <8 x float> %319) #8
  %321 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %313, <8 x float> %299, <8 x float> %320) #8
  %322 = fadd <8 x float> %317, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %323 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %322
  %324 = fadd <8 x float> %317, %323
  %325 = fadd <8 x float> %321, %324
  %326 = fmul <8 x float> %322, %288
  %327 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %326
  %328 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %288, <8 x float> %322, <8 x float> %327) #8
  %329 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %291, <8 x float> %322, <8 x float> %328) #8
  %330 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %288, <8 x float> %325, <8 x float> %329) #8
  %331 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %326
  %332 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %327, <8 x float> %331, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %333 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %330
  %334 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %333, <8 x float> %331, <8 x float> %332) #8
  %335 = fmul <8 x float> %334, %331
  %336 = bitcast <4 x i64> %284 to <8 x float>
  %337 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %326, <8 x float> %331, <8 x float> %336) #8
  %338 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %330, <8 x float> %335, <8 x float> %336) #8
  %339 = fadd <8 x float> %337, %338
  %340 = icmp eq <4 x i32> %267, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %341 = sext <4 x i1> %340 to <4 x i32>
  %342 = bitcast <4 x i32> %341 to <2 x i64>
  %343 = icmp eq <4 x i32> %266, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %344 = sext <4 x i1> %343 to <4 x i32>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = shufflevector <2 x i64> %342, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %347 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %348 = shufflevector <4 x i64> %346, <4 x i64> %347, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %349 = bitcast <4 x i64> %348 to <8 x float>
  %350 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %339, <8 x float> %0, <8 x float> %349) #8
  ret <8 x float> %350
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5 = bitcast <2 x i64> %3 to <4 x i32>
  %6 = ashr <4 x i32> %5, <i32 31, i32 31, i32 31, i32 31>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %4 to <4 x i32>
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %7, <i64 8589934594, i64 8589934594>
  %12 = and <2 x i64> %10, <i64 8589934594, i64 8589934594>
  %13 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <4 x i64> %13 to <8 x float>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = bitcast <2 x i64> %12 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %14, i8 17) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %16 to <16 x i8>
  %25 = bitcast <2 x i64> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #8
  %27 = bitcast <2 x i64> %12 to <16 x i8>
  %28 = bitcast <4 x i32> %18 to <16 x i8>
  %29 = bitcast <2 x i64> %22 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %31, <8 x float> %19) #8
  %33 = fmul <8 x float> %32, %32
  %34 = fmul <8 x float> %33, %33
  %35 = fmul <8 x float> %34, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %36, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %39, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %38, <8 x float> %41) #8
  %43 = fmul <8 x float> %33, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %43, <8 x float> %32) #8
  %45 = bitcast <16 x i8> %26 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = icmp ne <4 x i32> %46, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = bitcast <16 x i8> %30 to <4 x i32>
  %51 = and <4 x i32> %50, <i32 1, i32 1, i32 1, i32 1>
  %52 = icmp ne <4 x i32> %51, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %44
  %59 = bitcast <4 x i64> %57 to <8 x float>
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> %58, <8 x float> %59) #8
  %61 = and <4 x i32> %45, <i32 2, i32 2, i32 2, i32 2>
  %62 = icmp ne <4 x i32> %61, zeroinitializer
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = and <4 x i32> %50, <i32 2, i32 2, i32 2, i32 2>
  %66 = icmp ne <4 x i32> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i32>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <2 x i64> %68, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %71 = shufflevector <4 x i64> %69, <4 x i64> %70, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %72 = and <4 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x float> %60 to <4 x i64>
  %74 = xor <4 x i64> %72, %73
  %75 = bitcast <4 x i64> %74 to <8 x float>
  ret <8 x float> %75
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u35fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = ashr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = bitcast <2 x i64> %8 to <4 x i32>
  %13 = ashr <4 x i32> %12, <i32 31, i32 31, i32 31, i32 31>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = and <2 x i64> %11, <i64 -4294967298, i64 -4294967298>
  %16 = and <2 x i64> %14, <i64 -4294967298, i64 -4294967298>
  %17 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <2 x i64> %15 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %16 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %18, <8 x float> %5, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = bitcast <2 x i64> %15 to <16 x i8>
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %25 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %16 to <16 x i8>
  %32 = bitcast <4 x i32> %22 to <16 x i8>
  %33 = bitcast <2 x i64> %26 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <16 x i8> %30 to <2 x i64>
  %36 = bitcast <16 x i8> %34 to <2 x i64>
  %37 = or <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %38, <8 x float> %23) #8
  %40 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %18, <8 x float> %5) #8
  %41 = fdiv <8 x float> %39, %40
  %42 = fmul <8 x float> %41, %41
  %43 = fmul <8 x float> %42, %42
  %44 = fmul <8 x float> %43, %43
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #8
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %45, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #8
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %48, <8 x float> %49) #8
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %47, <8 x float> %50) #8
  %52 = fmul <8 x float> %42, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %52, <8 x float> %41) #8
  %54 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x i64> %54, <4 x i64> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = bitcast <4 x i64> %56 to <8 x i32>
  %58 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %53) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = xor <4 x i64> %61, %60
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = fcmp oeq <8 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = fcmp oeq <8 x float> %1, zeroinitializer
  %68 = or <8 x i1> %64, %67
  %69 = sext <8 x i1> %68 to <8 x i32>
  %70 = or <4 x i64> %61, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %71 = and <4 x i64> %70, %66
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %72
  %74 = bitcast <8 x i32> %69 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %73, <8 x float> %74) #8
  %76 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = or <4 x i64> %61, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %79 = and <4 x i64> %78, %66
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %80
  %82 = bitcast <8 x i32> %77 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> %81, <8 x float> %82) #8
  %84 = fcmp oeq <8 x float> %0, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = shufflevector <2 x i64> %11, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = and <4 x i64> %88, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = bitcast <8 x i32> %85 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> %90, <8 x float> %91) #8
  %93 = fcmp uno <8 x float> %0, %1
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = bitcast <8 x i32> %94 to <4 x i64>
  %96 = bitcast <8 x float> %92 to <4 x i64>
  %97 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = xor <4 x i64> %97, %96
  %99 = or <4 x i64> %98, %95
  %100 = bitcast <4 x i64> %99 to <8 x float>
  ret <8 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %16 = fmul <8 x float> %9, %11
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %11) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %5) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = xor <4 x i64> %21, %20
  %23 = bitcast <4 x i64> %22 to <8 x float>
  ret <8 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #8
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %21 = fmul <8 x float> %10, %16
  %22 = fmul <8 x float> %21, %20
  %23 = bitcast <8 x float> %16 to <4 x i64>
  %24 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = xor <4 x i64> %24, %23
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = bitcast <8 x float> %22 to <4 x i64>
  %28 = xor <4 x i64> %24, %27
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fadd <8 x float> %26, %29
  %31 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %30
  %32 = fadd <8 x float> %16, %22
  %33 = fmul <8 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %31, <8 x float> %5) #8
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %38 = and <4 x i64> %36, %37
  %39 = bitcast <8 x float> %34 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fadd <8 x float> %41, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %43 = bitcast <4 x i64> %38 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %42, <8 x float> %43) #8
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u10fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i8 17) #8
  %7 = fmul <8 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %7, <8 x float> %6) #8
  %9 = fmul <8 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %9, <8 x float> %6) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> zeroinitializer, i8 17) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %20) #8
  %22 = and <4 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %23 = bitcast <8 x float> %8 to <4 x i64>
  %24 = xor <4 x i64> %22, %23
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = bitcast <4 x i64> %22 to <8 x float>
  %27 = bitcast <16 x i8> %19 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = bitcast <16 x i8> %21 to <4 x i32>
  %30 = add <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %25, <8 x float> %13, i8 17) #8
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <4 x i32> %28 to <16 x i8>
  %36 = bitcast <2 x i64> %33 to <16 x i8>
  %37 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> %35, <16 x i8> %36) #8
  %38 = bitcast <4 x i32> %30 to <16 x i8>
  %39 = bitcast <2 x i64> %34 to <16 x i8>
  %40 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %38, <16 x i8> %39) #8
  %41 = bitcast <16 x i8> %37 to <2 x i64>
  %42 = bitcast <16 x i8> %40 to <2 x i64>
  %43 = xor <4 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = xor <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <4 x i64> %43 to <8 x float>
  %46 = bitcast <4 x i64> %44 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %45, <8 x float> %31) #8
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %46, <8 x float> %31) #8
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %25, <8 x float> %13, <8 x float> %31) #8
  %50 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %26, <8 x float> zeroinitializer, <8 x float> %31) #8
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %52 = fmul <8 x float> %47, %51
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %47, <8 x float> %53) #8
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %51, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %51, <8 x float> %56) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %51, <8 x float> %54) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %58, <8 x float> %59) #8
  %61 = fmul <8 x float> %52, %52
  %62 = fadd <8 x float> %52, %52
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %52, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %60, <8 x float> %64) #8
  %66 = fadd <8 x float> %61, %65
  %67 = fsub <8 x float> %61, %66
  %68 = fadd <8 x float> %65, %67
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %66, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %66, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #8
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %66, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #8
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %66, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %66, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %66, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %66, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #8
  %76 = fmul <8 x float> %66, %75
  %77 = fadd <8 x float> %76, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %78 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %77
  %79 = fadd <8 x float> %76, %78
  %80 = fmul <8 x float> %66, %77
  %81 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %77, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %82) #8
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %79, <8 x float> %83) #8
  %85 = fadd <8 x float> %80, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %85
  %87 = fadd <8 x float> %80, %86
  %88 = fadd <8 x float> %84, %87
  %89 = fmul <8 x float> %52, %85
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %85, <8 x float> %90) #8
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %85, <8 x float> %91) #8
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %88, <8 x float> %92) #8
  %94 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = bitcast <4 x i64> %96 to <8 x i32>
  %98 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %97) #8
  %99 = fmul <8 x float> %98, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %99
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %98, <8 x float> %100) #8
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %98, <8 x float> %101) #8
  %103 = fadd <8 x float> %89, %99
  %104 = fsub <8 x float> %99, %103
  %105 = fadd <8 x float> %89, %104
  %106 = fadd <8 x float> %102, %105
  %107 = fadd <8 x float> %93, %106
  %108 = fadd <8 x float> %103, %107
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = and <4 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = xor <4 x i64> %110, %109
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = and <4 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fcmp oeq <8 x float> %114, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = fcmp oeq <8 x float> %8, zeroinitializer
  %119 = or <8 x i1> %115, %118
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = or <4 x i64> %110, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %122 = and <4 x i64> %121, %117
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %123
  %125 = bitcast <8 x i32> %120 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> %124, <8 x float> %125) #8
  %127 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = or <4 x i64> %110, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %130 = and <4 x i64> %129, %117
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %131
  %133 = bitcast <8 x i32> %128 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> %132, <8 x float> %133) #8
  %135 = fcmp oeq <8 x float> %10, zeroinitializer
  %136 = sext <8 x i1> %135 to <8 x i32>
  %137 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %138 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %139 = bitcast <2 x i64> %137 to <4 x i32>
  %140 = ashr <4 x i32> %139, <i32 31, i32 31, i32 31, i32 31>
  %141 = bitcast <4 x i32> %140 to <2 x i64>
  %142 = bitcast <2 x i64> %138 to <4 x i32>
  %143 = ashr <4 x i32> %142, <i32 31, i32 31, i32 31, i32 31>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %141, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %146 = shufflevector <2 x i64> %144, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %147 = shufflevector <4 x i64> %145, <4 x i64> %146, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %148 = and <4 x i64> %147, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %149 = bitcast <4 x i64> %148 to <8 x float>
  %150 = bitcast <8 x i32> %136 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> %149, <8 x float> %150) #8
  %152 = fcmp uno <8 x float> %10, %8
  %153 = sext <8 x i1> %152 to <8 x i32>
  %154 = bitcast <8 x i32> %153 to <4 x i64>
  %155 = bitcast <8 x float> %151 to <4 x i64>
  %156 = and <4 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = xor <4 x i64> %156, %155
  %158 = or <4 x i64> %157, %154
  %159 = bitcast <4 x i64> %158 to <8 x float>
  ret <8 x float> %159
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #8
  %14 = fadd <8 x float> %9, %11
  %15 = fsub <8 x float> %14, %9
  %16 = fsub <8 x float> %14, %15
  %17 = fsub <8 x float> %9, %16
  %18 = fsub <8 x float> %11, %15
  %19 = fadd <8 x float> %18, %17
  %20 = fadd <8 x float> %13, %19
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %14
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %21, <8 x float> %26) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %24, <8 x float> %28) #8
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %4, <8 x float> %5) #8
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> zeroinitializer, <8 x float> %5) #8
  %34 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %36) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %43 = fmul <8 x float> %9, %37
  %44 = fmul <8 x float> %43, %42
  %45 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %37
  %46 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %47 = fsub <8 x float> %46, %37
  %48 = fadd <8 x float> %47, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %45, %44
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %51, %44
  %53 = fadd <8 x float> %49, %52
  %54 = fadd <8 x float> %37, %44
  %55 = fadd <8 x float> %50, %53
  %56 = fmul <8 x float> %55, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %5) #8
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = xor <4 x i64> %59, %58
  %61 = bitcast <4 x i64> %60 to <8 x float>
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = fmul <8 x float> %11, %11
  %13 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> %13) #8
  %15 = fadd <8 x float> %10, %12
  %16 = fsub <8 x float> %15, %10
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %10, %17
  %19 = fsub <8 x float> %12, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %14, %20
  %22 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %25 = fmul <8 x float> %22, %24
  %26 = fmul <8 x float> %22, %15
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %22, <8 x float> %28) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %29) #8
  %31 = fmul <8 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fmul <8 x float> %30, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %4, <8 x float> %5) #8
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %5) #8
  %35 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> zeroinitializer, <8 x float> %37) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %44 = fmul <8 x float> %10, %38
  %45 = fmul <8 x float> %44, %43
  %46 = bitcast <8 x float> %38 to <4 x i64>
  %47 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %45 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fadd <8 x float> %49, %52
  %54 = fsub <8 x float> %49, %53
  %55 = fadd <8 x float> %54, %52
  %56 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %57 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %56
  %58 = fsub <8 x float> %57, %53
  %59 = fadd <8 x float> %58, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %60 = fsub <8 x float> %59, %55
  %61 = fadd <8 x float> %38, %45
  %62 = fsub <8 x float> %38, %61
  %63 = fadd <8 x float> %45, %62
  %64 = fadd <8 x float> %39, %63
  %65 = fmul <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %66 = fmul <8 x float> %64, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %56, <8 x float> %5) #8
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> %60, <8 x float> %5) #8
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %72 = and <4 x i64> %70, %71
  %73 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %67
  %74 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %73
  %75 = fsub <8 x float> %74, %67
  %76 = fadd <8 x float> %75, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %77 = fsub <8 x float> %76, %68
  %78 = bitcast <4 x i64> %72 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %73, <8 x float> %78) #8
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %78) #8
  %81 = fadd <8 x float> %79, %80
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %9) #8
  %11 = bitcast <2 x i64> %8 to <16 x i8>
  %12 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %11) #8
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %13, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %15 = bitcast <4 x i64> %14 to <8 x float>
  %16 = bitcast <4 x i64> %13 to <8 x float>
  %17 = bitcast <16 x i8> %10 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = bitcast <16 x i8> %12 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> %4, i8 17) #8
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast <4 x i32> %18 to <16 x i8>
  %26 = bitcast <2 x i64> %23 to <16 x i8>
  %27 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %10, <16 x i8> %25, <16 x i8> %26) #8
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %24 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %12, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <16 x i8> %27 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <2 x i64>
  %33 = xor <4 x i64> %13, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %34 = xor <4 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <4 x i64> %33 to <8 x float>
  %36 = bitcast <4 x i64> %34 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %35, <8 x float> %21) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %36, <8 x float> %21) #8
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %4, <8 x float> %21) #8
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> zeroinitializer, <8 x float> %21) #8
  %41 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %42 = fmul <8 x float> %37, %41
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %37, <8 x float> %43) #8
  %45 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %41, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %47 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %40
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %41, <8 x float> %46) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %41, <8 x float> %44) #8
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %48, <8 x float> %49) #8
  %51 = fmul <8 x float> %42, %42
  %52 = fadd <8 x float> %42, %42
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %42, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %50, <8 x float> %54) #8
  %56 = fadd <8 x float> %51, %55
  %57 = fsub <8 x float> %51, %56
  %58 = fadd <8 x float> %55, %57
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %56, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %56, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %56, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %56, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %56, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #8
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %56, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %56, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #8
  %66 = fmul <8 x float> %56, %65
  %67 = fadd <8 x float> %66, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %68 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %67
  %69 = fadd <8 x float> %66, %68
  %70 = fmul <8 x float> %56, %67
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %70
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %67, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %67, <8 x float> %72) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %69, <8 x float> %73) #8
  %75 = fadd <8 x float> %70, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %77 = fadd <8 x float> %70, %76
  %78 = fadd <8 x float> %74, %77
  %79 = fmul <8 x float> %42, %75
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %75, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %75, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %78, <8 x float> %82) #8
  %84 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x i64> %84, <4 x i64> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %87 = bitcast <4 x i64> %86 to <8 x i32>
  %88 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %87) #8
  %89 = fmul <8 x float> %88, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %88, <8 x float> %90) #8
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %88, <8 x float> %91) #8
  %93 = fadd <8 x float> %79, %89
  %94 = fsub <8 x float> %89, %93
  %95 = fadd <8 x float> %79, %94
  %96 = fadd <8 x float> %92, %95
  %97 = fadd <8 x float> %83, %96
  %98 = fadd <8 x float> %93, %97
  %99 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %100 = sext <8 x i1> %99 to <8 x i32>
  %101 = bitcast <8 x i32> %100 to <8 x float>
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %98, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %101) #8
  %103 = bitcast <8 x float> %102 to <4 x i64>
  %104 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = xor <4 x i64> %104, %103
  %106 = bitcast <4 x i64> %105 to <8 x float>
  ret <8 x float> %106
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %52, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %53, <8 x float> %52, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %52, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %52, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #8
  %57 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <8 x i32>
  %61 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %60) #8
  %62 = fmul <8 x float> %61, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %56, <8 x float> %62) #8
  %64 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <8 x float>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %66) #8
  %68 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = fcmp uno <8 x float> %5, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = or <4 x i64> %69, %72
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %74) #8
  %76 = fcmp oeq <8 x float> %5, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %78) #8
  ret <8 x float> %79
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %9, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %15 = fmul <8 x float> %9, %9
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %14, <8 x float> %9) #8
  %17 = fadd <8 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = bitcast <2 x i64> %5 to <4 x i32>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = bitcast <2 x i64> %6 to <4 x i32>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %23 to <2 x i64>
  %27 = bitcast <4 x i32> %25 to <2 x i64>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <4 x i64> %28, <4 x i64> %29, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %31 = bitcast <4 x i64> %30 to <8 x float>
  %32 = fmul <8 x float> %17, %31
  %33 = sub <4 x i32> %18, %19
  %34 = sub <4 x i32> %20, %21
  %35 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fmul <8 x float> %32, %44
  %46 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = bitcast <8 x float> %45 to <4 x i64>
  %49 = xor <4 x i64> %47, <i64 -1, i64 -1, i64 -1, i64 -1>
  %50 = and <4 x i64> %48, %49
  %51 = bitcast <4 x i64> %50 to <8 x float>
  %52 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #8
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %52) #8
  ret <8 x float> %53
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %96, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %100) #8
  %102 = bitcast <2 x i64> %69 to <4 x i32>
  %103 = add <4 x i32> %102, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %104 = bitcast <2 x i64> %70 to <4 x i32>
  %105 = add <4 x i32> %104, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %106 = ashr <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %107 = ashr <4 x i32> %105, <i32 1, i32 1, i32 1, i32 1>
  %108 = shl <4 x i32> %106, <i32 23, i32 23, i32 23, i32 23>
  %109 = add <4 x i32> %108, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %110 = shl <4 x i32> %107, <i32 23, i32 23, i32 23, i32 23>
  %111 = add <4 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <4 x i32> %109 to <2 x i64>
  %113 = bitcast <4 x i32> %111 to <2 x i64>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <4 x i64> %114, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = fmul <8 x float> %101, %117
  %119 = sub <4 x i32> %103, %106
  %120 = sub <4 x i32> %105, %107
  %121 = shl <4 x i32> %119, <i32 23, i32 23, i32 23, i32 23>
  %122 = add <4 x i32> %121, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %123 = shl <4 x i32> %120, <i32 23, i32 23, i32 23, i32 23>
  %124 = add <4 x i32> %123, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %125 = bitcast <4 x i32> %122 to <2 x i64>
  %126 = bitcast <4 x i32> %124 to <2 x i64>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fmul <8 x float> %118, %130
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = bitcast <8 x float> %59 to <4 x i64>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %132
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = and <4 x i64> %133, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %138, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #8
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %139, <8 x float> %138, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #8
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %138, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #8
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %138, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #8
  %143 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %138, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #8
  %144 = fmul <8 x float> %143, %138
  %145 = fmul <8 x float> %143, %144
  %146 = fmul <8 x float> %145, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %147 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %145, <8 x float> %143, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #8
  %148 = fmul <8 x float> %147, %146
  %149 = fsub <8 x float> %145, %148
  %150 = fmul <8 x float> %149, %136
  ret <8 x float> %150
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <8 x float> %89) #8
  %92 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %93 = sext <4 x i1> %92 to <4 x i32>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <4 x i64> %98, <4 x i64> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = bitcast <4 x i64> %100 to <8 x float>
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %101) #8
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %91, <8 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <8 x float> %101) #8
  %104 = bitcast <8 x float> %102 to <4 x i64>
  %105 = bitcast <8 x float> %59 to <4 x i64>
  %106 = and <4 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %104
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = bitcast <8 x float> %103 to <4 x i64>
  %110 = xor <4 x i64> %106, %109
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %113, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #8
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %113, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #8
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %113, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #8
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %113, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #8
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %113, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #8
  %119 = fmul <8 x float> %118, %118
  %120 = fmul <8 x float> %119, %119
  %121 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %122 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %121, <8 x float> %120, <8 x float> %118) #8
  %123 = fmul <8 x float> %122, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %124 = fsub <8 x float> %118, %123
  %125 = fmul <8 x float> %124, %124
  %126 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %125
  %127 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %124, <8 x float> %124, <8 x float> %126) #8
  %128 = fmul <8 x float> %125, %125
  %129 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %128
  %130 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %125, <8 x float> %129) #8
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %125, <8 x float> %130) #8
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %127, <8 x float> %131) #8
  %133 = fmul <8 x float> %128, %113
  %134 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %133
  %135 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %113, <8 x float> %134) #8
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %132, <8 x float> %113, <8 x float> %135) #8
  %137 = bitcast <8 x float> %124 to <4 x i64>
  %138 = xor <4 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fadd <8 x float> %133, %139
  %141 = fsub <8 x float> %140, %133
  %142 = fsub <8 x float> %140, %141
  %143 = fsub <8 x float> %133, %142
  %144 = fsub <8 x float> %139, %141
  %145 = fadd <8 x float> %144, %143
  %146 = fadd <8 x float> %136, %145
  %147 = fadd <8 x float> %140, %146
  %148 = fmul <8 x float> %147, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %149 = fmul <8 x float> %124, %148
  %150 = fadd <8 x float> %125, %149
  %151 = fsub <8 x float> %150, %125
  %152 = fsub <8 x float> %150, %151
  %153 = fsub <8 x float> %125, %152
  %154 = fsub <8 x float> %149, %151
  %155 = fadd <8 x float> %154, %153
  %156 = fadd <8 x float> %127, %155
  %157 = fmul <8 x float> %150, %113
  %158 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %157
  %159 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %150, <8 x float> %113, <8 x float> %158) #8
  %160 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %156, <8 x float> %113, <8 x float> %159) #8
  %161 = fmul <8 x float> %157, %108
  %162 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %161
  %163 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %157, <8 x float> %108, <8 x float> %162) #8
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %160, <8 x float> %108, <8 x float> %163) #8
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %157, <8 x float> %111, <8 x float> %164) #8
  %166 = fadd <8 x float> %165, %161
  %167 = bitcast <2 x i64> %69 to <4 x i32>
  %168 = add <4 x i32> %167, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %169 = bitcast <2 x i64> %70 to <4 x i32>
  %170 = add <4 x i32> %169, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %171 = ashr <4 x i32> %168, <i32 1, i32 1, i32 1, i32 1>
  %172 = ashr <4 x i32> %170, <i32 1, i32 1, i32 1, i32 1>
  %173 = shl <4 x i32> %171, <i32 23, i32 23, i32 23, i32 23>
  %174 = add <4 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = shl <4 x i32> %172, <i32 23, i32 23, i32 23, i32 23>
  %176 = add <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = bitcast <4 x i32> %174 to <2 x i64>
  %178 = bitcast <4 x i32> %176 to <2 x i64>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fmul <8 x float> %166, %182
  %184 = sub <4 x i32> %168, %171
  %185 = sub <4 x i32> %170, %172
  %186 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %187 = add <4 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %189 = add <4 x i32> %188, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %190 = bitcast <4 x i32> %187 to <2 x i64>
  %191 = bitcast <4 x i32> %189 to <2 x i64>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %183, %195
  %197 = fcmp oeq <8 x float> %113, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %198 = sext <8 x i1> %197 to <8 x i32>
  %199 = and <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %200 = or <4 x i64> %199, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %201 = bitcast <4 x i64> %200 to <8 x float>
  %202 = bitcast <8 x i32> %198 to <8 x float>
  %203 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %196, <8 x float> %201, <8 x float> %202) #8
  %204 = fcmp oeq <8 x float> %113, zeroinitializer
  %205 = sext <8 x i1> %204 to <8 x i32>
  %206 = bitcast <4 x i64> %199 to <8 x float>
  %207 = bitcast <8 x i32> %205 to <8 x float>
  %208 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %203, <8 x float> %206, <8 x float> %207) #8
  ret <8 x float> %208
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %52) #8
  %54 = fmul <8 x float> %53, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %53, <8 x float> %55) #8
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %53, <8 x float> %56) #8
  %58 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %59 = fadd <8 x float> %58, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %60 = fsub <8 x float> %58, %59
  %61 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %60
  %62 = fsub <8 x float> %34, %59
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %65 = fadd <8 x float> %64, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %66
  %68 = fsub <8 x float> %34, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %64
  %71 = fmul <8 x float> %58, %70
  %72 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %71
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %58, <8 x float> %72) #8
  %74 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %70, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %76, <8 x float> %70, <8 x float> %75) #8
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %70, <8 x float> %73) #8
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %77, <8 x float> %78) #8
  %80 = fmul <8 x float> %71, %71
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %80, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %80, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #8
  %83 = fmul <8 x float> %71, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fmul <8 x float> %79, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %85 = fadd <8 x float> %54, %83
  %86 = fsub <8 x float> %54, %85
  %87 = fadd <8 x float> %83, %86
  %88 = fadd <8 x float> %57, %87
  %89 = fadd <8 x float> %84, %88
  %90 = fmul <8 x float> %71, %80
  %91 = fmul <8 x float> %82, %90
  %92 = fadd <8 x float> %85, %91
  %93 = fsub <8 x float> %85, %92
  %94 = fadd <8 x float> %91, %93
  %95 = fadd <8 x float> %94, %89
  %96 = fadd <8 x float> %92, %95
  %97 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = bitcast <8 x i32> %98 to <8 x float>
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %99) #8
  %101 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %102 = bitcast <8 x float> %101 to <4 x i64>
  %103 = fcmp uno <8 x float> %5, zeroinitializer
  %104 = sext <8 x i1> %103 to <8 x i32>
  %105 = bitcast <8 x i32> %104 to <4 x i64>
  %106 = or <4 x i64> %102, %105
  %107 = bitcast <4 x i64> %106 to <8 x float>
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %107) #8
  %109 = fcmp oeq <8 x float> %5, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %111) #8
  ret <8 x float> %112
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_powf8_u10fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %4 = fcmp oeq <8 x float> %3, %1
  %5 = sext <8 x i1> %4 to <8 x i32>
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = bitcast <8 x float> %1 to <4 x i64>
  %8 = and <4 x i64> %7, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %9 = bitcast <4 x i64> %8 to <8 x float>
  %10 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = or <4 x i64> %6, %11
  %13 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %16 = shufflevector <4 x i64> %14, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = and <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = icmp ne <4 x i32> %18, zeroinitializer
  %20 = sext <4 x i1> %19 to <4 x i32>
  %21 = bitcast <4 x i32> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %16 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %24 = icmp ne <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %31 = bitcast <8 x float> %30 to <4 x i64>
  %32 = and <4 x i64> %12, %31
  %33 = and <4 x i64> %32, %29
  %34 = bitcast <8 x float> %0 to <4 x i64>
  %35 = and <4 x i64> %34, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %36, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %38 = bitcast <8 x float> %37 to <4 x i64>
  %39 = fmul <8 x float> %36, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %39, <8 x float> %37) #8
  %41 = fmul <8 x float> %40, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %42 = bitcast <8 x float> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <4 x i32>
  %46 = lshr <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = bitcast <2 x i64> %44 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %49 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %50 = add nsw <4 x i32> %49, <i32 -127, i32 -127, i32 -127, i32 -127>
  %51 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %52 = add nsw <4 x i32> %51, <i32 -127, i32 -127, i32 -127, i32 -127>
  %53 = bitcast <8 x float> %40 to <4 x i64>
  %54 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %55 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %56 = shl nuw nsw <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %57 = shl nuw nsw <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %58 = bitcast <2 x i64> %54 to <4 x i32>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = sub <4 x i32> %59, %56
  %61 = bitcast <2 x i64> %55 to <4 x i32>
  %62 = add <4 x i32> %61, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %63 = sub <4 x i32> %62, %57
  %64 = bitcast <4 x i32> %60 to <2 x i64>
  %65 = bitcast <4 x i32> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = add nsw <4 x i32> %49, <i32 -191, i32 -191, i32 -191, i32 -191>
  %71 = add nsw <4 x i32> %51, <i32 -191, i32 -191, i32 -191, i32 -191>
  %72 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = bitcast <4 x i32> %50 to <16 x i8>
  %75 = bitcast <4 x i32> %70 to <16 x i8>
  %76 = bitcast <2 x i64> %72 to <16 x i8>
  %77 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %74, <16 x i8> %75, <16 x i8> %76) #8
  %78 = bitcast <4 x i32> %52 to <16 x i8>
  %79 = bitcast <4 x i32> %71 to <16 x i8>
  %80 = bitcast <2 x i64> %73 to <16 x i8>
  %81 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %78, <16 x i8> %79, <16 x i8> %80) #8
  %82 = bitcast <16 x i8> %77 to <2 x i64>
  %83 = bitcast <16 x i8> %81 to <2 x i64>
  %84 = fadd <8 x float> %69, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %85 = fadd <8 x float> %84, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %86
  %88 = fsub <8 x float> %69, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fadd <8 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %91 = fadd <8 x float> %90, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = fsub <8 x float> %90, %91
  %93 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %94 = fsub <8 x float> %69, %91
  %95 = fadd <8 x float> %94, %93
  %96 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %90
  %97 = fmul <8 x float> %84, %96
  %98 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %97
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %84, <8 x float> %98) #8
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %90
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %100, <8 x float> %96, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %102 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %95
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %102, <8 x float> %96, <8 x float> %101) #8
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %96, <8 x float> %99) #8
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %103, <8 x float> %104) #8
  %106 = fmul <8 x float> %97, %97
  %107 = fadd <8 x float> %97, %97
  %108 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %106
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %97, <8 x float> %108) #8
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> %105, <8 x float> %109) #8
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>, <8 x float> %106, <8 x float> <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>) #8
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %106, <8 x float> <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>) #8
  %113 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = shufflevector <2 x i64> %83, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <4 x i64> %113, <4 x i64> %114, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %116) #8
  %118 = fmul <8 x float> %117, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %119 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %118
  %120 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %117, <8 x float> %119) #8
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %117, <8 x float> %120) #8
  %122 = fmul <8 x float> %97, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %123 = fmul <8 x float> %105, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %124 = fadd <8 x float> %118, %122
  %125 = fsub <8 x float> %118, %124
  %126 = fadd <8 x float> %122, %125
  %127 = fadd <8 x float> %121, %126
  %128 = fadd <8 x float> %123, %127
  %129 = fmul <8 x float> %97, %106
  %130 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %129
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> %97, <8 x float> %130) #8
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %97, <8 x float> %131) #8
  %133 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> %105, <8 x float> %132) #8
  %134 = fmul <8 x float> %112, %106
  %135 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %134
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> %112, <8 x float> %135) #8
  %137 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %112, <8 x float> %136) #8
  %138 = fadd <8 x float> %134, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %139 = fsub <8 x float> %138, %134
  %140 = fsub <8 x float> %138, %139
  %141 = fsub <8 x float> %134, %140
  %142 = fsub <8 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %139
  %143 = fadd <8 x float> %142, %141
  %144 = fadd <8 x float> %137, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %129, %138
  %147 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %146
  %148 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %129, <8 x float> %138, <8 x float> %147) #8
  %149 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %133, <8 x float> %138, <8 x float> %148) #8
  %150 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %129, <8 x float> %145, <8 x float> %149) #8
  %151 = fadd <8 x float> %124, %146
  %152 = fsub <8 x float> %124, %151
  %153 = fadd <8 x float> %146, %152
  %154 = fadd <8 x float> %128, %153
  %155 = fadd <8 x float> %150, %154
  %156 = fmul <8 x float> %151, %1
  %157 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %156
  %158 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %151, <8 x float> %1, <8 x float> %157) #8
  %159 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %155, <8 x float> %1, <8 x float> %158) #8
  %160 = fadd <8 x float> %156, %159
  %161 = fmul <8 x float> %160, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %162 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %161) #8
  %163 = bitcast <8 x i32> %162 to <4 x i64>
  %164 = shufflevector <4 x i64> %163, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %165 = shufflevector <4 x i64> %163, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %166 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %162) #8
  %167 = fmul <8 x float> %166, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %168 = fadd <8 x float> %156, %167
  %169 = fsub <8 x float> %168, %156
  %170 = fsub <8 x float> %168, %169
  %171 = fsub <8 x float> %156, %170
  %172 = fsub <8 x float> %167, %169
  %173 = fadd <8 x float> %172, %171
  %174 = fadd <8 x float> %159, %173
  %175 = fmul <8 x float> %166, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %176 = fadd <8 x float> %175, %168
  %177 = fsub <8 x float> %176, %168
  %178 = fsub <8 x float> %176, %177
  %179 = fsub <8 x float> %168, %178
  %180 = fsub <8 x float> %175, %177
  %181 = fadd <8 x float> %180, %179
  %182 = fadd <8 x float> %181, %174
  %183 = fadd <8 x float> %176, %182
  %184 = fsub <8 x float> %176, %183
  %185 = fadd <8 x float> %182, %184
  %186 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>, <8 x float> %183, <8 x float> <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>) #8
  %187 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %186, <8 x float> %183, <8 x float> <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>) #8
  %188 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %187, <8 x float> %183, <8 x float> <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>) #8
  %189 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %188, <8 x float> %183, <8 x float> <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>) #8
  %190 = fmul <8 x float> %183, %183
  %191 = fadd <8 x float> %183, %183
  %192 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %190
  %193 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %183, <8 x float> %183, <8 x float> %192) #8
  %194 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %191, <8 x float> %185, <8 x float> %193) #8
  %195 = fmul <8 x float> %189, %190
  %196 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %195
  %197 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %190, <8 x float> %189, <8 x float> %196) #8
  %198 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %194, <8 x float> %189, <8 x float> %197) #8
  %199 = fadd <8 x float> %183, %195
  %200 = fsub <8 x float> %183, %199
  %201 = fadd <8 x float> %195, %200
  %202 = fadd <8 x float> %185, %201
  %203 = fadd <8 x float> %198, %202
  %204 = fadd <8 x float> %199, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %205 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %204
  %206 = fadd <8 x float> %199, %205
  %207 = fadd <8 x float> %206, %203
  %208 = fadd <8 x float> %204, %207
  %209 = bitcast <2 x i64> %164 to <4 x i32>
  %210 = ashr <4 x i32> %209, <i32 31, i32 31, i32 31, i32 31>
  %211 = bitcast <2 x i64> %165 to <4 x i32>
  %212 = ashr <4 x i32> %211, <i32 31, i32 31, i32 31, i32 31>
  %213 = add <4 x i32> %210, %209
  %214 = add <4 x i32> %212, %211
  %215 = ashr <4 x i32> %213, <i32 6, i32 6, i32 6, i32 6>
  %216 = ashr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %217 = sub nsw <4 x i32> %215, %210
  %218 = sub nsw <4 x i32> %216, %212
  %219 = shl nsw <4 x i32> %217, <i32 4, i32 4, i32 4, i32 4>
  %220 = shl nsw <4 x i32> %218, <i32 4, i32 4, i32 4, i32 4>
  %221 = shl <4 x i32> %217, <i32 6, i32 6, i32 6, i32 6>
  %222 = shl <4 x i32> %218, <i32 6, i32 6, i32 6, i32 6>
  %223 = sub <4 x i32> %209, %221
  %224 = sub <4 x i32> %211, %222
  %225 = add nsw <4 x i32> %219, <i32 127, i32 127, i32 127, i32 127>
  %226 = add nsw <4 x i32> %220, <i32 127, i32 127, i32 127, i32 127>
  %227 = icmp sgt <4 x i32> %217, <i32 -8, i32 -8, i32 -8, i32 -8>
  %228 = icmp sgt <4 x i32> %218, <i32 -8, i32 -8, i32 -8, i32 -8>
  %229 = select <4 x i1> %227, <4 x i32> %225, <4 x i32> zeroinitializer
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = select <4 x i1> %228, <4 x i32> %226, <4 x i32> zeroinitializer
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = icmp sgt <4 x i32> %229, <i32 255, i32 255, i32 255, i32 255>
  %234 = sext <4 x i1> %233 to <4 x i32>
  %235 = icmp sgt <4 x i32> %231, <i32 255, i32 255, i32 255, i32 255>
  %236 = sext <4 x i1> %235 to <4 x i32>
  %237 = bitcast <4 x i32> %234 to <2 x i64>
  %238 = bitcast <4 x i32> %236 to <2 x i64>
  %239 = xor <2 x i64> %237, <i64 -1, i64 -1>
  %240 = and <2 x i64> %239, %230
  %241 = xor <2 x i64> %238, <i64 -1, i64 -1>
  %242 = and <2 x i64> %241, %232
  %243 = and <2 x i64> %237, <i64 1095216660735, i64 1095216660735>
  %244 = and <2 x i64> %238, <i64 1095216660735, i64 1095216660735>
  %245 = or <2 x i64> %243, %240
  %246 = or <2 x i64> %244, %242
  %247 = bitcast <2 x i64> %245 to <4 x i32>
  %248 = shl <4 x i32> %247, <i32 23, i32 23, i32 23, i32 23>
  %249 = bitcast <2 x i64> %246 to <4 x i32>
  %250 = shl <4 x i32> %249, <i32 23, i32 23, i32 23, i32 23>
  %251 = bitcast <4 x i32> %248 to <2 x i64>
  %252 = bitcast <4 x i32> %250 to <2 x i64>
  %253 = shufflevector <2 x i64> %251, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = shufflevector <2 x i64> %252, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %255 = shufflevector <4 x i64> %253, <4 x i64> %254, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %256 = bitcast <4 x i64> %255 to <8 x float>
  %257 = fmul <8 x float> %208, %256
  %258 = fmul <8 x float> %257, %256
  %259 = fmul <8 x float> %258, %256
  %260 = fmul <8 x float> %259, %256
  %261 = shl <4 x i32> %223, <i32 23, i32 23, i32 23, i32 23>
  %262 = add <4 x i32> %261, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %263 = shl <4 x i32> %224, <i32 23, i32 23, i32 23, i32 23>
  %264 = add <4 x i32> %263, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %265 = bitcast <4 x i32> %262 to <2 x i64>
  %266 = bitcast <4 x i32> %264 to <2 x i64>
  %267 = shufflevector <2 x i64> %265, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %268 = shufflevector <2 x i64> %266, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %269 = shufflevector <4 x i64> %267, <4 x i64> %268, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %270 = bitcast <4 x i64> %269 to <8 x float>
  %271 = fmul <8 x float> %260, %270
  %272 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %156, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %273 = bitcast <8 x float> %272 to <4 x i64>
  %274 = bitcast <8 x float> %271 to <4 x i64>
  %275 = xor <4 x i64> %273, <i64 -1, i64 -1, i64 -1, i64 -1>
  %276 = and <4 x i64> %274, %275
  %277 = bitcast <4 x i64> %276 to <8 x float>
  %278 = fcmp uno <8 x float> %277, zeroinitializer
  %279 = sext <8 x i1> %278 to <8 x i32>
  %280 = bitcast <8 x i32> %279 to <8 x float>
  %281 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %277, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %280) #8
  %282 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 30) #8
  %283 = bitcast <4 x i64> %33 to <8 x float>
  %284 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %283) #8
  %285 = bitcast <4 x i64> %12 to <8 x float>
  %286 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %284, <8 x float> %285) #8
  %287 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %286, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %282) #8
  %288 = fmul <8 x float> %281, %287
  %289 = fadd <8 x float> %36, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %290 = bitcast <8 x float> %289 to <4 x i64>
  %291 = and <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %292 = xor <4 x i64> %291, %290
  %293 = bitcast <4 x i64> %292 to <8 x float>
  %294 = fcmp oeq <8 x float> %9, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %295 = sext <8 x i1> %294 to <8 x i32>
  %296 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %293, <8 x float> zeroinitializer, i8 17) #8
  %297 = bitcast <8 x float> %296 to <4 x i64>
  %298 = fcmp oeq <8 x float> %293, zeroinitializer
  %299 = sext <8 x i1> %298 to <8 x i32>
  %300 = bitcast <8 x i32> %299 to <8 x float>
  %301 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %300) #8
  %302 = bitcast <8 x float> %301 to <4 x i64>
  %303 = xor <4 x i64> %297, <i64 -1, i64 -1, i64 -1, i64 -1>
  %304 = and <4 x i64> %302, %303
  %305 = bitcast <4 x i64> %304 to <8 x float>
  %306 = bitcast <8 x i32> %295 to <8 x float>
  %307 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %288, <8 x float> %305, <8 x float> %306) #8
  %308 = fcmp oeq <8 x float> %36, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %309 = fcmp oeq <8 x float> %0, zeroinitializer
  %310 = sext <8 x i1> %309 to <8 x i32>
  %311 = or <8 x i1> %308, %309
  %312 = sext <8 x i1> %311 to <8 x i32>
  %313 = and <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %314 = or <4 x i64> %313, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %315 = bitcast <4 x i64> %314 to <8 x float>
  %316 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %315, <8 x float> %283) #8
  %317 = xor <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = bitcast <8 x i32> %310 to <8 x float>
  %320 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %318, <8 x float> %319) #8
  %321 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %320, <8 x float> zeroinitializer, i8 17) #8
  %322 = bitcast <8 x float> %321 to <4 x i64>
  %323 = and <4 x i64> %322, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %324 = xor <4 x i64> %323, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %325 = bitcast <4 x i64> %324 to <8 x float>
  %326 = fmul <8 x float> %316, %325
  %327 = bitcast <8 x i32> %312 to <8 x float>
  %328 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %307, <8 x float> %326, <8 x float> %327) #8
  %329 = fcmp uno <8 x float> %1, %0
  %330 = sext <8 x i1> %329 to <8 x i32>
  %331 = bitcast <8 x i32> %330 to <4 x i64>
  %332 = bitcast <8 x float> %328 to <4 x i64>
  %333 = or <4 x i64> %332, %331
  %334 = bitcast <4 x i64> %333 to <8 x float>
  %335 = fcmp oeq <8 x float> %1, zeroinitializer
  %336 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %337 = or <8 x i1> %335, %336
  %338 = sext <8 x i1> %337 to <8 x i32>
  %339 = bitcast <8 x i32> %338 to <8 x float>
  %340 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %334, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %339) #8
  ret <8 x float> %340
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastpowf8_u3500fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = fmul <8 x float> %9, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %12 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = bitcast <2 x i64> %13 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %18 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %19 = add nsw <4 x i32> %18, <i32 -127, i32 -127, i32 -127, i32 -127>
  %20 = and <4 x i32> %17, <i32 255, i32 255, i32 255, i32 255>
  %21 = add nsw <4 x i32> %20, <i32 -127, i32 -127, i32 -127, i32 -127>
  %22 = bitcast <8 x float> %9 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shl nuw nsw <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %26 = shl nuw nsw <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %27 = bitcast <2 x i64> %23 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = sub <4 x i32> %28, %25
  %30 = bitcast <2 x i64> %24 to <4 x i32>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = sub <4 x i32> %31, %26
  %33 = bitcast <4 x i32> %29 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = add nsw <4 x i32> %18, <i32 -191, i32 -191, i32 -191, i32 -191>
  %40 = add nsw <4 x i32> %20, <i32 -191, i32 -191, i32 -191, i32 -191>
  %41 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <4 x i32> %19 to <16 x i8>
  %44 = bitcast <4 x i32> %39 to <16 x i8>
  %45 = bitcast <2 x i64> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <4 x i32> %21 to <16 x i8>
  %48 = bitcast <4 x i32> %40 to <16 x i8>
  %49 = bitcast <2 x i64> %42 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %47, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <16 x i8> %46 to <2 x i64>
  %52 = bitcast <16 x i8> %50 to <2 x i64>
  %53 = fadd <8 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fdiv <8 x float> %53, %54
  %56 = fmul <8 x float> %55, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %56, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %56, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %56, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %56, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #8
  %61 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %64) #8
  %66 = fmul <8 x float> %65, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %60, <8 x float> %66) #8
  %68 = fmul <8 x float> %67, %1
  %69 = fmul <8 x float> %68, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %70 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %69) #8
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %70) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %68) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %75) #8
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %76, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %76, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %76, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %76, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %80, <8 x float> %76, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %82 = fmul <8 x float> %76, %76
  %83 = fadd <8 x float> %76, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %81, <8 x float> %83) #8
  %85 = bitcast <2 x i64> %72 to <4 x i32>
  %86 = ashr <4 x i32> %85, <i32 1, i32 1, i32 1, i32 1>
  %87 = bitcast <2 x i64> %73 to <4 x i32>
  %88 = ashr <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = shl <4 x i32> %86, <i32 23, i32 23, i32 23, i32 23>
  %90 = add <4 x i32> %89, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %91 = shl <4 x i32> %88, <i32 23, i32 23, i32 23, i32 23>
  %92 = add <4 x i32> %91, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %93 = bitcast <4 x i32> %90 to <2 x i64>
  %94 = bitcast <4 x i32> %92 to <2 x i64>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <4 x i64> %95, <4 x i64> %96, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %98 = bitcast <4 x i64> %97 to <8 x float>
  %99 = fmul <8 x float> %84, %98
  %100 = sub <4 x i32> %85, %86
  %101 = sub <4 x i32> %87, %88
  %102 = shl <4 x i32> %100, <i32 23, i32 23, i32 23, i32 23>
  %103 = add <4 x i32> %102, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %104 = shl <4 x i32> %101, <i32 23, i32 23, i32 23, i32 23>
  %105 = add <4 x i32> %104, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %99, %111
  %113 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %68, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %114 = bitcast <8 x float> %113 to <4 x i64>
  %115 = bitcast <8 x float> %112 to <4 x i64>
  %116 = xor <4 x i64> %114, <i64 -1, i64 -1, i64 -1, i64 -1>
  %117 = and <4 x i64> %115, %116
  %118 = bitcast <4 x i64> %117 to <8 x float>
  %119 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %120 = fcmp oeq <8 x float> %119, %1
  %121 = sext <8 x i1> %120 to <8 x i32>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = bitcast <8 x float> %1 to <4 x i64>
  %124 = and <4 x i64> %123, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %125 = bitcast <4 x i64> %124 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %125, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = or <4 x i64> %122, %127
  %129 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = and <4 x i32> %133, <i32 1, i32 1, i32 1, i32 1>
  %135 = icmp ne <4 x i32> %134, zeroinitializer
  %136 = sext <4 x i1> %135 to <4 x i32>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = bitcast <2 x i64> %132 to <4 x i32>
  %139 = and <4 x i32> %138, <i32 1, i32 1, i32 1, i32 1>
  %140 = icmp ne <4 x i32> %139, zeroinitializer
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <2 x i64>
  %143 = shufflevector <2 x i64> %137, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %144 = shufflevector <2 x i64> %142, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <4 x i64> %143, <4 x i64> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %146 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %125, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %147 = bitcast <8 x float> %146 to <4 x i64>
  %148 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %149 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %150 = bitcast <2 x i64> %148 to <4 x i32>
  %151 = ashr <4 x i32> %150, <i32 31, i32 31, i32 31, i32 31>
  %152 = bitcast <4 x i32> %151 to <2 x i64>
  %153 = bitcast <2 x i64> %149 to <4 x i32>
  %154 = ashr <4 x i32> %153, <i32 31, i32 31, i32 31, i32 31>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %152, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = and <4 x i64> %128, %158
  %160 = and <4 x i64> %159, %147
  %161 = and <4 x i64> %160, %145
  %162 = xor <4 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = bitcast <4 x i64> %161 to <8 x float>
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %163, <8 x float> %164) #8
  %166 = fcmp oeq <8 x float> %0, zeroinitializer
  %167 = sext <8 x i1> %166 to <8 x i32>
  %168 = bitcast <8 x i32> %167 to <8 x float>
  %169 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %165, <8 x float> zeroinitializer, <8 x float> %168) #8
  %170 = fcmp oeq <8 x float> %1, zeroinitializer
  %171 = sext <8 x i1> %170 to <8 x i32>
  %172 = bitcast <8 x i32> %171 to <8 x float>
  %173 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %169, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %172) #8
  ret <8 x float> %173
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = fsub <8 x float> %113, %115
  %122 = fsub <8 x float> %113, %121
  %123 = fsub <8 x float> %122, %115
  %124 = fadd <8 x float> %123, %114
  %125 = fsub <8 x float> %124, %120
  %126 = fadd <8 x float> %121, %125
  %127 = fmul <8 x float> %126, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %128 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %129 = bitcast <8 x float> %128 to <4 x i64>
  %130 = fcmp uno <8 x float> %127, zeroinitializer
  %131 = sext <8 x i1> %130 to <8 x i32>
  %132 = bitcast <8 x i32> %131 to <4 x i64>
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %134) #8
  %136 = bitcast <8 x float> %135 to <4 x i64>
  %137 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = xor <4 x i64> %137, %136
  %139 = fcmp uno <8 x float> %0, zeroinitializer
  %140 = sext <8 x i1> %139 to <8 x i32>
  %141 = bitcast <8 x i32> %140 to <4 x i64>
  %142 = or <4 x i64> %138, %141
  %143 = bitcast <4 x i64> %142 to <8 x float>
  ret <8 x float> %143
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = fadd <8 x float> %115, %113
  %122 = fsub <8 x float> %113, %121
  %123 = fadd <8 x float> %115, %122
  %124 = fadd <8 x float> %123, %114
  %125 = fadd <8 x float> %120, %124
  %126 = fadd <8 x float> %121, %125
  %127 = fmul <8 x float> %126, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %128 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %129 = bitcast <8 x float> %128 to <4 x i64>
  %130 = fcmp uno <8 x float> %127, zeroinitializer
  %131 = sext <8 x i1> %130 to <8 x i32>
  %132 = bitcast <8 x i32> %131 to <4 x i64>
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %134) #8
  %136 = fcmp uno <8 x float> %0, zeroinitializer
  %137 = sext <8 x i1> %136 to <8 x i32>
  %138 = bitcast <8 x i32> %137 to <4 x i64>
  %139 = bitcast <8 x float> %135 to <4 x i64>
  %140 = or <4 x i64> %139, %138
  %141 = bitcast <4 x i64> %140 to <8 x float>
  ret <8 x float> %141
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = bitcast <8 x float> %115 to <4 x i64>
  %122 = xor <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <8 x float> %120 to <4 x i64>
  %124 = xor <4 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <4 x i64> %122 to <8 x float>
  %126 = bitcast <4 x i64> %124 to <8 x float>
  %127 = fadd <8 x float> %113, %125
  %128 = fsub <8 x float> %113, %127
  %129 = fadd <8 x float> %128, %125
  %130 = fadd <8 x float> %129, %114
  %131 = fadd <8 x float> %130, %126
  %132 = fadd <8 x float> %115, %113
  %133 = fsub <8 x float> %113, %132
  %134 = fadd <8 x float> %115, %133
  %135 = fadd <8 x float> %134, %114
  %136 = fadd <8 x float> %120, %135
  %137 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %138 = fmul <8 x float> %137, %127
  %139 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %138
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %137, <8 x float> %127, <8 x float> %139) #8
  %141 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %132
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %137, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %143 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %136
  %144 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %143, <8 x float> %137, <8 x float> %142) #8
  %145 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %137, <8 x float> %140) #8
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %144, <8 x float> %145) #8
  %147 = fadd <8 x float> %146, %138
  %148 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %149 = bitcast <8 x float> %148 to <4 x i64>
  %150 = fcmp uno <8 x float> %147, zeroinitializer
  %151 = sext <8 x i1> %150 to <8 x i32>
  %152 = bitcast <8 x i32> %151 to <4 x i64>
  %153 = or <4 x i64> %152, %149
  %154 = bitcast <4 x i64> %153 to <8 x float>
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %147, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %154) #8
  %156 = bitcast <8 x float> %155 to <4 x i64>
  %157 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %158 = xor <4 x i64> %157, %156
  %159 = fcmp uno <8 x float> %0, zeroinitializer
  %160 = sext <8 x i1> %159 to <8 x i32>
  %161 = bitcast <8 x i32> %160 to <4 x i64>
  %162 = or <4 x i64> %158, %161
  %163 = bitcast <4 x i64> %162 to <8 x float>
  ret <8 x float> %163
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %11) #8
  %13 = fmul <8 x float> %12, %12
  %14 = fmul <8 x float> %13, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %16, <8 x float> %17) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %15, <8 x float> %18) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %19, <8 x float> %12) #8
  %21 = bitcast <2 x i64> %8 to <4 x i32>
  %22 = icmp eq <4 x i32> %21, zeroinitializer
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %9 to <4 x i32>
  %26 = icmp eq <4 x i32> %25, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <4 x i64> %29, <4 x i64> %30, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %34 = ashr <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %35 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fmul <8 x float> %32, %44
  %46 = sub <4 x i32> %21, %33
  %47 = sub <4 x i32> %25, %34
  %48 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %51 = add <4 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <4 x i32> %49 to <2 x i64>
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x i64> %54, <4 x i64> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = bitcast <4 x i64> %56 to <8 x float>
  %58 = fmul <8 x float> %45, %57
  %59 = fadd <8 x float> %58, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %60 = bitcast <4 x i64> %31 to <8 x float>
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> %20, <8 x float> %60) #8
  %62 = fadd <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %63 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %64 = fdiv <8 x float> %62, %63
  %65 = fmul <8 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %66 = fmul <8 x float> %65, %64
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = fcmp uno <8 x float> %66, zeroinitializer
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = or <4 x i64> %71, %68
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %73) #8
  %75 = bitcast <8 x float> %74 to <4 x i64>
  %76 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %77 = xor <4 x i64> %76, %75
  %78 = fcmp uno <8 x float> %0, zeroinitializer
  %79 = sext <8 x i1> %78 to <8 x i32>
  %80 = bitcast <8 x i32> %79 to <4 x i64>
  %81 = or <4 x i64> %77, %80
  %82 = bitcast <4 x i64> %81 to <8 x float>
  ret <8 x float> %82
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %11) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %12, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %12, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %12, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %12, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %12, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %18 = fmul <8 x float> %12, %12
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %12) #8
  %20 = fadd <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = bitcast <2 x i64> %8 to <4 x i32>
  %22 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = bitcast <2 x i64> %9 to <4 x i32>
  %24 = ashr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %26 = add <4 x i32> %25, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %26 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = fmul <8 x float> %20, %34
  %36 = sub <4 x i32> %21, %22
  %37 = sub <4 x i32> %23, %24
  %38 = shl <4 x i32> %36, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = shl <4 x i32> %37, <i32 23, i32 23, i32 23, i32 23>
  %41 = add <4 x i32> %40, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %42 = bitcast <4 x i32> %39 to <2 x i64>
  %43 = bitcast <4 x i32> %41 to <2 x i64>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x i64> %44, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x i64> %46 to <8 x float>
  %48 = fmul <8 x float> %35, %47
  %49 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %50 = bitcast <8 x float> %49 to <4 x i64>
  %51 = bitcast <8 x float> %48 to <4 x i64>
  %52 = xor <4 x i64> %50, <i64 -1, i64 -1, i64 -1, i64 -1>
  %53 = and <4 x i64> %51, %52
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #8
  %56 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %54, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %55) #8
  %57 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %56, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = fcmp uno <8 x float> %58, zeroinitializer
  %62 = sext <8 x i1> %61 to <8 x i32>
  %63 = bitcast <8 x i32> %62 to <4 x i64>
  %64 = or <4 x i64> %63, %60
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %58, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %65) #8
  %67 = fcmp uno <8 x float> %0, zeroinitializer
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = bitcast <8 x float> %66 to <4 x i64>
  %71 = or <4 x i64> %70, %69
  %72 = bitcast <4 x i64> %71 to <8 x float>
  ret <8 x float> %72
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %5) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %12) #8
  %14 = fmul <8 x float> %13, %13
  %15 = fmul <8 x float> %14, %14
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %17, <8 x float> %18) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %19) #8
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %20, <8 x float> %13) #8
  %22 = bitcast <2 x i64> %9 to <4 x i32>
  %23 = icmp eq <4 x i32> %22, zeroinitializer
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %10 to <4 x i32>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %25, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = fadd <8 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %34 = ashr <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %33, %45
  %47 = sub <4 x i32> %22, %34
  %48 = sub <4 x i32> %26, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = fadd <8 x float> %59, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %61 = bitcast <4 x i64> %32 to <8 x float>
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %60, <8 x float> %21, <8 x float> %61) #8
  %63 = fadd <8 x float> %62, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %64 = fdiv <8 x float> %62, %63
  %65 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %66 = bitcast <8 x float> %65 to <4 x i64>
  %67 = fcmp uno <8 x float> %64, zeroinitializer
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = or <4 x i64> %69, %66
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %71) #8
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = xor <4 x i64> %74, %73
  %76 = fcmp uno <8 x float> %0, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <4 x i64>
  %79 = or <4 x i64> %75, %78
  %80 = bitcast <4 x i64> %79 to <8 x float>
  ret <8 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #8
  %6 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %7 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %0
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %9 = fmul <8 x float> %6, %8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %9, <8 x float> %5) #8
  %12 = fmul <8 x float> %10, %10
  %13 = fadd <8 x float> %10, %10
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %14) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %11, <8 x float> %15) #8
  %17 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = fsub <8 x float> %17, %12
  %19 = fsub <8 x float> %17, %18
  %20 = fsub <8 x float> %12, %19
  %21 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %18
  %22 = fadd <8 x float> %21, %20
  %23 = fadd <8 x float> %16, %22
  %24 = fadd <8 x float> %17, %23
  %25 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %24) #8
  %26 = fmul <8 x float> %25, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %25, <8 x float> %27) #8
  %29 = fadd <8 x float> %17, %26
  %30 = fsub <8 x float> %29, %17
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %17, %31
  %33 = fsub <8 x float> %26, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, %23
  %36 = fadd <8 x float> %35, %34
  %37 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %40 = fmul <8 x float> %37, %39
  %41 = fmul <8 x float> %37, %29
  %42 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %41
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %37, <8 x float> %42) #8
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %37, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %40, <8 x float> %44) #8
  %46 = fmul <8 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = fmul <8 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fmul <8 x float> %46, %4
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %48
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %4, <8 x float> %49) #8
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %50) #8
  %52 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %48, <8 x float> %5) #8
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %47, <8 x float> %51, <8 x float> %5) #8
  %54 = fadd <8 x float> %52, %0
  %55 = fsub <8 x float> %54, %52
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %52, %56
  %58 = fsub <8 x float> %0, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = fadd <8 x float> %54, %60
  %62 = fsub <8 x float> %54, %61
  %63 = fadd <8 x float> %60, %62
  %64 = fmul <8 x float> %61, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %65 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %64, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %66 = bitcast <8 x float> %65 to <4 x i64>
  %67 = fmul <8 x float> %64, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> %67, <8 x float> %65) #8
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = shufflevector <4 x i64> %69, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %71 = shufflevector <4 x i64> %69, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %72 = bitcast <2 x i64> %70 to <4 x i32>
  %73 = lshr <4 x i32> %72, <i32 23, i32 23, i32 23, i32 23>
  %74 = bitcast <2 x i64> %71 to <4 x i32>
  %75 = lshr <4 x i32> %74, <i32 23, i32 23, i32 23, i32 23>
  %76 = shufflevector <4 x i64> %66, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %66, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <16 x i8>
  %79 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %78) #8
  %80 = bitcast <2 x i64> %77 to <16 x i8>
  %81 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %80) #8
  %82 = and <4 x i32> %73, <i32 255, i32 255, i32 255, i32 255>
  %83 = bitcast <16 x i8> %79 to <4 x i32>
  %84 = sub <4 x i32> %82, %83
  %85 = and <4 x i32> %75, <i32 255, i32 255, i32 255, i32 255>
  %86 = bitcast <16 x i8> %81 to <4 x i32>
  %87 = sub <4 x i32> %85, %86
  %88 = bitcast <4 x i32> %84 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shl <4 x i32> %84, <i32 23, i32 23, i32 23, i32 23>
  %91 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %90
  %92 = shl <4 x i32> %87, <i32 23, i32 23, i32 23, i32 23>
  %93 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %92
  %94 = bitcast <4 x i32> %91 to <2 x i64>
  %95 = bitcast <4 x i32> %93 to <2 x i64>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fmul <8 x float> %61, %99
  %101 = fmul <8 x float> %63, %99
  %102 = fadd <8 x float> %100, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %103 = fsub <8 x float> %102, %100
  %104 = fsub <8 x float> %102, %103
  %105 = fsub <8 x float> %100, %104
  %106 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %103
  %107 = fadd <8 x float> %106, %105
  %108 = fadd <8 x float> %101, %107
  %109 = fadd <8 x float> %100, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %110 = fsub <8 x float> %109, %100
  %111 = fsub <8 x float> %109, %110
  %112 = fsub <8 x float> %100, %111
  %113 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %110
  %114 = fadd <8 x float> %113, %112
  %115 = fadd <8 x float> %101, %114
  %116 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %109
  %117 = fmul <8 x float> %102, %116
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %117
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %102, <8 x float> %118) #8
  %120 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %109
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %120, <8 x float> %116, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %122 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %115
  %123 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %122, <8 x float> %116, <8 x float> %121) #8
  %124 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %116, <8 x float> %119) #8
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %123, <8 x float> %124) #8
  %126 = fmul <8 x float> %117, %117
  %127 = fadd <8 x float> %117, %117
  %128 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %126
  %129 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %117, <8 x float> %128) #8
  %130 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %125, <8 x float> %129) #8
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %126, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %126, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %133 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %132, <8 x float> %126, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %134 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %135 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <4 x i64> %134, <4 x i64> %135, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %137 = bitcast <4 x i64> %136 to <8 x i32>
  %138 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %137) #8
  %139 = fmul <8 x float> %138, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %140 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %139
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %138, <8 x float> %140) #8
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %138, <8 x float> %141) #8
  %143 = fmul <8 x float> %117, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %144 = fmul <8 x float> %125, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %145 = fadd <8 x float> %139, %143
  %146 = fsub <8 x float> %139, %145
  %147 = fadd <8 x float> %143, %146
  %148 = fadd <8 x float> %142, %147
  %149 = fadd <8 x float> %144, %148
  %150 = fmul <8 x float> %117, %126
  %151 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %150
  %152 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %126, <8 x float> %117, <8 x float> %151) #8
  %153 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %130, <8 x float> %117, <8 x float> %152) #8
  %154 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %126, <8 x float> %125, <8 x float> %153) #8
  %155 = fmul <8 x float> %133, %150
  %156 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %155
  %157 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %150, <8 x float> %133, <8 x float> %156) #8
  %158 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %154, <8 x float> %133, <8 x float> %157) #8
  %159 = fadd <8 x float> %145, %155
  %160 = fsub <8 x float> %145, %159
  %161 = fadd <8 x float> %155, %160
  %162 = fadd <8 x float> %161, %149
  %163 = fadd <8 x float> %158, %162
  %164 = fadd <8 x float> %159, %163
  %165 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #8
  %166 = bitcast <8 x float> %165 to <4 x i64>
  %167 = fcmp uno <8 x float> %164, zeroinitializer
  %168 = sext <8 x i1> %167 to <8 x i32>
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = or <4 x i64> %169, %166
  %171 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = or <4 x i64> %171, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %173 = bitcast <4 x i64> %172 to <8 x float>
  %174 = bitcast <4 x i64> %170 to <8 x float>
  %175 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %164, <8 x float> %173, <8 x float> %174) #8
  %176 = fcmp uno <8 x float> %0, zeroinitializer
  %177 = sext <8 x i1> %176 to <8 x i32>
  %178 = bitcast <8 x i32> %177 to <4 x i64>
  %179 = bitcast <8 x float> %175 to <4 x i64>
  %180 = or <4 x i64> %179, %178
  %181 = bitcast <4 x i64> %180 to <8 x float>
  %182 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %183 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %184 = bitcast <2 x i64> %182 to <4 x i32>
  %185 = icmp eq <4 x i32> %184, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %186 = sext <4 x i1> %185 to <4 x i32>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = bitcast <2 x i64> %183 to <4 x i32>
  %189 = icmp eq <4 x i32> %188, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %190 = sext <4 x i1> %189 to <4 x i32>
  %191 = bitcast <4 x i32> %190 to <2 x i64>
  %192 = shufflevector <2 x i64> %187, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %181, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %195) #8
  ret <8 x float> %196
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acoshf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <8 x float> %2, %0
  %4 = fsub <8 x float> %2, %3
  %5 = fsub <8 x float> %0, %4
  %6 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <8 x float> %6, %5
  %8 = fadd <8 x float> %2, %7
  %9 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %8) #8
  %10 = fmul <8 x float> %9, %9
  %11 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %9, <8 x float> %11) #8
  %13 = fadd <8 x float> %2, %10
  %14 = fsub <8 x float> %13, %2
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %2, %15
  %17 = fsub <8 x float> %10, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %7, %12
  %20 = fadd <8 x float> %19, %18
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %9
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %13
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %21, <8 x float> %26) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %24, <8 x float> %28) #8
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fadd <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = fsub <8 x float> %32, %0
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %0, %34
  %36 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %32, %37
  %39 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %38) #8
  %40 = fmul <8 x float> %39, %39
  %41 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %40
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %39, <8 x float> %41) #8
  %43 = fadd <8 x float> %32, %40
  %44 = fsub <8 x float> %43, %32
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> %32, %45
  %47 = fsub <8 x float> %40, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %37, %42
  %50 = fadd <8 x float> %49, %48
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %52 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %51, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %54 = fmul <8 x float> %51, %53
  %55 = fmul <8 x float> %51, %43
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %51, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %51, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %54, <8 x float> %58) #8
  %60 = fmul <8 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %59, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %62 = fmul <8 x float> %30, %60
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %60, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %60, <8 x float> %64) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %61, <8 x float> %65) #8
  %67 = fadd <8 x float> %62, %0
  %68 = fsub <8 x float> %67, %62
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %62, %69
  %71 = fsub <8 x float> %0, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %72
  %74 = fmul <8 x float> %67, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %75 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %74, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %76 = bitcast <8 x float> %75 to <4 x i64>
  %77 = fmul <8 x float> %74, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> %77, <8 x float> %75) #8
  %79 = bitcast <8 x float> %78 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %82 = bitcast <2 x i64> %80 to <4 x i32>
  %83 = lshr <4 x i32> %82, <i32 23, i32 23, i32 23, i32 23>
  %84 = bitcast <2 x i64> %81 to <4 x i32>
  %85 = lshr <4 x i32> %84, <i32 23, i32 23, i32 23, i32 23>
  %86 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %87 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %88 = bitcast <2 x i64> %86 to <16 x i8>
  %89 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %88) #8
  %90 = bitcast <2 x i64> %87 to <16 x i8>
  %91 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %90) #8
  %92 = and <4 x i32> %83, <i32 255, i32 255, i32 255, i32 255>
  %93 = bitcast <16 x i8> %89 to <4 x i32>
  %94 = sub <4 x i32> %92, %93
  %95 = and <4 x i32> %85, <i32 255, i32 255, i32 255, i32 255>
  %96 = bitcast <16 x i8> %91 to <4 x i32>
  %97 = sub <4 x i32> %95, %96
  %98 = bitcast <4 x i32> %94 to <2 x i64>
  %99 = bitcast <4 x i32> %97 to <2 x i64>
  %100 = shl <4 x i32> %94, <i32 23, i32 23, i32 23, i32 23>
  %101 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %100
  %102 = shl <4 x i32> %97, <i32 23, i32 23, i32 23, i32 23>
  %103 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %102
  %104 = bitcast <4 x i32> %101 to <2 x i64>
  %105 = bitcast <4 x i32> %103 to <2 x i64>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = fmul <8 x float> %67, %109
  %111 = fmul <8 x float> %73, %109
  %112 = fadd <8 x float> %110, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %113 = fsub <8 x float> %112, %110
  %114 = fsub <8 x float> %112, %113
  %115 = fsub <8 x float> %110, %114
  %116 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %113
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %111, %117
  %119 = fadd <8 x float> %110, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %120 = fsub <8 x float> %119, %110
  %121 = fsub <8 x float> %119, %120
  %122 = fsub <8 x float> %110, %121
  %123 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %120
  %124 = fadd <8 x float> %123, %122
  %125 = fadd <8 x float> %111, %124
  %126 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %119
  %127 = fmul <8 x float> %112, %126
  %128 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %127
  %129 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %126, <8 x float> %112, <8 x float> %128) #8
  %130 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %119
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %130, <8 x float> %126, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %132 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %125
  %133 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %132, <8 x float> %126, <8 x float> %131) #8
  %134 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %126, <8 x float> %129) #8
  %135 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %133, <8 x float> %134) #8
  %136 = fmul <8 x float> %127, %127
  %137 = fadd <8 x float> %127, %127
  %138 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %136
  %139 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %127, <8 x float> %138) #8
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %137, <8 x float> %135, <8 x float> %139) #8
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %136, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %136, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %143 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %136, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %144 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <2 x i64> %99, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %146 = shufflevector <4 x i64> %144, <4 x i64> %145, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %147 = bitcast <4 x i64> %146 to <8 x i32>
  %148 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %147) #8
  %149 = fmul <8 x float> %148, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %150 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %149
  %151 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %148, <8 x float> %150) #8
  %152 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %148, <8 x float> %151) #8
  %153 = fmul <8 x float> %127, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %154 = fmul <8 x float> %135, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %155 = fadd <8 x float> %149, %153
  %156 = fsub <8 x float> %149, %155
  %157 = fadd <8 x float> %153, %156
  %158 = fadd <8 x float> %152, %157
  %159 = fadd <8 x float> %154, %158
  %160 = fmul <8 x float> %127, %136
  %161 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %160
  %162 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %136, <8 x float> %127, <8 x float> %161) #8
  %163 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %127, <8 x float> %162) #8
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %136, <8 x float> %135, <8 x float> %163) #8
  %165 = fmul <8 x float> %143, %160
  %166 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %165
  %167 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %160, <8 x float> %143, <8 x float> %166) #8
  %168 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %164, <8 x float> %143, <8 x float> %167) #8
  %169 = fadd <8 x float> %155, %165
  %170 = fsub <8 x float> %155, %169
  %171 = fadd <8 x float> %165, %170
  %172 = fadd <8 x float> %171, %159
  %173 = fadd <8 x float> %168, %172
  %174 = fadd <8 x float> %169, %173
  %175 = bitcast <8 x float> %0 to <4 x i64>
  %176 = and <4 x i64> %175, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %177 = bitcast <4 x i64> %176 to <8 x float>
  %178 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %177, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #8
  %179 = bitcast <8 x float> %178 to <4 x i64>
  %180 = fcmp uno <8 x float> %174, zeroinitializer
  %181 = sext <8 x i1> %180 to <8 x i32>
  %182 = bitcast <8 x i32> %181 to <4 x i64>
  %183 = or <4 x i64> %182, %179
  %184 = bitcast <4 x i64> %183 to <8 x float>
  %185 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %174, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %184) #8
  %186 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %187 = sext <8 x i1> %186 to <8 x i32>
  %188 = bitcast <8 x i32> %187 to <4 x i64>
  %189 = bitcast <8 x float> %185 to <4 x i64>
  %190 = xor <4 x i64> %188, <i64 -1, i64 -1, i64 -1, i64 -1>
  %191 = and <4 x i64> %189, %190
  %192 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #8
  %193 = bitcast <8 x float> %192 to <4 x i64>
  %194 = fcmp uno <8 x float> %0, zeroinitializer
  %195 = sext <8 x i1> %194 to <8 x i32>
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = or <4 x i64> %193, %196
  %198 = or <4 x i64> %197, %191
  %199 = bitcast <4 x i64> %198 to <8 x float>
  ret <8 x float> %199
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <8 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <8 x float> %5, %6
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <8 x float> %4, %6
  %10 = fadd <8 x float> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = fmul <8 x float> %5, %19
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %5, <8 x float> %21) #8
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %18
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %19, <8 x float> %24) #8
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %19, <8 x float> %22) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %26, <8 x float> %27) #8
  %29 = fmul <8 x float> %20, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %29, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %31 = bitcast <8 x float> %30 to <4 x i64>
  %32 = fmul <8 x float> %29, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %32, <8 x float> %30) #8
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = lshr <4 x i32> %37, <i32 23, i32 23, i32 23, i32 23>
  %39 = bitcast <2 x i64> %36 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <2 x i64> %41 to <16 x i8>
  %44 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %43) #8
  %45 = bitcast <2 x i64> %42 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %45) #8
  %47 = and <4 x i32> %38, <i32 255, i32 255, i32 255, i32 255>
  %48 = bitcast <16 x i8> %44 to <4 x i32>
  %49 = sub <4 x i32> %47, %48
  %50 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %51 = bitcast <16 x i8> %46 to <4 x i32>
  %52 = sub <4 x i32> %50, %51
  %53 = bitcast <4 x i32> %49 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shl <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %56 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %55
  %57 = shl <4 x i32> %52, <i32 23, i32 23, i32 23, i32 23>
  %58 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %57
  %59 = bitcast <4 x i32> %56 to <2 x i64>
  %60 = bitcast <4 x i32> %58 to <2 x i64>
  %61 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fmul <8 x float> %20, %64
  %66 = fmul <8 x float> %28, %64
  %67 = fadd <8 x float> %65, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %68 = fsub <8 x float> %67, %65
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %65, %69
  %71 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %72
  %74 = fadd <8 x float> %65, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %75 = fsub <8 x float> %74, %65
  %76 = fsub <8 x float> %74, %75
  %77 = fsub <8 x float> %65, %76
  %78 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %79 = fadd <8 x float> %78, %77
  %80 = fadd <8 x float> %66, %79
  %81 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %74
  %82 = fmul <8 x float> %67, %81
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %67, <8 x float> %83) #8
  %85 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %74
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %85, <8 x float> %81, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %87 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %88 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %87, <8 x float> %81, <8 x float> %86) #8
  %89 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %81, <8 x float> %84) #8
  %90 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %88, <8 x float> %89) #8
  %91 = fmul <8 x float> %82, %82
  %92 = fadd <8 x float> %82, %82
  %93 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %91
  %94 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %82, <8 x float> %93) #8
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %92, <8 x float> %90, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %91, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %91, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %91, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %99 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x i32>
  %103 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %102) #8
  %104 = fmul <8 x float> %103, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %105 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %103, <8 x float> %105) #8
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %103, <8 x float> %106) #8
  %108 = fmul <8 x float> %82, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %109 = fmul <8 x float> %90, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %110 = fadd <8 x float> %104, %108
  %111 = fsub <8 x float> %104, %110
  %112 = fadd <8 x float> %108, %111
  %113 = fadd <8 x float> %107, %112
  %114 = fadd <8 x float> %109, %113
  %115 = fmul <8 x float> %82, %91
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %115
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %82, <8 x float> %116) #8
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %82, <8 x float> %117) #8
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %90, <8 x float> %118) #8
  %120 = fmul <8 x float> %98, %115
  %121 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %120
  %122 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %98, <8 x float> %121) #8
  %123 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %119, <8 x float> %98, <8 x float> %122) #8
  %124 = fadd <8 x float> %110, %120
  %125 = fsub <8 x float> %110, %124
  %126 = fadd <8 x float> %120, %125
  %127 = fadd <8 x float> %126, %114
  %128 = fadd <8 x float> %123, %127
  %129 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #8
  %130 = bitcast <8 x float> %129 to <4 x i64>
  %131 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %132 = sext <8 x i1> %131 to <8 x i32>
  %133 = fadd <8 x float> %124, %128
  %134 = fmul <8 x float> %133, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %135 = bitcast <8 x i32> %132 to <8 x float>
  %136 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %135) #8
  %137 = bitcast <8 x float> %136 to <4 x i64>
  %138 = or <4 x i64> %137, %130
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = fcmp uno <8 x float> %139, zeroinitializer
  %142 = or <8 x i1> %141, %140
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = or <4 x i64> %138, %144
  %146 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = xor <4 x i64> %145, %146
  %148 = fcmp uno <8 x float> %0, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = or <4 x i64> %147, %150
  %152 = bitcast <4 x i64> %151 to <8 x float>
  ret <8 x float> %152
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %7, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %7, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %7, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %7, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %14 = bitcast <2 x i64> %5 to <4 x i32>
  %15 = ashr <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fmul <8 x float> %13, %27
  %29 = sub <4 x i32> %14, %15
  %30 = sub <4 x i32> %16, %17
  %31 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <8 x float>
  %41 = fmul <8 x float> %28, %40
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %42) #8
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = bitcast <8 x float> %43 to <4 x i64>
  %47 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  ret <8 x float> %49
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %7, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %7, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %7, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %7, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %14 = bitcast <2 x i64> %5 to <4 x i32>
  %15 = ashr <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fmul <8 x float> %13, %27
  %29 = sub <4 x i32> %14, %15
  %30 = sub <4 x i32> %16, %17
  %31 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <8 x float>
  %41 = fmul <8 x float> %28, %40
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %42) #8
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = bitcast <8 x float> %43 to <4 x i64>
  %47 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  ret <8 x float> %49
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>, <8 x float> %9, <8 x float> <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>) #8
  %15 = fmul <8 x float> %9, %14
  %16 = fadd <8 x float> %15, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %17 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %16
  %18 = fadd <8 x float> %15, %17
  %19 = fadd <8 x float> %18, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %20 = fmul <8 x float> %9, %16
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %9, <8 x float> %21) #8
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %9, <8 x float> %22) #8
  %24 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %25 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %24
  %26 = fadd <8 x float> %20, %25
  %27 = fadd <8 x float> %23, %26
  %28 = fadd <8 x float> %24, %27
  %29 = bitcast <2 x i64> %6 to <4 x i32>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = bitcast <2 x i64> %7 to <4 x i32>
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %28, %42
  %44 = sub <4 x i32> %29, %30
  %45 = sub <4 x i32> %31, %32
  %46 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = bitcast <4 x i32> %47 to <2 x i64>
  %51 = bitcast <4 x i32> %49 to <2 x i64>
  %52 = shufflevector <2 x i64> %50, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <4 x i64> %52, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fmul <8 x float> %43, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = bitcast <8 x float> %58 to <4 x i64>
  %62 = xor <4 x i64> %60, <i64 -1, i64 -1, i64 -1, i64 -1>
  %63 = and <4 x i64> %62, %61
  %64 = bitcast <4 x i64> %63 to <8 x float>
  ret <8 x float> %64
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>, <8 x float> %9, <8 x float> <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = bitcast <2 x i64> %7 to <4 x i32>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %21 to <2 x i64>
  %25 = bitcast <4 x i32> %23 to <2 x i64>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <2 x i64> %25, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <4 x i64> %26, <4 x i64> %27, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fmul <8 x float> %15, %29
  %31 = sub <4 x i32> %16, %17
  %32 = sub <4 x i32> %18, %19
  %33 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %30, %42
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = bitcast <8 x float> %45 to <4 x i64>
  %49 = xor <4 x i64> %47, <i64 -1, i64 -1, i64 -1, i64 -1>
  %50 = and <4 x i64> %49, %48
  %51 = bitcast <4 x i64> %50 to <8 x float>
  ret <8 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expm1f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, zeroinitializer
  %3 = fmul <8 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %4) #8
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %0
  %11 = fsub <8 x float> %10, %0
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %0, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #8
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #8
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #8
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #8
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #8
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = bitcast <2 x i64> %6 to <4 x i32>
  %74 = ashr <4 x i32> %73, <i32 1, i32 1, i32 1, i32 1>
  %75 = bitcast <2 x i64> %7 to <4 x i32>
  %76 = ashr <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  %77 = shl <4 x i32> %74, <i32 23, i32 23, i32 23, i32 23>
  %78 = add <4 x i32> %77, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %79 = shl <4 x i32> %76, <i32 23, i32 23, i32 23, i32 23>
  %80 = add <4 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <4 x i32> %78 to <2 x i64>
  %82 = bitcast <4 x i32> %80 to <2 x i64>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <4 x i64> %83, <4 x i64> %84, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %86 = bitcast <4 x i64> %85 to <8 x float>
  %87 = fmul <8 x float> %69, %86
  %88 = sub <4 x i32> %73, %74
  %89 = sub <4 x i32> %75, %76
  %90 = shl <4 x i32> %88, <i32 23, i32 23, i32 23, i32 23>
  %91 = add <4 x i32> %90, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %92 = shl <4 x i32> %89, <i32 23, i32 23, i32 23, i32 23>
  %93 = add <4 x i32> %92, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %94 = bitcast <4 x i32> %91 to <2 x i64>
  %95 = bitcast <4 x i32> %93 to <2 x i64>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fmul <8 x float> %87, %99
  %101 = fmul <8 x float> %72, %86
  %102 = fmul <8 x float> %101, %99
  %103 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %104 = bitcast <8 x float> %103 to <4 x i64>
  %105 = bitcast <8 x float> %100 to <4 x i64>
  %106 = xor <4 x i64> %104, <i64 -1, i64 -1, i64 -1, i64 -1>
  %107 = and <4 x i64> %106, %105
  %108 = bitcast <8 x float> %102 to <4 x i64>
  %109 = and <4 x i64> %108, %106
  %110 = bitcast <4 x i64> %107 to <8 x float>
  %111 = bitcast <4 x i64> %109 to <8 x float>
  %112 = fadd <8 x float> %110, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %113 = fsub <8 x float> %112, %110
  %114 = fsub <8 x float> %112, %113
  %115 = fsub <8 x float> %110, %114
  %116 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %113
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %117, %111
  %119 = fadd <8 x float> %112, %118
  %120 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i8 30) #8
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %119, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %120) #8
  %122 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i8 17) #8
  %123 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %121, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %122) #8
  %124 = bitcast <8 x float> %0 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %126 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %127 = bitcast <2 x i64> %125 to <4 x i32>
  %128 = icmp eq <4 x i32> %127, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %129 = sext <4 x i1> %128 to <4 x i32>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %126 to <4 x i32>
  %132 = icmp eq <4 x i32> %131, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %133 = sext <4 x i1> %132 to <4 x i32>
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <4 x i64> %135, <4 x i64> %136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %123, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %138) #8
  ret <8 x float> %139
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log10f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = fmul <8 x float> %49, %61
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %49, <8 x float> %63) #8
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %61, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %61, <8 x float> %66) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %61, <8 x float> %64) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %68, <8 x float> %69) #8
  %71 = fmul <8 x float> %62, %62
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>, <8 x float> %71, <8 x float> <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %71, <8 x float> <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>) #8
  %74 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <4 x i64> %74, <4 x i64> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %77) #8
  %79 = fmul <8 x float> %78, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>, <8 x float> %78, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>, <8 x float> %78, <8 x float> %81) #8
  %83 = fmul <8 x float> %62, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %84 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %83
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %85) #8
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>, <8 x float> %86) #8
  %88 = fadd <8 x float> %79, %83
  %89 = fsub <8 x float> %79, %88
  %90 = fadd <8 x float> %83, %89
  %91 = fadd <8 x float> %82, %90
  %92 = fadd <8 x float> %87, %91
  %93 = fmul <8 x float> %62, %71
  %94 = fmul <8 x float> %73, %93
  %95 = fadd <8 x float> %88, %94
  %96 = fsub <8 x float> %88, %95
  %97 = fadd <8 x float> %94, %96
  %98 = fadd <8 x float> %97, %92
  %99 = fadd <8 x float> %95, %98
  %100 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %101 = sext <8 x i1> %100 to <8 x i32>
  %102 = bitcast <8 x i32> %101 to <8 x float>
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %102) #8
  %104 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %105 = bitcast <8 x float> %104 to <4 x i64>
  %106 = fcmp uno <8 x float> %5, zeroinitializer
  %107 = sext <8 x i1> %106 to <8 x i32>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = or <4 x i64> %105, %108
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %103, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %110) #8
  %112 = fcmp oeq <8 x float> %5, zeroinitializer
  %113 = sext <8 x i1> %112 to <8 x i32>
  %114 = bitcast <8 x i32> %113 to <8 x float>
  %115 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %111, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %114) #8
  ret <8 x float> %115
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = fmul <8 x float> %49, %61
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %49, <8 x float> %63) #8
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %61, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %61, <8 x float> %66) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %61, <8 x float> %64) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %68, <8 x float> %69) #8
  %71 = fmul <8 x float> %62, %62
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>, <8 x float> %71, <8 x float> <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %71, <8 x float> <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>) #8
  %74 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <4 x i64> %74, <4 x i64> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %77) #8
  %79 = fmul <8 x float> %62, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>, <8 x float> %82) #8
  %84 = fadd <8 x float> %78, %79
  %85 = fsub <8 x float> %84, %78
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> %78, %86
  %88 = fsub <8 x float> %79, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fadd <8 x float> %83, %89
  %91 = fmul <8 x float> %62, %71
  %92 = fmul <8 x float> %73, %91
  %93 = fadd <8 x float> %84, %92
  %94 = fsub <8 x float> %93, %84
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %84, %95
  %97 = fsub <8 x float> %92, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %90, %98
  %100 = fadd <8 x float> %93, %99
  %101 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = bitcast <8 x i32> %102 to <8 x float>
  %104 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %103) #8
  %105 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %106 = bitcast <8 x float> %105 to <4 x i64>
  %107 = fcmp uno <8 x float> %5, zeroinitializer
  %108 = sext <8 x i1> %107 to <8 x i32>
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = or <4 x i64> %106, %109
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %111) #8
  %113 = fcmp oeq <8 x float> %5, zeroinitializer
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = bitcast <8 x i32> %114 to <8 x float>
  %116 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %115) #8
  ret <8 x float> %116
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>, <8 x float> %52, <8 x float> <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>) #8
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %53, <8 x float> %52, <8 x float> <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>) #8
  %55 = fmul <8 x float> %51, %52
  %56 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %59) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> %61) #8
  %63 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %64 = sext <8 x i1> %63 to <8 x i32>
  %65 = bitcast <8 x i32> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %65) #8
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = fcmp uno <8 x float> %5, zeroinitializer
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = or <4 x i64> %68, %71
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %73) #8
  %75 = fcmp oeq <8 x float> %5, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <8 x float>
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %77) #8
  ret <8 x float> %78
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log1pf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %4 = bitcast <8 x float> %3 to <4 x i64>
  %5 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %5, <8 x float> %3) #8
  %7 = fmul <8 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %16 = add nsw <4 x i32> %15, <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %18 = add nsw <4 x i32> %17, <i32 -127, i32 -127, i32 -127, i32 -127>
  %19 = shl nuw nsw <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %20 = shl nuw nsw <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %19
  %22 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %20
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = bitcast <4 x i32> %22 to <2 x i64>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fadd <8 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %28, <8 x float> %29) #8
  %31 = add nsw <4 x i32> %15, <i32 -191, i32 -191, i32 -191, i32 -191>
  %32 = add nsw <4 x i32> %17, <i32 -191, i32 -191, i32 -191, i32 -191>
  %33 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <4 x i32> %16 to <16 x i8>
  %36 = bitcast <4 x i32> %31 to <16 x i8>
  %37 = bitcast <2 x i64> %33 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = bitcast <4 x i32> %18 to <16 x i8>
  %40 = bitcast <4 x i32> %32 to <16 x i8>
  %41 = bitcast <2 x i64> %34 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <16 x i8> %38 to <2 x i64>
  %44 = bitcast <16 x i8> %42 to <2 x i64>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x i32>
  %49 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %48) #8
  %50 = fmul <8 x float> %49, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %49, <8 x float> %51) #8
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %49, <8 x float> %52) #8
  %54 = fadd <8 x float> %30, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %55 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %54
  %56 = fadd <8 x float> %30, %55
  %57 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %54
  %58 = fmul <8 x float> %30, %57
  %59 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %58
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %30, <8 x float> %59) #8
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %57, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %57, <8 x float> %62) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %57, <8 x float> %60) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %64, <8 x float> %65) #8
  %67 = fmul <8 x float> %58, %58
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %67, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %67, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #8
  %70 = fmul <8 x float> %58, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %71 = fmul <8 x float> %66, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %72 = fadd <8 x float> %50, %70
  %73 = fsub <8 x float> %50, %72
  %74 = fadd <8 x float> %70, %73
  %75 = fadd <8 x float> %53, %74
  %76 = fadd <8 x float> %75, %71
  %77 = fmul <8 x float> %58, %67
  %78 = fmul <8 x float> %77, %69
  %79 = fadd <8 x float> %72, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fadd <8 x float> %78, %80
  %82 = fadd <8 x float> %76, %81
  %83 = fadd <8 x float> %79, %82
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #8
  %87 = bitcast <8 x float> %86 to <4 x i64>
  %88 = bitcast <8 x float> %85 to <4 x i64>
  %89 = or <4 x i64> %87, %88
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %93) #8
  %95 = bitcast <8 x float> %0 to <4 x i64>
  %96 = shufflevector <4 x i64> %95, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %97 = shufflevector <4 x i64> %95, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %98 = bitcast <2 x i64> %96 to <4 x i32>
  %99 = icmp eq <4 x i32> %98, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %100 = sext <4 x i1> %99 to <4 x i32>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = bitcast <2 x i64> %97 to <4 x i32>
  %103 = icmp eq <4 x i32> %102, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = sext <4 x i1> %103 to <4 x i32>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %94, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %109) #8
  ret <8 x float> %110
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_fabsf8_fma4(<8 x float>) local_unnamed_addr #4 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_copysignf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #4 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaxf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fminf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fdimf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #8
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #8
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_truncf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_floorf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #8
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_ceilf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #8
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_roundf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #8
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #8
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #8
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_rintf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaf8_fma4(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #3 {
  %4 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %1, <8 x float> %2) #8
  ret <8 x float> %4
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u05fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %3 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>, i8 17) #8
  %5 = fmul <8 x float> %3, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> %5, <8 x float> %4) #8
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000>, <8 x float> %4) #8
  %8 = bitcast <8 x float> %6 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = sub nsw <4 x i32> <i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007>, %12
  %16 = sub nsw <4 x i32> <i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007>, %14
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = bitcast <4 x i32> %16 to <2 x i64>
  %19 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = fmul <8 x float> %6, %22
  %24 = fmul <8 x float> %22, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %23
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %24, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %26, <8 x float> %23) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %26, <8 x float> %24) #8
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %27
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %28, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %27) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %30, <8 x float> %28) #8
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %32, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #8
  %35 = fadd <8 x float> %32, %32
  %36 = fmul <8 x float> %35, %34
  %37 = fmul <8 x float> %6, %36
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %6, <8 x float> %38) #8
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %39, <8 x float> %41) #8
  %43 = fmul <8 x float> %37, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> %39) #8
  %45 = fadd <8 x float> %37, %44
  %46 = fmul <8 x float> %7, %45
  %47 = fcmp oeq <8 x float> %6, zeroinitializer
  %48 = fcmp oeq <8 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %49 = or <8 x i1> %48, %47
  %50 = sext <8 x i1> %49 to <8 x i32>
  %51 = bitcast <8 x i32> %50 to <8 x float>
  %52 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %6, <8 x float> %51) #8
  %53 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %6, <8 x float> zeroinitializer, i8 17) #8
  %54 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %52, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %53) #8
  ret <8 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u05fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %12 = fmul <8 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %12, <8 x float> %11) #8
  %14 = fmul <8 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %14, <8 x float> %11) #8
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fmul <8 x float> %13, %16
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %13, <8 x float> %18) #8
  %20 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %15
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %16, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %16, <8 x float> %21) #8
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %19) #8
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %22, <8 x float> %23) #8
  %25 = fmul <8 x float> %17, %17
  %26 = fadd <8 x float> %17, %17
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %17, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %24, <8 x float> %28) #8
  %30 = fadd <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <8 x float> %30, %25
  %32 = fsub <8 x float> %30, %31
  %33 = fsub <8 x float> %25, %32
  %34 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <8 x float> %34, %33
  %36 = fadd <8 x float> %29, %35
  %37 = fadd <8 x float> %30, %36
  %38 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %37) #8
  %39 = fmul <8 x float> %38, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %40) #8
  %42 = fadd <8 x float> %30, %39
  %43 = fsub <8 x float> %42, %30
  %44 = fsub <8 x float> %42, %43
  %45 = fsub <8 x float> %30, %44
  %46 = fsub <8 x float> %39, %43
  %47 = fadd <8 x float> %46, %45
  %48 = fadd <8 x float> %41, %36
  %49 = fadd <8 x float> %48, %47
  %50 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %53 = fmul <8 x float> %50, %52
  %54 = fmul <8 x float> %50, %42
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %50, <8 x float> %55) #8
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %50, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %60 = fmul <8 x float> %58, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %10, %59
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %10, <8 x float> %62) #8
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %10, <8 x float> %63) #8
  %65 = fadd <8 x float> %61, %64
  %66 = fcmp uno <8 x float> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %68) #8
  %70 = fcmp oeq <8 x float> %9, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %10, <8 x float> %72) #8
  %74 = fcmp uno <8 x float> %8, %5
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %73, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %79 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = or <8 x i1> %79, %78
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %82) #8
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u35fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = fdiv <8 x float> %9, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %13 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %12) #8
  %14 = fmul <8 x float> %10, %13
  %15 = fcmp oeq <8 x float> %9, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %10, <8 x float> %17) #8
  %19 = fcmp uno <8 x float> %8, %5
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %21) #8
  %23 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %24 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = or <8 x i1> %24, %23
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <8 x float>
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %27) #8
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_nextafterf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = ashr <4 x i32> %13, <i32 31, i32 31, i32 31, i32 31>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %12 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 31, i32 31, i32 31, i32 31>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #8
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %21, %23
  %25 = xor <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = sub <4 x i32> zeroinitializer, %25
  %27 = xor <4 x i32> %16, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast <2 x i64> %11 to <16 x i8>
  %32 = bitcast <4 x i32> %26 to <16 x i8>
  %33 = bitcast <2 x i64> %29 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <2 x i64> %12 to <16 x i8>
  %36 = bitcast <4 x i32> %28 to <16 x i8>
  %37 = bitcast <2 x i64> %30 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = fcmp une <8 x float> %9, %1
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = bitcast <16 x i8> %34 to <4 x i32>
  %43 = add <4 x i32> %42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %44 = bitcast <16 x i8> %38 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <4 x i32> %43 to <16 x i8>
  %49 = bitcast <2 x i64> %46 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <4 x i32> %45 to <16 x i8>
  %52 = bitcast <2 x i64> %47 to <16 x i8>
  %53 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %38, <16 x i8> %51, <16 x i8> %52) #8
  %54 = bitcast <16 x i8> %50 to <4 x i32>
  %55 = xor <4 x i32> %54, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %56 = sub <4 x i32> zeroinitializer, %55
  %57 = bitcast <16 x i8> %53 to <4 x i32>
  %58 = xor <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = sub <4 x i32> zeroinitializer, %58
  %60 = bitcast <4 x i32> %56 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %50, <16 x i8> %60, <16 x i8> %33) #8
  %62 = bitcast <4 x i32> %59 to <16 x i8>
  %63 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %53, <16 x i8> %62, <16 x i8> %37) #8
  %64 = bitcast <16 x i8> %61 to <2 x i64>
  %65 = bitcast <16 x i8> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fcmp oeq <8 x float> %69, zeroinitializer
  %71 = fcmp une <8 x float> %9, zeroinitializer
  %72 = and <8 x i1> %70, %71
  %73 = sext <8 x i1> %72 to <8 x i32>
  %74 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = bitcast <8 x i32> %73 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %75, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %9, zeroinitializer
  %79 = fcmp oeq <8 x float> %1, zeroinitializer
  %80 = and <8 x i1> %78, %79
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> %1, <8 x float> %82) #8
  %84 = fcmp uno <8 x float> %9, %1
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %86) #8
  ret <8 x float> %87
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_frfrexpf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #8
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: norecurse nounwind uwtable
define void @Sleef_expfrexpf8_fma4(%struct.vint2* noalias nocapture sret, <8 x float>) local_unnamed_addr #5 {
  %3 = bitcast %struct.vint2* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 32, i32 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmodf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <4 x i32>
  %19 = add <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %20 = bitcast <2 x i64> %17 to <4 x i32>
  %21 = add <4 x i32> %20, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fcmp oeq <8 x float> %14, zeroinitializer
  %29 = sext <8 x i1> %28 to <8 x i32>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> zeroinitializer, <8 x float> %30) #8
  %32 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <8 x float> %13 to <4 x i64>
  %35 = xor <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  br label %37

; <label>:37:                                     ; preds = %37, %2
  %38 = phi i32 [ 0, %2 ], [ %94, %37 ]
  %39 = phi <8 x float> [ zeroinitializer, %2 ], [ %86, %37 ]
  %40 = phi <8 x float> [ %11, %2 ], [ %84, %37 ]
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = add <4 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fcmp oeq <8 x float> %40, zeroinitializer
  %55 = sext <8 x i1> %54 to <8 x i32>
  %56 = bitcast <8 x i32> %55 to <8 x float>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> zeroinitializer, <8 x float> %56) #8
  %58 = fmul <8 x float> %31, %57
  %59 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %58, i32 11) #8
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %32, <8 x float> %40, i8 30) #8
  %61 = bitcast <8 x float> %60 to <4 x i64>
  %62 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %40, <8 x float> %13, i8 29) #8
  %63 = bitcast <8 x float> %62 to <4 x i64>
  %64 = and <4 x i64> %63, %61
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %65) #8
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %33, <8 x float> %40, i8 30) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = and <4 x i64> %68, %63
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %70) #8
  %72 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %71, i32 11) #8
  %73 = fmul <8 x float> %72, %36
  %74 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %73
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %36, <8 x float> %74) #8
  %76 = fadd <8 x float> %40, %73
  %77 = fsub <8 x float> %76, %40
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %40, %78
  %80 = fsub <8 x float> %73, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %39, %75
  %83 = fadd <8 x float> %82, %81
  %84 = fadd <8 x float> %76, %83
  %85 = fsub <8 x float> %76, %84
  %86 = fadd <8 x float> %83, %85
  %87 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %84, <8 x float> %13, i8 17) #8
  %88 = bitcast <8 x float> %87 to <4 x i64>
  %89 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %90 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %91 = and <2 x i64> %90, %89
  %92 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %91, <2 x i64> <i64 -1, i64 -1>) #8
  %93 = icmp eq i32 %92, 0
  %94 = add nuw nsw i32 %38, 1
  %95 = icmp ult i32 %94, 8
  %96 = and i1 %93, %95
  br i1 %96, label %37, label %97

; <label>:97:                                     ; preds = %37
  %98 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %99 = fadd <8 x float> %84, %86
  %100 = fmul <8 x float> %98, %99
  %101 = fcmp oeq <8 x float> %99, %13
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = bitcast <8 x i32> %102 to <8 x float>
  %104 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> zeroinitializer, <8 x float> %103) #8
  %105 = bitcast <8 x float> %104 to <4 x i64>
  %106 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %105
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #8
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> %0, <8 x float> %109) #8
  %111 = fcmp oeq <8 x float> %13, zeroinitializer
  %112 = sext <8 x i1> %111 to <8 x i32>
  %113 = bitcast <8 x i32> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %110, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %113) #8
  ret <8 x float> %114
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_remainderf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  br label %21

; <label>:21:                                     ; preds = %2, %51
  %22 = phi i32 [ 0, %2 ], [ %102, %51 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %87, %51 ]
  %24 = phi <8 x float> [ zeroinitializer, %2 ], [ %101, %51 ]
  %25 = phi <8 x float> [ %11, %2 ], [ %99, %51 ]
  %26 = fmul <8 x float> %15, %25
  %27 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %26, i32 8) #8
  %28 = bitcast <8 x float> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %16, i8 17) #8
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %31) #8
  %33 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %17, i8 17) #8
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = fcmp oeq <8 x float> %17, %30
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %39 = and <4 x i64> %37, %38
  %40 = or <4 x i64> %39, %34
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %41) #8
  %43 = fcmp oeq <8 x float> %42, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = and <2 x i64> %47, %46
  %49 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %48, <2 x i64> <i64 -1, i64 -1>) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %104

; <label>:51:                                     ; preds = %21
  %52 = fmul <8 x float> %42, %20
  %53 = bitcast <8 x float> %52 to <4 x i64>
  %54 = and <4 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fcmp oeq <8 x float> %55, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = and <4 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <4 x i64> %58, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fadd <8 x float> %42, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> %61, <8 x float> %62) #8
  %64 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %63) #8
  %65 = bitcast <8 x i32> %64 to <4 x i64>
  %66 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %67 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %68 = bitcast <2 x i64> %66 to <4 x i32>
  %69 = and <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %70 = icmp ne <4 x i32> %69, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i32>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = bitcast <2 x i64> %67 to <4 x i32>
  %74 = and <4 x i32> %73, <i32 1, i32 1, i32 1, i32 1>
  %75 = icmp ne <4 x i32> %74, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <4 x i64> %78, <4 x i64> %79, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %81 = bitcast <8 x float> %63 to <4 x i64>
  %82 = and <4 x i64> %81, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %83, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = and <4 x i64> %80, %85
  %87 = xor <4 x i64> %86, %23
  %88 = fmul <8 x float> %63, %20
  %89 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %88
  %90 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %20, <8 x float> %89) #8
  %91 = fadd <8 x float> %25, %88
  %92 = fsub <8 x float> %91, %25
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %25, %93
  %95 = fsub <8 x float> %88, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %24, %90
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %91, %98
  %100 = fsub <8 x float> %91, %99
  %101 = fadd <8 x float> %98, %100
  %102 = add nuw nsw i32 %22, 1
  %103 = icmp ult i32 %102, 8
  br i1 %103, label %21, label %104

; <label>:104:                                    ; preds = %21, %51
  %105 = phi <8 x float> [ %25, %21 ], [ %99, %51 ]
  %106 = phi <8 x float> [ %24, %21 ], [ %101, %51 ]
  %107 = fadd <8 x float> %105, %106
  %108 = fmul <8 x float> %14, %107
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = xor <4 x i64> %110, %109
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <8 x float>
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %117) #8
  %119 = bitcast <8 x i32> %114 to <8 x float>
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> %118, <8 x float> %119) #8
  %121 = fcmp oeq <8 x float> %13, zeroinitializer
  %122 = sext <8 x i1> %121 to <8 x i32>
  %123 = bitcast <8 x i32> %122 to <8 x float>
  %124 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %120, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %123) #8
  ret <8 x float> %124
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinpif8_u05fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp ne <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp ne <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %35, <8 x float> %37) #8
  %39 = bitcast <4 x i64> %29 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %39) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %36, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %39) #8
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %36, <8 x float> %43) #8
  %45 = fmul <8 x float> %36, %44
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %39) #8
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %39) #8
  %48 = fadd <8 x float> %45, %46
  %49 = fsub <8 x float> %48, %45
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %47, %53
  %55 = fmul <8 x float> %36, %48
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %48, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %48, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %54, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %39) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %39) #8
  %62 = fadd <8 x float> %55, %60
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %60, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %59, %61
  %69 = fadd <8 x float> %68, %67
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %39) #8
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %38, <8 x float> %39) #8
  %72 = fmul <8 x float> %62, %70
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %70, <8 x float> %73) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %70, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %71, <8 x float> %75) #8
  %77 = fadd <8 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <8 x float> %77, %72
  %79 = fsub <8 x float> %77, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <8 x float> %81, %80
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %77, <8 x float> %39) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> %83, <8 x float> %39) #8
  %86 = and <4 x i32> %12, <i32 4, i32 4, i32 4, i32 4>
  %87 = icmp ne <4 x i32> %86, zeroinitializer
  %88 = sext <4 x i1> %87 to <4 x i32>
  %89 = bitcast <4 x i32> %88 to <2 x i64>
  %90 = and <4 x i32> %14, <i32 4, i32 4, i32 4, i32 4>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = and <4 x i64> %96, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = bitcast <8 x float> %84 to <4 x i64>
  %99 = xor <4 x i64> %97, %98
  %100 = bitcast <8 x float> %85 to <4 x i64>
  %101 = xor <4 x i64> %97, %100
  %102 = bitcast <4 x i64> %99 to <8 x float>
  %103 = bitcast <4 x i64> %101 to <8 x float>
  %104 = fadd <8 x float> %102, %103
  %105 = bitcast <8 x float> %0 to <4 x i64>
  %106 = shufflevector <4 x i64> %105, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %107 = shufflevector <4 x i64> %105, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %108 = bitcast <2 x i64> %106 to <4 x i32>
  %109 = icmp eq <4 x i32> %108, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %110 = sext <4 x i1> %109 to <4 x i32>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = bitcast <2 x i64> %107 to <4 x i32>
  %113 = icmp eq <4 x i32> %112, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %114 = sext <4 x i1> %113 to <4 x i32>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = shufflevector <2 x i64> %111, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <4 x i64> %116, <4 x i64> %117, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %119) #8
  %121 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %122 = bitcast <4 x i64> %121 to <8 x float>
  %123 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %122, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %124 = bitcast <8 x float> %123 to <4 x i64>
  %125 = bitcast <8 x float> %120 to <4 x i64>
  %126 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %127 = and <4 x i64> %126, %125
  %128 = fcmp oeq <8 x float> %122, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %129 = sext <8 x i1> %128 to <8 x i32>
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = or <4 x i64> %127, %130
  %132 = bitcast <4 x i64> %131 to <8 x float>
  ret <8 x float> %132
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cospif8_u05fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp eq <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp eq <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %35, <8 x float> %37) #8
  %39 = bitcast <4 x i64> %29 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %39) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %36, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %39) #8
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %36, <8 x float> %43) #8
  %45 = fmul <8 x float> %36, %44
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %39) #8
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %39) #8
  %48 = fadd <8 x float> %45, %46
  %49 = fsub <8 x float> %48, %45
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %47, %53
  %55 = fmul <8 x float> %36, %48
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %48, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %48, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %54, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %39) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %39) #8
  %62 = fadd <8 x float> %55, %60
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %60, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %59, %61
  %69 = fadd <8 x float> %68, %67
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %39) #8
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %38, <8 x float> %39) #8
  %72 = fmul <8 x float> %62, %70
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %70, <8 x float> %73) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %70, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %71, <8 x float> %75) #8
  %77 = fadd <8 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <8 x float> %77, %72
  %79 = fsub <8 x float> %77, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <8 x float> %81, %80
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %77, <8 x float> %39) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> %83, <8 x float> %39) #8
  %86 = bitcast <2 x i64> %17 to <4 x i32>
  %87 = add <4 x i32> %86, <i32 2, i32 2, i32 2, i32 2>
  %88 = bitcast <2 x i64> %18 to <4 x i32>
  %89 = add <4 x i32> %88, <i32 2, i32 2, i32 2, i32 2>
  %90 = and <4 x i32> %87, <i32 4, i32 4, i32 4, i32 4>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = and <4 x i32> %89, <i32 4, i32 4, i32 4, i32 4>
  %95 = icmp ne <4 x i32> %94, zeroinitializer
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <4 x i64> %98, <4 x i64> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = and <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %84 to <4 x i64>
  %103 = xor <4 x i64> %101, %102
  %104 = bitcast <8 x float> %85 to <4 x i64>
  %105 = xor <4 x i64> %101, %104
  %106 = bitcast <4 x i64> %103 to <8 x float>
  %107 = bitcast <4 x i64> %105 to <8 x float>
  %108 = fadd <8 x float> %106, %107
  %109 = bitcast <8 x float> %0 to <4 x i64>
  %110 = and <4 x i64> %109, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %111, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %113 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %112) #8
  %114 = fcmp oeq <8 x float> %111, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %115 = sext <8 x i1> %114 to <8 x i32>
  %116 = bitcast <8 x i32> %115 to <4 x i64>
  %117 = bitcast <8 x float> %113 to <4 x i64>
  %118 = or <4 x i64> %117, %116
  %119 = bitcast <4 x i64> %118 to <8 x float>
  ret <8 x float> %119
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_tgammaf8_u10fma4(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <8 x float>, <8 x float>* %6, align 32
  %8 = fadd <8 x float> %5, %7
  %9 = fmul <8 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %9) #8
  %11 = bitcast <8 x i32> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #8
  %15 = fmul <8 x float> %14, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %16 = fadd <8 x float> %5, %15
  %17 = fsub <8 x float> %16, %5
  %18 = fsub <8 x float> %16, %17
  %19 = fsub <8 x float> %5, %18
  %20 = fsub <8 x float> %15, %17
  %21 = fadd <8 x float> %20, %19
  %22 = fadd <8 x float> %7, %21
  %23 = fmul <8 x float> %14, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %24 = fadd <8 x float> %23, %16
  %25 = fsub <8 x float> %24, %16
  %26 = fsub <8 x float> %24, %25
  %27 = fsub <8 x float> %16, %26
  %28 = fsub <8 x float> %23, %25
  %29 = fadd <8 x float> %28, %27
  %30 = fadd <8 x float> %29, %22
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %24, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %24, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %24, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %34 = fmul <8 x float> %24, %33
  %35 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %33, <8 x float> %35) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %33, <8 x float> %36) #8
  %38 = fadd <8 x float> %34, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %39 = fsub <8 x float> %38, %34
  %40 = fsub <8 x float> %38, %39
  %41 = fsub <8 x float> %34, %40
  %42 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %39
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %37, %43
  %45 = fmul <8 x float> %24, %38
  %46 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %45
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %38, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %38, <8 x float> %47) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %44, <8 x float> %48) #8
  %50 = fadd <8 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %51 = fsub <8 x float> %50, %45
  %52 = fsub <8 x float> %50, %51
  %53 = fsub <8 x float> %45, %52
  %54 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %51
  %55 = fadd <8 x float> %54, %53
  %56 = fadd <8 x float> %49, %55
  %57 = fmul <8 x float> %24, %24
  %58 = fadd <8 x float> %24, %24
  %59 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %57
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %24, <8 x float> %59) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %30, <8 x float> %60) #8
  %62 = fmul <8 x float> %57, %50
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %50, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %50, <8 x float> %64) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %56, <8 x float> %65) #8
  %67 = fadd <8 x float> %24, %62
  %68 = fsub <8 x float> %67, %24
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %24, %69
  %71 = fsub <8 x float> %62, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %30, %66
  %74 = fadd <8 x float> %72, %73
  %75 = fadd <8 x float> %67, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %77 = fadd <8 x float> %67, %76
  %78 = fadd <8 x float> %77, %74
  %79 = bitcast <2 x i64> %12 to <4 x i32>
  %80 = ashr <4 x i32> %79, <i32 1, i32 1, i32 1, i32 1>
  %81 = bitcast <2 x i64> %13 to <4 x i32>
  %82 = ashr <4 x i32> %81, <i32 1, i32 1, i32 1, i32 1>
  %83 = shl <4 x i32> %80, <i32 23, i32 23, i32 23, i32 23>
  %84 = add <4 x i32> %83, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %85 = shl <4 x i32> %82, <i32 23, i32 23, i32 23, i32 23>
  %86 = add <4 x i32> %85, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %87 = bitcast <4 x i32> %84 to <2 x i64>
  %88 = bitcast <4 x i32> %86 to <2 x i64>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fmul <8 x float> %75, %92
  %94 = sub <4 x i32> %79, %80
  %95 = sub <4 x i32> %81, %82
  %96 = shl <4 x i32> %94, <i32 23, i32 23, i32 23, i32 23>
  %97 = add <4 x i32> %96, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %98 = shl <4 x i32> %95, <i32 23, i32 23, i32 23, i32 23>
  %99 = add <4 x i32> %98, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %100 = bitcast <4 x i32> %97 to <2 x i64>
  %101 = bitcast <4 x i32> %99 to <2 x i64>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <8 x float>
  %106 = fmul <8 x float> %93, %105
  %107 = fmul <8 x float> %78, %92
  %108 = fmul <8 x float> %107, %105
  %109 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %110 = bitcast <8 x float> %109 to <4 x i64>
  %111 = bitcast <8 x float> %106 to <4 x i64>
  %112 = xor <4 x i64> %110, <i64 -1, i64 -1, i64 -1, i64 -1>
  %113 = and <4 x i64> %112, %111
  %114 = bitcast <8 x float> %108 to <4 x i64>
  %115 = and <4 x i64> %114, %112
  %116 = bitcast <4 x i64> %113 to <8 x float>
  %117 = bitcast <4 x i64> %115 to <8 x float>
  %118 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %119 = load <8 x float>, <8 x float>* %118, align 32
  %120 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %121 = load <8 x float>, <8 x float>* %120, align 32
  %122 = fmul <8 x float> %119, %116
  %123 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %122
  %124 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %119, <8 x float> %123) #8
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %119, <8 x float> %124) #8
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %121, <8 x float> %125) #8
  %127 = fadd <8 x float> %122, %126
  %128 = fcmp oeq <8 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %129 = sext <8 x i1> %128 to <8 x i32>
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %134 = fcmp oeq <8 x float> %133, %0
  %135 = sext <8 x i1> %134 to <8 x i32>
  %136 = bitcast <8 x i32> %135 to <4 x i64>
  %137 = and <4 x i64> %136, %132
  %138 = bitcast <8 x float> %0 to <4 x i64>
  %139 = and <4 x i64> %138, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fcmp oeq <8 x float> %140, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %142 = fcmp uno <8 x float> %0, zeroinitializer
  %143 = or <8 x i1> %141, %142
  %144 = sext <8 x i1> %143 to <8 x i32>
  %145 = bitcast <8 x i32> %144 to <4 x i64>
  %146 = xor <4 x i64> %145, <i64 -1, i64 -1, i64 -1, i64 -1>
  %147 = and <4 x i64> %132, %146
  %148 = fcmp uno <8 x float> %127, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = and <4 x i64> %147, %150
  %152 = or <4 x i64> %151, %130
  %153 = or <4 x i64> %152, %137
  %154 = bitcast <4 x i64> %153 to <8 x float>
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %154) #8
  %156 = fcmp oeq <8 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %157 = sext <8 x i1> %156 to <8 x i32>
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = or <4 x i64> %146, %158
  %160 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i8 29) #8
  %161 = bitcast <8 x float> %160 to <4 x i64>
  %162 = and <4 x i64> %159, %161
  %163 = fcmp oeq <8 x float> %0, zeroinitializer
  %164 = sext <8 x i1> %163 to <8 x i32>
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i8 30) #8
  %167 = bitcast <8 x float> %166 to <4 x i64>
  %168 = or <4 x i64> %167, %165
  %169 = fcmp uno <8 x float> %155, zeroinitializer
  %170 = sext <8 x i1> %169 to <8 x i32>
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = or <4 x i64> %168, %171
  %173 = and <4 x i64> %162, %172
  %174 = and <4 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = or <4 x i64> %174, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %176 = bitcast <4 x i64> %175 to <8 x float>
  %177 = bitcast <4 x i64> %173 to <8 x float>
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %155, <8 x float> %176, <8 x float> %177) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %178
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <8 x float>) unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = xor <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fadd <8 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12 = fadd <8 x float> %11, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = fsub <8 x float> %11, %12
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = fsub <8 x float> %10, %12
  %16 = fadd <8 x float> %15, %14
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %11, <8 x float> %7) #8
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %7) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %17, <8 x float> zeroinitializer, <8 x float> %6) #8
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> zeroinitializer, <8 x float> %6) #8
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %19, i8 18) #8
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>, i8 18) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = and <4 x i64> %24, %22
  %26 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>, <8 x float> %19, i8 18) #8
  %27 = bitcast <8 x float> %26 to <4 x i64>
  %28 = fadd <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fsub <8 x float> %28, %19
  %30 = fsub <8 x float> %28, %29
  %31 = fsub <8 x float> %19, %30
  %32 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29
  %33 = fadd <8 x float> %32, %31
  %34 = fadd <8 x float> %20, %33
  %35 = fmul <8 x float> %19, %28
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %35
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %19, <8 x float> %36) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %19, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %20, <8 x float> %38) #8
  %40 = fadd <8 x float> %35, %39
  %41 = fsub <8 x float> %35, %40
  %42 = fadd <8 x float> %39, %41
  %43 = fadd <8 x float> %19, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fsub <8 x float> %43, %19
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> %19, %45
  %47 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %20, %48
  %50 = fmul <8 x float> %43, %40
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %40, <8 x float> %51) #8
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %40, <8 x float> %52) #8
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> %53) #8
  %55 = fadd <8 x float> %50, %54
  %56 = fsub <8 x float> %50, %55
  %57 = fadd <8 x float> %54, %56
  %58 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>, i8 18) #8
  %59 = bitcast <8 x float> %58 to <4 x i64>
  %60 = and <4 x i64> %59, %27
  %61 = bitcast <4 x i64> %60 to <8 x float>
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %55, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %57, <8 x float> %61) #8
  %64 = fadd <8 x float> %19, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %65 = fsub <8 x float> %64, %19
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %19, %66
  %68 = fsub <8 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %20, %69
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> %64, <8 x float> %61) #8
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %70, <8 x float> %61) #8
  %73 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %74 = bitcast <4 x i64> %25 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %74) #8
  %76 = fadd <8 x float> %71, %75
  %77 = fsub <8 x float> %76, %71
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %71, %78
  %80 = fsub <8 x float> %75, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %72, %81
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> %73, <8 x float> %26) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000>, <8 x float> <float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000>, <8 x float> %74) #8
  %86 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %85, <8 x float> <float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000>, <8 x float> %26) #8
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000>, <8 x float> <float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000>, <8 x float> %74) #8
  %88 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %87, <8 x float> <float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000>, <8 x float> %26) #8
  %89 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %86, <8 x float> %84, <8 x float> %88) #8
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000>, <8 x float> <float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000>, <8 x float> %74) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000>, <8 x float> %26) #8
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %84, <8 x float> %91) #8
  %93 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000>, <8 x float> <float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000>, <8 x float> %74) #8
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %93, <8 x float> <float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000>, <8 x float> %26) #8
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %92, <8 x float> %84, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000>, <8 x float> <float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000>, <8 x float> %74) #8
  %97 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000>, <8 x float> %26) #8
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %84, <8 x float> %97) #8
  %99 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000>, <8 x float> <float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000>, <8 x float> %74) #8
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> <float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000>, <8 x float> %26) #8
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %84, <8 x float> %100) #8
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000>, <8 x float> <float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000>, <8 x float> %74) #8
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> <float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000>, <8 x float> %26) #8
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %84, <8 x float> %103) #8
  %105 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000>, <8 x float> <float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000>, <8 x float> %74) #8
  %106 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %105, <8 x float> <float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000>, <8 x float> %26) #8
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %84, <8 x float> %106) #8
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000>, <8 x float> <float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000>, <8 x float> %74) #8
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>, <8 x float> %26) #8
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> %84, <8 x float> %109) #8
  %111 = fadd <8 x float> %71, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %112 = fsub <8 x float> %111, %71
  %113 = fsub <8 x float> %111, %112
  %114 = fsub <8 x float> %71, %113
  %115 = fsub <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %112
  %116 = fadd <8 x float> %115, %114
  %117 = fadd <8 x float> %72, %116
  %118 = fmul <8 x float> %71, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %119 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %118, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %120 = bitcast <8 x float> %119 to <4 x i64>
  %121 = fmul <8 x float> %118, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %122 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %121, <8 x float> %119) #8
  %123 = bitcast <8 x float> %122 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %126 = bitcast <2 x i64> %124 to <4 x i32>
  %127 = lshr <4 x i32> %126, <i32 23, i32 23, i32 23, i32 23>
  %128 = bitcast <2 x i64> %125 to <4 x i32>
  %129 = lshr <4 x i32> %128, <i32 23, i32 23, i32 23, i32 23>
  %130 = shufflevector <4 x i64> %120, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %131 = shufflevector <4 x i64> %120, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %132 = bitcast <2 x i64> %130 to <16 x i8>
  %133 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %132) #8
  %134 = bitcast <2 x i64> %131 to <16 x i8>
  %135 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %134) #8
  %136 = and <4 x i32> %127, <i32 255, i32 255, i32 255, i32 255>
  %137 = bitcast <16 x i8> %133 to <4 x i32>
  %138 = sub <4 x i32> %136, %137
  %139 = and <4 x i32> %129, <i32 255, i32 255, i32 255, i32 255>
  %140 = bitcast <16 x i8> %135 to <4 x i32>
  %141 = sub <4 x i32> %139, %140
  %142 = bitcast <4 x i32> %138 to <2 x i64>
  %143 = bitcast <4 x i32> %141 to <2 x i64>
  %144 = shl <4 x i32> %138, <i32 23, i32 23, i32 23, i32 23>
  %145 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %144
  %146 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %147 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %146
  %148 = bitcast <4 x i32> %145 to <2 x i64>
  %149 = bitcast <4 x i32> %147 to <2 x i64>
  %150 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %151 = shufflevector <2 x i64> %149, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %152 = shufflevector <4 x i64> %150, <4 x i64> %151, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %153 = bitcast <4 x i64> %152 to <8 x float>
  %154 = fmul <8 x float> %71, %153
  %155 = fmul <8 x float> %72, %153
  %156 = fadd <8 x float> %154, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %157 = fsub <8 x float> %156, %154
  %158 = fsub <8 x float> %156, %157
  %159 = fsub <8 x float> %154, %158
  %160 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %157
  %161 = fadd <8 x float> %160, %159
  %162 = fadd <8 x float> %155, %161
  %163 = fadd <8 x float> %154, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %164 = fsub <8 x float> %163, %154
  %165 = fsub <8 x float> %163, %164
  %166 = fsub <8 x float> %154, %165
  %167 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %164
  %168 = fadd <8 x float> %167, %166
  %169 = fadd <8 x float> %155, %168
  %170 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %163
  %171 = fmul <8 x float> %156, %170
  %172 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %171
  %173 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %170, <8 x float> %156, <8 x float> %172) #8
  %174 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %163
  %175 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %174, <8 x float> %170, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %176 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %169
  %177 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %176, <8 x float> %170, <8 x float> %175) #8
  %178 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %170, <8 x float> %173) #8
  %179 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %171, <8 x float> %177, <8 x float> %178) #8
  %180 = fmul <8 x float> %171, %171
  %181 = fadd <8 x float> %171, %171
  %182 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %180
  %183 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %171, <8 x float> %171, <8 x float> %182) #8
  %184 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %181, <8 x float> %179, <8 x float> %183) #8
  %185 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %180, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %186 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %185, <8 x float> %180, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %187 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %186, <8 x float> %180, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %188 = shufflevector <2 x i64> %142, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <2 x i64> %143, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %190 = shufflevector <4 x i64> %188, <4 x i64> %189, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %191 = bitcast <4 x i64> %190 to <8 x i32>
  %192 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %191) #8
  %193 = fmul <8 x float> %192, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %194 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %193
  %195 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %192, <8 x float> %194) #8
  %196 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %192, <8 x float> %195) #8
  %197 = fmul <8 x float> %171, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %198 = fmul <8 x float> %179, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %199 = fadd <8 x float> %193, %197
  %200 = fsub <8 x float> %193, %199
  %201 = fadd <8 x float> %197, %200
  %202 = fadd <8 x float> %196, %201
  %203 = fadd <8 x float> %198, %202
  %204 = fmul <8 x float> %171, %180
  %205 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %204
  %206 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %180, <8 x float> %171, <8 x float> %205) #8
  %207 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %184, <8 x float> %171, <8 x float> %206) #8
  %208 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %180, <8 x float> %179, <8 x float> %207) #8
  %209 = fmul <8 x float> %187, %204
  %210 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %209
  %211 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %204, <8 x float> %187, <8 x float> %210) #8
  %212 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %208, <8 x float> %187, <8 x float> %211) #8
  %213 = fadd <8 x float> %199, %209
  %214 = fsub <8 x float> %199, %213
  %215 = fadd <8 x float> %209, %214
  %216 = fadd <8 x float> %215, %203
  %217 = fadd <8 x float> %212, %216
  %218 = fmul <8 x float> %111, %213
  %219 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %218
  %220 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %213, <8 x float> %219) #8
  %221 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %213, <8 x float> %220) #8
  %222 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %217, <8 x float> %221) #8
  %223 = bitcast <8 x float> %71 to <4 x i64>
  %224 = xor <4 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <8 x float> %72 to <4 x i64>
  %226 = xor <4 x i64> %225, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %227 = bitcast <4 x i64> %224 to <8 x float>
  %228 = bitcast <4 x i64> %226 to <8 x float>
  %229 = fadd <8 x float> %218, %227
  %230 = fsub <8 x float> %229, %218
  %231 = fsub <8 x float> %229, %230
  %232 = fsub <8 x float> %218, %231
  %233 = fsub <8 x float> %227, %230
  %234 = fadd <8 x float> %233, %232
  %235 = fadd <8 x float> %222, %228
  %236 = fadd <8 x float> %235, %234
  %237 = fadd <8 x float> %229, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %238 = fsub <8 x float> %237, %229
  %239 = fsub <8 x float> %237, %238
  %240 = fsub <8 x float> %229, %239
  %241 = fsub <8 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %238
  %242 = fadd <8 x float> %241, %240
  %243 = fadd <8 x float> %236, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %244 = fadd <8 x float> %242, %243
  %245 = fmul <8 x float> %84, %110
  %246 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %245
  %247 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %84, <8 x float> %246) #8
  %248 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000>, <8 x float> <float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000>, <8 x float> %74) #8
  %249 = fadd <8 x float> %245, %248
  %250 = fsub <8 x float> %249, %245
  %251 = fsub <8 x float> %249, %250
  %252 = fsub <8 x float> %245, %251
  %253 = fsub <8 x float> %248, %250
  %254 = fadd <8 x float> %253, %252
  %255 = fadd <8 x float> %247, %254
  %256 = fmul <8 x float> %84, %249
  %257 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %256
  %258 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %249, <8 x float> %84, <8 x float> %257) #8
  %259 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %255, <8 x float> %84, <8 x float> %258) #8
  %260 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000>, <8 x float> <float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000>, <8 x float> %74) #8
  %261 = fadd <8 x float> %256, %260
  %262 = fsub <8 x float> %261, %256
  %263 = fsub <8 x float> %261, %262
  %264 = fsub <8 x float> %256, %263
  %265 = fsub <8 x float> %260, %262
  %266 = fadd <8 x float> %265, %264
  %267 = fadd <8 x float> %259, %266
  %268 = fmul <8 x float> %84, %261
  %269 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %268
  %270 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %261, <8 x float> %84, <8 x float> %269) #8
  %271 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %267, <8 x float> %84, <8 x float> %270) #8
  %272 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000>, <8 x float> <float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000>, <8 x float> %74) #8
  %273 = fadd <8 x float> %268, %272
  %274 = fsub <8 x float> %273, %268
  %275 = fsub <8 x float> %273, %274
  %276 = fsub <8 x float> %268, %275
  %277 = fsub <8 x float> %272, %274
  %278 = fadd <8 x float> %277, %276
  %279 = fadd <8 x float> %271, %278
  %280 = fmul <8 x float> %84, %273
  %281 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %280
  %282 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %273, <8 x float> %84, <8 x float> %281) #8
  %283 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %279, <8 x float> %84, <8 x float> %282) #8
  %284 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %280, <8 x float> %237, <8 x float> %26) #8
  %285 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %283, <8 x float> %244, <8 x float> %26) #8
  %286 = fadd <8 x float> %245, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %287 = fsub <8 x float> %286, %245
  %288 = fsub <8 x float> %286, %287
  %289 = fsub <8 x float> %245, %288
  %290 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %287
  %291 = fadd <8 x float> %290, %289
  %292 = fadd <8 x float> %291, %247
  %293 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %286, <8 x float> %26) #8
  %294 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %292, <8 x float> %26) #8
  %295 = bitcast <8 x float> %284 to <4 x i64>
  %296 = xor <4 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <8 x float> %285 to <4 x i64>
  %298 = xor <4 x i64> %297, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %299 = bitcast <4 x i64> %296 to <8 x float>
  %300 = bitcast <4 x i64> %298 to <8 x float>
  %301 = fadd <8 x float> %299, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %302 = fadd <8 x float> %301, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %303 = fsub <8 x float> %301, %302
  %304 = fsub <8 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %303
  %305 = fsub <8 x float> %299, %302
  %306 = fadd <8 x float> %305, %304
  %307 = fadd <8 x float> %300, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %308 = fadd <8 x float> %307, %306
  %309 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %284, <8 x float> %301, <8 x float> %7) #8
  %310 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %285, <8 x float> %308, <8 x float> %7) #8
  %311 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %309, <8 x float> <float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000>, <8 x float> %6) #8
  %312 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %310, <8 x float> <float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000>, <8 x float> %6) #8
  %313 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %293, <8 x float> %62, <8 x float> %7) #8
  %314 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %294, <8 x float> %63, <8 x float> %7) #8
  %315 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %313, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %6) #8
  %316 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %314, <8 x float> zeroinitializer, <8 x float> %6) #8
  %317 = xor <4 x i64> %8, <i64 -1, i64 -1, i64 -1, i64 -1>
  %318 = shufflevector <4 x i64> %317, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %319 = shufflevector <4 x i64> %317, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %320 = and <2 x i64> %319, %318
  %321 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %320, <2 x i64> <i64 -1, i64 -1>) #8
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %436

; <label>:323:                                    ; preds = %2
  %324 = fmul <8 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %325 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %324) #8
  %326 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %325) #8
  %327 = fmul <8 x float> %326, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %328 = fsub <8 x float> %1, %327
  %329 = fmul <8 x float> %328, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %330 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %329) #8
  %331 = bitcast <8 x i32> %330 to <4 x i64>
  %332 = shufflevector <4 x i64> %331, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %333 = shufflevector <4 x i64> %331, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %334 = bitcast <2 x i64> %332 to <4 x i32>
  %335 = lshr <4 x i32> %334, <i32 31, i32 31, i32 31, i32 31>
  %336 = bitcast <2 x i64> %333 to <4 x i32>
  %337 = lshr <4 x i32> %336, <i32 31, i32 31, i32 31, i32 31>
  %338 = xor <4 x i32> %335, <i32 1, i32 1, i32 1, i32 1>
  %339 = add <4 x i32> %338, %334
  %340 = xor <4 x i32> %337, <i32 1, i32 1, i32 1, i32 1>
  %341 = add <4 x i32> %340, %336
  %342 = bitcast <4 x i32> %339 to <2 x i64>
  %343 = bitcast <4 x i32> %341 to <2 x i64>
  %344 = and <2 x i64> %342, <i64 -4294967298, i64 -4294967298>
  %345 = and <2 x i64> %343, <i64 -4294967298, i64 -4294967298>
  %346 = and <4 x i32> %339, <i32 2, i32 2, i32 2, i32 2>
  %347 = icmp ne <4 x i32> %346, zeroinitializer
  %348 = sext <4 x i1> %347 to <4 x i32>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = and <4 x i32> %341, <i32 2, i32 2, i32 2, i32 2>
  %351 = icmp ne <4 x i32> %350, zeroinitializer
  %352 = sext <4 x i1> %351 to <4 x i32>
  %353 = bitcast <4 x i32> %352 to <2 x i64>
  %354 = shufflevector <2 x i64> %349, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %355 = shufflevector <2 x i64> %353, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %356 = shufflevector <4 x i64> %354, <4 x i64> %355, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %357 = shufflevector <2 x i64> %344, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %358 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %359 = shufflevector <4 x i64> %357, <4 x i64> %358, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %360 = bitcast <4 x i64> %359 to <8 x i32>
  %361 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %360) #8
  %362 = fsub <8 x float> %329, %361
  %363 = fmul <8 x float> %362, %362
  %364 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %363
  %365 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %362, <8 x float> %362, <8 x float> %364) #8
  %366 = bitcast <4 x i64> %356 to <8 x float>
  %367 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %366) #8
  %368 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %366) #8
  %369 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %367, <8 x float> %363, <8 x float> %368) #8
  %370 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %366) #8
  %371 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %369, <8 x float> %363, <8 x float> %370) #8
  %372 = fmul <8 x float> %363, %371
  %373 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %366) #8
  %374 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %366) #8
  %375 = fadd <8 x float> %372, %373
  %376 = fsub <8 x float> %375, %372
  %377 = fsub <8 x float> %375, %376
  %378 = fsub <8 x float> %372, %377
  %379 = fsub <8 x float> %373, %376
  %380 = fadd <8 x float> %379, %378
  %381 = fadd <8 x float> %374, %380
  %382 = fmul <8 x float> %363, %375
  %383 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %382
  %384 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %363, <8 x float> %375, <8 x float> %383) #8
  %385 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %365, <8 x float> %375, <8 x float> %384) #8
  %386 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %363, <8 x float> %381, <8 x float> %385) #8
  %387 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %366) #8
  %388 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %366) #8
  %389 = fadd <8 x float> %382, %387
  %390 = fsub <8 x float> %389, %382
  %391 = fsub <8 x float> %389, %390
  %392 = fsub <8 x float> %382, %391
  %393 = fsub <8 x float> %387, %390
  %394 = fadd <8 x float> %393, %392
  %395 = fadd <8 x float> %386, %388
  %396 = fadd <8 x float> %395, %394
  %397 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %362, <8 x float> %363, <8 x float> %366) #8
  %398 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %365, <8 x float> %366) #8
  %399 = fmul <8 x float> %389, %397
  %400 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %399
  %401 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %389, <8 x float> %397, <8 x float> %400) #8
  %402 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %396, <8 x float> %397, <8 x float> %401) #8
  %403 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %389, <8 x float> %398, <8 x float> %402) #8
  %404 = fadd <8 x float> %399, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %405 = fsub <8 x float> %404, %399
  %406 = fsub <8 x float> %404, %405
  %407 = fsub <8 x float> %399, %406
  %408 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %405
  %409 = fadd <8 x float> %408, %407
  %410 = fadd <8 x float> %403, %409
  %411 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %399, <8 x float> %404, <8 x float> %366) #8
  %412 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %403, <8 x float> %410, <8 x float> %366) #8
  %413 = and <4 x i32> %339, <i32 4, i32 4, i32 4, i32 4>
  %414 = icmp ne <4 x i32> %413, zeroinitializer
  %415 = sext <4 x i1> %414 to <4 x i32>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = and <4 x i32> %341, <i32 4, i32 4, i32 4, i32 4>
  %418 = icmp ne <4 x i32> %417, zeroinitializer
  %419 = sext <4 x i1> %418 to <4 x i32>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <2 x i64> %416, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %422 = shufflevector <2 x i64> %420, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %423 = shufflevector <4 x i64> %421, <4 x i64> %422, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %424 = and <4 x i64> %423, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %425 = bitcast <8 x float> %411 to <4 x i64>
  %426 = xor <4 x i64> %424, %425
  %427 = bitcast <8 x float> %412 to <4 x i64>
  %428 = xor <4 x i64> %424, %427
  %429 = bitcast <4 x i64> %426 to <8 x float>
  %430 = bitcast <4 x i64> %428 to <8 x float>
  %431 = fmul <8 x float> %293, %429
  %432 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %431
  %433 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %293, <8 x float> %429, <8 x float> %432) #8
  %434 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %294, <8 x float> %429, <8 x float> %433) #8
  %435 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %293, <8 x float> %430, <8 x float> %434) #8
  br label %436

; <label>:436:                                    ; preds = %2, %323
  %437 = phi <8 x float> [ %431, %323 ], [ %71, %2 ]
  %438 = phi <8 x float> [ %435, %323 ], [ %72, %2 ]
  %439 = fmul <8 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %440 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> %437, <8 x float> %7) #8
  %441 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %438, <8 x float> %7) #8
  %442 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %440, <8 x float> %439, <8 x float> %6) #8
  %443 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %441, <8 x float> zeroinitializer, <8 x float> %6) #8
  %444 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %442
  %445 = fmul <8 x float> %315, %444
  %446 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %445
  %447 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %444, <8 x float> %315, <8 x float> %446) #8
  %448 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %442
  %449 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %448, <8 x float> %444, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %450 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %443
  %451 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %450, <8 x float> %444, <8 x float> %449) #8
  %452 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %316, <8 x float> %444, <8 x float> %447) #8
  %453 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %445, <8 x float> %451, <8 x float> %452) #8
  %454 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 0
  store <8 x float> %311, <8 x float>* %454, align 32
  %455 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  store <8 x float> %312, <8 x float>* %455, align 32
  %456 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <8 x float> %445, <8 x float>* %456, align 32
  %457 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <8 x float> %453, <8 x float>* %457, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_lgammaf8_u10fma4(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <8 x float>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <8 x float>
  %14 = bitcast <4 x i64> %12 to <8 x float>
  %15 = fmul <8 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %17 = bitcast <8 x float> %16 to <4 x i64>
  %18 = fmul <8 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %18, <8 x float> %16) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %21 to <4 x i32>
  %24 = lshr <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = bitcast <2 x i64> %22 to <4 x i32>
  %26 = lshr <4 x i32> %25, <i32 23, i32 23, i32 23, i32 23>
  %27 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %28 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %28 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %31) #8
  %33 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %34 = bitcast <16 x i8> %30 to <4 x i32>
  %35 = sub <4 x i32> %33, %34
  %36 = and <4 x i32> %26, <i32 255, i32 255, i32 255, i32 255>
  %37 = bitcast <16 x i8> %32 to <4 x i32>
  %38 = sub <4 x i32> %36, %37
  %39 = bitcast <4 x i32> %35 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %42 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %41
  %43 = shl <4 x i32> %38, <i32 23, i32 23, i32 23, i32 23>
  %44 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %43
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %13, %50
  %52 = fmul <8 x float> %14, %50
  %53 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fsub <8 x float> %53, %51
  %55 = fsub <8 x float> %53, %54
  %56 = fsub <8 x float> %51, %55
  %57 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %54
  %58 = fadd <8 x float> %57, %56
  %59 = fadd <8 x float> %52, %58
  %60 = fadd <8 x float> %51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %61 = fsub <8 x float> %60, %51
  %62 = fsub <8 x float> %60, %61
  %63 = fsub <8 x float> %51, %62
  %64 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %65 = fadd <8 x float> %64, %63
  %66 = fadd <8 x float> %52, %65
  %67 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %60
  %68 = fmul <8 x float> %53, %67
  %69 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %68
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %53, <8 x float> %69) #8
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %67, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %67, <8 x float> %72) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %67, <8 x float> %70) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %74, <8 x float> %75) #8
  %77 = fmul <8 x float> %68, %68
  %78 = fadd <8 x float> %68, %68
  %79 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %77
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %68, <8 x float> %79) #8
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %76, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %77, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %77, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %77, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %85 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <4 x i64> %85, <4 x i64> %86, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %88 = bitcast <4 x i64> %87 to <8 x i32>
  %89 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %88) #8
  %90 = fmul <8 x float> %89, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %91 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %90
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %89, <8 x float> %91) #8
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %89, <8 x float> %92) #8
  %94 = fmul <8 x float> %68, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <8 x float> %76, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <8 x float> %90, %94
  %97 = fsub <8 x float> %90, %96
  %98 = fadd <8 x float> %94, %97
  %99 = fadd <8 x float> %93, %98
  %100 = fadd <8 x float> %95, %99
  %101 = fmul <8 x float> %68, %77
  %102 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %101
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %68, <8 x float> %102) #8
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %68, <8 x float> %103) #8
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %76, <8 x float> %104) #8
  %106 = fmul <8 x float> %84, %101
  %107 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %106
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %84, <8 x float> %107) #8
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %84, <8 x float> %108) #8
  %110 = fadd <8 x float> %96, %106
  %111 = fsub <8 x float> %96, %110
  %112 = fadd <8 x float> %106, %111
  %113 = fadd <8 x float> %112, %100
  %114 = fadd <8 x float> %109, %113
  %115 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %116 = load <8 x float>, <8 x float>* %115, align 32
  %117 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %118 = load <8 x float>, <8 x float>* %117, align 32
  %119 = fadd <8 x float> %110, %116
  %120 = fsub <8 x float> %119, %116
  %121 = fsub <8 x float> %119, %120
  %122 = fsub <8 x float> %116, %121
  %123 = fsub <8 x float> %110, %120
  %124 = fadd <8 x float> %123, %122
  %125 = fadd <8 x float> %118, %114
  %126 = fadd <8 x float> %125, %124
  %127 = fadd <8 x float> %119, %126
  %128 = bitcast <8 x float> %0 to <4 x i64>
  %129 = and <4 x i64> %128, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fcmp oeq <8 x float> %130, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %132 = sext <8 x i1> %131 to <8 x i32>
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 18) #8
  %135 = bitcast <8 x float> %134 to <4 x i64>
  %136 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %137 = fcmp oeq <8 x float> %136, %0
  %138 = sext <8 x i1> %137 to <8 x i32>
  %139 = bitcast <8 x i32> %138 to <4 x i64>
  %140 = and <4 x i64> %139, %135
  %141 = fcmp uno <8 x float> %0, zeroinitializer
  %142 = or <8 x i1> %131, %141
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = xor <4 x i64> %144, <i64 -1, i64 -1, i64 -1, i64 -1>
  %146 = fcmp uno <8 x float> %127, zeroinitializer
  %147 = sext <8 x i1> %146 to <8 x i32>
  %148 = bitcast <8 x i32> %147 to <4 x i64>
  %149 = and <4 x i64> %148, %145
  %150 = or <4 x i64> %140, %133
  %151 = or <4 x i64> %150, %149
  %152 = bitcast <4 x i64> %151 to <8 x float>
  %153 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %152) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %153
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erff8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>, i8 17) #8
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i8 17) #8
  %8 = fmul <8 x float> %4, %4
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %8, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>, <8 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <8 x float> %6) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <8 x float> %5) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>, <8 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <8 x float> %6) #8
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <8 x float> %5) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>, <8 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <8 x float> %6) #8
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <8 x float> %5) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> %16) #8
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>, <8 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <8 x float> %6) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <8 x float> %5) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %9, <8 x float> %19) #8
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>, <8 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <8 x float> %6) #8
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %21, <8 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <8 x float> %5) #8
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %9, <8 x float> %22) #8
  %24 = fmul <8 x float> %9, %23
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %24
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %9, <8 x float> %25) #8
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>, <8 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <8 x float> %6) #8
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>, <8 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <8 x float> %6) #8
  %29 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <8 x float> %5) #8
  %30 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %28, <8 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <8 x float> %5) #8
  %31 = fadd <8 x float> %24, %29
  %32 = fsub <8 x float> %31, %24
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %24, %33
  %35 = fsub <8 x float> %29, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %26, %30
  %38 = fadd <8 x float> %37, %36
  %39 = fmul <8 x float> %9, %31
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %9, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %9, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>, <8 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <8 x float> %6) #8
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>, <8 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <8 x float> %6) #8
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <8 x float> %5) #8
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <8 x float> %5) #8
  %47 = fadd <8 x float> %39, %45
  %48 = fsub <8 x float> %47, %39
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %39, %49
  %51 = fsub <8 x float> %45, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %42, %46
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %47, %4
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %4, <8 x float> %57) #8
  %59 = fadd <8 x float> %55, %58
  %60 = fmul <8 x float> %59, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %61 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %60) #8
  %62 = bitcast <8 x i32> %61 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #8
  %66 = fmul <8 x float> %65, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %67 = fadd <8 x float> %55, %66
  %68 = fsub <8 x float> %67, %55
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %55, %69
  %71 = fsub <8 x float> %66, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %58, %72
  %74 = fmul <8 x float> %65, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %75 = fadd <8 x float> %74, %67
  %76 = fsub <8 x float> %75, %67
  %77 = fsub <8 x float> %75, %76
  %78 = fsub <8 x float> %67, %77
  %79 = fsub <8 x float> %74, %76
  %80 = fadd <8 x float> %79, %78
  %81 = fadd <8 x float> %80, %73
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %75, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %75, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %75, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %85 = fmul <8 x float> %75, %84
  %86 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %85
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %84, <8 x float> %86) #8
  %88 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %84, <8 x float> %87) #8
  %89 = fadd <8 x float> %85, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %90 = fsub <8 x float> %89, %85
  %91 = fsub <8 x float> %89, %90
  %92 = fsub <8 x float> %85, %91
  %93 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %90
  %94 = fadd <8 x float> %93, %92
  %95 = fadd <8 x float> %88, %94
  %96 = fmul <8 x float> %75, %89
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %96
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %89, <8 x float> %97) #8
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %89, <8 x float> %98) #8
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %95, <8 x float> %99) #8
  %101 = fadd <8 x float> %96, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %102 = fsub <8 x float> %101, %96
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %96, %103
  %105 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %100, %106
  %108 = fmul <8 x float> %75, %75
  %109 = fadd <8 x float> %75, %75
  %110 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %108
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %75, <8 x float> %110) #8
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> %81, <8 x float> %111) #8
  %113 = fmul <8 x float> %108, %101
  %114 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %101, <8 x float> %114) #8
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %112, <8 x float> %101, <8 x float> %115) #8
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %107, <8 x float> %116) #8
  %118 = fadd <8 x float> %75, %113
  %119 = fsub <8 x float> %118, %75
  %120 = fsub <8 x float> %118, %119
  %121 = fsub <8 x float> %75, %120
  %122 = fsub <8 x float> %113, %119
  %123 = fadd <8 x float> %122, %121
  %124 = fadd <8 x float> %81, %117
  %125 = fadd <8 x float> %123, %124
  %126 = fadd <8 x float> %118, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %127 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %126
  %128 = fadd <8 x float> %118, %127
  %129 = fadd <8 x float> %128, %125
  %130 = bitcast <2 x i64> %63 to <4 x i32>
  %131 = ashr <4 x i32> %130, <i32 1, i32 1, i32 1, i32 1>
  %132 = bitcast <2 x i64> %64 to <4 x i32>
  %133 = ashr <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  %134 = shl <4 x i32> %131, <i32 23, i32 23, i32 23, i32 23>
  %135 = add <4 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = shl <4 x i32> %133, <i32 23, i32 23, i32 23, i32 23>
  %137 = add <4 x i32> %136, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %138 = bitcast <4 x i32> %135 to <2 x i64>
  %139 = bitcast <4 x i32> %137 to <2 x i64>
  %140 = shufflevector <2 x i64> %138, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %141 = shufflevector <2 x i64> %139, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %142 = shufflevector <4 x i64> %140, <4 x i64> %141, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %143 = bitcast <4 x i64> %142 to <8 x float>
  %144 = fmul <8 x float> %126, %143
  %145 = sub <4 x i32> %130, %131
  %146 = sub <4 x i32> %132, %133
  %147 = shl <4 x i32> %145, <i32 23, i32 23, i32 23, i32 23>
  %148 = add <4 x i32> %147, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %149 = shl <4 x i32> %146, <i32 23, i32 23, i32 23, i32 23>
  %150 = add <4 x i32> %149, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %151 = bitcast <4 x i32> %148 to <2 x i64>
  %152 = bitcast <4 x i32> %150 to <2 x i64>
  %153 = shufflevector <2 x i64> %151, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %154 = shufflevector <2 x i64> %152, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %155 = shufflevector <4 x i64> %153, <4 x i64> %154, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %156 = bitcast <4 x i64> %155 to <8 x float>
  %157 = fmul <8 x float> %144, %156
  %158 = fmul <8 x float> %129, %143
  %159 = fmul <8 x float> %158, %156
  %160 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %55, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %161 = bitcast <8 x float> %160 to <4 x i64>
  %162 = bitcast <8 x float> %157 to <4 x i64>
  %163 = xor <4 x i64> %161, <i64 -1, i64 -1, i64 -1, i64 -1>
  %164 = and <4 x i64> %163, %162
  %165 = bitcast <8 x float> %159 to <4 x i64>
  %166 = and <4 x i64> %165, %163
  %167 = xor <4 x i64> %164, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = xor <4 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %169 = bitcast <4 x i64> %167 to <8 x float>
  %170 = bitcast <4 x i64> %168 to <8 x float>
  %171 = fadd <8 x float> %169, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %172 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %171
  %173 = fadd <8 x float> %172, %169
  %174 = fadd <8 x float> %173, %170
  %175 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %171, <8 x float> %55, <8 x float> %5) #8
  %176 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %174, <8 x float> %58, <8 x float> %5) #8
  %177 = fadd <8 x float> %175, %176
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %177, <8 x float> %7) #8
  %179 = bitcast <8 x float> %178 to <4 x i64>
  %180 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = xor <4 x i64> %180, %179
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fcmp uno <8 x float> %4, zeroinitializer
  %184 = sext <8 x i1> %183 to <8 x i32>
  %185 = bitcast <8 x i32> %184 to <8 x float>
  %186 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %182, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %185) #8
  ret <8 x float> %186
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erfcf8_u15fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #8
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>, i8 17) #8
  %8 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>, i8 17) #8
  %9 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %9
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %10) #8
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %4
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %9, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %9, <8 x float> %11) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %14, <8 x float> %15) #8
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> %6) #8
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> zeroinitializer, <8 x float> %6) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000>, <8 x float> <float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000>, <8 x float> %7) #8
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> <float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000>, <8 x float> %6) #8
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000>, <8 x float> %5) #8
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000>, <8 x float> <float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000>, <8 x float> %7) #8
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000>, <8 x float> %6) #8
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %23, <8 x float> <float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000>, <8 x float> %5) #8
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %17, <8 x float> %24) #8
  %26 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000>, <8 x float> <float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000>, <8 x float> %7) #8
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %26, <8 x float> <float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000>, <8 x float> %6) #8
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000>, <8 x float> %5) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %17, <8 x float> %28) #8
  %30 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000>, <8 x float> <float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000>, <8 x float> %7) #8
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000>, <8 x float> %6) #8
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> <float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000>, <8 x float> %5) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %17, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000>, <8 x float> <float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000>, <8 x float> %7) #8
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> <float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000>, <8 x float> %6) #8
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000>, <8 x float> %5) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %17, <8 x float> %36) #8
  %38 = fmul <8 x float> %17, %37
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %37, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %37, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000>, <8 x float> <float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000>, <8 x float> %7) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000>, <8 x float> <float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000>, <8 x float> %7) #8
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> <float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000>, <8 x float> %6) #8
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000>, <8 x float> %6) #8
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> <float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000>, <8 x float> %5) #8
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %45, <8 x float> <float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000>, <8 x float> %5) #8
  %48 = fadd <8 x float> %38, %46
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %38, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %41, %47
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %17, %48
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %17, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %17, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %18, <8 x float> %59) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000>, <8 x float> <float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000>, <8 x float> %7) #8
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000>, <8 x float> <float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000>, <8 x float> %7) #8
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %61, <8 x float> <float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000>, <8 x float> %6) #8
  %64 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000>, <8 x float> %6) #8
  %65 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000>, <8 x float> %5) #8
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000>, <8 x float> %5) #8
  %67 = fadd <8 x float> %56, %65
  %68 = fsub <8 x float> %67, %56
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %56, %69
  %71 = fsub <8 x float> %65, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %60, %66
  %74 = fadd <8 x float> %73, %72
  %75 = fmul <8 x float> %17, %67
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %17, <8 x float> %76) #8
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %17, <8 x float> %77) #8
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %18, <8 x float> %78) #8
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000>, <8 x float> <float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000>, <8 x float> %7) #8
  %81 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000>, <8 x float> <float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000>, <8 x float> %7) #8
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000>, <8 x float> %6) #8
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %81, <8 x float> <float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000>, <8 x float> %6) #8
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> <float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000>, <8 x float> %5) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000>, <8 x float> %5) #8
  %86 = fadd <8 x float> %75, %84
  %87 = fsub <8 x float> %86, %75
  %88 = fsub <8 x float> %86, %87
  %89 = fsub <8 x float> %75, %88
  %90 = fsub <8 x float> %84, %87
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %79, %85
  %93 = fadd <8 x float> %92, %91
  %94 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %95, <8 x float> %86, <8 x float> %6) #8
  %97 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %93, <8 x float> %6) #8
  %98 = fmul <8 x float> %96, %4
  %99 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %98
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %4, <8 x float> %99) #8
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %4, <8 x float> %100) #8
  %102 = fadd <8 x float> %86, %98
  %103 = fsub <8 x float> %102, %98
  %104 = fsub <8 x float> %102, %103
  %105 = fsub <8 x float> %98, %104
  %106 = fsub <8 x float> %86, %103
  %107 = fadd <8 x float> %106, %105
  %108 = fadd <8 x float> %101, %93
  %109 = fadd <8 x float> %108, %107
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> %98, <8 x float> %6) #8
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %101, <8 x float> %6) #8
  %112 = fadd <8 x float> %110, %111
  %113 = fmul <8 x float> %112, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %114 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %113) #8
  %115 = bitcast <8 x i32> %114 to <4 x i64>
  %116 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %117 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %118 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %114) #8
  %119 = fmul <8 x float> %118, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %120 = fadd <8 x float> %110, %119
  %121 = fsub <8 x float> %120, %110
  %122 = fsub <8 x float> %120, %121
  %123 = fsub <8 x float> %110, %122
  %124 = fsub <8 x float> %119, %121
  %125 = fadd <8 x float> %124, %123
  %126 = fadd <8 x float> %111, %125
  %127 = fmul <8 x float> %118, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %128 = fadd <8 x float> %127, %120
  %129 = fsub <8 x float> %128, %120
  %130 = fsub <8 x float> %128, %129
  %131 = fsub <8 x float> %120, %130
  %132 = fsub <8 x float> %127, %129
  %133 = fadd <8 x float> %132, %131
  %134 = fadd <8 x float> %133, %126
  %135 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %128, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %135, <8 x float> %128, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %137 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %136, <8 x float> %128, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %138 = fmul <8 x float> %128, %137
  %139 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %138
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %137, <8 x float> %139) #8
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %134, <8 x float> %137, <8 x float> %140) #8
  %142 = fadd <8 x float> %138, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %143 = fsub <8 x float> %142, %138
  %144 = fsub <8 x float> %142, %143
  %145 = fsub <8 x float> %138, %144
  %146 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %143
  %147 = fadd <8 x float> %146, %145
  %148 = fadd <8 x float> %141, %147
  %149 = fmul <8 x float> %128, %142
  %150 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %149
  %151 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %142, <8 x float> %150) #8
  %152 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %134, <8 x float> %142, <8 x float> %151) #8
  %153 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %148, <8 x float> %152) #8
  %154 = fadd <8 x float> %149, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %155 = fsub <8 x float> %154, %149
  %156 = fsub <8 x float> %154, %155
  %157 = fsub <8 x float> %149, %156
  %158 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %155
  %159 = fadd <8 x float> %158, %157
  %160 = fadd <8 x float> %153, %159
  %161 = fmul <8 x float> %128, %128
  %162 = fadd <8 x float> %128, %128
  %163 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %161
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %128, <8 x float> %163) #8
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %134, <8 x float> %164) #8
  %166 = fmul <8 x float> %161, %154
  %167 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %166
  %168 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %161, <8 x float> %154, <8 x float> %167) #8
  %169 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %165, <8 x float> %154, <8 x float> %168) #8
  %170 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %161, <8 x float> %160, <8 x float> %169) #8
  %171 = fadd <8 x float> %128, %166
  %172 = fsub <8 x float> %171, %128
  %173 = fsub <8 x float> %171, %172
  %174 = fsub <8 x float> %128, %173
  %175 = fsub <8 x float> %166, %172
  %176 = fadd <8 x float> %175, %174
  %177 = fadd <8 x float> %134, %170
  %178 = fadd <8 x float> %176, %177
  %179 = fadd <8 x float> %171, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %180 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %179
  %181 = fadd <8 x float> %171, %180
  %182 = fadd <8 x float> %181, %178
  %183 = bitcast <2 x i64> %116 to <4 x i32>
  %184 = ashr <4 x i32> %183, <i32 1, i32 1, i32 1, i32 1>
  %185 = bitcast <2 x i64> %117 to <4 x i32>
  %186 = ashr <4 x i32> %185, <i32 1, i32 1, i32 1, i32 1>
  %187 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %188 = add <4 x i32> %187, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %189 = shl <4 x i32> %186, <i32 23, i32 23, i32 23, i32 23>
  %190 = add <4 x i32> %189, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %191 = bitcast <4 x i32> %188 to <2 x i64>
  %192 = bitcast <4 x i32> %190 to <2 x i64>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <2 x i64> %192, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %195 = shufflevector <4 x i64> %193, <4 x i64> %194, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %196 = bitcast <4 x i64> %195 to <8 x float>
  %197 = fmul <8 x float> %179, %196
  %198 = sub <4 x i32> %183, %184
  %199 = sub <4 x i32> %185, %186
  %200 = shl <4 x i32> %198, <i32 23, i32 23, i32 23, i32 23>
  %201 = add <4 x i32> %200, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %202 = shl <4 x i32> %199, <i32 23, i32 23, i32 23, i32 23>
  %203 = add <4 x i32> %202, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %204 = bitcast <4 x i32> %201 to <2 x i64>
  %205 = bitcast <4 x i32> %203 to <2 x i64>
  %206 = shufflevector <2 x i64> %204, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %207 = shufflevector <2 x i64> %205, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %208 = shufflevector <4 x i64> %206, <4 x i64> %207, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %209 = bitcast <4 x i64> %208 to <8 x float>
  %210 = fmul <8 x float> %197, %209
  %211 = fmul <8 x float> %182, %196
  %212 = fmul <8 x float> %211, %209
  %213 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %110, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %214 = bitcast <8 x float> %213 to <4 x i64>
  %215 = bitcast <8 x float> %210 to <4 x i64>
  %216 = xor <4 x i64> %214, <i64 -1, i64 -1, i64 -1, i64 -1>
  %217 = and <4 x i64> %216, %215
  %218 = bitcast <8 x float> %212 to <4 x i64>
  %219 = and <4 x i64> %218, %216
  %220 = bitcast <4 x i64> %217 to <8 x float>
  %221 = bitcast <4 x i64> %219 to <8 x float>
  %222 = fmul <8 x float> %17, %220
  %223 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %222
  %224 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %220, <8 x float> %17, <8 x float> %223) #8
  %225 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %221, <8 x float> %17, <8 x float> %224) #8
  %226 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %220, <8 x float> %18, <8 x float> %225) #8
  %227 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %222, <8 x float> %220, <8 x float> %6) #8
  %228 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %226, <8 x float> %221, <8 x float> %6) #8
  %229 = fadd <8 x float> %227, %228
  %230 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %229, <8 x float> %8) #8
  %231 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %232 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %233 = bitcast <2 x i64> %231 to <4 x i32>
  %234 = ashr <4 x i32> %233, <i32 31, i32 31, i32 31, i32 31>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = bitcast <2 x i64> %232 to <4 x i32>
  %237 = ashr <4 x i32> %236, <i32 31, i32 31, i32 31, i32 31>
  %238 = bitcast <4 x i32> %237 to <2 x i64>
  %239 = shufflevector <2 x i64> %235, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %240 = shufflevector <2 x i64> %238, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %241 = shufflevector <4 x i64> %239, <4 x i64> %240, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %242 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %230
  %243 = bitcast <4 x i64> %241 to <8 x float>
  %244 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %230, <8 x float> %242, <8 x float> %243) #8
  %245 = fcmp uno <8 x float> %0, zeroinitializer
  %246 = sext <8 x i1> %245 to <8 x i32>
  %247 = bitcast <8 x i32> %246 to <8 x float>
  %248 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %244, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %247) #8
  ret <8 x float> %248
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospif8_u05fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %25, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> %26, <8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %26, <8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>) #8
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %33 = fsub <8 x float> %32, %31
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %31, %34
  %36 = fsub <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %37, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %39 = fmul <8 x float> %26, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %32, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %32, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %38, <8 x float> %42) #8
  %44 = fadd <8 x float> %39, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %51 = fadd <8 x float> %50, %49
  %52 = fmul <8 x float> %25, %44
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %25, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %25, <8 x float> %54) #8
  %56 = fadd <8 x float> %52, %55
  %57 = bitcast <8 x float> %1 to <4 x i64>
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %59 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %60 = bitcast <2 x i64> %58 to <4 x i32>
  %61 = icmp eq <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = bitcast <2 x i64> %59 to <4 x i32>
  %65 = icmp eq <4 x i32> %64, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %66 = sext <4 x i1> %65 to <4 x i32>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <4 x i64> %68, <4 x i64> %69, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %26, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %26, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>) #8
  %75 = fmul <8 x float> %26, %74
  %76 = fadd <8 x float> %75, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %77 = fsub <8 x float> %76, %75
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %75, %78
  %80 = fsub <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %81, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %83 = fmul <8 x float> %26, %76
  %84 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %83
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %76, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %76, <8 x float> %85) #8
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %82, <8 x float> %86) #8
  %88 = fadd <8 x float> %83, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %89 = fsub <8 x float> %88, %83
  %90 = fsub <8 x float> %88, %89
  %91 = fsub <8 x float> %83, %90
  %92 = fsub <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %89
  %93 = fadd <8 x float> %92, %91
  %94 = fadd <8 x float> %87, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %95 = fadd <8 x float> %94, %93
  %96 = fmul <8 x float> %26, %88
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %96
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %26, <8 x float> %97) #8
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %26, <8 x float> %98) #8
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %28, <8 x float> %99) #8
  %101 = fadd <8 x float> %96, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %102 = fsub <8 x float> %101, %96
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %96, %103
  %105 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %100, %106
  %108 = fadd <8 x float> %101, %107
  %109 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %110 = icmp eq <4 x i32> %109, zeroinitializer
  %111 = sext <4 x i1> %110 to <4 x i32>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %114 = icmp eq <4 x i32> %113, zeroinitializer
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <2 x i64> %116, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %119 = shufflevector <4 x i64> %117, <4 x i64> %118, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %120 = bitcast <4 x i64> %119 to <8 x float>
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> %72, <8 x float> %120) #8
  %122 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %108, <8 x float> %120) #8
  %123 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %124 = icmp ne <4 x i32> %123, zeroinitializer
  %125 = sext <4 x i1> %124 to <4 x i32>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %128 = icmp ne <4 x i32> %127, zeroinitializer
  %129 = sext <4 x i1> %128 to <4 x i32>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <4 x i64> %131, <4 x i64> %132, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <8 x float> %121 to <4 x i64>
  %136 = xor <4 x i64> %134, %135
  %137 = bitcast <2 x i64> %18 to <4 x i32>
  %138 = add <4 x i32> %137, <i32 2, i32 2, i32 2, i32 2>
  %139 = bitcast <2 x i64> %19 to <4 x i32>
  %140 = add <4 x i32> %139, <i32 2, i32 2, i32 2, i32 2>
  %141 = and <4 x i32> %138, <i32 4, i32 4, i32 4, i32 4>
  %142 = icmp ne <4 x i32> %141, zeroinitializer
  %143 = sext <4 x i1> %142 to <4 x i32>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = and <4 x i32> %140, <i32 4, i32 4, i32 4, i32 4>
  %146 = icmp ne <4 x i32> %145, zeroinitializer
  %147 = sext <4 x i1> %146 to <4 x i32>
  %148 = bitcast <4 x i32> %147 to <2 x i64>
  %149 = shufflevector <2 x i64> %144, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %151 = shufflevector <4 x i64> %149, <4 x i64> %150, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %152 = and <4 x i64> %151, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %153 = bitcast <8 x float> %122 to <4 x i64>
  %154 = xor <4 x i64> %152, %153
  %155 = and <4 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %156 = bitcast <4 x i64> %155 to <8 x float>
  %157 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %156, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %158 = bitcast <8 x float> %157 to <4 x i64>
  %159 = xor <4 x i64> %158, <i64 -1, i64 -1, i64 -1, i64 -1>
  %160 = and <4 x i64> %136, %159
  %161 = and <4 x i64> %154, %159
  %162 = fcmp oeq <8 x float> %156, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %163 = sext <8 x i1> %162 to <8 x i32>
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = or <4 x i64> %160, %164
  %166 = or <4 x i64> %161, %164
  %167 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %165, <4 x i64>* %167, align 32, !alias.scope !31
  %168 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %169 = bitcast <8 x float>* %168 to <4 x i64>*
  store <4 x i64> %166, <4 x i64>* %169, align 32, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospif8_u35fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>, <8 x float> %26, <8 x float> <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %26, <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %26, <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>) #8
  %30 = fmul <8 x float> %25, %29
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>, <8 x float> %26, <8 x float> <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %26, <8 x float> <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %26, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %26, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %35 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %36 = icmp eq <4 x i32> %35, zeroinitializer
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %40 = icmp eq <4 x i32> %39, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %30, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %34, <8 x float> %46) #8
  %49 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %50 = icmp ne <4 x i32> %49, zeroinitializer
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %54 = icmp ne <4 x i32> %53, zeroinitializer
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = and <4 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <8 x float> %47 to <4 x i64>
  %62 = xor <4 x i64> %60, %61
  %63 = bitcast <2 x i64> %18 to <4 x i32>
  %64 = add <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = bitcast <2 x i64> %19 to <4 x i32>
  %66 = add <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = and <4 x i32> %64, <i32 4, i32 4, i32 4, i32 4>
  %68 = icmp ne <4 x i32> %67, zeroinitializer
  %69 = sext <4 x i1> %68 to <4 x i32>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = and <4 x i32> %66, <i32 4, i32 4, i32 4, i32 4>
  %72 = icmp ne <4 x i32> %71, zeroinitializer
  %73 = sext <4 x i1> %72 to <4 x i32>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = shufflevector <2 x i64> %70, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <2 x i64> %74, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <4 x i64> %75, <4 x i64> %76, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %78 = and <4 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %79 = bitcast <8 x float> %48 to <4 x i64>
  %80 = xor <4 x i64> %78, %79
  %81 = bitcast <8 x float> %1 to <4 x i64>
  %82 = and <4 x i64> %81, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %83, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = xor <4 x i64> %85, <i64 -1, i64 -1, i64 -1, i64 -1>
  %87 = and <4 x i64> %62, %86
  %88 = and <4 x i64> %80, %86
  %89 = fcmp oeq <8 x float> %83, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %90 = sext <8 x i1> %89 to <8 x i32>
  %91 = bitcast <8 x i32> %90 to <4 x i64>
  %92 = or <4 x i64> %87, %91
  %93 = or <4 x i64> %88, %91
  %94 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %92, <4 x i64>* %94, align 32, !alias.scope !34
  %95 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %96 = bitcast <8 x float>* %95 to <4 x i64>*
  store <4 x i64> %93, <4 x i64>* %96, align 32, !alias.scope !34
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_modff8_fma4(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32, !alias.scope !37
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32, !alias.scope !37
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5 = bitcast <2 x i64> %3 to <4 x i32>
  %6 = ashr <4 x i32> %5, <i32 31, i32 31, i32 31, i32 31>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %4 to <4 x i32>
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %7, <i64 8589934594, i64 8589934594>
  %12 = and <2 x i64> %10, <i64 8589934594, i64 8589934594>
  %13 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <4 x i64> %13 to <8 x float>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = bitcast <2 x i64> %12 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %14, i8 17) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %16 to <16 x i8>
  %25 = bitcast <2 x i64> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #8
  %27 = bitcast <2 x i64> %12 to <16 x i8>
  %28 = bitcast <4 x i32> %18 to <16 x i8>
  %29 = bitcast <2 x i64> %22 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %31, <8 x float> %19) #8
  %33 = fmul <8 x float> %32, %32
  %34 = fmul <8 x float> %33, %33
  %35 = fmul <8 x float> %34, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #8
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %36, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %39, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %38, <8 x float> %41) #8
  %43 = fmul <8 x float> %33, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %43, <8 x float> %32) #8
  %45 = bitcast <16 x i8> %26 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = icmp ne <4 x i32> %46, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = bitcast <16 x i8> %30 to <4 x i32>
  %51 = and <4 x i32> %50, <i32 1, i32 1, i32 1, i32 1>
  %52 = icmp ne <4 x i32> %51, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %44
  %59 = bitcast <4 x i64> %57 to <8 x float>
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> %58, <8 x float> %59) #8
  %61 = and <4 x i32> %45, <i32 2, i32 2, i32 2, i32 2>
  %62 = icmp ne <4 x i32> %61, zeroinitializer
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = and <4 x i32> %50, <i32 2, i32 2, i32 2, i32 2>
  %66 = icmp ne <4 x i32> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i32>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <2 x i64> %68, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %71 = shufflevector <4 x i64> %69, <4 x i64> %70, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %72 = and <4 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x float> %60 to <4 x i64>
  %74 = xor <4 x i64> %72, %73
  %75 = bitcast <4 x i64> %74 to <8 x float>
  ret <8 x float> %75
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atan2f8_u35fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = ashr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = bitcast <2 x i64> %8 to <4 x i32>
  %13 = ashr <4 x i32> %12, <i32 31, i32 31, i32 31, i32 31>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = and <2 x i64> %11, <i64 -4294967298, i64 -4294967298>
  %16 = and <2 x i64> %14, <i64 -4294967298, i64 -4294967298>
  %17 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <2 x i64> %15 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %16 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %18, <8 x float> %5, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = bitcast <2 x i64> %15 to <16 x i8>
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %25 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %16 to <16 x i8>
  %32 = bitcast <4 x i32> %22 to <16 x i8>
  %33 = bitcast <2 x i64> %26 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <16 x i8> %30 to <2 x i64>
  %36 = bitcast <16 x i8> %34 to <2 x i64>
  %37 = or <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %38, <8 x float> %23) #8
  %40 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %18, <8 x float> %5) #8
  %41 = fdiv <8 x float> %39, %40
  %42 = fmul <8 x float> %41, %41
  %43 = fmul <8 x float> %42, %42
  %44 = fmul <8 x float> %43, %43
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #8
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %45, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #8
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %48, <8 x float> %49) #8
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %47, <8 x float> %50) #8
  %52 = fmul <8 x float> %42, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %52, <8 x float> %41) #8
  %54 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x i64> %54, <4 x i64> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = bitcast <4 x i64> %56 to <8 x i32>
  %58 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %53) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = xor <4 x i64> %61, %60
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = fcmp oeq <8 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = fcmp oeq <8 x float> %1, zeroinitializer
  %68 = or <8 x i1> %64, %67
  %69 = sext <8 x i1> %68 to <8 x i32>
  %70 = or <4 x i64> %61, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %71 = and <4 x i64> %70, %66
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %72
  %74 = bitcast <8 x i32> %69 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %73, <8 x float> %74) #8
  %76 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = or <4 x i64> %61, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %79 = and <4 x i64> %78, %66
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %80
  %82 = bitcast <8 x i32> %77 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> %81, <8 x float> %82) #8
  %84 = fcmp oeq <8 x float> %0, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = shufflevector <2 x i64> %11, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = and <4 x i64> %88, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = bitcast <8 x i32> %85 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> %90, <8 x float> %91) #8
  %93 = fcmp uno <8 x float> %0, %1
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = bitcast <8 x i32> %94 to <4 x i64>
  %96 = bitcast <8 x float> %92 to <4 x i64>
  %97 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = xor <4 x i64> %97, %96
  %99 = or <4 x i64> %98, %95
  %100 = bitcast <4 x i64> %99 to <8 x float>
  ret <8 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %16 = fmul <8 x float> %9, %11
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %11) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %5) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = xor <4 x i64> %21, %20
  %23 = bitcast <4 x i64> %22 to <8 x float>
  ret <8 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acosf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #8
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %21 = fmul <8 x float> %10, %16
  %22 = fmul <8 x float> %21, %20
  %23 = bitcast <8 x float> %16 to <4 x i64>
  %24 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = xor <4 x i64> %24, %23
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = bitcast <8 x float> %22 to <4 x i64>
  %28 = xor <4 x i64> %24, %27
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fadd <8 x float> %26, %29
  %31 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %30
  %32 = fadd <8 x float> %16, %22
  %33 = fmul <8 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %31, <8 x float> %5) #8
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %38 = and <4 x i64> %36, %37
  %39 = bitcast <8 x float> %34 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fadd <8 x float> %41, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %43 = bitcast <4 x i64> %38 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %42, <8 x float> %43) #8
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atan2f8_u10fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i8 17) #8
  %7 = fmul <8 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %7, <8 x float> %6) #8
  %9 = fmul <8 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %9, <8 x float> %6) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> zeroinitializer, i8 17) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %20) #8
  %22 = and <4 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %23 = bitcast <8 x float> %8 to <4 x i64>
  %24 = xor <4 x i64> %22, %23
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = bitcast <4 x i64> %22 to <8 x float>
  %27 = bitcast <16 x i8> %19 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = bitcast <16 x i8> %21 to <4 x i32>
  %30 = add <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %25, <8 x float> %13, i8 17) #8
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <4 x i32> %28 to <16 x i8>
  %36 = bitcast <2 x i64> %33 to <16 x i8>
  %37 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> %35, <16 x i8> %36) #8
  %38 = bitcast <4 x i32> %30 to <16 x i8>
  %39 = bitcast <2 x i64> %34 to <16 x i8>
  %40 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %38, <16 x i8> %39) #8
  %41 = bitcast <16 x i8> %37 to <2 x i64>
  %42 = bitcast <16 x i8> %40 to <2 x i64>
  %43 = xor <4 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = xor <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <4 x i64> %43 to <8 x float>
  %46 = bitcast <4 x i64> %44 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %45, <8 x float> %31) #8
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %46, <8 x float> %31) #8
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %25, <8 x float> %13, <8 x float> %31) #8
  %50 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %26, <8 x float> zeroinitializer, <8 x float> %31) #8
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %52 = fmul <8 x float> %47, %51
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %47, <8 x float> %53) #8
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %51, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %51, <8 x float> %56) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %51, <8 x float> %54) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %58, <8 x float> %59) #8
  %61 = fmul <8 x float> %52, %52
  %62 = fadd <8 x float> %52, %52
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %52, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %60, <8 x float> %64) #8
  %66 = fadd <8 x float> %61, %65
  %67 = fsub <8 x float> %61, %66
  %68 = fadd <8 x float> %65, %67
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %66, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %66, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #8
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %66, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #8
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %66, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %66, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %66, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %66, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #8
  %76 = fmul <8 x float> %66, %75
  %77 = fadd <8 x float> %76, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %78 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %77
  %79 = fadd <8 x float> %76, %78
  %80 = fmul <8 x float> %66, %77
  %81 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %77, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %82) #8
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %79, <8 x float> %83) #8
  %85 = fadd <8 x float> %80, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %85
  %87 = fadd <8 x float> %80, %86
  %88 = fadd <8 x float> %84, %87
  %89 = fmul <8 x float> %52, %85
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %85, <8 x float> %90) #8
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %85, <8 x float> %91) #8
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %88, <8 x float> %92) #8
  %94 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = bitcast <4 x i64> %96 to <8 x i32>
  %98 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %97) #8
  %99 = fmul <8 x float> %98, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %99
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %98, <8 x float> %100) #8
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %98, <8 x float> %101) #8
  %103 = fadd <8 x float> %89, %99
  %104 = fsub <8 x float> %99, %103
  %105 = fadd <8 x float> %89, %104
  %106 = fadd <8 x float> %102, %105
  %107 = fadd <8 x float> %93, %106
  %108 = fadd <8 x float> %103, %107
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = and <4 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = xor <4 x i64> %110, %109
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = and <4 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fcmp oeq <8 x float> %114, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = fcmp oeq <8 x float> %8, zeroinitializer
  %119 = or <8 x i1> %115, %118
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = or <4 x i64> %110, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %122 = and <4 x i64> %121, %117
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %123
  %125 = bitcast <8 x i32> %120 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> %124, <8 x float> %125) #8
  %127 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = or <4 x i64> %110, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %130 = and <4 x i64> %129, %117
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %131
  %133 = bitcast <8 x i32> %128 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> %132, <8 x float> %133) #8
  %135 = fcmp oeq <8 x float> %10, zeroinitializer
  %136 = sext <8 x i1> %135 to <8 x i32>
  %137 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %138 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %139 = bitcast <2 x i64> %137 to <4 x i32>
  %140 = ashr <4 x i32> %139, <i32 31, i32 31, i32 31, i32 31>
  %141 = bitcast <4 x i32> %140 to <2 x i64>
  %142 = bitcast <2 x i64> %138 to <4 x i32>
  %143 = ashr <4 x i32> %142, <i32 31, i32 31, i32 31, i32 31>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %141, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %146 = shufflevector <2 x i64> %144, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %147 = shufflevector <4 x i64> %145, <4 x i64> %146, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %148 = and <4 x i64> %147, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %149 = bitcast <4 x i64> %148 to <8 x float>
  %150 = bitcast <8 x i32> %136 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> %149, <8 x float> %150) #8
  %152 = fcmp uno <8 x float> %10, %8
  %153 = sext <8 x i1> %152 to <8 x i32>
  %154 = bitcast <8 x i32> %153 to <4 x i64>
  %155 = bitcast <8 x float> %151 to <4 x i64>
  %156 = and <4 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = xor <4 x i64> %156, %155
  %158 = or <4 x i64> %157, %154
  %159 = bitcast <4 x i64> %158 to <8 x float>
  ret <8 x float> %159
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #8
  %14 = fadd <8 x float> %9, %11
  %15 = fsub <8 x float> %14, %9
  %16 = fsub <8 x float> %14, %15
  %17 = fsub <8 x float> %9, %16
  %18 = fsub <8 x float> %11, %15
  %19 = fadd <8 x float> %18, %17
  %20 = fadd <8 x float> %13, %19
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %14
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %21, <8 x float> %26) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %24, <8 x float> %28) #8
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %4, <8 x float> %5) #8
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> zeroinitializer, <8 x float> %5) #8
  %34 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %36) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #8
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %43 = fmul <8 x float> %9, %37
  %44 = fmul <8 x float> %43, %42
  %45 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %37
  %46 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %47 = fsub <8 x float> %46, %37
  %48 = fadd <8 x float> %47, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %45, %44
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %51, %44
  %53 = fadd <8 x float> %49, %52
  %54 = fadd <8 x float> %37, %44
  %55 = fadd <8 x float> %50, %53
  %56 = fmul <8 x float> %55, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %5) #8
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = xor <4 x i64> %59, %58
  %61 = bitcast <4 x i64> %60 to <8 x float>
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acosf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = fmul <8 x float> %11, %11
  %13 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> %13) #8
  %15 = fadd <8 x float> %10, %12
  %16 = fsub <8 x float> %15, %10
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %10, %17
  %19 = fsub <8 x float> %12, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %14, %20
  %22 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %25 = fmul <8 x float> %22, %24
  %26 = fmul <8 x float> %22, %15
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %22, <8 x float> %28) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %29) #8
  %31 = fmul <8 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fmul <8 x float> %30, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %4, <8 x float> %5) #8
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %5) #8
  %35 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %37) #8
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> zeroinitializer, <8 x float> %37) #8
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #8
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #8
  %44 = fmul <8 x float> %10, %38
  %45 = fmul <8 x float> %44, %43
  %46 = bitcast <8 x float> %38 to <4 x i64>
  %47 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %45 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fadd <8 x float> %49, %52
  %54 = fsub <8 x float> %49, %53
  %55 = fadd <8 x float> %54, %52
  %56 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %57 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %56
  %58 = fsub <8 x float> %57, %53
  %59 = fadd <8 x float> %58, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %60 = fsub <8 x float> %59, %55
  %61 = fadd <8 x float> %38, %45
  %62 = fsub <8 x float> %38, %61
  %63 = fadd <8 x float> %45, %62
  %64 = fadd <8 x float> %39, %63
  %65 = fmul <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %66 = fmul <8 x float> %64, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %56, <8 x float> %5) #8
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> %60, <8 x float> %5) #8
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %72 = and <4 x i64> %70, %71
  %73 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %67
  %74 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %73
  %75 = fsub <8 x float> %74, %67
  %76 = fadd <8 x float> %75, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %77 = fsub <8 x float> %76, %68
  %78 = bitcast <4 x i64> %72 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %73, <8 x float> %78) #8
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %78) #8
  %81 = fadd <8 x float> %79, %80
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %9) #8
  %11 = bitcast <2 x i64> %8 to <16 x i8>
  %12 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %11) #8
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %13, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %15 = bitcast <4 x i64> %14 to <8 x float>
  %16 = bitcast <4 x i64> %13 to <8 x float>
  %17 = bitcast <16 x i8> %10 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = bitcast <16 x i8> %12 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> %4, i8 17) #8
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast <4 x i32> %18 to <16 x i8>
  %26 = bitcast <2 x i64> %23 to <16 x i8>
  %27 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %10, <16 x i8> %25, <16 x i8> %26) #8
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %24 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %12, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <16 x i8> %27 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <2 x i64>
  %33 = xor <4 x i64> %13, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %34 = xor <4 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <4 x i64> %33 to <8 x float>
  %36 = bitcast <4 x i64> %34 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %35, <8 x float> %21) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %36, <8 x float> %21) #8
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %4, <8 x float> %21) #8
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> zeroinitializer, <8 x float> %21) #8
  %41 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %42 = fmul <8 x float> %37, %41
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %37, <8 x float> %43) #8
  %45 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %41, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %47 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %40
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %41, <8 x float> %46) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %41, <8 x float> %44) #8
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %48, <8 x float> %49) #8
  %51 = fmul <8 x float> %42, %42
  %52 = fadd <8 x float> %42, %42
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %42, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %50, <8 x float> %54) #8
  %56 = fadd <8 x float> %51, %55
  %57 = fsub <8 x float> %51, %56
  %58 = fadd <8 x float> %55, %57
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %56, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %56, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %56, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %56, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %56, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #8
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %56, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %56, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #8
  %66 = fmul <8 x float> %56, %65
  %67 = fadd <8 x float> %66, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %68 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %67
  %69 = fadd <8 x float> %66, %68
  %70 = fmul <8 x float> %56, %67
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %70
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %67, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %67, <8 x float> %72) #8
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %69, <8 x float> %73) #8
  %75 = fadd <8 x float> %70, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %77 = fadd <8 x float> %70, %76
  %78 = fadd <8 x float> %74, %77
  %79 = fmul <8 x float> %42, %75
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %75, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %75, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %78, <8 x float> %82) #8
  %84 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x i64> %84, <4 x i64> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %87 = bitcast <4 x i64> %86 to <8 x i32>
  %88 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %87) #8
  %89 = fmul <8 x float> %88, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %88, <8 x float> %90) #8
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %88, <8 x float> %91) #8
  %93 = fadd <8 x float> %79, %89
  %94 = fsub <8 x float> %89, %93
  %95 = fadd <8 x float> %79, %94
  %96 = fadd <8 x float> %92, %95
  %97 = fadd <8 x float> %83, %96
  %98 = fadd <8 x float> %93, %97
  %99 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %100 = sext <8 x i1> %99 to <8 x i32>
  %101 = bitcast <8 x i32> %100 to <8 x float>
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %98, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %101) #8
  %103 = bitcast <8 x float> %102 to <4 x i64>
  %104 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = xor <4 x i64> %104, %103
  %106 = bitcast <4 x i64> %105 to <8 x float>
  ret <8 x float> %106
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_logf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %52, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %53, <8 x float> %52, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %52, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %52, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #8
  %57 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <8 x i32>
  %61 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %60) #8
  %62 = fmul <8 x float> %61, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %56, <8 x float> %62) #8
  %64 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <8 x float>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %66) #8
  %68 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = fcmp uno <8 x float> %5, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = or <4 x i64> %69, %72
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %74) #8
  %76 = fcmp oeq <8 x float> %5, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %78) #8
  ret <8 x float> %79
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_expf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %9, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %15 = fmul <8 x float> %9, %9
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %14, <8 x float> %9) #8
  %17 = fadd <8 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = bitcast <2 x i64> %5 to <4 x i32>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = bitcast <2 x i64> %6 to <4 x i32>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %23 to <2 x i64>
  %27 = bitcast <4 x i32> %25 to <2 x i64>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <4 x i64> %28, <4 x i64> %29, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %31 = bitcast <4 x i64> %30 to <8 x float>
  %32 = fmul <8 x float> %17, %31
  %33 = sub <4 x i32> %18, %19
  %34 = sub <4 x i32> %20, %21
  %35 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fmul <8 x float> %32, %44
  %46 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = bitcast <8 x float> %45 to <4 x i64>
  %49 = xor <4 x i64> %47, <i64 -1, i64 -1, i64 -1, i64 -1>
  %50 = and <4 x i64> %48, %49
  %51 = bitcast <4 x i64> %50 to <8 x float>
  %52 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #8
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %52) #8
  ret <8 x float> %53
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cbrtf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %96, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %100) #8
  %102 = bitcast <2 x i64> %69 to <4 x i32>
  %103 = add <4 x i32> %102, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %104 = bitcast <2 x i64> %70 to <4 x i32>
  %105 = add <4 x i32> %104, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %106 = ashr <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %107 = ashr <4 x i32> %105, <i32 1, i32 1, i32 1, i32 1>
  %108 = shl <4 x i32> %106, <i32 23, i32 23, i32 23, i32 23>
  %109 = add <4 x i32> %108, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %110 = shl <4 x i32> %107, <i32 23, i32 23, i32 23, i32 23>
  %111 = add <4 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <4 x i32> %109 to <2 x i64>
  %113 = bitcast <4 x i32> %111 to <2 x i64>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <4 x i64> %114, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = fmul <8 x float> %101, %117
  %119 = sub <4 x i32> %103, %106
  %120 = sub <4 x i32> %105, %107
  %121 = shl <4 x i32> %119, <i32 23, i32 23, i32 23, i32 23>
  %122 = add <4 x i32> %121, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %123 = shl <4 x i32> %120, <i32 23, i32 23, i32 23, i32 23>
  %124 = add <4 x i32> %123, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %125 = bitcast <4 x i32> %122 to <2 x i64>
  %126 = bitcast <4 x i32> %124 to <2 x i64>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fmul <8 x float> %118, %130
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = bitcast <8 x float> %59 to <4 x i64>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %132
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = and <4 x i64> %133, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %138, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #8
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %139, <8 x float> %138, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #8
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %138, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #8
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %138, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #8
  %143 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %138, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #8
  %144 = fmul <8 x float> %143, %138
  %145 = fmul <8 x float> %143, %144
  %146 = fmul <8 x float> %145, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %147 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %145, <8 x float> %143, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #8
  %148 = fmul <8 x float> %147, %146
  %149 = fsub <8 x float> %145, %148
  %150 = fmul <8 x float> %149, %136
  ret <8 x float> %150
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cbrtf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <8 x float> %89) #8
  %92 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %93 = sext <4 x i1> %92 to <4 x i32>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <4 x i64> %98, <4 x i64> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = bitcast <4 x i64> %100 to <8 x float>
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %101) #8
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %91, <8 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <8 x float> %101) #8
  %104 = bitcast <8 x float> %102 to <4 x i64>
  %105 = bitcast <8 x float> %59 to <4 x i64>
  %106 = and <4 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %104
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = bitcast <8 x float> %103 to <4 x i64>
  %110 = xor <4 x i64> %106, %109
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %113, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #8
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %113, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #8
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %113, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #8
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %113, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #8
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %113, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #8
  %119 = fmul <8 x float> %118, %118
  %120 = fmul <8 x float> %119, %119
  %121 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %122 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %121, <8 x float> %120, <8 x float> %118) #8
  %123 = fmul <8 x float> %122, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %124 = fsub <8 x float> %118, %123
  %125 = fmul <8 x float> %124, %124
  %126 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %125
  %127 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %124, <8 x float> %124, <8 x float> %126) #8
  %128 = fmul <8 x float> %125, %125
  %129 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %128
  %130 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %125, <8 x float> %129) #8
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %125, <8 x float> %130) #8
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %127, <8 x float> %131) #8
  %133 = fmul <8 x float> %128, %113
  %134 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %133
  %135 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %113, <8 x float> %134) #8
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %132, <8 x float> %113, <8 x float> %135) #8
  %137 = bitcast <8 x float> %124 to <4 x i64>
  %138 = xor <4 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fadd <8 x float> %133, %139
  %141 = fsub <8 x float> %140, %133
  %142 = fsub <8 x float> %140, %141
  %143 = fsub <8 x float> %133, %142
  %144 = fsub <8 x float> %139, %141
  %145 = fadd <8 x float> %144, %143
  %146 = fadd <8 x float> %136, %145
  %147 = fadd <8 x float> %140, %146
  %148 = fmul <8 x float> %147, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %149 = fmul <8 x float> %124, %148
  %150 = fadd <8 x float> %125, %149
  %151 = fsub <8 x float> %150, %125
  %152 = fsub <8 x float> %150, %151
  %153 = fsub <8 x float> %125, %152
  %154 = fsub <8 x float> %149, %151
  %155 = fadd <8 x float> %154, %153
  %156 = fadd <8 x float> %127, %155
  %157 = fmul <8 x float> %150, %113
  %158 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %157
  %159 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %150, <8 x float> %113, <8 x float> %158) #8
  %160 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %156, <8 x float> %113, <8 x float> %159) #8
  %161 = fmul <8 x float> %157, %108
  %162 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %161
  %163 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %157, <8 x float> %108, <8 x float> %162) #8
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %160, <8 x float> %108, <8 x float> %163) #8
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %157, <8 x float> %111, <8 x float> %164) #8
  %166 = fadd <8 x float> %165, %161
  %167 = bitcast <2 x i64> %69 to <4 x i32>
  %168 = add <4 x i32> %167, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %169 = bitcast <2 x i64> %70 to <4 x i32>
  %170 = add <4 x i32> %169, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %171 = ashr <4 x i32> %168, <i32 1, i32 1, i32 1, i32 1>
  %172 = ashr <4 x i32> %170, <i32 1, i32 1, i32 1, i32 1>
  %173 = shl <4 x i32> %171, <i32 23, i32 23, i32 23, i32 23>
  %174 = add <4 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = shl <4 x i32> %172, <i32 23, i32 23, i32 23, i32 23>
  %176 = add <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = bitcast <4 x i32> %174 to <2 x i64>
  %178 = bitcast <4 x i32> %176 to <2 x i64>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fmul <8 x float> %166, %182
  %184 = sub <4 x i32> %168, %171
  %185 = sub <4 x i32> %170, %172
  %186 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %187 = add <4 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %189 = add <4 x i32> %188, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %190 = bitcast <4 x i32> %187 to <2 x i64>
  %191 = bitcast <4 x i32> %189 to <2 x i64>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %183, %195
  %197 = fcmp oeq <8 x float> %113, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %198 = sext <8 x i1> %197 to <8 x i32>
  %199 = and <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %200 = or <4 x i64> %199, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %201 = bitcast <4 x i64> %200 to <8 x float>
  %202 = bitcast <8 x i32> %198 to <8 x float>
  %203 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %196, <8 x float> %201, <8 x float> %202) #8
  %204 = fcmp oeq <8 x float> %113, zeroinitializer
  %205 = sext <8 x i1> %204 to <8 x i32>
  %206 = bitcast <4 x i64> %199 to <8 x float>
  %207 = bitcast <8 x i32> %205 to <8 x float>
  %208 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %203, <8 x float> %206, <8 x float> %207) #8
  ret <8 x float> %208
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_logf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %52) #8
  %54 = fmul <8 x float> %53, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %53, <8 x float> %55) #8
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %53, <8 x float> %56) #8
  %58 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %59 = fadd <8 x float> %58, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %60 = fsub <8 x float> %58, %59
  %61 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %60
  %62 = fsub <8 x float> %34, %59
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %65 = fadd <8 x float> %64, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %66
  %68 = fsub <8 x float> %34, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %64
  %71 = fmul <8 x float> %58, %70
  %72 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %71
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %58, <8 x float> %72) #8
  %74 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %70, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %76, <8 x float> %70, <8 x float> %75) #8
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %70, <8 x float> %73) #8
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %77, <8 x float> %78) #8
  %80 = fmul <8 x float> %71, %71
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %80, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %80, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #8
  %83 = fmul <8 x float> %71, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fmul <8 x float> %79, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %85 = fadd <8 x float> %54, %83
  %86 = fsub <8 x float> %54, %85
  %87 = fadd <8 x float> %83, %86
  %88 = fadd <8 x float> %57, %87
  %89 = fadd <8 x float> %84, %88
  %90 = fmul <8 x float> %71, %80
  %91 = fmul <8 x float> %82, %90
  %92 = fadd <8 x float> %85, %91
  %93 = fsub <8 x float> %85, %92
  %94 = fadd <8 x float> %91, %93
  %95 = fadd <8 x float> %94, %89
  %96 = fadd <8 x float> %92, %95
  %97 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = bitcast <8 x i32> %98 to <8 x float>
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %99) #8
  %101 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %102 = bitcast <8 x float> %101 to <4 x i64>
  %103 = fcmp uno <8 x float> %5, zeroinitializer
  %104 = sext <8 x i1> %103 to <8 x i32>
  %105 = bitcast <8 x i32> %104 to <4 x i64>
  %106 = or <4 x i64> %102, %105
  %107 = bitcast <4 x i64> %106 to <8 x float>
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %107) #8
  %109 = fcmp oeq <8 x float> %5, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %111) #8
  ret <8 x float> %112
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_powf8_u10fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @Sleef_powf8_u10fma4(<8 x float> %0, <8 x float> %1)
  ret <8 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = fsub <8 x float> %113, %115
  %122 = fsub <8 x float> %113, %121
  %123 = fsub <8 x float> %122, %115
  %124 = fadd <8 x float> %123, %114
  %125 = fsub <8 x float> %124, %120
  %126 = fadd <8 x float> %121, %125
  %127 = fmul <8 x float> %126, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %128 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %129 = bitcast <8 x float> %128 to <4 x i64>
  %130 = fcmp uno <8 x float> %127, zeroinitializer
  %131 = sext <8 x i1> %130 to <8 x i32>
  %132 = bitcast <8 x i32> %131 to <4 x i64>
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %134) #8
  %136 = bitcast <8 x float> %135 to <4 x i64>
  %137 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = xor <4 x i64> %137, %136
  %139 = fcmp uno <8 x float> %0, zeroinitializer
  %140 = sext <8 x i1> %139 to <8 x i32>
  %141 = bitcast <8 x i32> %140 to <4 x i64>
  %142 = or <4 x i64> %138, %141
  %143 = bitcast <4 x i64> %142 to <8 x float>
  ret <8 x float> %143
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_coshf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = fadd <8 x float> %115, %113
  %122 = fsub <8 x float> %113, %121
  %123 = fadd <8 x float> %115, %122
  %124 = fadd <8 x float> %123, %114
  %125 = fadd <8 x float> %120, %124
  %126 = fadd <8 x float> %121, %125
  %127 = fmul <8 x float> %126, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %128 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %129 = bitcast <8 x float> %128 to <4 x i64>
  %130 = fcmp uno <8 x float> %127, zeroinitializer
  %131 = sext <8 x i1> %130 to <8 x i32>
  %132 = bitcast <8 x i32> %131 to <4 x i64>
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %134) #8
  %136 = fcmp uno <8 x float> %0, zeroinitializer
  %137 = sext <8 x i1> %136 to <8 x i32>
  %138 = bitcast <8 x i32> %137 to <4 x i64>
  %139 = bitcast <8 x float> %135 to <4 x i64>
  %140 = or <4 x i64> %139, %138
  %141 = bitcast <4 x i64> %140 to <8 x float>
  ret <8 x float> %141
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_tanhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #8
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #8
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #8
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #8
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #8
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #8
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = bitcast <2 x i64> %9 to <4 x i32>
  %77 = ashr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = bitcast <2 x i64> %10 to <4 x i32>
  %79 = ashr <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = shl <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %81 = add <4 x i32> %80, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %82 = shl <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %83 = add <4 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <4 x i32> %81 to <2 x i64>
  %85 = bitcast <4 x i32> %83 to <2 x i64>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fmul <8 x float> %72, %89
  %91 = sub <4 x i32> %76, %77
  %92 = sub <4 x i32> %78, %79
  %93 = shl <4 x i32> %91, <i32 23, i32 23, i32 23, i32 23>
  %94 = add <4 x i32> %93, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %95 = shl <4 x i32> %92, <i32 23, i32 23, i32 23, i32 23>
  %96 = add <4 x i32> %95, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %90, %102
  %104 = fmul <8 x float> %75, %89
  %105 = fmul <8 x float> %104, %102
  %106 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = bitcast <8 x float> %103 to <4 x i64>
  %109 = xor <4 x i64> %107, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %109, %108
  %111 = bitcast <8 x float> %105 to <4 x i64>
  %112 = and <4 x i64> %111, %109
  %113 = bitcast <4 x i64> %110 to <8 x float>
  %114 = bitcast <4 x i64> %112 to <8 x float>
  %115 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %113
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %115, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %115, <8 x float> %117) #8
  %120 = fmul <8 x float> %119, %115
  %121 = bitcast <8 x float> %115 to <4 x i64>
  %122 = xor <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <8 x float> %120 to <4 x i64>
  %124 = xor <4 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <4 x i64> %122 to <8 x float>
  %126 = bitcast <4 x i64> %124 to <8 x float>
  %127 = fadd <8 x float> %113, %125
  %128 = fsub <8 x float> %113, %127
  %129 = fadd <8 x float> %128, %125
  %130 = fadd <8 x float> %129, %114
  %131 = fadd <8 x float> %130, %126
  %132 = fadd <8 x float> %115, %113
  %133 = fsub <8 x float> %113, %132
  %134 = fadd <8 x float> %115, %133
  %135 = fadd <8 x float> %134, %114
  %136 = fadd <8 x float> %120, %135
  %137 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %138 = fmul <8 x float> %137, %127
  %139 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %138
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %137, <8 x float> %127, <8 x float> %139) #8
  %141 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %132
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %137, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %143 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %136
  %144 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %143, <8 x float> %137, <8 x float> %142) #8
  %145 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %137, <8 x float> %140) #8
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %144, <8 x float> %145) #8
  %147 = fadd <8 x float> %146, %138
  %148 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %149 = bitcast <8 x float> %148 to <4 x i64>
  %150 = fcmp uno <8 x float> %147, zeroinitializer
  %151 = sext <8 x i1> %150 to <8 x i32>
  %152 = bitcast <8 x i32> %151 to <4 x i64>
  %153 = or <4 x i64> %152, %149
  %154 = bitcast <4 x i64> %153 to <8 x float>
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %147, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %154) #8
  %156 = bitcast <8 x float> %155 to <4 x i64>
  %157 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %158 = xor <4 x i64> %157, %156
  %159 = fcmp uno <8 x float> %0, zeroinitializer
  %160 = sext <8 x i1> %159 to <8 x i32>
  %161 = bitcast <8 x i32> %160 to <4 x i64>
  %162 = or <4 x i64> %158, %161
  %163 = bitcast <4 x i64> %162 to <8 x float>
  ret <8 x float> %163
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinhf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %11) #8
  %13 = fmul <8 x float> %12, %12
  %14 = fmul <8 x float> %13, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %16, <8 x float> %17) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %15, <8 x float> %18) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %19, <8 x float> %12) #8
  %21 = bitcast <2 x i64> %8 to <4 x i32>
  %22 = icmp eq <4 x i32> %21, zeroinitializer
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %9 to <4 x i32>
  %26 = icmp eq <4 x i32> %25, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <4 x i64> %29, <4 x i64> %30, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %34 = ashr <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %35 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fmul <8 x float> %32, %44
  %46 = sub <4 x i32> %21, %33
  %47 = sub <4 x i32> %25, %34
  %48 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %51 = add <4 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <4 x i32> %49 to <2 x i64>
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <4 x i64> %54, <4 x i64> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = bitcast <4 x i64> %56 to <8 x float>
  %58 = fmul <8 x float> %45, %57
  %59 = fadd <8 x float> %58, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %60 = bitcast <4 x i64> %31 to <8 x float>
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> %20, <8 x float> %60) #8
  %62 = fadd <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %63 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %64 = fdiv <8 x float> %62, %63
  %65 = fmul <8 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %66 = fmul <8 x float> %65, %64
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = fcmp uno <8 x float> %66, zeroinitializer
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = or <4 x i64> %71, %68
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %73) #8
  %75 = bitcast <8 x float> %74 to <4 x i64>
  %76 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %77 = xor <4 x i64> %76, %75
  %78 = fcmp uno <8 x float> %0, zeroinitializer
  %79 = sext <8 x i1> %78 to <8 x i32>
  %80 = bitcast <8 x i32> %79 to <4 x i64>
  %81 = or <4 x i64> %77, %80
  %82 = bitcast <4 x i64> %81 to <8 x float>
  ret <8 x float> %82
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_coshf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %11) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %12, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %12, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %12, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %12, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %12, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %18 = fmul <8 x float> %12, %12
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %12) #8
  %20 = fadd <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = bitcast <2 x i64> %8 to <4 x i32>
  %22 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = bitcast <2 x i64> %9 to <4 x i32>
  %24 = ashr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %26 = add <4 x i32> %25, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %26 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = fmul <8 x float> %20, %34
  %36 = sub <4 x i32> %21, %22
  %37 = sub <4 x i32> %23, %24
  %38 = shl <4 x i32> %36, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = shl <4 x i32> %37, <i32 23, i32 23, i32 23, i32 23>
  %41 = add <4 x i32> %40, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %42 = bitcast <4 x i32> %39 to <2 x i64>
  %43 = bitcast <4 x i32> %41 to <2 x i64>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x i64> %44, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x i64> %46 to <8 x float>
  %48 = fmul <8 x float> %35, %47
  %49 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %50 = bitcast <8 x float> %49 to <4 x i64>
  %51 = bitcast <8 x float> %48 to <4 x i64>
  %52 = xor <4 x i64> %50, <i64 -1, i64 -1, i64 -1, i64 -1>
  %53 = and <4 x i64> %51, %52
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #8
  %56 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %54, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %55) #8
  %57 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %56, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = fcmp uno <8 x float> %58, zeroinitializer
  %62 = sext <8 x i1> %61 to <8 x i32>
  %63 = bitcast <8 x i32> %62 to <4 x i64>
  %64 = or <4 x i64> %63, %60
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %58, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %65) #8
  %67 = fcmp uno <8 x float> %0, zeroinitializer
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = bitcast <8 x float> %66 to <4 x i64>
  %71 = or <4 x i64> %70, %69
  %72 = bitcast <4 x i64> %71 to <8 x float>
  ret <8 x float> %72
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_tanhf8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %5) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %12) #8
  %14 = fmul <8 x float> %13, %13
  %15 = fmul <8 x float> %14, %14
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %17, <8 x float> %18) #8
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %19) #8
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %20, <8 x float> %13) #8
  %22 = bitcast <2 x i64> %9 to <4 x i32>
  %23 = icmp eq <4 x i32> %22, zeroinitializer
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %10 to <4 x i32>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %25, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = fadd <8 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %34 = ashr <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %33, %45
  %47 = sub <4 x i32> %22, %34
  %48 = sub <4 x i32> %26, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = fadd <8 x float> %59, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %61 = bitcast <4 x i64> %32 to <8 x float>
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %60, <8 x float> %21, <8 x float> %61) #8
  %63 = fadd <8 x float> %62, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %64 = fdiv <8 x float> %62, %63
  %65 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %66 = bitcast <8 x float> %65 to <4 x i64>
  %67 = fcmp uno <8 x float> %64, zeroinitializer
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = or <4 x i64> %69, %66
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %71) #8
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = xor <4 x i64> %74, %73
  %76 = fcmp uno <8 x float> %0, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <4 x i64>
  %79 = or <4 x i64> %75, %78
  %80 = bitcast <4 x i64> %79 to <8 x float>
  ret <8 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_asinhf8_u10fma4(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acoshf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_acoshf8_u10fma4(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanhf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <8 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <8 x float> %5, %6
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <8 x float> %4, %6
  %10 = fadd <8 x float> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = fmul <8 x float> %5, %19
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %5, <8 x float> %21) #8
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %18
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %19, <8 x float> %24) #8
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %19, <8 x float> %22) #8
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %26, <8 x float> %27) #8
  %29 = fmul <8 x float> %20, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %29, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %31 = bitcast <8 x float> %30 to <4 x i64>
  %32 = fmul <8 x float> %29, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %32, <8 x float> %30) #8
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = lshr <4 x i32> %37, <i32 23, i32 23, i32 23, i32 23>
  %39 = bitcast <2 x i64> %36 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <2 x i64> %41 to <16 x i8>
  %44 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %43) #8
  %45 = bitcast <2 x i64> %42 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %45) #8
  %47 = and <4 x i32> %38, <i32 255, i32 255, i32 255, i32 255>
  %48 = bitcast <16 x i8> %44 to <4 x i32>
  %49 = sub <4 x i32> %47, %48
  %50 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %51 = bitcast <16 x i8> %46 to <4 x i32>
  %52 = sub <4 x i32> %50, %51
  %53 = bitcast <4 x i32> %49 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shl <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %56 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %55
  %57 = shl <4 x i32> %52, <i32 23, i32 23, i32 23, i32 23>
  %58 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %57
  %59 = bitcast <4 x i32> %56 to <2 x i64>
  %60 = bitcast <4 x i32> %58 to <2 x i64>
  %61 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fmul <8 x float> %20, %64
  %66 = fmul <8 x float> %28, %64
  %67 = fadd <8 x float> %65, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %68 = fsub <8 x float> %67, %65
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %65, %69
  %71 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %72
  %74 = fadd <8 x float> %65, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %75 = fsub <8 x float> %74, %65
  %76 = fsub <8 x float> %74, %75
  %77 = fsub <8 x float> %65, %76
  %78 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %79 = fadd <8 x float> %78, %77
  %80 = fadd <8 x float> %66, %79
  %81 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %74
  %82 = fmul <8 x float> %67, %81
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %67, <8 x float> %83) #8
  %85 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %74
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %85, <8 x float> %81, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %87 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %88 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %87, <8 x float> %81, <8 x float> %86) #8
  %89 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %81, <8 x float> %84) #8
  %90 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %88, <8 x float> %89) #8
  %91 = fmul <8 x float> %82, %82
  %92 = fadd <8 x float> %82, %82
  %93 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %91
  %94 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %82, <8 x float> %93) #8
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %92, <8 x float> %90, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %91, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %91, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %91, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %99 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <8 x i32>
  %103 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %102) #8
  %104 = fmul <8 x float> %103, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %105 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %103, <8 x float> %105) #8
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %103, <8 x float> %106) #8
  %108 = fmul <8 x float> %82, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %109 = fmul <8 x float> %90, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %110 = fadd <8 x float> %104, %108
  %111 = fsub <8 x float> %104, %110
  %112 = fadd <8 x float> %108, %111
  %113 = fadd <8 x float> %107, %112
  %114 = fadd <8 x float> %109, %113
  %115 = fmul <8 x float> %82, %91
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %115
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %82, <8 x float> %116) #8
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %82, <8 x float> %117) #8
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %90, <8 x float> %118) #8
  %120 = fmul <8 x float> %98, %115
  %121 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %120
  %122 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %98, <8 x float> %121) #8
  %123 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %119, <8 x float> %98, <8 x float> %122) #8
  %124 = fadd <8 x float> %110, %120
  %125 = fsub <8 x float> %110, %124
  %126 = fadd <8 x float> %120, %125
  %127 = fadd <8 x float> %126, %114
  %128 = fadd <8 x float> %123, %127
  %129 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #8
  %130 = bitcast <8 x float> %129 to <4 x i64>
  %131 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %132 = sext <8 x i1> %131 to <8 x i32>
  %133 = fadd <8 x float> %124, %128
  %134 = fmul <8 x float> %133, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %135 = bitcast <8 x i32> %132 to <8 x float>
  %136 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %135) #8
  %137 = bitcast <8 x float> %136 to <4 x i64>
  %138 = or <4 x i64> %137, %130
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = fcmp uno <8 x float> %139, zeroinitializer
  %142 = or <8 x i1> %141, %140
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = or <4 x i64> %138, %144
  %146 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = xor <4 x i64> %145, %146
  %148 = fcmp uno <8 x float> %0, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = or <4 x i64> %147, %150
  %152 = bitcast <4 x i64> %151 to <8 x float>
  ret <8 x float> %152
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp2f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %7, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %7, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %7, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %7, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %14 = bitcast <2 x i64> %5 to <4 x i32>
  %15 = ashr <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fmul <8 x float> %13, %27
  %29 = sub <4 x i32> %14, %15
  %30 = sub <4 x i32> %16, %17
  %31 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <8 x float>
  %41 = fmul <8 x float> %28, %40
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %42) #8
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = bitcast <8 x float> %43 to <4 x i64>
  %47 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  ret <8 x float> %49
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp2f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %7, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %7, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %7, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %7, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %14 = bitcast <2 x i64> %5 to <4 x i32>
  %15 = ashr <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fmul <8 x float> %13, %27
  %29 = sub <4 x i32> %14, %15
  %30 = sub <4 x i32> %16, %17
  %31 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <8 x float>
  %41 = fmul <8 x float> %28, %40
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %42) #8
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = bitcast <8 x float> %43 to <4 x i64>
  %47 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  ret <8 x float> %49
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp10f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>, <8 x float> %9, <8 x float> <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>) #8
  %15 = fmul <8 x float> %9, %14
  %16 = fadd <8 x float> %15, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %17 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %16
  %18 = fadd <8 x float> %15, %17
  %19 = fadd <8 x float> %18, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %20 = fmul <8 x float> %9, %16
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %9, <8 x float> %21) #8
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %9, <8 x float> %22) #8
  %24 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %25 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %24
  %26 = fadd <8 x float> %20, %25
  %27 = fadd <8 x float> %23, %26
  %28 = fadd <8 x float> %24, %27
  %29 = bitcast <2 x i64> %6 to <4 x i32>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = bitcast <2 x i64> %7 to <4 x i32>
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %28, %42
  %44 = sub <4 x i32> %29, %30
  %45 = sub <4 x i32> %31, %32
  %46 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = bitcast <4 x i32> %47 to <2 x i64>
  %51 = bitcast <4 x i32> %49 to <2 x i64>
  %52 = shufflevector <2 x i64> %50, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <4 x i64> %52, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fmul <8 x float> %43, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = bitcast <8 x float> %58 to <4 x i64>
  %62 = xor <4 x i64> %60, <i64 -1, i64 -1, i64 -1, i64 -1>
  %63 = and <4 x i64> %62, %61
  %64 = bitcast <4 x i64> %63 to <8 x float>
  ret <8 x float> %64
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp10f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #8
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>, <8 x float> %9, <8 x float> <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>) #8
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>) #8
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>) #8
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>) #8
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>) #8
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %16 = bitcast <2 x i64> %6 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = bitcast <2 x i64> %7 to <4 x i32>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %21 to <2 x i64>
  %25 = bitcast <4 x i32> %23 to <2 x i64>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <2 x i64> %25, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <4 x i64> %26, <4 x i64> %27, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fmul <8 x float> %15, %29
  %31 = sub <4 x i32> %16, %17
  %32 = sub <4 x i32> %18, %19
  %33 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %30, %42
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %44) #8
  %46 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = bitcast <8 x float> %45 to <4 x i64>
  %49 = xor <4 x i64> %47, <i64 -1, i64 -1, i64 -1, i64 -1>
  %50 = and <4 x i64> %49, %48
  %51 = bitcast <4 x i64> %50 to <8 x float>
  ret <8 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_expm1f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, zeroinitializer
  %3 = fmul <8 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %4) #8
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %0
  %11 = fsub <8 x float> %10, %0
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %0, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #8
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #8
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #8
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #8
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #8
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = bitcast <2 x i64> %6 to <4 x i32>
  %74 = ashr <4 x i32> %73, <i32 1, i32 1, i32 1, i32 1>
  %75 = bitcast <2 x i64> %7 to <4 x i32>
  %76 = ashr <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  %77 = shl <4 x i32> %74, <i32 23, i32 23, i32 23, i32 23>
  %78 = add <4 x i32> %77, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %79 = shl <4 x i32> %76, <i32 23, i32 23, i32 23, i32 23>
  %80 = add <4 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <4 x i32> %78 to <2 x i64>
  %82 = bitcast <4 x i32> %80 to <2 x i64>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <4 x i64> %83, <4 x i64> %84, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %86 = bitcast <4 x i64> %85 to <8 x float>
  %87 = fmul <8 x float> %69, %86
  %88 = sub <4 x i32> %73, %74
  %89 = sub <4 x i32> %75, %76
  %90 = shl <4 x i32> %88, <i32 23, i32 23, i32 23, i32 23>
  %91 = add <4 x i32> %90, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %92 = shl <4 x i32> %89, <i32 23, i32 23, i32 23, i32 23>
  %93 = add <4 x i32> %92, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %94 = bitcast <4 x i32> %91 to <2 x i64>
  %95 = bitcast <4 x i32> %93 to <2 x i64>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fmul <8 x float> %87, %99
  %101 = fmul <8 x float> %72, %86
  %102 = fmul <8 x float> %101, %99
  %103 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %104 = bitcast <8 x float> %103 to <4 x i64>
  %105 = bitcast <8 x float> %100 to <4 x i64>
  %106 = xor <4 x i64> %104, <i64 -1, i64 -1, i64 -1, i64 -1>
  %107 = and <4 x i64> %106, %105
  %108 = bitcast <8 x float> %102 to <4 x i64>
  %109 = and <4 x i64> %108, %106
  %110 = bitcast <4 x i64> %107 to <8 x float>
  %111 = bitcast <4 x i64> %109 to <8 x float>
  %112 = fadd <8 x float> %110, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %113 = fsub <8 x float> %112, %110
  %114 = fsub <8 x float> %112, %113
  %115 = fsub <8 x float> %110, %114
  %116 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %113
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %117, %111
  %119 = fadd <8 x float> %112, %118
  %120 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i8 30) #8
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %119, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %120) #8
  %122 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i8 17) #8
  %123 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %121, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %122) #8
  %124 = bitcast <8 x float> %0 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %126 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %127 = bitcast <2 x i64> %125 to <4 x i32>
  %128 = icmp eq <4 x i32> %127, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %129 = sext <4 x i1> %128 to <4 x i32>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %126 to <4 x i32>
  %132 = icmp eq <4 x i32> %131, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %133 = sext <4 x i1> %132 to <4 x i32>
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <4 x i64> %135, <4 x i64> %136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %123, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %138) #8
  ret <8 x float> %139
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log10f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = fmul <8 x float> %49, %61
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %49, <8 x float> %63) #8
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %61, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %61, <8 x float> %66) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %61, <8 x float> %64) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %68, <8 x float> %69) #8
  %71 = fmul <8 x float> %62, %62
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>, <8 x float> %71, <8 x float> <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %71, <8 x float> <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>) #8
  %74 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <4 x i64> %74, <4 x i64> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %77) #8
  %79 = fmul <8 x float> %78, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>, <8 x float> %78, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>, <8 x float> %78, <8 x float> %81) #8
  %83 = fmul <8 x float> %62, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %84 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %83
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %85) #8
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>, <8 x float> %86) #8
  %88 = fadd <8 x float> %79, %83
  %89 = fsub <8 x float> %79, %88
  %90 = fadd <8 x float> %83, %89
  %91 = fadd <8 x float> %82, %90
  %92 = fadd <8 x float> %87, %91
  %93 = fmul <8 x float> %62, %71
  %94 = fmul <8 x float> %73, %93
  %95 = fadd <8 x float> %88, %94
  %96 = fsub <8 x float> %88, %95
  %97 = fadd <8 x float> %94, %96
  %98 = fadd <8 x float> %97, %92
  %99 = fadd <8 x float> %95, %98
  %100 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %101 = sext <8 x i1> %100 to <8 x i32>
  %102 = bitcast <8 x i32> %101 to <8 x float>
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %102) #8
  %104 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %105 = bitcast <8 x float> %104 to <4 x i64>
  %106 = fcmp uno <8 x float> %5, zeroinitializer
  %107 = sext <8 x i1> %106 to <8 x i32>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = or <4 x i64> %105, %108
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %103, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %110) #8
  %112 = fcmp oeq <8 x float> %5, zeroinitializer
  %113 = sext <8 x i1> %112 to <8 x i32>
  %114 = bitcast <8 x i32> %113 to <8 x float>
  %115 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %111, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %114) #8
  ret <8 x float> %115
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log2f8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = fmul <8 x float> %49, %61
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %49, <8 x float> %63) #8
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %61, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %61, <8 x float> %66) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %61, <8 x float> %64) #8
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %68, <8 x float> %69) #8
  %71 = fmul <8 x float> %62, %62
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>, <8 x float> %71, <8 x float> <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>) #8
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %71, <8 x float> <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>) #8
  %74 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %76 = shufflevector <4 x i64> %74, <4 x i64> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %77 = bitcast <4 x i64> %76 to <8 x i32>
  %78 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %77) #8
  %79 = fmul <8 x float> %62, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %80 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %79
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %81) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>, <8 x float> %82) #8
  %84 = fadd <8 x float> %78, %79
  %85 = fsub <8 x float> %84, %78
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> %78, %86
  %88 = fsub <8 x float> %79, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fadd <8 x float> %83, %89
  %91 = fmul <8 x float> %62, %71
  %92 = fmul <8 x float> %73, %91
  %93 = fadd <8 x float> %84, %92
  %94 = fsub <8 x float> %93, %84
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %84, %95
  %97 = fsub <8 x float> %92, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %90, %98
  %100 = fadd <8 x float> %93, %99
  %101 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = bitcast <8 x i32> %102 to <8 x float>
  %104 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %103) #8
  %105 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %106 = bitcast <8 x float> %105 to <4 x i64>
  %107 = fcmp uno <8 x float> %5, zeroinitializer
  %108 = sext <8 x i1> %107 to <8 x i32>
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = or <4 x i64> %106, %109
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %111) #8
  %113 = fcmp oeq <8 x float> %5, zeroinitializer
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = bitcast <8 x i32> %114 to <8 x float>
  %116 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %115) #8
  ret <8 x float> %116
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log2f8_u35fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>, <8 x float> %52, <8 x float> <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>) #8
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %53, <8 x float> %52, <8 x float> <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>) #8
  %55 = fmul <8 x float> %51, %52
  %56 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %59) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %60) #8
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> %61) #8
  %63 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %64 = sext <8 x i1> %63 to <8 x i32>
  %65 = bitcast <8 x i32> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %65) #8
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = fcmp uno <8 x float> %5, zeroinitializer
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = or <4 x i64> %68, %71
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %73) #8
  %75 = fcmp oeq <8 x float> %5, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <8 x float>
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %77) #8
  ret <8 x float> %78
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log1pf8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %4 = bitcast <8 x float> %3 to <4 x i64>
  %5 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %5, <8 x float> %3) #8
  %7 = fmul <8 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %16 = add nsw <4 x i32> %15, <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %18 = add nsw <4 x i32> %17, <i32 -127, i32 -127, i32 -127, i32 -127>
  %19 = shl nuw nsw <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %20 = shl nuw nsw <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %19
  %22 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %20
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = bitcast <4 x i32> %22 to <2 x i64>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fadd <8 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %28, <8 x float> %29) #8
  %31 = add nsw <4 x i32> %15, <i32 -191, i32 -191, i32 -191, i32 -191>
  %32 = add nsw <4 x i32> %17, <i32 -191, i32 -191, i32 -191, i32 -191>
  %33 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <4 x i32> %16 to <16 x i8>
  %36 = bitcast <4 x i32> %31 to <16 x i8>
  %37 = bitcast <2 x i64> %33 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = bitcast <4 x i32> %18 to <16 x i8>
  %40 = bitcast <4 x i32> %32 to <16 x i8>
  %41 = bitcast <2 x i64> %34 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <16 x i8> %38 to <2 x i64>
  %44 = bitcast <16 x i8> %42 to <2 x i64>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x i32>
  %49 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %48) #8
  %50 = fmul <8 x float> %49, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %49, <8 x float> %51) #8
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %49, <8 x float> %52) #8
  %54 = fadd <8 x float> %30, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %55 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %54
  %56 = fadd <8 x float> %30, %55
  %57 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %54
  %58 = fmul <8 x float> %30, %57
  %59 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %58
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %30, <8 x float> %59) #8
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %57, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %57, <8 x float> %62) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %57, <8 x float> %60) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %64, <8 x float> %65) #8
  %67 = fmul <8 x float> %58, %58
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %67, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #8
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %67, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #8
  %70 = fmul <8 x float> %58, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %71 = fmul <8 x float> %66, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %72 = fadd <8 x float> %50, %70
  %73 = fsub <8 x float> %50, %72
  %74 = fadd <8 x float> %70, %73
  %75 = fadd <8 x float> %53, %74
  %76 = fadd <8 x float> %75, %71
  %77 = fmul <8 x float> %58, %67
  %78 = fmul <8 x float> %77, %69
  %79 = fadd <8 x float> %72, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fadd <8 x float> %78, %80
  %82 = fadd <8 x float> %76, %81
  %83 = fadd <8 x float> %79, %82
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %84) #8
  %86 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #8
  %87 = bitcast <8 x float> %86 to <4 x i64>
  %88 = bitcast <8 x float> %85 to <4 x i64>
  %89 = or <4 x i64> %87, %88
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %93) #8
  %95 = bitcast <8 x float> %0 to <4 x i64>
  %96 = shufflevector <4 x i64> %95, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %97 = shufflevector <4 x i64> %95, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %98 = bitcast <2 x i64> %96 to <4 x i32>
  %99 = icmp eq <4 x i32> %98, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %100 = sext <4 x i1> %99 to <4 x i32>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = bitcast <2 x i64> %97 to <4 x i32>
  %103 = icmp eq <4 x i32> %102, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = sext <4 x i1> %103 to <4 x i32>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %94, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %109) #8
  ret <8 x float> %110
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_finz_fabsf8_fma4(<8 x float>) local_unnamed_addr #4 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_finz_copysignf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #4 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmaxf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fminf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fdimf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #8
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #8
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_truncf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_floorf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #8
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_ceilf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #8
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_roundf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #8
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #8
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #8
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_rintf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmaf8_fma4(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #3 {
  %4 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %1, <8 x float> %2) #8
  ret <8 x float> %4
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_hypotf8_u05fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %12 = fmul <8 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %12, <8 x float> %11) #8
  %14 = fmul <8 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %14, <8 x float> %11) #8
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fmul <8 x float> %13, %16
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %13, <8 x float> %18) #8
  %20 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %15
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %16, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %16, <8 x float> %21) #8
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %19) #8
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %22, <8 x float> %23) #8
  %25 = fmul <8 x float> %17, %17
  %26 = fadd <8 x float> %17, %17
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %17, <8 x float> %27) #8
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %24, <8 x float> %28) #8
  %30 = fadd <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <8 x float> %30, %25
  %32 = fsub <8 x float> %30, %31
  %33 = fsub <8 x float> %25, %32
  %34 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <8 x float> %34, %33
  %36 = fadd <8 x float> %29, %35
  %37 = fadd <8 x float> %30, %36
  %38 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %37) #8
  %39 = fmul <8 x float> %38, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %40) #8
  %42 = fadd <8 x float> %30, %39
  %43 = fsub <8 x float> %42, %30
  %44 = fsub <8 x float> %42, %43
  %45 = fsub <8 x float> %30, %44
  %46 = fsub <8 x float> %39, %43
  %47 = fadd <8 x float> %46, %45
  %48 = fadd <8 x float> %41, %36
  %49 = fadd <8 x float> %48, %47
  %50 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %53 = fmul <8 x float> %50, %52
  %54 = fmul <8 x float> %50, %42
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %50, <8 x float> %55) #8
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %50, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #8
  %59 = fmul <8 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %60 = fmul <8 x float> %58, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %10, %59
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %10, <8 x float> %62) #8
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %10, <8 x float> %63) #8
  %65 = fadd <8 x float> %61, %64
  %66 = fcmp uno <8 x float> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %68) #8
  %70 = fcmp oeq <8 x float> %9, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %10, <8 x float> %72) #8
  %74 = fcmp uno <8 x float> %8, %5
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %73, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %79 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = or <8 x i1> %79, %78
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %82) #8
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_hypotf8_u35fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = fdiv <8 x float> %9, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %13 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %12) #8
  %14 = fmul <8 x float> %10, %13
  %15 = fcmp oeq <8 x float> %9, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %10, <8 x float> %17) #8
  %19 = fcmp uno <8 x float> %8, %5
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %21) #8
  %23 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %24 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = or <8 x i1> %24, %23
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <8 x float>
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %27) #8
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_nextafterf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = ashr <4 x i32> %13, <i32 31, i32 31, i32 31, i32 31>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %12 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 31, i32 31, i32 31, i32 31>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #8
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %21, %23
  %25 = xor <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = sub <4 x i32> zeroinitializer, %25
  %27 = xor <4 x i32> %16, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast <2 x i64> %11 to <16 x i8>
  %32 = bitcast <4 x i32> %26 to <16 x i8>
  %33 = bitcast <2 x i64> %29 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <2 x i64> %12 to <16 x i8>
  %36 = bitcast <4 x i32> %28 to <16 x i8>
  %37 = bitcast <2 x i64> %30 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = fcmp une <8 x float> %9, %1
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = bitcast <16 x i8> %34 to <4 x i32>
  %43 = add <4 x i32> %42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %44 = bitcast <16 x i8> %38 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <4 x i32> %43 to <16 x i8>
  %49 = bitcast <2 x i64> %46 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <4 x i32> %45 to <16 x i8>
  %52 = bitcast <2 x i64> %47 to <16 x i8>
  %53 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %38, <16 x i8> %51, <16 x i8> %52) #8
  %54 = bitcast <16 x i8> %50 to <4 x i32>
  %55 = xor <4 x i32> %54, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %56 = sub <4 x i32> zeroinitializer, %55
  %57 = bitcast <16 x i8> %53 to <4 x i32>
  %58 = xor <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = sub <4 x i32> zeroinitializer, %58
  %60 = bitcast <4 x i32> %56 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %50, <16 x i8> %60, <16 x i8> %33) #8
  %62 = bitcast <4 x i32> %59 to <16 x i8>
  %63 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %53, <16 x i8> %62, <16 x i8> %37) #8
  %64 = bitcast <16 x i8> %61 to <2 x i64>
  %65 = bitcast <16 x i8> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fcmp oeq <8 x float> %69, zeroinitializer
  %71 = fcmp une <8 x float> %9, zeroinitializer
  %72 = and <8 x i1> %70, %71
  %73 = sext <8 x i1> %72 to <8 x i32>
  %74 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = bitcast <8 x i32> %73 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %75, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %9, zeroinitializer
  %79 = fcmp oeq <8 x float> %1, zeroinitializer
  %80 = and <8 x i1> %78, %79
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> %1, <8 x float> %82) #8
  %84 = fcmp uno <8 x float> %9, %1
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %86) #8
  ret <8 x float> %87
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_frfrexpf8_fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #8
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmodf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <4 x i32>
  %19 = add <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %20 = bitcast <2 x i64> %17 to <4 x i32>
  %21 = add <4 x i32> %20, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fcmp oeq <8 x float> %14, zeroinitializer
  %29 = sext <8 x i1> %28 to <8 x i32>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> zeroinitializer, <8 x float> %30) #8
  %32 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <8 x float> %13 to <4 x i64>
  %35 = xor <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  br label %37

; <label>:37:                                     ; preds = %37, %2
  %38 = phi i32 [ 0, %2 ], [ %94, %37 ]
  %39 = phi <8 x float> [ zeroinitializer, %2 ], [ %86, %37 ]
  %40 = phi <8 x float> [ %11, %2 ], [ %84, %37 ]
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = add <4 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fcmp oeq <8 x float> %40, zeroinitializer
  %55 = sext <8 x i1> %54 to <8 x i32>
  %56 = bitcast <8 x i32> %55 to <8 x float>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> zeroinitializer, <8 x float> %56) #8
  %58 = fmul <8 x float> %31, %57
  %59 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %58, i32 11) #8
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %32, <8 x float> %40, i8 30) #8
  %61 = bitcast <8 x float> %60 to <4 x i64>
  %62 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %40, <8 x float> %13, i8 29) #8
  %63 = bitcast <8 x float> %62 to <4 x i64>
  %64 = and <4 x i64> %63, %61
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %65) #8
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %33, <8 x float> %40, i8 30) #8
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = and <4 x i64> %68, %63
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %70) #8
  %72 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %71, i32 11) #8
  %73 = fmul <8 x float> %72, %36
  %74 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %73
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %36, <8 x float> %74) #8
  %76 = fadd <8 x float> %40, %73
  %77 = fsub <8 x float> %76, %40
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %40, %78
  %80 = fsub <8 x float> %73, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %39, %75
  %83 = fadd <8 x float> %82, %81
  %84 = fadd <8 x float> %76, %83
  %85 = fsub <8 x float> %76, %84
  %86 = fadd <8 x float> %83, %85
  %87 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %84, <8 x float> %13, i8 17) #8
  %88 = bitcast <8 x float> %87 to <4 x i64>
  %89 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %90 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %91 = and <2 x i64> %90, %89
  %92 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %91, <2 x i64> <i64 -1, i64 -1>) #8
  %93 = icmp eq i32 %92, 0
  %94 = add nuw nsw i32 %38, 1
  %95 = icmp ult i32 %94, 8
  %96 = and i1 %95, %93
  br i1 %96, label %37, label %97

; <label>:97:                                     ; preds = %37
  %98 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %99 = fadd <8 x float> %84, %86
  %100 = fmul <8 x float> %99, %98
  %101 = fcmp oeq <8 x float> %99, %13
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = bitcast <8 x i32> %102 to <8 x float>
  %104 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> zeroinitializer, <8 x float> %103) #8
  %105 = bitcast <8 x float> %104 to <4 x i64>
  %106 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %105
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #8
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> %0, <8 x float> %109) #8
  %111 = fcmp oeq <8 x float> %13, zeroinitializer
  %112 = sext <8 x i1> %111 to <8 x i32>
  %113 = bitcast <8 x i32> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %110, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %113) #8
  ret <8 x float> %114
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_remainderf8_fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  br label %21

; <label>:21:                                     ; preds = %51, %2
  %22 = phi i32 [ 0, %2 ], [ %102, %51 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %87, %51 ]
  %24 = phi <8 x float> [ zeroinitializer, %2 ], [ %101, %51 ]
  %25 = phi <8 x float> [ %11, %2 ], [ %99, %51 ]
  %26 = fmul <8 x float> %15, %25
  %27 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %26, i32 8) #8
  %28 = bitcast <8 x float> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %16, i8 17) #8
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %31) #8
  %33 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %17, i8 17) #8
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = fcmp oeq <8 x float> %17, %30
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %39 = and <4 x i64> %37, %38
  %40 = or <4 x i64> %39, %34
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %41) #8
  %43 = fcmp oeq <8 x float> %42, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = and <2 x i64> %47, %46
  %49 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %48, <2 x i64> <i64 -1, i64 -1>) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %104

; <label>:51:                                     ; preds = %21
  %52 = fmul <8 x float> %42, %20
  %53 = bitcast <8 x float> %52 to <4 x i64>
  %54 = and <4 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fcmp oeq <8 x float> %55, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = and <4 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <4 x i64> %58, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fadd <8 x float> %42, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> %61, <8 x float> %62) #8
  %64 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %63) #8
  %65 = bitcast <8 x i32> %64 to <4 x i64>
  %66 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %67 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %68 = bitcast <2 x i64> %66 to <4 x i32>
  %69 = and <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %70 = icmp ne <4 x i32> %69, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i32>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = bitcast <2 x i64> %67 to <4 x i32>
  %74 = and <4 x i32> %73, <i32 1, i32 1, i32 1, i32 1>
  %75 = icmp ne <4 x i32> %74, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <4 x i64> %78, <4 x i64> %79, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %81 = bitcast <8 x float> %63 to <4 x i64>
  %82 = and <4 x i64> %81, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %83, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = and <4 x i64> %80, %85
  %87 = xor <4 x i64> %86, %23
  %88 = fmul <8 x float> %63, %20
  %89 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %88
  %90 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %20, <8 x float> %89) #8
  %91 = fadd <8 x float> %25, %88
  %92 = fsub <8 x float> %91, %25
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %25, %93
  %95 = fsub <8 x float> %88, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %24, %90
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %91, %98
  %100 = fsub <8 x float> %91, %99
  %101 = fadd <8 x float> %98, %100
  %102 = add nuw nsw i32 %22, 1
  %103 = icmp ult i32 %102, 8
  br i1 %103, label %21, label %104

; <label>:104:                                    ; preds = %21, %51
  %105 = phi <8 x float> [ %25, %21 ], [ %99, %51 ]
  %106 = phi <8 x float> [ %24, %21 ], [ %101, %51 ]
  %107 = fadd <8 x float> %105, %106
  %108 = fmul <8 x float> %14, %107
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = xor <4 x i64> %110, %109
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <8 x float>
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %117) #8
  %119 = bitcast <8 x i32> %114 to <8 x float>
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %112, <8 x float> %118, <8 x float> %119) #8
  %121 = fcmp oeq <8 x float> %13, zeroinitializer
  %122 = sext <8 x i1> %121 to <8 x i32>
  %123 = bitcast <8 x i32> %122 to <8 x float>
  %124 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %120, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %123) #8
  ret <8 x float> %124
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinpif8_u05fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp ne <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp ne <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %35, <8 x float> %37) #8
  %39 = bitcast <4 x i64> %29 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %39) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %36, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %39) #8
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %36, <8 x float> %43) #8
  %45 = fmul <8 x float> %36, %44
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %39) #8
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %39) #8
  %48 = fadd <8 x float> %45, %46
  %49 = fsub <8 x float> %48, %45
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %47, %53
  %55 = fmul <8 x float> %36, %48
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %48, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %48, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %54, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %39) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %39) #8
  %62 = fadd <8 x float> %55, %60
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %60, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %59, %61
  %69 = fadd <8 x float> %68, %67
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %39) #8
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %38, <8 x float> %39) #8
  %72 = fmul <8 x float> %62, %70
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %70, <8 x float> %73) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %70, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %71, <8 x float> %75) #8
  %77 = fadd <8 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <8 x float> %77, %72
  %79 = fsub <8 x float> %77, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <8 x float> %81, %80
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %77, <8 x float> %39) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> %83, <8 x float> %39) #8
  %86 = and <4 x i32> %12, <i32 4, i32 4, i32 4, i32 4>
  %87 = icmp ne <4 x i32> %86, zeroinitializer
  %88 = sext <4 x i1> %87 to <4 x i32>
  %89 = bitcast <4 x i32> %88 to <2 x i64>
  %90 = and <4 x i32> %14, <i32 4, i32 4, i32 4, i32 4>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = and <4 x i64> %96, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = bitcast <8 x float> %84 to <4 x i64>
  %99 = xor <4 x i64> %97, %98
  %100 = bitcast <8 x float> %85 to <4 x i64>
  %101 = xor <4 x i64> %97, %100
  %102 = bitcast <4 x i64> %99 to <8 x float>
  %103 = bitcast <4 x i64> %101 to <8 x float>
  %104 = fadd <8 x float> %102, %103
  %105 = bitcast <8 x float> %0 to <4 x i64>
  %106 = shufflevector <4 x i64> %105, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %107 = shufflevector <4 x i64> %105, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %108 = bitcast <2 x i64> %106 to <4 x i32>
  %109 = icmp eq <4 x i32> %108, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %110 = sext <4 x i1> %109 to <4 x i32>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = bitcast <2 x i64> %107 to <4 x i32>
  %113 = icmp eq <4 x i32> %112, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %114 = sext <4 x i1> %113 to <4 x i32>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = shufflevector <2 x i64> %111, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <4 x i64> %116, <4 x i64> %117, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %119) #8
  %121 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %122 = bitcast <4 x i64> %121 to <8 x float>
  %123 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %122, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %124 = bitcast <8 x float> %123 to <4 x i64>
  %125 = bitcast <8 x float> %120 to <4 x i64>
  %126 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %127 = and <4 x i64> %126, %125
  %128 = fcmp oeq <8 x float> %122, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %129 = sext <8 x i1> %128 to <8 x i32>
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = or <4 x i64> %127, %130
  %132 = bitcast <4 x i64> %131 to <8 x float>
  ret <8 x float> %132
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cospif8_u05fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp eq <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp eq <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %35, <8 x float> %35, <8 x float> %37) #8
  %39 = bitcast <4 x i64> %29 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %39) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %39) #8
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %36, <8 x float> %41) #8
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %39) #8
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %36, <8 x float> %43) #8
  %45 = fmul <8 x float> %36, %44
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %39) #8
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %39) #8
  %48 = fadd <8 x float> %45, %46
  %49 = fsub <8 x float> %48, %45
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %47, %53
  %55 = fmul <8 x float> %36, %48
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %48, <8 x float> %56) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %48, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %54, <8 x float> %58) #8
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %39) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %39) #8
  %62 = fadd <8 x float> %55, %60
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %60, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %59, %61
  %69 = fadd <8 x float> %68, %67
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %39) #8
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %38, <8 x float> %39) #8
  %72 = fmul <8 x float> %62, %70
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %70, <8 x float> %73) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %70, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %71, <8 x float> %75) #8
  %77 = fadd <8 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <8 x float> %77, %72
  %79 = fsub <8 x float> %77, %78
  %80 = fsub <8 x float> %72, %79
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <8 x float> %81, %80
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %77, <8 x float> %39) #8
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> %83, <8 x float> %39) #8
  %86 = bitcast <2 x i64> %17 to <4 x i32>
  %87 = add <4 x i32> %86, <i32 2, i32 2, i32 2, i32 2>
  %88 = bitcast <2 x i64> %18 to <4 x i32>
  %89 = add <4 x i32> %88, <i32 2, i32 2, i32 2, i32 2>
  %90 = and <4 x i32> %87, <i32 4, i32 4, i32 4, i32 4>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = and <4 x i32> %89, <i32 4, i32 4, i32 4, i32 4>
  %95 = icmp ne <4 x i32> %94, zeroinitializer
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <4 x i64> %98, <4 x i64> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = and <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %84 to <4 x i64>
  %103 = xor <4 x i64> %101, %102
  %104 = bitcast <8 x float> %85 to <4 x i64>
  %105 = xor <4 x i64> %101, %104
  %106 = bitcast <4 x i64> %103 to <8 x float>
  %107 = bitcast <4 x i64> %105 to <8 x float>
  %108 = fadd <8 x float> %106, %107
  %109 = bitcast <8 x float> %0 to <4 x i64>
  %110 = and <4 x i64> %109, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %111, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %113 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %112) #8
  %114 = fcmp oeq <8 x float> %111, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %115 = sext <8 x i1> %114 to <8 x i32>
  %116 = bitcast <8 x i32> %115 to <4 x i64>
  %117 = bitcast <8 x float> %113 to <4 x i64>
  %118 = or <4 x i64> %117, %116
  %119 = bitcast <4 x i64> %118 to <8 x float>
  ret <8 x float> %119
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_finz_tgammaf8_u10fma4(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0) #8
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <8 x float>, <8 x float>* %6, align 32
  %8 = fadd <8 x float> %5, %7
  %9 = fmul <8 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %9) #8
  %11 = bitcast <8 x i32> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #8
  %15 = fmul <8 x float> %14, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %16 = fadd <8 x float> %5, %15
  %17 = fsub <8 x float> %16, %5
  %18 = fsub <8 x float> %16, %17
  %19 = fsub <8 x float> %5, %18
  %20 = fsub <8 x float> %15, %17
  %21 = fadd <8 x float> %20, %19
  %22 = fadd <8 x float> %7, %21
  %23 = fmul <8 x float> %14, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %24 = fadd <8 x float> %23, %16
  %25 = fsub <8 x float> %24, %16
  %26 = fsub <8 x float> %24, %25
  %27 = fsub <8 x float> %16, %26
  %28 = fsub <8 x float> %23, %25
  %29 = fadd <8 x float> %28, %27
  %30 = fadd <8 x float> %29, %22
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %24, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #8
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %24, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #8
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %24, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #8
  %34 = fmul <8 x float> %24, %33
  %35 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %33, <8 x float> %35) #8
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %33, <8 x float> %36) #8
  %38 = fadd <8 x float> %34, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %39 = fsub <8 x float> %38, %34
  %40 = fsub <8 x float> %38, %39
  %41 = fsub <8 x float> %34, %40
  %42 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %39
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %37, %43
  %45 = fmul <8 x float> %24, %38
  %46 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %45
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %38, <8 x float> %46) #8
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %38, <8 x float> %47) #8
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %44, <8 x float> %48) #8
  %50 = fadd <8 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %51 = fsub <8 x float> %50, %45
  %52 = fsub <8 x float> %50, %51
  %53 = fsub <8 x float> %45, %52
  %54 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %51
  %55 = fadd <8 x float> %54, %53
  %56 = fadd <8 x float> %49, %55
  %57 = fmul <8 x float> %24, %24
  %58 = fadd <8 x float> %24, %24
  %59 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %57
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %24, <8 x float> %59) #8
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %30, <8 x float> %60) #8
  %62 = fmul <8 x float> %57, %50
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %50, <8 x float> %63) #8
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %50, <8 x float> %64) #8
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %56, <8 x float> %65) #8
  %67 = fadd <8 x float> %24, %62
  %68 = fsub <8 x float> %67, %24
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %24, %69
  %71 = fsub <8 x float> %62, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %30, %66
  %74 = fadd <8 x float> %72, %73
  %75 = fadd <8 x float> %67, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %77 = fadd <8 x float> %67, %76
  %78 = fadd <8 x float> %77, %74
  %79 = bitcast <2 x i64> %12 to <4 x i32>
  %80 = ashr <4 x i32> %79, <i32 1, i32 1, i32 1, i32 1>
  %81 = bitcast <2 x i64> %13 to <4 x i32>
  %82 = ashr <4 x i32> %81, <i32 1, i32 1, i32 1, i32 1>
  %83 = shl <4 x i32> %80, <i32 23, i32 23, i32 23, i32 23>
  %84 = add <4 x i32> %83, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %85 = shl <4 x i32> %82, <i32 23, i32 23, i32 23, i32 23>
  %86 = add <4 x i32> %85, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %87 = bitcast <4 x i32> %84 to <2 x i64>
  %88 = bitcast <4 x i32> %86 to <2 x i64>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fmul <8 x float> %75, %92
  %94 = sub <4 x i32> %79, %80
  %95 = sub <4 x i32> %81, %82
  %96 = shl <4 x i32> %94, <i32 23, i32 23, i32 23, i32 23>
  %97 = add <4 x i32> %96, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %98 = shl <4 x i32> %95, <i32 23, i32 23, i32 23, i32 23>
  %99 = add <4 x i32> %98, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %100 = bitcast <4 x i32> %97 to <2 x i64>
  %101 = bitcast <4 x i32> %99 to <2 x i64>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <8 x float>
  %106 = fmul <8 x float> %93, %105
  %107 = fmul <8 x float> %78, %92
  %108 = fmul <8 x float> %107, %105
  %109 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %110 = bitcast <8 x float> %109 to <4 x i64>
  %111 = bitcast <8 x float> %106 to <4 x i64>
  %112 = xor <4 x i64> %110, <i64 -1, i64 -1, i64 -1, i64 -1>
  %113 = and <4 x i64> %112, %111
  %114 = bitcast <8 x float> %108 to <4 x i64>
  %115 = and <4 x i64> %114, %112
  %116 = bitcast <4 x i64> %113 to <8 x float>
  %117 = bitcast <4 x i64> %115 to <8 x float>
  %118 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %119 = load <8 x float>, <8 x float>* %118, align 32
  %120 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %121 = load <8 x float>, <8 x float>* %120, align 32
  %122 = fmul <8 x float> %119, %116
  %123 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %122
  %124 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %119, <8 x float> %123) #8
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %119, <8 x float> %124) #8
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %121, <8 x float> %125) #8
  %127 = fadd <8 x float> %122, %126
  %128 = fcmp oeq <8 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %129 = sext <8 x i1> %128 to <8 x i32>
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %134 = fcmp oeq <8 x float> %133, %0
  %135 = sext <8 x i1> %134 to <8 x i32>
  %136 = bitcast <8 x i32> %135 to <4 x i64>
  %137 = and <4 x i64> %136, %132
  %138 = bitcast <8 x float> %0 to <4 x i64>
  %139 = and <4 x i64> %138, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fcmp oeq <8 x float> %140, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %142 = fcmp uno <8 x float> %0, zeroinitializer
  %143 = or <8 x i1> %141, %142
  %144 = sext <8 x i1> %143 to <8 x i32>
  %145 = bitcast <8 x i32> %144 to <4 x i64>
  %146 = xor <4 x i64> %145, <i64 -1, i64 -1, i64 -1, i64 -1>
  %147 = and <4 x i64> %132, %146
  %148 = fcmp uno <8 x float> %127, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = and <4 x i64> %147, %150
  %152 = or <4 x i64> %151, %130
  %153 = or <4 x i64> %152, %137
  %154 = bitcast <4 x i64> %153 to <8 x float>
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %154) #8
  %156 = fcmp oeq <8 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %157 = sext <8 x i1> %156 to <8 x i32>
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = or <4 x i64> %146, %158
  %160 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i8 29) #8
  %161 = bitcast <8 x float> %160 to <4 x i64>
  %162 = and <4 x i64> %159, %161
  %163 = fcmp oeq <8 x float> %0, zeroinitializer
  %164 = sext <8 x i1> %163 to <8 x i32>
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i8 30) #8
  %167 = bitcast <8 x float> %166 to <4 x i64>
  %168 = or <4 x i64> %167, %165
  %169 = fcmp uno <8 x float> %155, zeroinitializer
  %170 = sext <8 x i1> %169 to <8 x i32>
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = or <4 x i64> %168, %171
  %173 = and <4 x i64> %162, %172
  %174 = and <4 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = or <4 x i64> %174, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %176 = bitcast <4 x i64> %175 to <8 x float>
  %177 = bitcast <4 x i64> %173 to <8 x float>
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %155, <8 x float> %176, <8 x float> %177) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %178
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_finz_lgammaf8_u10fma4(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0) #8
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <8 x float>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <8 x float>
  %14 = bitcast <4 x i64> %12 to <8 x float>
  %15 = fmul <8 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %17 = bitcast <8 x float> %16 to <4 x i64>
  %18 = fmul <8 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %18, <8 x float> %16) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %21 to <4 x i32>
  %24 = lshr <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = bitcast <2 x i64> %22 to <4 x i32>
  %26 = lshr <4 x i32> %25, <i32 23, i32 23, i32 23, i32 23>
  %27 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %28 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %28 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %31) #8
  %33 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %34 = bitcast <16 x i8> %30 to <4 x i32>
  %35 = sub <4 x i32> %33, %34
  %36 = and <4 x i32> %26, <i32 255, i32 255, i32 255, i32 255>
  %37 = bitcast <16 x i8> %32 to <4 x i32>
  %38 = sub <4 x i32> %36, %37
  %39 = bitcast <4 x i32> %35 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %42 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %41
  %43 = shl <4 x i32> %38, <i32 23, i32 23, i32 23, i32 23>
  %44 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %43
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %13, %50
  %52 = fmul <8 x float> %14, %50
  %53 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fsub <8 x float> %53, %51
  %55 = fsub <8 x float> %53, %54
  %56 = fsub <8 x float> %51, %55
  %57 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %54
  %58 = fadd <8 x float> %57, %56
  %59 = fadd <8 x float> %52, %58
  %60 = fadd <8 x float> %51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %61 = fsub <8 x float> %60, %51
  %62 = fsub <8 x float> %60, %61
  %63 = fsub <8 x float> %51, %62
  %64 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %65 = fadd <8 x float> %64, %63
  %66 = fadd <8 x float> %52, %65
  %67 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %60
  %68 = fmul <8 x float> %53, %67
  %69 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %68
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %53, <8 x float> %69) #8
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %71, <8 x float> %67, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #8
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %67, <8 x float> %72) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %67, <8 x float> %70) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %74, <8 x float> %75) #8
  %77 = fmul <8 x float> %68, %68
  %78 = fadd <8 x float> %68, %68
  %79 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %77
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %68, <8 x float> %79) #8
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %76, <8 x float> %80) #8
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %77, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %77, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %77, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %85 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <4 x i64> %85, <4 x i64> %86, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %88 = bitcast <4 x i64> %87 to <8 x i32>
  %89 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %88) #8
  %90 = fmul <8 x float> %89, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %91 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %90
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %89, <8 x float> %91) #8
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %89, <8 x float> %92) #8
  %94 = fmul <8 x float> %68, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <8 x float> %76, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <8 x float> %90, %94
  %97 = fsub <8 x float> %90, %96
  %98 = fadd <8 x float> %94, %97
  %99 = fadd <8 x float> %93, %98
  %100 = fadd <8 x float> %95, %99
  %101 = fmul <8 x float> %68, %77
  %102 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %101
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %68, <8 x float> %102) #8
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %81, <8 x float> %68, <8 x float> %103) #8
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %76, <8 x float> %104) #8
  %106 = fmul <8 x float> %84, %101
  %107 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %106
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %84, <8 x float> %107) #8
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %84, <8 x float> %108) #8
  %110 = fadd <8 x float> %96, %106
  %111 = fsub <8 x float> %96, %110
  %112 = fadd <8 x float> %106, %111
  %113 = fadd <8 x float> %112, %100
  %114 = fadd <8 x float> %109, %113
  %115 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %116 = load <8 x float>, <8 x float>* %115, align 32
  %117 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %118 = load <8 x float>, <8 x float>* %117, align 32
  %119 = fadd <8 x float> %110, %116
  %120 = fsub <8 x float> %119, %116
  %121 = fsub <8 x float> %119, %120
  %122 = fsub <8 x float> %116, %121
  %123 = fsub <8 x float> %110, %120
  %124 = fadd <8 x float> %123, %122
  %125 = fadd <8 x float> %118, %114
  %126 = fadd <8 x float> %125, %124
  %127 = fadd <8 x float> %119, %126
  %128 = bitcast <8 x float> %0 to <4 x i64>
  %129 = and <4 x i64> %128, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fcmp oeq <8 x float> %130, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %132 = sext <8 x i1> %131 to <8 x i32>
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 18) #8
  %135 = bitcast <8 x float> %134 to <4 x i64>
  %136 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %137 = fcmp oeq <8 x float> %136, %0
  %138 = sext <8 x i1> %137 to <8 x i32>
  %139 = bitcast <8 x i32> %138 to <4 x i64>
  %140 = and <4 x i64> %139, %135
  %141 = fcmp uno <8 x float> %0, zeroinitializer
  %142 = or <8 x i1> %131, %141
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = xor <4 x i64> %144, <i64 -1, i64 -1, i64 -1, i64 -1>
  %146 = fcmp uno <8 x float> %127, zeroinitializer
  %147 = sext <8 x i1> %146 to <8 x i32>
  %148 = bitcast <8 x i32> %147 to <4 x i64>
  %149 = and <4 x i64> %148, %145
  %150 = or <4 x i64> %140, %133
  %151 = or <4 x i64> %150, %149
  %152 = bitcast <4 x i64> %151 to <8 x float>
  %153 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %152) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %153
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_erff8_u10fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_erff8_u10fma4(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_erfcf8_u15fma4(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_erfcf8_u15fma4(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fastpowf8_u3500fma4(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = fmul <8 x float> %9, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %12 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = bitcast <2 x i64> %13 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %18 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %19 = add nsw <4 x i32> %18, <i32 -127, i32 -127, i32 -127, i32 -127>
  %20 = and <4 x i32> %17, <i32 255, i32 255, i32 255, i32 255>
  %21 = add nsw <4 x i32> %20, <i32 -127, i32 -127, i32 -127, i32 -127>
  %22 = bitcast <8 x float> %9 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shl nuw nsw <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %26 = shl nuw nsw <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %27 = bitcast <2 x i64> %23 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = sub <4 x i32> %28, %25
  %30 = bitcast <2 x i64> %24 to <4 x i32>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = sub <4 x i32> %31, %26
  %33 = bitcast <4 x i32> %29 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = add nsw <4 x i32> %18, <i32 -191, i32 -191, i32 -191, i32 -191>
  %40 = add nsw <4 x i32> %20, <i32 -191, i32 -191, i32 -191, i32 -191>
  %41 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <4 x i32> %19 to <16 x i8>
  %44 = bitcast <4 x i32> %39 to <16 x i8>
  %45 = bitcast <2 x i64> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <4 x i32> %21 to <16 x i8>
  %48 = bitcast <4 x i32> %40 to <16 x i8>
  %49 = bitcast <2 x i64> %42 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %47, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <16 x i8> %46 to <2 x i64>
  %52 = bitcast <16 x i8> %50 to <2 x i64>
  %53 = fadd <8 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fdiv <8 x float> %53, %54
  %56 = fmul <8 x float> %55, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %56, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #8
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %56, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #8
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %56, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #8
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %56, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #8
  %61 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %64) #8
  %66 = fmul <8 x float> %65, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %60, <8 x float> %66) #8
  %68 = fmul <8 x float> %67, %1
  %69 = fmul <8 x float> %68, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %70 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %69) #8
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %70) #8
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %68) #8
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %75) #8
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %76, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #8
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %77, <8 x float> %76, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #8
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %76, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #8
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %76, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #8
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %80, <8 x float> %76, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #8
  %82 = fmul <8 x float> %76, %76
  %83 = fadd <8 x float> %76, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %81, <8 x float> %83) #8
  %85 = bitcast <2 x i64> %72 to <4 x i32>
  %86 = ashr <4 x i32> %85, <i32 1, i32 1, i32 1, i32 1>
  %87 = bitcast <2 x i64> %73 to <4 x i32>
  %88 = ashr <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = shl <4 x i32> %86, <i32 23, i32 23, i32 23, i32 23>
  %90 = add <4 x i32> %89, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %91 = shl <4 x i32> %88, <i32 23, i32 23, i32 23, i32 23>
  %92 = add <4 x i32> %91, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %93 = bitcast <4 x i32> %90 to <2 x i64>
  %94 = bitcast <4 x i32> %92 to <2 x i64>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <4 x i64> %95, <4 x i64> %96, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %98 = bitcast <4 x i64> %97 to <8 x float>
  %99 = fmul <8 x float> %84, %98
  %100 = sub <4 x i32> %85, %86
  %101 = sub <4 x i32> %87, %88
  %102 = shl <4 x i32> %100, <i32 23, i32 23, i32 23, i32 23>
  %103 = add <4 x i32> %102, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %104 = shl <4 x i32> %101, <i32 23, i32 23, i32 23, i32 23>
  %105 = add <4 x i32> %104, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %99, %111
  %113 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %68, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %114 = bitcast <8 x float> %113 to <4 x i64>
  %115 = bitcast <8 x float> %112 to <4 x i64>
  %116 = xor <4 x i64> %114, <i64 -1, i64 -1, i64 -1, i64 -1>
  %117 = and <4 x i64> %115, %116
  %118 = bitcast <4 x i64> %117 to <8 x float>
  %119 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %120 = fcmp oeq <8 x float> %119, %1
  %121 = sext <8 x i1> %120 to <8 x i32>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = bitcast <8 x float> %1 to <4 x i64>
  %124 = and <4 x i64> %123, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %125 = bitcast <4 x i64> %124 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %125, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = or <4 x i64> %122, %127
  %129 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = and <4 x i32> %133, <i32 1, i32 1, i32 1, i32 1>
  %135 = icmp ne <4 x i32> %134, zeroinitializer
  %136 = sext <4 x i1> %135 to <4 x i32>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = bitcast <2 x i64> %132 to <4 x i32>
  %139 = and <4 x i32> %138, <i32 1, i32 1, i32 1, i32 1>
  %140 = icmp ne <4 x i32> %139, zeroinitializer
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <2 x i64>
  %143 = shufflevector <2 x i64> %137, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %144 = shufflevector <2 x i64> %142, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <4 x i64> %143, <4 x i64> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %146 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %125, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %147 = bitcast <8 x float> %146 to <4 x i64>
  %148 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %149 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %150 = bitcast <2 x i64> %148 to <4 x i32>
  %151 = ashr <4 x i32> %150, <i32 31, i32 31, i32 31, i32 31>
  %152 = bitcast <4 x i32> %151 to <2 x i64>
  %153 = bitcast <2 x i64> %149 to <4 x i32>
  %154 = ashr <4 x i32> %153, <i32 31, i32 31, i32 31, i32 31>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %152, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = and <4 x i64> %128, %158
  %160 = and <4 x i64> %159, %147
  %161 = and <4 x i64> %160, %145
  %162 = xor <4 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = bitcast <4 x i64> %161 to <8 x float>
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %163, <8 x float> %164) #8
  %166 = fcmp oeq <8 x float> %0, zeroinitializer
  %167 = sext <8 x i1> %166 to <8 x i32>
  %168 = bitcast <8 x i32> %167 to <8 x float>
  %169 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %165, <8 x float> zeroinitializer, <8 x float> %168) #8
  %170 = fcmp oeq <8 x float> %1, zeroinitializer
  %171 = sext <8 x i1> %170 to <8 x i32>
  %172 = bitcast <8 x i32> %171 to <8 x float>
  %173 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %169, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %172) #8
  ret <8 x float> %173
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf8_fma4(i32) local_unnamed_addr #0 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %17

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %9 = load i32, i32* %8, align 8, !tbaa !40
  %10 = and i32 %9, 268435456
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 -2147483647, i32 0) #8
  %13 = load i32, i32* %8, align 8, !tbaa !40
  %14 = and i32 %13, 65536
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, i32 0, i32 3
  br label %17

; <label>:17:                                     ; preds = %12, %5, %1
  %18 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %16, %12 ]
  ret i32 %18
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf8_fma4(i32) local_unnamed_addr #4 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float>, <8 x float>, i8) #6

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float>, <8 x float>, <8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32) #6

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #6

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4, !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempif: argument 0"}
!9 = distinct !{!9, !"rempif"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempif: argument 0"}
!12 = distinct !{!12, !"rempif"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempif: argument 0"}
!15 = distinct !{!15, !"rempif"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempif: argument 0"}
!18 = distinct !{!18, !"rempif"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempif: argument 0"}
!21 = distinct !{!21, !"rempif"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempif: argument 0"}
!24 = distinct !{!24, !"rempif"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempif: argument 0"}
!27 = distinct !{!27, !"rempif"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempif: argument 0"}
!30 = distinct !{!30, !"rempif"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospif8_u05fma4: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospif8_u05fma4"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_sincospif8_u35fma4: argument 0"}
!36 = distinct !{!36, !"Sleef_sincospif8_u35fma4"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"Sleef_modff8_fma4: argument 0"}
!39 = distinct !{!39, !"Sleef_modff8_fma4"}
!40 = !{!41, !41, i64 0}
!41 = !{!"int", !5, i64 0}
