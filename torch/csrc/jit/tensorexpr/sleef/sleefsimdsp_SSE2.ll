; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vfloat2 = type { <4 x float>, <4 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [5 x i8] c"SSE2\00", align 1
@rempitabsp = external local_unnamed_addr constant [0 x float], align 4

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = select <4 x i1> %5, <4 x float> %8, <4 x float> %4
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = and <2 x i64> %7, <i64 820338753727, i64 820338753727>
  %13 = and <2 x i64> %7, <i64 545460846719, i64 545460846719>
  %14 = xor <2 x i64> %13, <i64 545460846719, i64 545460846719>
  %15 = or <2 x i64> %14, %12
  %16 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = sub <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = fcmp oeq <4 x float> %0, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = xor <2 x i64> %22, <i64 -1, i64 -1>
  %25 = and <2 x i64> %19, %24
  %26 = or <2 x i64> %25, %23
  %27 = fcmp uno <4 x float> %0, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 9223372034707292159, i64 9223372034707292159>
  %31 = xor <2 x i64> %29, <i64 -1, i64 -1>
  %32 = and <2 x i64> %26, %31
  %33 = or <2 x i64> %32, %30
  %34 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 9223372034707292159, i64 9223372034707292159>
  %38 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %39 = and <2 x i64> %33, %38
  %40 = or <2 x i64> %39, %37
  ret <2 x i64> %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_ldexpf4_sse2(<4 x float>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 6, i32 6, i32 6, i32 6>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %9 = shl <4 x i32> %7, <i32 6, i32 6, i32 6, i32 6>
  %10 = sub <4 x i32> %3, %9
  %11 = add nsw <4 x i32> %8, <i32 127, i32 127, i32 127, i32 127>
  %12 = icmp sgt <4 x i32> %7, <i32 -8, i32 -8, i32 -8, i32 -8>
  %13 = select <4 x i1> %12, <4 x i32> %11, <4 x i32> zeroinitializer
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = icmp sgt <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = xor <2 x i64> %17, <i64 -1, i64 -1>
  %19 = and <2 x i64> %18, %14
  %20 = and <2 x i64> %17, <i64 1095216660735, i64 1095216660735>
  %21 = or <2 x i64> %20, %19
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %24, %0
  %26 = fmul <4 x float> %25, %24
  %27 = fmul <4 x float> %26, %24
  %28 = fmul <4 x float> %27, %24
  %29 = shl <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %28, %31
  ret <4 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = fmul <4 x float> %13, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %13, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fmul <4 x float> %13, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %19 = fadd <4 x float> %18, %17
  br label %320

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %38, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #6
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %28) #6
  %30 = fmul <4 x float> %29, <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>
  %31 = fadd <4 x float> %30, %0
  %32 = fmul <4 x float> %29, <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %29, <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %29, <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>
  %37 = fadd <4 x float> %36, %35
  br label %320

; <label>:38:                                     ; preds = %20
  %39 = bitcast <4 x float> %0 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %42 = add nsw <4 x i32> %41, <i32 -152, i32 -152, i32 -152, i32 -152>
  %43 = icmp ugt <4 x i32> %41, <i32 217, i32 217, i32 217, i32 217>
  %44 = select <4 x i1> %43, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %45 = add <4 x i32> %44, %39
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = ashr <4 x i32> %42, <i32 31, i32 31, i32 31, i32 31>
  %48 = xor <4 x i32> %47, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %49 = and <4 x i32> %48, %42
  %50 = shl <4 x i32> %49, <i32 2, i32 2, i32 2, i32 2>
  %51 = extractelement <4 x i32> %50, i32 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !7
  %55 = extractelement <4 x i32> %50, i32 2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !7
  %59 = extractelement <4 x i32> %50, i32 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !3, !noalias !7
  %63 = extractelement <4 x i32> %50, i32 0
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !3, !noalias !7
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = insertelement <4 x float> %67, float %62, i32 1
  %69 = insertelement <4 x float> %68, float %58, i32 2
  %70 = insertelement <4 x float> %69, float %54, i32 3
  %71 = bitcast <4 x i32> %45 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fsub <4 x float> %46, %73
  %75 = bitcast <4 x float> %70 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %70, %77
  %79 = fmul <4 x float> %70, %46
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %73, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %74, %77
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %78, %73
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %74, %78
  %90 = fadd <4 x float> %89, %88
  %91 = and <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = or <2 x i64> %91, <i64 5404319554102886400, i64 5404319554102886400>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %79, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %95 = bitcast <4 x float> %94 to <2 x i64>
  %96 = and <2 x i64> %95, <i64 9223372034707292159, i64 9223372034707292159>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fcmp ogt <4 x float> %97, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %99 = fadd <4 x float> %94, %93
  %100 = fsub <4 x float> %99, %93
  %101 = bitcast <4 x float> %100 to <2 x i64>
  %102 = or <2 x i64> %91, %101
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = select <4 x i1> %98, <4 x float> %94, <4 x float> %103
  %105 = and <2 x i64> %80, <i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fcmp ogt <4 x float> %106, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %108 = fadd <4 x float> %79, %93
  %109 = fsub <4 x float> %108, %93
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = or <2 x i64> %91, %110
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = select <4 x i1> %107, <4 x float> %79, <4 x float> %112
  %114 = fmul <4 x float> %104, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %115 = fadd <4 x float> %79, %114
  %116 = fmul <4 x float> %113, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %117 = fadd <4 x float> %104, %116
  %118 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %117) #6
  %119 = fadd <4 x float> %90, %115
  %120 = fsub <4 x float> %115, %119
  %121 = fadd <4 x float> %90, %120
  %122 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %123 = load float, float* %122, align 4, !tbaa !3, !noalias !7
  %124 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %125 = load float, float* %124, align 4, !tbaa !3, !noalias !7
  %126 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %60
  %127 = load float, float* %126, align 4, !tbaa !3, !noalias !7
  %128 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %64
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !7
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = insertelement <4 x float> %130, float %127, i32 1
  %132 = insertelement <4 x float> %131, float %125, i32 2
  %133 = insertelement <4 x float> %132, float %123, i32 3
  %134 = bitcast <4 x float> %133 to <2 x i64>
  %135 = and <2 x i64> %134, <i64 -17587891081216, i64 -17587891081216>
  %136 = bitcast <2 x i64> %135 to <4 x float>
  %137 = fsub <4 x float> %133, %136
  %138 = fmul <4 x float> %133, %46
  %139 = bitcast <4 x float> %138 to <2 x i64>
  %140 = xor <2 x i64> %139, <i64 -9223372034707292160, i64 -9223372034707292160>
  %141 = bitcast <2 x i64> %140 to <4 x float>
  %142 = fmul <4 x float> %73, %136
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %74, %136
  %145 = fadd <4 x float> %144, %143
  %146 = fmul <4 x float> %137, %73
  %147 = fadd <4 x float> %146, %145
  %148 = fmul <4 x float> %74, %137
  %149 = fadd <4 x float> %148, %147
  %150 = fadd <4 x float> %138, %119
  %151 = fsub <4 x float> %150, %119
  %152 = fsub <4 x float> %150, %151
  %153 = fsub <4 x float> %119, %152
  %154 = fsub <4 x float> %138, %151
  %155 = fadd <4 x float> %154, %153
  %156 = fadd <4 x float> %149, %121
  %157 = fadd <4 x float> %156, %155
  %158 = bitcast <4 x float> %150 to <2 x i64>
  %159 = and <2 x i64> %158, <i64 -9223372034707292160, i64 -9223372034707292160>
  %160 = or <2 x i64> %159, <i64 5404319554102886400, i64 5404319554102886400>
  %161 = bitcast <2 x i64> %160 to <4 x float>
  %162 = fmul <4 x float> %150, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %163 = bitcast <4 x float> %162 to <2 x i64>
  %164 = and <2 x i64> %163, <i64 9223372034707292159, i64 9223372034707292159>
  %165 = bitcast <2 x i64> %164 to <4 x float>
  %166 = fcmp ogt <4 x float> %165, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %167 = fadd <4 x float> %162, %161
  %168 = fsub <4 x float> %167, %161
  %169 = bitcast <4 x float> %168 to <2 x i64>
  %170 = or <2 x i64> %159, %169
  %171 = bitcast <2 x i64> %170 to <4 x float>
  %172 = select <4 x i1> %166, <4 x float> %162, <4 x float> %171
  %173 = and <2 x i64> %158, <i64 9223372034707292159, i64 9223372034707292159>
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = fcmp ogt <4 x float> %174, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %176 = fadd <4 x float> %150, %161
  %177 = fsub <4 x float> %176, %161
  %178 = bitcast <4 x float> %177 to <2 x i64>
  %179 = or <2 x i64> %159, %178
  %180 = bitcast <2 x i64> %179 to <4 x float>
  %181 = select <4 x i1> %175, <4 x float> %150, <4 x float> %180
  %182 = fmul <4 x float> %172, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %183 = fadd <4 x float> %150, %182
  %184 = fmul <4 x float> %181, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %185 = fadd <4 x float> %172, %184
  %186 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %185) #6
  %187 = add <4 x i32> %186, %118
  %188 = fadd <4 x float> %157, %183
  %189 = fsub <4 x float> %183, %188
  %190 = fadd <4 x float> %157, %189
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !7
  %193 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %194 = load float, float* %193, align 4, !tbaa !3, !noalias !7
  %195 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %60
  %196 = load float, float* %195, align 4, !tbaa !3, !noalias !7
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %64
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !7
  %199 = insertelement <4 x float> undef, float %198, i32 0
  %200 = insertelement <4 x float> %199, float %196, i32 1
  %201 = insertelement <4 x float> %200, float %194, i32 2
  %202 = insertelement <4 x float> %201, float %192, i32 3
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !7
  %205 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %206 = load float, float* %205, align 4, !tbaa !3, !noalias !7
  %207 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %60
  %208 = load float, float* %207, align 4, !tbaa !3, !noalias !7
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %64
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !7
  %211 = insertelement <4 x float> undef, float %210, i32 0
  %212 = insertelement <4 x float> %211, float %208, i32 1
  %213 = insertelement <4 x float> %212, float %206, i32 2
  %214 = insertelement <4 x float> %213, float %204, i32 3
  %215 = bitcast <4 x float> %202 to <2 x i64>
  %216 = and <2 x i64> %215, <i64 -17587891081216, i64 -17587891081216>
  %217 = bitcast <2 x i64> %216 to <4 x float>
  %218 = fsub <4 x float> %202, %217
  %219 = fmul <4 x float> %202, %46
  %220 = bitcast <4 x float> %219 to <2 x i64>
  %221 = xor <2 x i64> %220, <i64 -9223372034707292160, i64 -9223372034707292160>
  %222 = bitcast <2 x i64> %221 to <4 x float>
  %223 = fmul <4 x float> %73, %217
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %218, %73
  %226 = fadd <4 x float> %225, %224
  %227 = fmul <4 x float> %74, %217
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %74, %218
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %214, %46
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %219, %188
  %234 = fsub <4 x float> %233, %188
  %235 = fsub <4 x float> %233, %234
  %236 = fsub <4 x float> %188, %235
  %237 = fsub <4 x float> %219, %234
  %238 = fadd <4 x float> %237, %236
  %239 = fadd <4 x float> %232, %190
  %240 = fadd <4 x float> %239, %238
  %241 = fadd <4 x float> %233, %240
  %242 = fsub <4 x float> %233, %241
  %243 = fadd <4 x float> %240, %242
  %244 = bitcast <4 x float> %241 to <2 x i64>
  %245 = and <2 x i64> %244, <i64 -17587891081216, i64 -17587891081216>
  %246 = bitcast <2 x i64> %245 to <4 x float>
  %247 = fsub <4 x float> %241, %246
  %248 = fmul <4 x float> %241, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %249 = bitcast <4 x float> %248 to <2 x i64>
  %250 = xor <2 x i64> %249, <i64 -9223372034707292160, i64 -9223372034707292160>
  %251 = bitcast <2 x i64> %250 to <4 x float>
  %252 = fmul <4 x float> %246, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %247, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %255 = fadd <4 x float> %254, %253
  %256 = fmul <4 x float> %246, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %257 = fadd <4 x float> %256, %255
  %258 = fmul <4 x float> %247, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %259 = fadd <4 x float> %258, %257
  %260 = fmul <4 x float> %241, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %261 = fadd <4 x float> %260, %259
  %262 = fmul <4 x float> %243, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %263 = fadd <4 x float> %262, %261
  %264 = bitcast <4 x float> %248 to <4 x i32>
  %265 = bitcast <4 x float> %263 to <4 x i32>
  %266 = and <2 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159>
  %267 = bitcast <2 x i64> %266 to <4 x float>
  %268 = fcmp olt <4 x float> %267, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = and <4 x i32> %45, %269
  %271 = xor <4 x i32> %269, <i32 -1, i32 -1, i32 -1, i32 -1>
  %272 = and <4 x i32> %264, %271
  %273 = or <4 x i32> %272, %270
  %274 = and <4 x i32> %265, %271
  %275 = shl <4 x i32> %187, <i32 1, i32 1, i32 1, i32 1>
  %276 = and <4 x i32> %275, <i32 6, i32 6, i32 6, i32 6>
  %277 = bitcast <4 x i32> %273 to <4 x float>
  %278 = fcmp ogt <4 x float> %277, zeroinitializer
  %279 = select <4 x i1> %278, <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %280 = add nuw nsw <4 x i32> %279, %276
  %281 = lshr <4 x i32> %280, <i32 2, i32 2, i32 2, i32 2>
  %282 = and <4 x i32> %187, <i32 1, i32 1, i32 1, i32 1>
  %283 = icmp ne <4 x i32> %282, zeroinitializer
  %284 = sext <4 x i1> %283 to <4 x i32>
  %285 = bitcast <4 x i32> %273 to <2 x i64>
  %286 = and <2 x i64> %285, <i64 -9223372034707292160, i64 -9223372034707292160>
  %287 = xor <2 x i64> %286, <i64 -4627149705656594469, i64 -4627149705656594469>
  %288 = bitcast <2 x i64> %287 to <4 x float>
  %289 = or <2 x i64> %286, <i64 3691752325685951790, i64 3691752325685951790>
  %290 = bitcast <2 x i64> %289 to <4 x float>
  %291 = bitcast <4 x i32> %274 to <4 x float>
  %292 = fadd <4 x float> %277, %288
  %293 = fsub <4 x float> %292, %277
  %294 = fsub <4 x float> %292, %293
  %295 = fsub <4 x float> %277, %294
  %296 = fsub <4 x float> %288, %293
  %297 = fadd <4 x float> %296, %295
  %298 = fadd <4 x float> %290, %291
  %299 = fadd <4 x float> %297, %298
  %300 = bitcast <4 x float> %292 to <4 x i32>
  %301 = and <4 x i32> %300, %284
  %302 = xor <4 x i32> %284, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = and <4 x i32> %273, %302
  %304 = or <4 x i32> %301, %303
  %305 = bitcast <4 x float> %299 to <4 x i32>
  %306 = and <4 x i32> %305, %284
  %307 = and <4 x i32> %274, %302
  %308 = or <4 x i32> %306, %307
  %309 = bitcast <4 x i32> %304 to <4 x float>
  %310 = bitcast <4 x i32> %308 to <4 x float>
  %311 = fadd <4 x float> %309, %310
  %312 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %313 = fcmp uno <4 x float> %0, zeroinitializer
  %314 = or <4 x i1> %312, %313
  %315 = sext <4 x i1> %314 to <4 x i32>
  %316 = bitcast <4 x i32> %315 to <2 x i64>
  %317 = bitcast <4 x float> %311 to <2 x i64>
  %318 = or <2 x i64> %317, %316
  %319 = bitcast <2 x i64> %318 to <4 x float>
  br label %320

; <label>:320:                                    ; preds = %26, %38, %10
  %321 = phi <4 x i32> [ %12, %10 ], [ %28, %26 ], [ %281, %38 ]
  %322 = phi <4 x float> [ %19, %10 ], [ %37, %26 ], [ %319, %38 ]
  %323 = fmul <4 x float> %322, %322
  %324 = and <4 x i32> %321, <i32 1, i32 1, i32 1, i32 1>
  %325 = icmp ne <4 x i32> %324, zeroinitializer
  %326 = sext <4 x i1> %325 to <4 x i32>
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = and <2 x i64> %327, <i64 -9223372034707292160, i64 -9223372034707292160>
  %329 = bitcast <4 x float> %322 to <2 x i64>
  %330 = xor <2 x i64> %328, %329
  %331 = bitcast <2 x i64> %330 to <4 x float>
  %332 = fmul <4 x float> %323, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %333 = fadd <4 x float> %332, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %334 = fmul <4 x float> %323, %333
  %335 = fadd <4 x float> %334, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %336 = fmul <4 x float> %323, %335
  %337 = fadd <4 x float> %336, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %338 = fmul <4 x float> %337, %331
  %339 = fmul <4 x float> %323, %338
  %340 = fadd <4 x float> %339, %331
  %341 = bitcast <4 x float> %0 to <4 x i32>
  %342 = icmp eq <4 x i32> %341, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %343 = select <4 x i1> %342, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %340
  ret <4 x float> %343
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cosf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %23, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = fadd <4 x float> %11, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = shl <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = or <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %15) #6
  %17 = fmul <4 x float> %16, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %18 = fadd <4 x float> %17, %0
  %19 = fmul <4 x float> %16, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %16, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %22 = fadd <4 x float> %21, %20
  br label %328

; <label>:23:                                     ; preds = %1
  %24 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %26) #6
  %28 = icmp eq i32 %27, 65535
  br i1 %28, label %29, label %44, !prof !2

; <label>:29:                                     ; preds = %23
  %30 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %31 = fadd <4 x float> %30, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #6
  %33 = shl <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = or <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %37 = fadd <4 x float> %36, %0
  %38 = fmul <4 x float> %35, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %35, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %35, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %43 = fadd <4 x float> %42, %41
  br label %328

; <label>:44:                                     ; preds = %23
  %45 = bitcast <4 x float> %0 to <4 x i32>
  %46 = lshr <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %48 = add nsw <4 x i32> %47, <i32 -152, i32 -152, i32 -152, i32 -152>
  %49 = icmp ugt <4 x i32> %47, <i32 217, i32 217, i32 217, i32 217>
  %50 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = add <4 x i32> %50, %45
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = ashr <4 x i32> %48, <i32 31, i32 31, i32 31, i32 31>
  %54 = xor <4 x i32> %53, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %55 = and <4 x i32> %54, %48
  %56 = shl <4 x i32> %55, <i32 2, i32 2, i32 2, i32 2>
  %57 = extractelement <4 x i32> %56, i32 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !3, !noalias !10
  %61 = extractelement <4 x i32> %56, i32 2
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !3, !noalias !10
  %65 = extractelement <4 x i32> %56, i32 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !3, !noalias !10
  %69 = extractelement <4 x i32> %56, i32 0
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !3, !noalias !10
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = insertelement <4 x float> %73, float %68, i32 1
  %75 = insertelement <4 x float> %74, float %64, i32 2
  %76 = insertelement <4 x float> %75, float %60, i32 3
  %77 = bitcast <4 x i32> %51 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fsub <4 x float> %52, %79
  %81 = bitcast <4 x float> %76 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %76, %83
  %85 = fmul <4 x float> %76, %52
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = xor <2 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = fmul <4 x float> %79, %83
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %80, %83
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %84, %79
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %80, %84
  %96 = fadd <4 x float> %95, %94
  %97 = and <2 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = or <2 x i64> %97, <i64 5404319554102886400, i64 5404319554102886400>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fmul <4 x float> %85, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %101 = bitcast <4 x float> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 9223372034707292159, i64 9223372034707292159>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fcmp ogt <4 x float> %103, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %105 = fadd <4 x float> %100, %99
  %106 = fsub <4 x float> %105, %99
  %107 = bitcast <4 x float> %106 to <2 x i64>
  %108 = or <2 x i64> %97, %107
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = select <4 x i1> %104, <4 x float> %100, <4 x float> %109
  %111 = and <2 x i64> %86, <i64 9223372034707292159, i64 9223372034707292159>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fcmp ogt <4 x float> %112, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %114 = fadd <4 x float> %85, %99
  %115 = fsub <4 x float> %114, %99
  %116 = bitcast <4 x float> %115 to <2 x i64>
  %117 = or <2 x i64> %97, %116
  %118 = bitcast <2 x i64> %117 to <4 x float>
  %119 = select <4 x i1> %113, <4 x float> %85, <4 x float> %118
  %120 = fmul <4 x float> %110, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %121 = fadd <4 x float> %85, %120
  %122 = fmul <4 x float> %119, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %123 = fadd <4 x float> %110, %122
  %124 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %123) #6
  %125 = fadd <4 x float> %96, %121
  %126 = fsub <4 x float> %121, %125
  %127 = fadd <4 x float> %96, %126
  %128 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %58
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !10
  %130 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %62
  %131 = load float, float* %130, align 4, !tbaa !3, !noalias !10
  %132 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %66
  %133 = load float, float* %132, align 4, !tbaa !3, !noalias !10
  %134 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %70
  %135 = load float, float* %134, align 4, !tbaa !3, !noalias !10
  %136 = insertelement <4 x float> undef, float %135, i32 0
  %137 = insertelement <4 x float> %136, float %133, i32 1
  %138 = insertelement <4 x float> %137, float %131, i32 2
  %139 = insertelement <4 x float> %138, float %129, i32 3
  %140 = bitcast <4 x float> %139 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fsub <4 x float> %139, %142
  %144 = fmul <4 x float> %139, %52
  %145 = bitcast <4 x float> %144 to <2 x i64>
  %146 = xor <2 x i64> %145, <i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = bitcast <2 x i64> %146 to <4 x float>
  %148 = fmul <4 x float> %79, %142
  %149 = fadd <4 x float> %148, %147
  %150 = fmul <4 x float> %80, %142
  %151 = fadd <4 x float> %150, %149
  %152 = fmul <4 x float> %143, %79
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %80, %143
  %155 = fadd <4 x float> %154, %153
  %156 = fadd <4 x float> %144, %125
  %157 = fsub <4 x float> %156, %125
  %158 = fsub <4 x float> %156, %157
  %159 = fsub <4 x float> %125, %158
  %160 = fsub <4 x float> %144, %157
  %161 = fadd <4 x float> %160, %159
  %162 = fadd <4 x float> %155, %127
  %163 = fadd <4 x float> %162, %161
  %164 = bitcast <4 x float> %156 to <2 x i64>
  %165 = and <2 x i64> %164, <i64 -9223372034707292160, i64 -9223372034707292160>
  %166 = or <2 x i64> %165, <i64 5404319554102886400, i64 5404319554102886400>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fmul <4 x float> %156, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %169 = bitcast <4 x float> %168 to <2 x i64>
  %170 = and <2 x i64> %169, <i64 9223372034707292159, i64 9223372034707292159>
  %171 = bitcast <2 x i64> %170 to <4 x float>
  %172 = fcmp ogt <4 x float> %171, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %173 = fadd <4 x float> %168, %167
  %174 = fsub <4 x float> %173, %167
  %175 = bitcast <4 x float> %174 to <2 x i64>
  %176 = or <2 x i64> %165, %175
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = select <4 x i1> %172, <4 x float> %168, <4 x float> %177
  %179 = and <2 x i64> %164, <i64 9223372034707292159, i64 9223372034707292159>
  %180 = bitcast <2 x i64> %179 to <4 x float>
  %181 = fcmp ogt <4 x float> %180, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %182 = fadd <4 x float> %156, %167
  %183 = fsub <4 x float> %182, %167
  %184 = bitcast <4 x float> %183 to <2 x i64>
  %185 = or <2 x i64> %165, %184
  %186 = bitcast <2 x i64> %185 to <4 x float>
  %187 = select <4 x i1> %181, <4 x float> %156, <4 x float> %186
  %188 = fmul <4 x float> %178, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %189 = fadd <4 x float> %156, %188
  %190 = fmul <4 x float> %187, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %191 = fadd <4 x float> %178, %190
  %192 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %191) #6
  %193 = add <4 x i32> %192, %124
  %194 = fadd <4 x float> %163, %189
  %195 = fsub <4 x float> %189, %194
  %196 = fadd <4 x float> %163, %195
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %58
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !10
  %199 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %62
  %200 = load float, float* %199, align 4, !tbaa !3, !noalias !10
  %201 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %66
  %202 = load float, float* %201, align 4, !tbaa !3, !noalias !10
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %70
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !10
  %205 = insertelement <4 x float> undef, float %204, i32 0
  %206 = insertelement <4 x float> %205, float %202, i32 1
  %207 = insertelement <4 x float> %206, float %200, i32 2
  %208 = insertelement <4 x float> %207, float %198, i32 3
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %58
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !10
  %211 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %62
  %212 = load float, float* %211, align 4, !tbaa !3, !noalias !10
  %213 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %66
  %214 = load float, float* %213, align 4, !tbaa !3, !noalias !10
  %215 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %70
  %216 = load float, float* %215, align 4, !tbaa !3, !noalias !10
  %217 = insertelement <4 x float> undef, float %216, i32 0
  %218 = insertelement <4 x float> %217, float %214, i32 1
  %219 = insertelement <4 x float> %218, float %212, i32 2
  %220 = insertelement <4 x float> %219, float %210, i32 3
  %221 = bitcast <4 x float> %208 to <2 x i64>
  %222 = and <2 x i64> %221, <i64 -17587891081216, i64 -17587891081216>
  %223 = bitcast <2 x i64> %222 to <4 x float>
  %224 = fsub <4 x float> %208, %223
  %225 = fmul <4 x float> %208, %52
  %226 = bitcast <4 x float> %225 to <2 x i64>
  %227 = xor <2 x i64> %226, <i64 -9223372034707292160, i64 -9223372034707292160>
  %228 = bitcast <2 x i64> %227 to <4 x float>
  %229 = fmul <4 x float> %79, %223
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %224, %79
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %80, %223
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %80, %224
  %236 = fadd <4 x float> %235, %234
  %237 = fmul <4 x float> %220, %52
  %238 = fadd <4 x float> %237, %236
  %239 = fadd <4 x float> %225, %194
  %240 = fsub <4 x float> %239, %194
  %241 = fsub <4 x float> %239, %240
  %242 = fsub <4 x float> %194, %241
  %243 = fsub <4 x float> %225, %240
  %244 = fadd <4 x float> %243, %242
  %245 = fadd <4 x float> %238, %196
  %246 = fadd <4 x float> %245, %244
  %247 = fadd <4 x float> %239, %246
  %248 = fsub <4 x float> %239, %247
  %249 = fadd <4 x float> %246, %248
  %250 = bitcast <4 x float> %247 to <2 x i64>
  %251 = and <2 x i64> %250, <i64 -17587891081216, i64 -17587891081216>
  %252 = bitcast <2 x i64> %251 to <4 x float>
  %253 = fsub <4 x float> %247, %252
  %254 = fmul <4 x float> %247, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %255 = bitcast <4 x float> %254 to <2 x i64>
  %256 = xor <2 x i64> %255, <i64 -9223372034707292160, i64 -9223372034707292160>
  %257 = bitcast <2 x i64> %256 to <4 x float>
  %258 = fmul <4 x float> %252, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %259 = fadd <4 x float> %258, %257
  %260 = fmul <4 x float> %253, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %261 = fadd <4 x float> %260, %259
  %262 = fmul <4 x float> %252, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %263 = fadd <4 x float> %262, %261
  %264 = fmul <4 x float> %253, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %265 = fadd <4 x float> %264, %263
  %266 = fmul <4 x float> %247, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %267 = fadd <4 x float> %266, %265
  %268 = fmul <4 x float> %249, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %269 = fadd <4 x float> %268, %267
  %270 = bitcast <4 x float> %254 to <4 x i32>
  %271 = bitcast <4 x float> %269 to <4 x i32>
  %272 = and <2 x i64> %77, <i64 9223372034707292159, i64 9223372034707292159>
  %273 = bitcast <2 x i64> %272 to <4 x float>
  %274 = fcmp olt <4 x float> %273, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %275 = sext <4 x i1> %274 to <4 x i32>
  %276 = and <4 x i32> %51, %275
  %277 = xor <4 x i32> %275, <i32 -1, i32 -1, i32 -1, i32 -1>
  %278 = and <4 x i32> %270, %277
  %279 = or <4 x i32> %278, %276
  %280 = and <4 x i32> %271, %277
  %281 = shl <4 x i32> %193, <i32 1, i32 1, i32 1, i32 1>
  %282 = and <4 x i32> %281, <i32 6, i32 6, i32 6, i32 6>
  %283 = bitcast <4 x i32> %279 to <4 x float>
  %284 = fcmp ogt <4 x float> %283, zeroinitializer
  %285 = sext <4 x i1> %284 to <4 x i32>
  %286 = and <4 x i32> %285, <i32 15, i32 15, i32 15, i32 15>
  %287 = xor <4 x i32> %286, <i32 7, i32 7, i32 7, i32 7>
  %288 = add nuw nsw <4 x i32> %287, %282
  %289 = lshr <4 x i32> %288, <i32 1, i32 1, i32 1, i32 1>
  %290 = and <4 x i32> %193, <i32 1, i32 1, i32 1, i32 1>
  %291 = icmp eq <4 x i32> %290, zeroinitializer
  %292 = sext <4 x i1> %291 to <4 x i32>
  %293 = bitcast <4 x i32> %285 to <2 x i64>
  %294 = and <2 x i64> %293, <i64 -9223372034707292160, i64 -9223372034707292160>
  %295 = or <2 x i64> %294, <i64 4596222329050697691, i64 4596222329050697691>
  %296 = bitcast <2 x i64> %295 to <4 x float>
  %297 = xor <2 x i64> %294, <i64 -5531619709021340370, i64 -5531619709021340370>
  %298 = bitcast <2 x i64> %297 to <4 x float>
  %299 = bitcast <4 x i32> %280 to <4 x float>
  %300 = fadd <4 x float> %283, %296
  %301 = fsub <4 x float> %300, %283
  %302 = fsub <4 x float> %300, %301
  %303 = fsub <4 x float> %283, %302
  %304 = fsub <4 x float> %296, %301
  %305 = fadd <4 x float> %304, %303
  %306 = fadd <4 x float> %298, %299
  %307 = fadd <4 x float> %306, %305
  %308 = bitcast <4 x float> %300 to <4 x i32>
  %309 = and <4 x i32> %308, %292
  %310 = xor <4 x i32> %292, <i32 -1, i32 -1, i32 -1, i32 -1>
  %311 = and <4 x i32> %279, %310
  %312 = or <4 x i32> %309, %311
  %313 = bitcast <4 x float> %307 to <4 x i32>
  %314 = and <4 x i32> %313, %292
  %315 = and <4 x i32> %280, %310
  %316 = or <4 x i32> %314, %315
  %317 = bitcast <4 x i32> %312 to <4 x float>
  %318 = bitcast <4 x i32> %316 to <4 x float>
  %319 = fadd <4 x float> %317, %318
  %320 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %321 = fcmp uno <4 x float> %0, zeroinitializer
  %322 = or <4 x i1> %320, %321
  %323 = sext <4 x i1> %322 to <4 x i32>
  %324 = bitcast <4 x i32> %323 to <2 x i64>
  %325 = bitcast <4 x float> %319 to <2 x i64>
  %326 = or <2 x i64> %325, %324
  %327 = bitcast <2 x i64> %326 to <4 x float>
  br label %328

; <label>:328:                                    ; preds = %29, %44, %10
  %329 = phi <4 x i32> [ %15, %10 ], [ %34, %29 ], [ %289, %44 ]
  %330 = phi <4 x float> [ %22, %10 ], [ %43, %29 ], [ %327, %44 ]
  %331 = fmul <4 x float> %330, %330
  %332 = and <4 x i32> %329, <i32 2, i32 2, i32 2, i32 2>
  %333 = icmp eq <4 x i32> %332, zeroinitializer
  %334 = sext <4 x i1> %333 to <4 x i32>
  %335 = bitcast <4 x i32> %334 to <2 x i64>
  %336 = and <2 x i64> %335, <i64 -9223372034707292160, i64 -9223372034707292160>
  %337 = bitcast <4 x float> %330 to <2 x i64>
  %338 = xor <2 x i64> %336, %337
  %339 = bitcast <2 x i64> %338 to <4 x float>
  %340 = fmul <4 x float> %331, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %341 = fadd <4 x float> %340, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %342 = fmul <4 x float> %331, %341
  %343 = fadd <4 x float> %342, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %344 = fmul <4 x float> %331, %343
  %345 = fadd <4 x float> %344, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %346 = fmul <4 x float> %345, %339
  %347 = fmul <4 x float> %331, %346
  %348 = fadd <4 x float> %347, %339
  ret <4 x float> %348
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = fmul <4 x float> %13, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %13, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fmul <4 x float> %13, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %19 = fadd <4 x float> %18, %17
  br label %284

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %38, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #6
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %28) #6
  %30 = fmul <4 x float> %29, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %31 = fadd <4 x float> %30, %0
  %32 = fmul <4 x float> %29, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %29, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %29, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %37 = fadd <4 x float> %36, %35
  br label %284

; <label>:38:                                     ; preds = %20
  %39 = bitcast <4 x float> %0 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %42 = add nsw <4 x i32> %41, <i32 -152, i32 -152, i32 -152, i32 -152>
  %43 = icmp ugt <4 x i32> %41, <i32 217, i32 217, i32 217, i32 217>
  %44 = select <4 x i1> %43, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %45 = add <4 x i32> %44, %39
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = ashr <4 x i32> %42, <i32 31, i32 31, i32 31, i32 31>
  %48 = xor <4 x i32> %47, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %49 = and <4 x i32> %48, %42
  %50 = shl <4 x i32> %49, <i32 2, i32 2, i32 2, i32 2>
  %51 = extractelement <4 x i32> %50, i32 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !13
  %55 = extractelement <4 x i32> %50, i32 2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !13
  %59 = extractelement <4 x i32> %50, i32 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !3, !noalias !13
  %63 = extractelement <4 x i32> %50, i32 0
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !3, !noalias !13
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = insertelement <4 x float> %67, float %62, i32 1
  %69 = insertelement <4 x float> %68, float %58, i32 2
  %70 = insertelement <4 x float> %69, float %54, i32 3
  %71 = bitcast <4 x i32> %45 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fsub <4 x float> %46, %73
  %75 = bitcast <4 x float> %70 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %70, %77
  %79 = fmul <4 x float> %70, %46
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %73, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %74, %77
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %78, %73
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %74, %78
  %90 = fadd <4 x float> %89, %88
  %91 = and <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = or <2 x i64> %91, <i64 5404319554102886400, i64 5404319554102886400>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %79, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %95 = bitcast <4 x float> %94 to <2 x i64>
  %96 = and <2 x i64> %95, <i64 9223372034707292159, i64 9223372034707292159>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fcmp ogt <4 x float> %97, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %99 = fadd <4 x float> %94, %93
  %100 = fsub <4 x float> %99, %93
  %101 = bitcast <4 x float> %100 to <2 x i64>
  %102 = or <2 x i64> %91, %101
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = select <4 x i1> %98, <4 x float> %94, <4 x float> %103
  %105 = and <2 x i64> %80, <i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fcmp ogt <4 x float> %106, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %108 = fadd <4 x float> %79, %93
  %109 = fsub <4 x float> %108, %93
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = or <2 x i64> %91, %110
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = select <4 x i1> %107, <4 x float> %79, <4 x float> %112
  %114 = fmul <4 x float> %104, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %115 = fadd <4 x float> %79, %114
  %116 = fmul <4 x float> %113, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %117 = fadd <4 x float> %104, %116
  %118 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %117) #6
  %119 = fadd <4 x float> %90, %115
  %120 = fsub <4 x float> %115, %119
  %121 = fadd <4 x float> %90, %120
  %122 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %123 = load float, float* %122, align 4, !tbaa !3, !noalias !13
  %124 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %125 = load float, float* %124, align 4, !tbaa !3, !noalias !13
  %126 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %60
  %127 = load float, float* %126, align 4, !tbaa !3, !noalias !13
  %128 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %64
  %129 = load float, float* %128, align 4, !tbaa !3, !noalias !13
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = insertelement <4 x float> %130, float %127, i32 1
  %132 = insertelement <4 x float> %131, float %125, i32 2
  %133 = insertelement <4 x float> %132, float %123, i32 3
  %134 = bitcast <4 x float> %133 to <2 x i64>
  %135 = and <2 x i64> %134, <i64 -17587891081216, i64 -17587891081216>
  %136 = bitcast <2 x i64> %135 to <4 x float>
  %137 = fsub <4 x float> %133, %136
  %138 = fmul <4 x float> %133, %46
  %139 = bitcast <4 x float> %138 to <2 x i64>
  %140 = xor <2 x i64> %139, <i64 -9223372034707292160, i64 -9223372034707292160>
  %141 = bitcast <2 x i64> %140 to <4 x float>
  %142 = fmul <4 x float> %73, %136
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %74, %136
  %145 = fadd <4 x float> %144, %143
  %146 = fmul <4 x float> %137, %73
  %147 = fadd <4 x float> %146, %145
  %148 = fmul <4 x float> %74, %137
  %149 = fadd <4 x float> %148, %147
  %150 = fadd <4 x float> %138, %119
  %151 = fsub <4 x float> %150, %119
  %152 = fsub <4 x float> %150, %151
  %153 = fsub <4 x float> %119, %152
  %154 = fsub <4 x float> %138, %151
  %155 = fadd <4 x float> %154, %153
  %156 = fadd <4 x float> %149, %121
  %157 = fadd <4 x float> %156, %155
  %158 = bitcast <4 x float> %150 to <2 x i64>
  %159 = and <2 x i64> %158, <i64 -9223372034707292160, i64 -9223372034707292160>
  %160 = or <2 x i64> %159, <i64 5404319554102886400, i64 5404319554102886400>
  %161 = bitcast <2 x i64> %160 to <4 x float>
  %162 = fmul <4 x float> %150, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %163 = bitcast <4 x float> %162 to <2 x i64>
  %164 = and <2 x i64> %163, <i64 9223372034707292159, i64 9223372034707292159>
  %165 = bitcast <2 x i64> %164 to <4 x float>
  %166 = fcmp ogt <4 x float> %165, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %167 = fadd <4 x float> %162, %161
  %168 = fsub <4 x float> %167, %161
  %169 = bitcast <4 x float> %168 to <2 x i64>
  %170 = or <2 x i64> %159, %169
  %171 = bitcast <2 x i64> %170 to <4 x float>
  %172 = select <4 x i1> %166, <4 x float> %162, <4 x float> %171
  %173 = and <2 x i64> %158, <i64 9223372034707292159, i64 9223372034707292159>
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = fcmp ogt <4 x float> %174, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %176 = fadd <4 x float> %150, %161
  %177 = fsub <4 x float> %176, %161
  %178 = bitcast <4 x float> %177 to <2 x i64>
  %179 = or <2 x i64> %159, %178
  %180 = bitcast <2 x i64> %179 to <4 x float>
  %181 = select <4 x i1> %175, <4 x float> %150, <4 x float> %180
  %182 = fmul <4 x float> %172, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %183 = fadd <4 x float> %150, %182
  %184 = fmul <4 x float> %181, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %185 = fadd <4 x float> %172, %184
  %186 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %185) #6
  %187 = add <4 x i32> %186, %118
  %188 = fadd <4 x float> %157, %183
  %189 = fsub <4 x float> %183, %188
  %190 = fadd <4 x float> %157, %189
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !13
  %193 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %194 = load float, float* %193, align 4, !tbaa !3, !noalias !13
  %195 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %60
  %196 = load float, float* %195, align 4, !tbaa !3, !noalias !13
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %64
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !13
  %199 = insertelement <4 x float> undef, float %198, i32 0
  %200 = insertelement <4 x float> %199, float %196, i32 1
  %201 = insertelement <4 x float> %200, float %194, i32 2
  %202 = insertelement <4 x float> %201, float %192, i32 3
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !13
  %205 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %206 = load float, float* %205, align 4, !tbaa !3, !noalias !13
  %207 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %60
  %208 = load float, float* %207, align 4, !tbaa !3, !noalias !13
  %209 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %64
  %210 = load float, float* %209, align 4, !tbaa !3, !noalias !13
  %211 = insertelement <4 x float> undef, float %210, i32 0
  %212 = insertelement <4 x float> %211, float %208, i32 1
  %213 = insertelement <4 x float> %212, float %206, i32 2
  %214 = insertelement <4 x float> %213, float %204, i32 3
  %215 = bitcast <4 x float> %202 to <2 x i64>
  %216 = and <2 x i64> %215, <i64 -17587891081216, i64 -17587891081216>
  %217 = bitcast <2 x i64> %216 to <4 x float>
  %218 = fsub <4 x float> %202, %217
  %219 = fmul <4 x float> %202, %46
  %220 = bitcast <4 x float> %219 to <2 x i64>
  %221 = xor <2 x i64> %220, <i64 -9223372034707292160, i64 -9223372034707292160>
  %222 = bitcast <2 x i64> %221 to <4 x float>
  %223 = fmul <4 x float> %73, %217
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %218, %73
  %226 = fadd <4 x float> %225, %224
  %227 = fmul <4 x float> %74, %217
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %74, %218
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %214, %46
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %219, %188
  %234 = fsub <4 x float> %233, %188
  %235 = fsub <4 x float> %233, %234
  %236 = fsub <4 x float> %188, %235
  %237 = fsub <4 x float> %219, %234
  %238 = fadd <4 x float> %237, %236
  %239 = fadd <4 x float> %232, %190
  %240 = fadd <4 x float> %239, %238
  %241 = fadd <4 x float> %233, %240
  %242 = fsub <4 x float> %233, %241
  %243 = fadd <4 x float> %240, %242
  %244 = bitcast <4 x float> %241 to <2 x i64>
  %245 = and <2 x i64> %244, <i64 -17587891081216, i64 -17587891081216>
  %246 = bitcast <2 x i64> %245 to <4 x float>
  %247 = fsub <4 x float> %241, %246
  %248 = fmul <4 x float> %241, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %249 = bitcast <4 x float> %248 to <2 x i64>
  %250 = xor <2 x i64> %249, <i64 -9223372034707292160, i64 -9223372034707292160>
  %251 = bitcast <2 x i64> %250 to <4 x float>
  %252 = fmul <4 x float> %246, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %247, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %255 = fadd <4 x float> %254, %253
  %256 = fmul <4 x float> %246, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %257 = fadd <4 x float> %256, %255
  %258 = fmul <4 x float> %247, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %259 = fadd <4 x float> %258, %257
  %260 = fmul <4 x float> %241, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %261 = fadd <4 x float> %260, %259
  %262 = fmul <4 x float> %243, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %263 = fadd <4 x float> %262, %261
  %264 = bitcast <4 x float> %248 to <4 x i32>
  %265 = bitcast <4 x float> %263 to <4 x i32>
  %266 = and <2 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159>
  %267 = bitcast <2 x i64> %266 to <4 x float>
  %268 = fcmp olt <4 x float> %267, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = and <4 x i32> %45, %269
  %271 = xor <4 x i32> %269, <i32 -1, i32 -1, i32 -1, i32 -1>
  %272 = and <4 x i32> %264, %271
  %273 = or <4 x i32> %272, %270
  %274 = and <4 x i32> %265, %271
  %275 = bitcast <4 x i32> %273 to <4 x float>
  %276 = bitcast <4 x i32> %274 to <4 x float>
  %277 = fadd <4 x float> %275, %276
  %278 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %279 = fcmp uno <4 x float> %0, zeroinitializer
  %280 = or <4 x i1> %278, %279
  %281 = icmp eq <4 x i32> %39, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %282 = select <4 x i1> %280, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %277
  %283 = select <4 x i1> %281, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %282
  br label %284

; <label>:284:                                    ; preds = %26, %38, %10
  %285 = phi <4 x float> [ %19, %10 ], [ %37, %26 ], [ %283, %38 ]
  %286 = phi <4 x i32> [ %12, %10 ], [ %28, %26 ], [ %187, %38 ]
  %287 = fmul <4 x float> %285, %285
  %288 = and <4 x i32> %286, <i32 1, i32 1, i32 1, i32 1>
  %289 = icmp ne <4 x i32> %288, zeroinitializer
  %290 = sext <4 x i1> %289 to <4 x i32>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = and <2 x i64> %291, <i64 -9223372034707292160, i64 -9223372034707292160>
  %293 = bitcast <4 x float> %285 to <2 x i64>
  %294 = xor <2 x i64> %292, %293
  %295 = bitcast <2 x i64> %294 to <4 x float>
  %296 = fmul <4 x float> %287, %287
  %297 = fmul <4 x float> %296, %296
  %298 = fmul <4 x float> %287, <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>
  %299 = fadd <4 x float> %298, <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>
  %300 = fmul <4 x float> %287, <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>
  %301 = fadd <4 x float> %300, <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>
  %302 = fmul <4 x float> %287, <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>
  %303 = fadd <4 x float> %302, <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>
  %304 = fmul <4 x float> %296, %301
  %305 = fadd <4 x float> %303, %304
  %306 = fmul <4 x float> %297, %299
  %307 = fadd <4 x float> %306, %305
  %308 = fmul <4 x float> %307, %295
  %309 = fmul <4 x float> %287, %308
  %310 = fadd <4 x float> %309, %295
  %311 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %310
  %312 = select <4 x i1> %289, <4 x float> %311, <4 x float> %310
  ret <4 x float> %312
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %30, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %13) #6
  %15 = fmul <4 x float> %13, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %16 = fadd <4 x float> %15, %0
  %17 = fmul <4 x float> %13, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %18 = fadd <4 x float> %17, %16
  %19 = fsub <4 x float> %18, %16
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %16, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %13, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %25 = fadd <4 x float> %24, %18
  %26 = fsub <4 x float> %18, %25
  %27 = fadd <4 x float> %24, %26
  %28 = fadd <4 x float> %27, %23
  %29 = bitcast <4 x float> %0 to <4 x i32>
  br label %314

; <label>:30:                                     ; preds = %1
  %31 = bitcast <4 x float> %0 to <4 x i32>
  %32 = lshr <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = and <4 x i32> %32, <i32 255, i32 255, i32 255, i32 255>
  %34 = add nsw <4 x i32> %33, <i32 -152, i32 -152, i32 -152, i32 -152>
  %35 = icmp ugt <4 x i32> %33, <i32 217, i32 217, i32 217, i32 217>
  %36 = select <4 x i1> %35, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %37 = add <4 x i32> %36, %31
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = ashr <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %40 = xor <4 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <4 x i32> %40, %34
  %42 = shl <4 x i32> %41, <i32 2, i32 2, i32 2, i32 2>
  %43 = extractelement <4 x i32> %42, i32 3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !3, !noalias !16
  %47 = extractelement <4 x i32> %42, i32 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !3, !noalias !16
  %51 = extractelement <4 x i32> %42, i32 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !16
  %55 = extractelement <4 x i32> %42, i32 0
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !16
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = insertelement <4 x float> %59, float %54, i32 1
  %61 = insertelement <4 x float> %60, float %50, i32 2
  %62 = insertelement <4 x float> %61, float %46, i32 3
  %63 = bitcast <4 x i32> %37 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %38, %65
  %67 = bitcast <4 x float> %62 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> %62, %69
  %71 = fmul <4 x float> %62, %38
  %72 = bitcast <4 x float> %71 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %65, %69
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %66, %69
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %70, %65
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %66, %70
  %82 = fadd <4 x float> %81, %80
  %83 = and <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = or <2 x i64> %83, <i64 5404319554102886400, i64 5404319554102886400>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fmul <4 x float> %71, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 9223372034707292159, i64 9223372034707292159>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fcmp ogt <4 x float> %89, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %91 = fadd <4 x float> %86, %85
  %92 = fsub <4 x float> %91, %85
  %93 = bitcast <4 x float> %92 to <2 x i64>
  %94 = or <2 x i64> %83, %93
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = select <4 x i1> %90, <4 x float> %86, <4 x float> %95
  %97 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fcmp ogt <4 x float> %98, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %100 = fadd <4 x float> %71, %85
  %101 = fsub <4 x float> %100, %85
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = or <2 x i64> %83, %102
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = select <4 x i1> %99, <4 x float> %71, <4 x float> %104
  %106 = fmul <4 x float> %96, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %107 = fadd <4 x float> %71, %106
  %108 = fmul <4 x float> %105, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %109 = fadd <4 x float> %96, %108
  %110 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %109) #6
  %111 = fadd <4 x float> %82, %107
  %112 = fsub <4 x float> %107, %111
  %113 = fadd <4 x float> %82, %112
  %114 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %44
  %115 = load float, float* %114, align 4, !tbaa !3, !noalias !16
  %116 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %48
  %117 = load float, float* %116, align 4, !tbaa !3, !noalias !16
  %118 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %119 = load float, float* %118, align 4, !tbaa !3, !noalias !16
  %120 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %121 = load float, float* %120, align 4, !tbaa !3, !noalias !16
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = insertelement <4 x float> %122, float %119, i32 1
  %124 = insertelement <4 x float> %123, float %117, i32 2
  %125 = insertelement <4 x float> %124, float %115, i32 3
  %126 = bitcast <4 x float> %125 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -17587891081216, i64 -17587891081216>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fsub <4 x float> %125, %128
  %130 = fmul <4 x float> %125, %38
  %131 = bitcast <4 x float> %130 to <2 x i64>
  %132 = xor <2 x i64> %131, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fmul <4 x float> %65, %128
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %66, %128
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %129, %65
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %66, %129
  %141 = fadd <4 x float> %140, %139
  %142 = fadd <4 x float> %130, %111
  %143 = fsub <4 x float> %142, %111
  %144 = fsub <4 x float> %142, %143
  %145 = fsub <4 x float> %111, %144
  %146 = fsub <4 x float> %130, %143
  %147 = fadd <4 x float> %146, %145
  %148 = fadd <4 x float> %141, %113
  %149 = fadd <4 x float> %148, %147
  %150 = bitcast <4 x float> %142 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -9223372034707292160, i64 -9223372034707292160>
  %152 = or <2 x i64> %151, <i64 5404319554102886400, i64 5404319554102886400>
  %153 = bitcast <2 x i64> %152 to <4 x float>
  %154 = fmul <4 x float> %142, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %155 = bitcast <4 x float> %154 to <2 x i64>
  %156 = and <2 x i64> %155, <i64 9223372034707292159, i64 9223372034707292159>
  %157 = bitcast <2 x i64> %156 to <4 x float>
  %158 = fcmp ogt <4 x float> %157, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %159 = fadd <4 x float> %154, %153
  %160 = fsub <4 x float> %159, %153
  %161 = bitcast <4 x float> %160 to <2 x i64>
  %162 = or <2 x i64> %151, %161
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = select <4 x i1> %158, <4 x float> %154, <4 x float> %163
  %165 = and <2 x i64> %150, <i64 9223372034707292159, i64 9223372034707292159>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fcmp ogt <4 x float> %166, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %168 = fadd <4 x float> %142, %153
  %169 = fsub <4 x float> %168, %153
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = or <2 x i64> %151, %170
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = select <4 x i1> %167, <4 x float> %142, <4 x float> %172
  %174 = fmul <4 x float> %164, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %175 = fadd <4 x float> %142, %174
  %176 = fmul <4 x float> %173, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %177 = fadd <4 x float> %164, %176
  %178 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %177) #6
  %179 = add <4 x i32> %178, %110
  %180 = fadd <4 x float> %149, %175
  %181 = fsub <4 x float> %175, %180
  %182 = fadd <4 x float> %149, %181
  %183 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %44
  %184 = load float, float* %183, align 4, !tbaa !3, !noalias !16
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %48
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !16
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !16
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !16
  %191 = insertelement <4 x float> undef, float %190, i32 0
  %192 = insertelement <4 x float> %191, float %188, i32 1
  %193 = insertelement <4 x float> %192, float %186, i32 2
  %194 = insertelement <4 x float> %193, float %184, i32 3
  %195 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %44
  %196 = load float, float* %195, align 4, !tbaa !3, !noalias !16
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %48
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !16
  %199 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %200 = load float, float* %199, align 4, !tbaa !3, !noalias !16
  %201 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %202 = load float, float* %201, align 4, !tbaa !3, !noalias !16
  %203 = insertelement <4 x float> undef, float %202, i32 0
  %204 = insertelement <4 x float> %203, float %200, i32 1
  %205 = insertelement <4 x float> %204, float %198, i32 2
  %206 = insertelement <4 x float> %205, float %196, i32 3
  %207 = bitcast <4 x float> %194 to <2 x i64>
  %208 = and <2 x i64> %207, <i64 -17587891081216, i64 -17587891081216>
  %209 = bitcast <2 x i64> %208 to <4 x float>
  %210 = fsub <4 x float> %194, %209
  %211 = fmul <4 x float> %194, %38
  %212 = bitcast <4 x float> %211 to <2 x i64>
  %213 = xor <2 x i64> %212, <i64 -9223372034707292160, i64 -9223372034707292160>
  %214 = bitcast <2 x i64> %213 to <4 x float>
  %215 = fmul <4 x float> %65, %209
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %210, %65
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %66, %209
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %66, %210
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %206, %38
  %224 = fadd <4 x float> %223, %222
  %225 = fadd <4 x float> %211, %180
  %226 = fsub <4 x float> %225, %180
  %227 = fsub <4 x float> %225, %226
  %228 = fsub <4 x float> %180, %227
  %229 = fsub <4 x float> %211, %226
  %230 = fadd <4 x float> %229, %228
  %231 = fadd <4 x float> %224, %182
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %225, %232
  %234 = fsub <4 x float> %225, %233
  %235 = fadd <4 x float> %232, %234
  %236 = bitcast <4 x float> %233 to <2 x i64>
  %237 = and <2 x i64> %236, <i64 -17587891081216, i64 -17587891081216>
  %238 = bitcast <2 x i64> %237 to <4 x float>
  %239 = fsub <4 x float> %233, %238
  %240 = fmul <4 x float> %233, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %241 = bitcast <4 x float> %240 to <2 x i64>
  %242 = xor <2 x i64> %241, <i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = bitcast <2 x i64> %242 to <4 x float>
  %244 = fmul <4 x float> %238, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %245 = fadd <4 x float> %244, %243
  %246 = fmul <4 x float> %239, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %247 = fadd <4 x float> %246, %245
  %248 = fmul <4 x float> %238, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %249 = fadd <4 x float> %248, %247
  %250 = fmul <4 x float> %239, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %251 = fadd <4 x float> %250, %249
  %252 = fmul <4 x float> %233, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %235, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %255 = fadd <4 x float> %254, %253
  %256 = bitcast <4 x float> %240 to <4 x i32>
  %257 = bitcast <4 x float> %255 to <4 x i32>
  %258 = and <2 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159>
  %259 = bitcast <2 x i64> %258 to <4 x float>
  %260 = fcmp olt <4 x float> %259, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = and <4 x i32> %37, %261
  %263 = xor <4 x i32> %261, <i32 -1, i32 -1, i32 -1, i32 -1>
  %264 = and <4 x i32> %256, %263
  %265 = or <4 x i32> %264, %262
  %266 = and <4 x i32> %257, %263
  %267 = shl <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %268 = and <4 x i32> %267, <i32 6, i32 6, i32 6, i32 6>
  %269 = bitcast <4 x i32> %265 to <4 x float>
  %270 = fcmp ogt <4 x float> %269, zeroinitializer
  %271 = select <4 x i1> %270, <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %272 = add nuw nsw <4 x i32> %271, %268
  %273 = lshr <4 x i32> %272, <i32 2, i32 2, i32 2, i32 2>
  %274 = and <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %275 = icmp ne <4 x i32> %274, zeroinitializer
  %276 = sext <4 x i1> %275 to <4 x i32>
  %277 = bitcast <4 x i32> %265 to <2 x i64>
  %278 = and <2 x i64> %277, <i64 -9223372034707292160, i64 -9223372034707292160>
  %279 = xor <2 x i64> %278, <i64 -4627149705656594469, i64 -4627149705656594469>
  %280 = bitcast <2 x i64> %279 to <4 x float>
  %281 = or <2 x i64> %278, <i64 3691752325685951790, i64 3691752325685951790>
  %282 = bitcast <2 x i64> %281 to <4 x float>
  %283 = bitcast <4 x i32> %266 to <4 x float>
  %284 = fadd <4 x float> %269, %280
  %285 = fsub <4 x float> %284, %269
  %286 = fsub <4 x float> %284, %285
  %287 = fsub <4 x float> %269, %286
  %288 = fsub <4 x float> %280, %285
  %289 = fadd <4 x float> %288, %287
  %290 = fadd <4 x float> %282, %283
  %291 = fadd <4 x float> %289, %290
  %292 = bitcast <4 x float> %284 to <4 x i32>
  %293 = and <4 x i32> %292, %276
  %294 = xor <4 x i32> %276, <i32 -1, i32 -1, i32 -1, i32 -1>
  %295 = and <4 x i32> %265, %294
  %296 = or <4 x i32> %293, %295
  %297 = bitcast <4 x float> %291 to <4 x i32>
  %298 = and <4 x i32> %297, %276
  %299 = and <4 x i32> %266, %294
  %300 = or <4 x i32> %298, %299
  %301 = bitcast <4 x i32> %296 to <4 x float>
  %302 = bitcast <4 x i32> %300 to <4 x float>
  %303 = fadd <4 x float> %301, %302
  %304 = fsub <4 x float> %301, %303
  %305 = fadd <4 x float> %304, %302
  %306 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %307 = fcmp uno <4 x float> %0, zeroinitializer
  %308 = or <4 x i1> %306, %307
  %309 = sext <4 x i1> %308 to <4 x i32>
  %310 = bitcast <4 x i32> %309 to <2 x i64>
  %311 = bitcast <4 x float> %303 to <2 x i64>
  %312 = or <2 x i64> %311, %310
  %313 = bitcast <2 x i64> %312 to <4 x float>
  br label %314

; <label>:314:                                    ; preds = %30, %10
  %315 = phi <4 x i32> [ %31, %30 ], [ %29, %10 ]
  %316 = phi <4 x float> [ %313, %30 ], [ %25, %10 ]
  %317 = phi <4 x float> [ %305, %30 ], [ %28, %10 ]
  %318 = phi <4 x i32> [ %273, %30 ], [ %14, %10 ]
  %319 = bitcast <4 x float> %316 to <2 x i64>
  %320 = and <2 x i64> %319, <i64 -17587891081216, i64 -17587891081216>
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fsub <4 x float> %316, %321
  %323 = fmul <4 x float> %316, %316
  %324 = bitcast <4 x float> %323 to <2 x i64>
  %325 = xor <2 x i64> %324, <i64 -9223372034707292160, i64 -9223372034707292160>
  %326 = bitcast <2 x i64> %325 to <4 x float>
  %327 = fmul <4 x float> %321, %321
  %328 = fadd <4 x float> %327, %326
  %329 = fadd <4 x float> %321, %321
  %330 = fmul <4 x float> %329, %322
  %331 = fadd <4 x float> %330, %328
  %332 = fmul <4 x float> %322, %322
  %333 = fadd <4 x float> %332, %331
  %334 = fadd <4 x float> %317, %317
  %335 = fmul <4 x float> %316, %334
  %336 = fadd <4 x float> %335, %333
  %337 = fmul <4 x float> %323, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %338 = fadd <4 x float> %337, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %339 = fmul <4 x float> %323, %338
  %340 = fadd <4 x float> %339, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %341 = fmul <4 x float> %323, %340
  %342 = fadd <4 x float> %341, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %343 = fsub <4 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %342
  %344 = fadd <4 x float> %341, %343
  %345 = bitcast <4 x float> %342 to <2 x i64>
  %346 = and <2 x i64> %345, <i64 -17587891081216, i64 -17587891081216>
  %347 = bitcast <2 x i64> %346 to <4 x float>
  %348 = fsub <4 x float> %342, %347
  %349 = and <2 x i64> %324, <i64 -17587891081216, i64 -17587891081216>
  %350 = bitcast <2 x i64> %349 to <4 x float>
  %351 = fsub <4 x float> %323, %350
  %352 = fmul <4 x float> %323, %342
  %353 = bitcast <4 x float> %352 to <2 x i64>
  %354 = xor <2 x i64> %353, <i64 -9223372034707292160, i64 -9223372034707292160>
  %355 = bitcast <2 x i64> %354 to <4 x float>
  %356 = fmul <4 x float> %350, %347
  %357 = fadd <4 x float> %356, %355
  %358 = fmul <4 x float> %348, %350
  %359 = fadd <4 x float> %358, %357
  %360 = fmul <4 x float> %351, %347
  %361 = fadd <4 x float> %360, %359
  %362 = fmul <4 x float> %351, %348
  %363 = fadd <4 x float> %362, %361
  %364 = fmul <4 x float> %342, %336
  %365 = fadd <4 x float> %364, %363
  %366 = fmul <4 x float> %323, %344
  %367 = fadd <4 x float> %366, %365
  %368 = fadd <4 x float> %352, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %369 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %368
  %370 = fadd <4 x float> %352, %369
  %371 = fadd <4 x float> %370, %367
  %372 = bitcast <4 x float> %368 to <2 x i64>
  %373 = and <2 x i64> %372, <i64 -17587891081216, i64 -17587891081216>
  %374 = bitcast <2 x i64> %373 to <4 x float>
  %375 = fsub <4 x float> %368, %374
  %376 = fmul <4 x float> %317, %374
  %377 = fmul <4 x float> %371, %321
  %378 = fmul <4 x float> %322, %375
  %379 = fmul <4 x float> %375, %321
  %380 = fmul <4 x float> %322, %374
  %381 = fmul <4 x float> %321, %374
  %382 = fadd <4 x float> %376, %377
  %383 = fadd <4 x float> %378, %382
  %384 = fadd <4 x float> %379, %383
  %385 = fadd <4 x float> %380, %384
  %386 = fadd <4 x float> %381, %385
  %387 = and <4 x i32> %318, <i32 1, i32 1, i32 1, i32 1>
  %388 = icmp ne <4 x i32> %387, zeroinitializer
  %389 = sext <4 x i1> %388 to <4 x i32>
  %390 = bitcast <4 x i32> %389 to <2 x i64>
  %391 = and <2 x i64> %390, <i64 -9223372034707292160, i64 -9223372034707292160>
  %392 = bitcast <4 x float> %386 to <2 x i64>
  %393 = xor <2 x i64> %391, %392
  %394 = icmp eq <4 x i32> %315, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %395 = bitcast <2 x i64> %393 to <4 x float>
  %396 = select <4 x i1> %394, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %395
  ret <4 x float> %396
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cosf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %41, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = fadd <4 x float> %11, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %13) #6
  %15 = fmul <4 x float> %14, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %16 = fadd <4 x float> %15, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %16) #6
  %18 = fmul <4 x float> %16, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %19 = fadd <4 x float> %18, %0
  %20 = fsub <4 x float> %19, %0
  %21 = fsub <4 x float> %19, %20
  %22 = fsub <4 x float> %0, %21
  %23 = fsub <4 x float> %18, %20
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %16, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %26 = fadd <4 x float> %25, %19
  %27 = fsub <4 x float> %26, %19
  %28 = fsub <4 x float> %26, %27
  %29 = fsub <4 x float> %19, %28
  %30 = fsub <4 x float> %25, %27
  %31 = fadd <4 x float> %30, %29
  %32 = fadd <4 x float> %24, %31
  %33 = fmul <4 x float> %16, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %34 = fadd <4 x float> %33, %26
  %35 = fsub <4 x float> %34, %26
  %36 = fsub <4 x float> %34, %35
  %37 = fsub <4 x float> %26, %36
  %38 = fsub <4 x float> %33, %35
  %39 = fadd <4 x float> %38, %37
  %40 = fadd <4 x float> %39, %32
  br label %327

; <label>:41:                                     ; preds = %1
  %42 = bitcast <4 x float> %0 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %44 = and <4 x i32> %43, <i32 255, i32 255, i32 255, i32 255>
  %45 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %46 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %47 = select <4 x i1> %46, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %48 = add <4 x i32> %47, %42
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = ashr <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %51 = xor <4 x i32> %50, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %52 = and <4 x i32> %51, %45
  %53 = shl <4 x i32> %52, <i32 2, i32 2, i32 2, i32 2>
  %54 = extractelement <4 x i32> %53, i32 3
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !3, !noalias !19
  %58 = extractelement <4 x i32> %53, i32 2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !3, !noalias !19
  %62 = extractelement <4 x i32> %53, i32 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %63
  %65 = load float, float* %64, align 4, !tbaa !3, !noalias !19
  %66 = extractelement <4 x i32> %53, i32 0
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !3, !noalias !19
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = insertelement <4 x float> %70, float %65, i32 1
  %72 = insertelement <4 x float> %71, float %61, i32 2
  %73 = insertelement <4 x float> %72, float %57, i32 3
  %74 = bitcast <4 x i32> %48 to <2 x i64>
  %75 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fsub <4 x float> %49, %76
  %78 = bitcast <4 x float> %73 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fsub <4 x float> %73, %80
  %82 = fmul <4 x float> %73, %49
  %83 = bitcast <4 x float> %82 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fmul <4 x float> %76, %80
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %77, %80
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %81, %76
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %77, %81
  %93 = fadd <4 x float> %92, %91
  %94 = and <2 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = or <2 x i64> %94, <i64 5404319554102886400, i64 5404319554102886400>
  %96 = bitcast <2 x i64> %95 to <4 x float>
  %97 = fmul <4 x float> %82, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %98 = bitcast <4 x float> %97 to <2 x i64>
  %99 = and <2 x i64> %98, <i64 9223372034707292159, i64 9223372034707292159>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fcmp ogt <4 x float> %100, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %102 = fadd <4 x float> %97, %96
  %103 = fsub <4 x float> %102, %96
  %104 = bitcast <4 x float> %103 to <2 x i64>
  %105 = or <2 x i64> %94, %104
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = select <4 x i1> %101, <4 x float> %97, <4 x float> %106
  %108 = and <2 x i64> %83, <i64 9223372034707292159, i64 9223372034707292159>
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = fcmp ogt <4 x float> %109, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %111 = fadd <4 x float> %82, %96
  %112 = fsub <4 x float> %111, %96
  %113 = bitcast <4 x float> %112 to <2 x i64>
  %114 = or <2 x i64> %94, %113
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = select <4 x i1> %110, <4 x float> %82, <4 x float> %115
  %117 = fmul <4 x float> %107, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %118 = fadd <4 x float> %82, %117
  %119 = fmul <4 x float> %116, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %120 = fadd <4 x float> %107, %119
  %121 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %120) #6
  %122 = fadd <4 x float> %93, %118
  %123 = fsub <4 x float> %118, %122
  %124 = fadd <4 x float> %93, %123
  %125 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %55
  %126 = load float, float* %125, align 4, !tbaa !3, !noalias !19
  %127 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %59
  %128 = load float, float* %127, align 4, !tbaa !3, !noalias !19
  %129 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %63
  %130 = load float, float* %129, align 4, !tbaa !3, !noalias !19
  %131 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %67
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !19
  %133 = insertelement <4 x float> undef, float %132, i32 0
  %134 = insertelement <4 x float> %133, float %130, i32 1
  %135 = insertelement <4 x float> %134, float %128, i32 2
  %136 = insertelement <4 x float> %135, float %126, i32 3
  %137 = bitcast <4 x float> %136 to <2 x i64>
  %138 = and <2 x i64> %137, <i64 -17587891081216, i64 -17587891081216>
  %139 = bitcast <2 x i64> %138 to <4 x float>
  %140 = fsub <4 x float> %136, %139
  %141 = fmul <4 x float> %136, %49
  %142 = bitcast <4 x float> %141 to <2 x i64>
  %143 = xor <2 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <2 x i64> %143 to <4 x float>
  %145 = fmul <4 x float> %76, %139
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %77, %139
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %140, %76
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %77, %140
  %152 = fadd <4 x float> %151, %150
  %153 = fadd <4 x float> %141, %122
  %154 = fsub <4 x float> %153, %122
  %155 = fsub <4 x float> %153, %154
  %156 = fsub <4 x float> %122, %155
  %157 = fsub <4 x float> %141, %154
  %158 = fadd <4 x float> %157, %156
  %159 = fadd <4 x float> %152, %124
  %160 = fadd <4 x float> %159, %158
  %161 = bitcast <4 x float> %153 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -9223372034707292160, i64 -9223372034707292160>
  %163 = or <2 x i64> %162, <i64 5404319554102886400, i64 5404319554102886400>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fmul <4 x float> %153, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %166 = bitcast <4 x float> %165 to <2 x i64>
  %167 = and <2 x i64> %166, <i64 9223372034707292159, i64 9223372034707292159>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fcmp ogt <4 x float> %168, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %170 = fadd <4 x float> %165, %164
  %171 = fsub <4 x float> %170, %164
  %172 = bitcast <4 x float> %171 to <2 x i64>
  %173 = or <2 x i64> %162, %172
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = select <4 x i1> %169, <4 x float> %165, <4 x float> %174
  %176 = and <2 x i64> %161, <i64 9223372034707292159, i64 9223372034707292159>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fcmp ogt <4 x float> %177, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %179 = fadd <4 x float> %153, %164
  %180 = fsub <4 x float> %179, %164
  %181 = bitcast <4 x float> %180 to <2 x i64>
  %182 = or <2 x i64> %162, %181
  %183 = bitcast <2 x i64> %182 to <4 x float>
  %184 = select <4 x i1> %178, <4 x float> %153, <4 x float> %183
  %185 = fmul <4 x float> %175, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %186 = fadd <4 x float> %153, %185
  %187 = fmul <4 x float> %184, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %188 = fadd <4 x float> %175, %187
  %189 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %188) #6
  %190 = add <4 x i32> %189, %121
  %191 = fadd <4 x float> %160, %186
  %192 = fsub <4 x float> %186, %191
  %193 = fadd <4 x float> %160, %192
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %55
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !19
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %59
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !19
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %63
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !19
  %200 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %67
  %201 = load float, float* %200, align 4, !tbaa !3, !noalias !19
  %202 = insertelement <4 x float> undef, float %201, i32 0
  %203 = insertelement <4 x float> %202, float %199, i32 1
  %204 = insertelement <4 x float> %203, float %197, i32 2
  %205 = insertelement <4 x float> %204, float %195, i32 3
  %206 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %55
  %207 = load float, float* %206, align 4, !tbaa !3, !noalias !19
  %208 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %59
  %209 = load float, float* %208, align 4, !tbaa !3, !noalias !19
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %63
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !19
  %212 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %67
  %213 = load float, float* %212, align 4, !tbaa !3, !noalias !19
  %214 = insertelement <4 x float> undef, float %213, i32 0
  %215 = insertelement <4 x float> %214, float %211, i32 1
  %216 = insertelement <4 x float> %215, float %209, i32 2
  %217 = insertelement <4 x float> %216, float %207, i32 3
  %218 = bitcast <4 x float> %205 to <2 x i64>
  %219 = and <2 x i64> %218, <i64 -17587891081216, i64 -17587891081216>
  %220 = bitcast <2 x i64> %219 to <4 x float>
  %221 = fsub <4 x float> %205, %220
  %222 = fmul <4 x float> %205, %49
  %223 = bitcast <4 x float> %222 to <2 x i64>
  %224 = xor <2 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <2 x i64> %224 to <4 x float>
  %226 = fmul <4 x float> %76, %220
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %221, %76
  %229 = fadd <4 x float> %228, %227
  %230 = fmul <4 x float> %77, %220
  %231 = fadd <4 x float> %230, %229
  %232 = fmul <4 x float> %77, %221
  %233 = fadd <4 x float> %232, %231
  %234 = fmul <4 x float> %217, %49
  %235 = fadd <4 x float> %234, %233
  %236 = fadd <4 x float> %222, %191
  %237 = fsub <4 x float> %236, %191
  %238 = fsub <4 x float> %236, %237
  %239 = fsub <4 x float> %191, %238
  %240 = fsub <4 x float> %222, %237
  %241 = fadd <4 x float> %240, %239
  %242 = fadd <4 x float> %235, %193
  %243 = fadd <4 x float> %242, %241
  %244 = fadd <4 x float> %236, %243
  %245 = fsub <4 x float> %236, %244
  %246 = fadd <4 x float> %243, %245
  %247 = bitcast <4 x float> %244 to <2 x i64>
  %248 = and <2 x i64> %247, <i64 -17587891081216, i64 -17587891081216>
  %249 = bitcast <2 x i64> %248 to <4 x float>
  %250 = fsub <4 x float> %244, %249
  %251 = fmul <4 x float> %244, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %252 = bitcast <4 x float> %251 to <2 x i64>
  %253 = xor <2 x i64> %252, <i64 -9223372034707292160, i64 -9223372034707292160>
  %254 = bitcast <2 x i64> %253 to <4 x float>
  %255 = fmul <4 x float> %249, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %256 = fadd <4 x float> %255, %254
  %257 = fmul <4 x float> %250, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %258 = fadd <4 x float> %257, %256
  %259 = fmul <4 x float> %249, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %260 = fadd <4 x float> %259, %258
  %261 = fmul <4 x float> %250, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %262 = fadd <4 x float> %261, %260
  %263 = fmul <4 x float> %244, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %264 = fadd <4 x float> %263, %262
  %265 = fmul <4 x float> %246, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %266 = fadd <4 x float> %265, %264
  %267 = bitcast <4 x float> %251 to <4 x i32>
  %268 = bitcast <4 x float> %266 to <4 x i32>
  %269 = and <2 x i64> %74, <i64 9223372034707292159, i64 9223372034707292159>
  %270 = bitcast <2 x i64> %269 to <4 x float>
  %271 = fcmp olt <4 x float> %270, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %272 = sext <4 x i1> %271 to <4 x i32>
  %273 = and <4 x i32> %48, %272
  %274 = xor <4 x i32> %272, <i32 -1, i32 -1, i32 -1, i32 -1>
  %275 = and <4 x i32> %267, %274
  %276 = or <4 x i32> %275, %273
  %277 = and <4 x i32> %268, %274
  %278 = shl <4 x i32> %190, <i32 1, i32 1, i32 1, i32 1>
  %279 = and <4 x i32> %278, <i32 6, i32 6, i32 6, i32 6>
  %280 = bitcast <4 x i32> %276 to <4 x float>
  %281 = fcmp ogt <4 x float> %280, zeroinitializer
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = and <4 x i32> %282, <i32 15, i32 15, i32 15, i32 15>
  %284 = xor <4 x i32> %283, <i32 7, i32 7, i32 7, i32 7>
  %285 = add nuw nsw <4 x i32> %284, %279
  %286 = lshr <4 x i32> %285, <i32 1, i32 1, i32 1, i32 1>
  %287 = and <4 x i32> %190, <i32 1, i32 1, i32 1, i32 1>
  %288 = icmp eq <4 x i32> %287, zeroinitializer
  %289 = sext <4 x i1> %288 to <4 x i32>
  %290 = bitcast <4 x i32> %282 to <2 x i64>
  %291 = and <2 x i64> %290, <i64 -9223372034707292160, i64 -9223372034707292160>
  %292 = or <2 x i64> %291, <i64 4596222329050697691, i64 4596222329050697691>
  %293 = bitcast <2 x i64> %292 to <4 x float>
  %294 = xor <2 x i64> %291, <i64 -5531619709021340370, i64 -5531619709021340370>
  %295 = bitcast <2 x i64> %294 to <4 x float>
  %296 = bitcast <4 x i32> %277 to <4 x float>
  %297 = fadd <4 x float> %280, %293
  %298 = fsub <4 x float> %297, %280
  %299 = fsub <4 x float> %297, %298
  %300 = fsub <4 x float> %280, %299
  %301 = fsub <4 x float> %293, %298
  %302 = fadd <4 x float> %301, %300
  %303 = fadd <4 x float> %295, %296
  %304 = fadd <4 x float> %303, %302
  %305 = bitcast <4 x float> %297 to <4 x i32>
  %306 = and <4 x i32> %305, %289
  %307 = xor <4 x i32> %289, <i32 -1, i32 -1, i32 -1, i32 -1>
  %308 = and <4 x i32> %276, %307
  %309 = or <4 x i32> %306, %308
  %310 = bitcast <4 x float> %304 to <4 x i32>
  %311 = and <4 x i32> %310, %289
  %312 = and <4 x i32> %277, %307
  %313 = or <4 x i32> %311, %312
  %314 = bitcast <4 x i32> %309 to <4 x float>
  %315 = bitcast <4 x i32> %313 to <4 x float>
  %316 = fadd <4 x float> %314, %315
  %317 = fsub <4 x float> %314, %316
  %318 = fadd <4 x float> %317, %315
  %319 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %320 = fcmp uno <4 x float> %0, zeroinitializer
  %321 = or <4 x i1> %319, %320
  %322 = sext <4 x i1> %321 to <4 x i32>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = bitcast <4 x float> %316 to <2 x i64>
  %325 = or <2 x i64> %324, %323
  %326 = bitcast <2 x i64> %325 to <4 x float>
  br label %327

; <label>:327:                                    ; preds = %41, %10
  %328 = phi <4 x float> [ %326, %41 ], [ %34, %10 ]
  %329 = phi <4 x float> [ %318, %41 ], [ %40, %10 ]
  %330 = phi <4 x i32> [ %286, %41 ], [ %17, %10 ]
  %331 = bitcast <4 x float> %328 to <2 x i64>
  %332 = and <2 x i64> %331, <i64 -17587891081216, i64 -17587891081216>
  %333 = bitcast <2 x i64> %332 to <4 x float>
  %334 = fsub <4 x float> %328, %333
  %335 = fmul <4 x float> %328, %328
  %336 = bitcast <4 x float> %335 to <2 x i64>
  %337 = xor <2 x i64> %336, <i64 -9223372034707292160, i64 -9223372034707292160>
  %338 = bitcast <2 x i64> %337 to <4 x float>
  %339 = fmul <4 x float> %333, %333
  %340 = fadd <4 x float> %339, %338
  %341 = fadd <4 x float> %333, %333
  %342 = fmul <4 x float> %341, %334
  %343 = fadd <4 x float> %342, %340
  %344 = fmul <4 x float> %334, %334
  %345 = fadd <4 x float> %344, %343
  %346 = fadd <4 x float> %329, %329
  %347 = fmul <4 x float> %328, %346
  %348 = fadd <4 x float> %347, %345
  %349 = fmul <4 x float> %335, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %350 = fadd <4 x float> %349, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %351 = fmul <4 x float> %335, %350
  %352 = fadd <4 x float> %351, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %353 = fmul <4 x float> %335, %352
  %354 = fadd <4 x float> %353, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %355 = fsub <4 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %354
  %356 = fadd <4 x float> %353, %355
  %357 = bitcast <4 x float> %354 to <2 x i64>
  %358 = and <2 x i64> %357, <i64 -17587891081216, i64 -17587891081216>
  %359 = bitcast <2 x i64> %358 to <4 x float>
  %360 = fsub <4 x float> %354, %359
  %361 = and <2 x i64> %336, <i64 -17587891081216, i64 -17587891081216>
  %362 = bitcast <2 x i64> %361 to <4 x float>
  %363 = fsub <4 x float> %335, %362
  %364 = fmul <4 x float> %335, %354
  %365 = bitcast <4 x float> %364 to <2 x i64>
  %366 = xor <2 x i64> %365, <i64 -9223372034707292160, i64 -9223372034707292160>
  %367 = bitcast <2 x i64> %366 to <4 x float>
  %368 = fmul <4 x float> %362, %359
  %369 = fadd <4 x float> %368, %367
  %370 = fmul <4 x float> %360, %362
  %371 = fadd <4 x float> %370, %369
  %372 = fmul <4 x float> %363, %359
  %373 = fadd <4 x float> %372, %371
  %374 = fmul <4 x float> %363, %360
  %375 = fadd <4 x float> %374, %373
  %376 = fmul <4 x float> %354, %348
  %377 = fadd <4 x float> %376, %375
  %378 = fmul <4 x float> %335, %356
  %379 = fadd <4 x float> %378, %377
  %380 = fadd <4 x float> %364, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %381 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %380
  %382 = fadd <4 x float> %364, %381
  %383 = fadd <4 x float> %382, %379
  %384 = bitcast <4 x float> %380 to <2 x i64>
  %385 = and <2 x i64> %384, <i64 -17587891081216, i64 -17587891081216>
  %386 = bitcast <2 x i64> %385 to <4 x float>
  %387 = fsub <4 x float> %380, %386
  %388 = fmul <4 x float> %329, %386
  %389 = fmul <4 x float> %383, %333
  %390 = fmul <4 x float> %334, %387
  %391 = fmul <4 x float> %387, %333
  %392 = fmul <4 x float> %334, %386
  %393 = fmul <4 x float> %333, %386
  %394 = fadd <4 x float> %388, %389
  %395 = fadd <4 x float> %390, %394
  %396 = fadd <4 x float> %391, %395
  %397 = fadd <4 x float> %392, %396
  %398 = fadd <4 x float> %393, %397
  %399 = and <4 x i32> %330, <i32 2, i32 2, i32 2, i32 2>
  %400 = icmp eq <4 x i32> %399, zeroinitializer
  %401 = sext <4 x i1> %400 to <4 x i32>
  %402 = bitcast <4 x i32> %401 to <2 x i64>
  %403 = and <2 x i64> %402, <i64 -9223372034707292160, i64 -9223372034707292160>
  %404 = bitcast <4 x float> %398 to <2 x i64>
  %405 = xor <2 x i64> %403, %404
  %406 = bitcast <2 x i64> %405 to <4 x float>
  ret <4 x float> %406
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastsinf4_u3500sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fmul <4 x float> %4, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %6, %6
  %8 = fmul <4 x float> %7, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %9 = fadd <4 x float> %8, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %10 = fmul <4 x float> %7, %9
  %11 = fadd <4 x float> %10, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %12 = fmul <4 x float> %6, %7
  %13 = fmul <4 x float> %12, %11
  %14 = fadd <4 x float> %6, %13
  %15 = and <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %16 = icmp ne <4 x i32> %15, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x float> %14 to <2 x i64>
  %21 = xor <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x float> %0 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %25, <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %28) #6
  %30 = icmp eq i32 %29, 65535
  br i1 %30, label %34, label %31, !prof !2

; <label>:31:                                     ; preds = %1
  %32 = tail call <4 x float> @Sleef_sinf4_u35sse2(<4 x float> %0)
  %33 = select <4 x i1> %26, <4 x float> %22, <4 x float> %32
  br label %34

; <label>:34:                                     ; preds = %1, %31
  %35 = phi <4 x float> [ %33, %31 ], [ %22, %1 ]
  ret <4 x float> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastcosf4_u3500sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = fadd <4 x float> %2, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %4) #6
  %6 = fadd <4 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %7 = fmul <4 x float> %5, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %8 = fadd <4 x float> %6, %7
  %9 = fmul <4 x float> %8, %8
  %10 = fmul <4 x float> %9, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %11 = fadd <4 x float> %10, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %14 = fmul <4 x float> %8, %9
  %15 = fmul <4 x float> %14, %13
  %16 = fadd <4 x float> %8, %15
  %17 = and <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %18 = icmp eq <4 x i32> %17, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <4 x float> %16 to <2 x i64>
  %23 = xor <2 x i64> %21, %22
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = bitcast <4 x float> %0 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372034707292159, i64 9223372034707292159>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fcmp olt <4 x float> %27, <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %30) #6
  %32 = icmp eq i32 %31, 65535
  br i1 %32, label %36, label %33, !prof !2

; <label>:33:                                     ; preds = %1
  %34 = tail call <4 x float> @Sleef_cosf4_u35sse2(<4 x float> %0)
  %35 = select <4 x i1> %28, <4 x float> %24, <4 x float> %34
  br label %36

; <label>:36:                                     ; preds = %1, %33
  %37 = phi <4 x float> [ %35, %33 ], [ %24, %1 ]
  ret <4 x float> %37
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf4_u35sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %21, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %13) #6
  %15 = fmul <4 x float> %14, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %16 = fadd <4 x float> %15, %1
  %17 = fmul <4 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %18 = fadd <4 x float> %17, %16
  %19 = fmul <4 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %20 = fadd <4 x float> %19, %18
  br label %287

; <label>:21:                                     ; preds = %2
  %22 = fcmp olt <4 x float> %5, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %24) #6
  %26 = icmp eq i32 %25, 65535
  br i1 %26, label %27, label %39, !prof !2

; <label>:27:                                     ; preds = %21
  %28 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %29 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %29) #6
  %31 = fmul <4 x float> %30, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %32 = fadd <4 x float> %31, %1
  %33 = fmul <4 x float> %30, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fmul <4 x float> %30, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %30, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %38 = fadd <4 x float> %37, %36
  br label %287

; <label>:39:                                     ; preds = %21
  %40 = bitcast <4 x float> %1 to <4 x i32>
  %41 = lshr <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %43 = add nsw <4 x i32> %42, <i32 -152, i32 -152, i32 -152, i32 -152>
  %44 = icmp ugt <4 x i32> %42, <i32 217, i32 217, i32 217, i32 217>
  %45 = select <4 x i1> %44, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %46 = add <4 x i32> %45, %40
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = ashr <4 x i32> %43, <i32 31, i32 31, i32 31, i32 31>
  %49 = xor <4 x i32> %48, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %50 = and <4 x i32> %49, %43
  %51 = shl <4 x i32> %50, <i32 2, i32 2, i32 2, i32 2>
  %52 = extractelement <4 x i32> %51, i32 3
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !3, !noalias !22
  %56 = extractelement <4 x i32> %51, i32 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !3, !noalias !22
  %60 = extractelement <4 x i32> %51, i32 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !3, !noalias !22
  %64 = extractelement <4 x i32> %51, i32 0
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !3, !noalias !22
  %68 = insertelement <4 x float> undef, float %67, i32 0
  %69 = insertelement <4 x float> %68, float %63, i32 1
  %70 = insertelement <4 x float> %69, float %59, i32 2
  %71 = insertelement <4 x float> %70, float %55, i32 3
  %72 = bitcast <4 x i32> %46 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fsub <4 x float> %47, %74
  %76 = bitcast <4 x float> %71 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = fsub <4 x float> %71, %78
  %80 = fmul <4 x float> %71, %47
  %81 = bitcast <4 x float> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fmul <4 x float> %74, %78
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %75, %78
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %79, %74
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %75, %79
  %91 = fadd <4 x float> %90, %89
  %92 = and <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = or <2 x i64> %92, <i64 5404319554102886400, i64 5404319554102886400>
  %94 = bitcast <2 x i64> %93 to <4 x float>
  %95 = fmul <4 x float> %80, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %96 = bitcast <4 x float> %95 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 9223372034707292159, i64 9223372034707292159>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fcmp ogt <4 x float> %98, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %100 = fadd <4 x float> %95, %94
  %101 = fsub <4 x float> %100, %94
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = or <2 x i64> %92, %102
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = select <4 x i1> %99, <4 x float> %95, <4 x float> %104
  %106 = and <2 x i64> %81, <i64 9223372034707292159, i64 9223372034707292159>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fcmp ogt <4 x float> %107, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %109 = fadd <4 x float> %80, %94
  %110 = fsub <4 x float> %109, %94
  %111 = bitcast <4 x float> %110 to <2 x i64>
  %112 = or <2 x i64> %92, %111
  %113 = bitcast <2 x i64> %112 to <4 x float>
  %114 = select <4 x i1> %108, <4 x float> %80, <4 x float> %113
  %115 = fmul <4 x float> %105, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %116 = fadd <4 x float> %80, %115
  %117 = fmul <4 x float> %114, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %118 = fadd <4 x float> %105, %117
  %119 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %118) #6
  %120 = fadd <4 x float> %91, %116
  %121 = fsub <4 x float> %116, %120
  %122 = fadd <4 x float> %91, %121
  %123 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %53
  %124 = load float, float* %123, align 4, !tbaa !3, !noalias !22
  %125 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %57
  %126 = load float, float* %125, align 4, !tbaa !3, !noalias !22
  %127 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %61
  %128 = load float, float* %127, align 4, !tbaa !3, !noalias !22
  %129 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %65
  %130 = load float, float* %129, align 4, !tbaa !3, !noalias !22
  %131 = insertelement <4 x float> undef, float %130, i32 0
  %132 = insertelement <4 x float> %131, float %128, i32 1
  %133 = insertelement <4 x float> %132, float %126, i32 2
  %134 = insertelement <4 x float> %133, float %124, i32 3
  %135 = bitcast <4 x float> %134 to <2 x i64>
  %136 = and <2 x i64> %135, <i64 -17587891081216, i64 -17587891081216>
  %137 = bitcast <2 x i64> %136 to <4 x float>
  %138 = fsub <4 x float> %134, %137
  %139 = fmul <4 x float> %134, %47
  %140 = bitcast <4 x float> %139 to <2 x i64>
  %141 = xor <2 x i64> %140, <i64 -9223372034707292160, i64 -9223372034707292160>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fmul <4 x float> %74, %137
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %75, %137
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %138, %74
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %75, %138
  %150 = fadd <4 x float> %149, %148
  %151 = fadd <4 x float> %139, %120
  %152 = fsub <4 x float> %151, %120
  %153 = fsub <4 x float> %151, %152
  %154 = fsub <4 x float> %120, %153
  %155 = fsub <4 x float> %139, %152
  %156 = fadd <4 x float> %155, %154
  %157 = fadd <4 x float> %150, %122
  %158 = fadd <4 x float> %157, %156
  %159 = bitcast <4 x float> %151 to <2 x i64>
  %160 = and <2 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = or <2 x i64> %160, <i64 5404319554102886400, i64 5404319554102886400>
  %162 = bitcast <2 x i64> %161 to <4 x float>
  %163 = fmul <4 x float> %151, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %164 = bitcast <4 x float> %163 to <2 x i64>
  %165 = and <2 x i64> %164, <i64 9223372034707292159, i64 9223372034707292159>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fcmp ogt <4 x float> %166, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %168 = fadd <4 x float> %163, %162
  %169 = fsub <4 x float> %168, %162
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = or <2 x i64> %160, %170
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = select <4 x i1> %167, <4 x float> %163, <4 x float> %172
  %174 = and <2 x i64> %159, <i64 9223372034707292159, i64 9223372034707292159>
  %175 = bitcast <2 x i64> %174 to <4 x float>
  %176 = fcmp ogt <4 x float> %175, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %177 = fadd <4 x float> %151, %162
  %178 = fsub <4 x float> %177, %162
  %179 = bitcast <4 x float> %178 to <2 x i64>
  %180 = or <2 x i64> %160, %179
  %181 = bitcast <2 x i64> %180 to <4 x float>
  %182 = select <4 x i1> %176, <4 x float> %151, <4 x float> %181
  %183 = fmul <4 x float> %173, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %184 = fadd <4 x float> %151, %183
  %185 = fmul <4 x float> %182, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %186 = fadd <4 x float> %173, %185
  %187 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %186) #6
  %188 = add <4 x i32> %187, %119
  %189 = fadd <4 x float> %158, %184
  %190 = fsub <4 x float> %184, %189
  %191 = fadd <4 x float> %158, %190
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %53
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !22
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %57
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !22
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %61
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !22
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %65
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !22
  %200 = insertelement <4 x float> undef, float %199, i32 0
  %201 = insertelement <4 x float> %200, float %197, i32 1
  %202 = insertelement <4 x float> %201, float %195, i32 2
  %203 = insertelement <4 x float> %202, float %193, i32 3
  %204 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %53
  %205 = load float, float* %204, align 4, !tbaa !3, !noalias !22
  %206 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %57
  %207 = load float, float* %206, align 4, !tbaa !3, !noalias !22
  %208 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %61
  %209 = load float, float* %208, align 4, !tbaa !3, !noalias !22
  %210 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %65
  %211 = load float, float* %210, align 4, !tbaa !3, !noalias !22
  %212 = insertelement <4 x float> undef, float %211, i32 0
  %213 = insertelement <4 x float> %212, float %209, i32 1
  %214 = insertelement <4 x float> %213, float %207, i32 2
  %215 = insertelement <4 x float> %214, float %205, i32 3
  %216 = bitcast <4 x float> %203 to <2 x i64>
  %217 = and <2 x i64> %216, <i64 -17587891081216, i64 -17587891081216>
  %218 = bitcast <2 x i64> %217 to <4 x float>
  %219 = fsub <4 x float> %203, %218
  %220 = fmul <4 x float> %203, %47
  %221 = bitcast <4 x float> %220 to <2 x i64>
  %222 = xor <2 x i64> %221, <i64 -9223372034707292160, i64 -9223372034707292160>
  %223 = bitcast <2 x i64> %222 to <4 x float>
  %224 = fmul <4 x float> %74, %218
  %225 = fadd <4 x float> %224, %223
  %226 = fmul <4 x float> %219, %74
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %75, %218
  %229 = fadd <4 x float> %228, %227
  %230 = fmul <4 x float> %75, %219
  %231 = fadd <4 x float> %230, %229
  %232 = fmul <4 x float> %215, %47
  %233 = fadd <4 x float> %232, %231
  %234 = fadd <4 x float> %220, %189
  %235 = fsub <4 x float> %234, %189
  %236 = fsub <4 x float> %234, %235
  %237 = fsub <4 x float> %189, %236
  %238 = fsub <4 x float> %220, %235
  %239 = fadd <4 x float> %238, %237
  %240 = fadd <4 x float> %233, %191
  %241 = fadd <4 x float> %240, %239
  %242 = fadd <4 x float> %234, %241
  %243 = fsub <4 x float> %234, %242
  %244 = fadd <4 x float> %241, %243
  %245 = bitcast <4 x float> %242 to <2 x i64>
  %246 = and <2 x i64> %245, <i64 -17587891081216, i64 -17587891081216>
  %247 = bitcast <2 x i64> %246 to <4 x float>
  %248 = fsub <4 x float> %242, %247
  %249 = fmul <4 x float> %242, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %250 = bitcast <4 x float> %249 to <2 x i64>
  %251 = xor <2 x i64> %250, <i64 -9223372034707292160, i64 -9223372034707292160>
  %252 = bitcast <2 x i64> %251 to <4 x float>
  %253 = fmul <4 x float> %247, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %254 = fadd <4 x float> %253, %252
  %255 = fmul <4 x float> %248, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %256 = fadd <4 x float> %255, %254
  %257 = fmul <4 x float> %247, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %258 = fadd <4 x float> %257, %256
  %259 = fmul <4 x float> %248, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %260 = fadd <4 x float> %259, %258
  %261 = fmul <4 x float> %242, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %262 = fadd <4 x float> %261, %260
  %263 = fmul <4 x float> %244, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %264 = fadd <4 x float> %263, %262
  %265 = bitcast <4 x float> %249 to <4 x i32>
  %266 = bitcast <4 x float> %264 to <4 x i32>
  %267 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %268 = bitcast <2 x i64> %267 to <4 x float>
  %269 = fcmp olt <4 x float> %268, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %270 = sext <4 x i1> %269 to <4 x i32>
  %271 = and <4 x i32> %46, %270
  %272 = xor <4 x i32> %270, <i32 -1, i32 -1, i32 -1, i32 -1>
  %273 = and <4 x i32> %265, %272
  %274 = or <4 x i32> %273, %271
  %275 = and <4 x i32> %266, %272
  %276 = bitcast <4 x i32> %274 to <4 x float>
  %277 = bitcast <4 x i32> %275 to <4 x float>
  %278 = fadd <4 x float> %276, %277
  %279 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %280 = fcmp uno <4 x float> %1, zeroinitializer
  %281 = or <4 x i1> %279, %280
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = bitcast <4 x float> %278 to <2 x i64>
  %285 = or <2 x i64> %284, %283
  %286 = bitcast <2 x i64> %285 to <4 x float>
  br label %287

; <label>:287:                                    ; preds = %27, %39, %11
  %288 = phi <4 x float> [ %20, %11 ], [ %38, %27 ], [ %286, %39 ]
  %289 = phi <4 x i32> [ %13, %11 ], [ %29, %27 ], [ %188, %39 ]
  %290 = fmul <4 x float> %288, %288
  %291 = fmul <4 x float> %290, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %292 = fadd <4 x float> %291, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %293 = fmul <4 x float> %290, %292
  %294 = fadd <4 x float> %293, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %295 = fmul <4 x float> %290, %294
  %296 = fmul <4 x float> %288, %295
  %297 = fadd <4 x float> %288, %296
  %298 = bitcast <4 x float> %1 to <4 x i32>
  %299 = icmp eq <4 x i32> %298, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %300 = bitcast <4 x float> %297 to <4 x i32>
  %301 = select <4 x i1> %299, <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32> %300
  %302 = fmul <4 x float> %290, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %303 = fadd <4 x float> %302, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %304 = fmul <4 x float> %290, %303
  %305 = fadd <4 x float> %304, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %306 = fmul <4 x float> %290, %305
  %307 = fadd <4 x float> %306, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %308 = fmul <4 x float> %290, %307
  %309 = fadd <4 x float> %308, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %310 = fmul <4 x float> %290, %309
  %311 = fadd <4 x float> %310, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %312 = and <4 x i32> %289, <i32 1, i32 1, i32 1, i32 1>
  %313 = icmp eq <4 x i32> %312, zeroinitializer
  %314 = sext <4 x i1> %313 to <4 x i32>
  %315 = and <4 x i32> %301, %314
  %316 = xor <4 x i32> %314, <i32 -1, i32 -1, i32 -1, i32 -1>
  %317 = bitcast <4 x float> %311 to <4 x i32>
  %318 = and <4 x i32> %317, %316
  %319 = or <4 x i32> %318, %315
  %320 = and <4 x i32> %317, %314
  %321 = and <4 x i32> %301, %316
  %322 = or <4 x i32> %320, %321
  %323 = and <4 x i32> %289, <i32 2, i32 2, i32 2, i32 2>
  %324 = icmp ne <4 x i32> %323, zeroinitializer
  %325 = sext <4 x i1> %324 to <4 x i32>
  %326 = bitcast <4 x i32> %325 to <2 x i64>
  %327 = and <2 x i64> %326, <i64 -9223372034707292160, i64 -9223372034707292160>
  %328 = bitcast <4 x i32> %319 to <2 x i64>
  %329 = xor <2 x i64> %327, %328
  %330 = add <4 x i32> %289, <i32 1, i32 1, i32 1, i32 1>
  %331 = and <4 x i32> %330, <i32 2, i32 2, i32 2, i32 2>
  %332 = icmp ne <4 x i32> %331, zeroinitializer
  %333 = sext <4 x i1> %332 to <4 x i32>
  %334 = bitcast <4 x i32> %333 to <2 x i64>
  %335 = and <2 x i64> %334, <i64 -9223372034707292160, i64 -9223372034707292160>
  %336 = bitcast <4 x i32> %322 to <2 x i64>
  %337 = xor <2 x i64> %335, %336
  %338 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %338, align 16
  %339 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %340 = bitcast <4 x float>* %339 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %340, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf4_u10sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %32, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %13) #6
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %14) #6
  %16 = fmul <4 x float> %14, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %17 = fadd <4 x float> %16, %1
  %18 = fmul <4 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %19 = fadd <4 x float> %18, %17
  %20 = fsub <4 x float> %19, %17
  %21 = fsub <4 x float> %19, %20
  %22 = fsub <4 x float> %17, %21
  %23 = fsub <4 x float> %18, %20
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %26 = fadd <4 x float> %25, %19
  %27 = fsub <4 x float> %19, %26
  %28 = fadd <4 x float> %25, %27
  %29 = fadd <4 x float> %28, %24
  %30 = bitcast <4 x float> %29 to <4 x i32>
  %31 = bitcast <4 x float> %1 to <4 x i32>
  br label %274

; <label>:32:                                     ; preds = %2
  %33 = bitcast <4 x float> %1 to <4 x i32>
  %34 = lshr <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %35 = and <4 x i32> %34, <i32 255, i32 255, i32 255, i32 255>
  %36 = add nsw <4 x i32> %35, <i32 -152, i32 -152, i32 -152, i32 -152>
  %37 = icmp ugt <4 x i32> %35, <i32 217, i32 217, i32 217, i32 217>
  %38 = select <4 x i1> %37, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %39 = add <4 x i32> %38, %33
  %40 = bitcast <4 x i32> %39 to <4 x float>
  %41 = ashr <4 x i32> %36, <i32 31, i32 31, i32 31, i32 31>
  %42 = xor <4 x i32> %41, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %43 = and <4 x i32> %42, %36
  %44 = shl <4 x i32> %43, <i32 2, i32 2, i32 2, i32 2>
  %45 = extractelement <4 x i32> %44, i32 3
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %46
  %48 = load float, float* %47, align 4, !tbaa !3, !noalias !25
  %49 = extractelement <4 x i32> %44, i32 2
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !3, !noalias !25
  %53 = extractelement <4 x i32> %44, i32 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !3, !noalias !25
  %57 = extractelement <4 x i32> %44, i32 0
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !3, !noalias !25
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = insertelement <4 x float> %61, float %56, i32 1
  %63 = insertelement <4 x float> %62, float %52, i32 2
  %64 = insertelement <4 x float> %63, float %48, i32 3
  %65 = bitcast <4 x i32> %39 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fsub <4 x float> %40, %67
  %69 = bitcast <4 x float> %64 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %64, %71
  %73 = fmul <4 x float> %64, %40
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %67, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %68, %71
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %72, %67
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %68, %72
  %84 = fadd <4 x float> %83, %82
  %85 = and <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = or <2 x i64> %85, <i64 5404319554102886400, i64 5404319554102886400>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %73, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %89 = bitcast <4 x float> %88 to <2 x i64>
  %90 = and <2 x i64> %89, <i64 9223372034707292159, i64 9223372034707292159>
  %91 = bitcast <2 x i64> %90 to <4 x float>
  %92 = fcmp ogt <4 x float> %91, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %93 = fadd <4 x float> %88, %87
  %94 = fsub <4 x float> %93, %87
  %95 = bitcast <4 x float> %94 to <2 x i64>
  %96 = or <2 x i64> %85, %95
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = select <4 x i1> %92, <4 x float> %88, <4 x float> %97
  %99 = and <2 x i64> %74, <i64 9223372034707292159, i64 9223372034707292159>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fcmp ogt <4 x float> %100, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %102 = fadd <4 x float> %73, %87
  %103 = fsub <4 x float> %102, %87
  %104 = bitcast <4 x float> %103 to <2 x i64>
  %105 = or <2 x i64> %85, %104
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = select <4 x i1> %101, <4 x float> %73, <4 x float> %106
  %108 = fmul <4 x float> %98, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %109 = fadd <4 x float> %73, %108
  %110 = fmul <4 x float> %107, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %111 = fadd <4 x float> %98, %110
  %112 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %111) #6
  %113 = fadd <4 x float> %84, %109
  %114 = fsub <4 x float> %109, %113
  %115 = fadd <4 x float> %84, %114
  %116 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %46
  %117 = load float, float* %116, align 4, !tbaa !3, !noalias !25
  %118 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %50
  %119 = load float, float* %118, align 4, !tbaa !3, !noalias !25
  %120 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %54
  %121 = load float, float* %120, align 4, !tbaa !3, !noalias !25
  %122 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %58
  %123 = load float, float* %122, align 4, !tbaa !3, !noalias !25
  %124 = insertelement <4 x float> undef, float %123, i32 0
  %125 = insertelement <4 x float> %124, float %121, i32 1
  %126 = insertelement <4 x float> %125, float %119, i32 2
  %127 = insertelement <4 x float> %126, float %117, i32 3
  %128 = bitcast <4 x float> %127 to <2 x i64>
  %129 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %130 = bitcast <2 x i64> %129 to <4 x float>
  %131 = fsub <4 x float> %127, %130
  %132 = fmul <4 x float> %127, %40
  %133 = bitcast <4 x float> %132 to <2 x i64>
  %134 = xor <2 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fmul <4 x float> %67, %130
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %68, %130
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %131, %67
  %141 = fadd <4 x float> %140, %139
  %142 = fmul <4 x float> %68, %131
  %143 = fadd <4 x float> %142, %141
  %144 = fadd <4 x float> %132, %113
  %145 = fsub <4 x float> %144, %113
  %146 = fsub <4 x float> %144, %145
  %147 = fsub <4 x float> %113, %146
  %148 = fsub <4 x float> %132, %145
  %149 = fadd <4 x float> %148, %147
  %150 = fadd <4 x float> %143, %115
  %151 = fadd <4 x float> %150, %149
  %152 = bitcast <4 x float> %144 to <2 x i64>
  %153 = and <2 x i64> %152, <i64 -9223372034707292160, i64 -9223372034707292160>
  %154 = or <2 x i64> %153, <i64 5404319554102886400, i64 5404319554102886400>
  %155 = bitcast <2 x i64> %154 to <4 x float>
  %156 = fmul <4 x float> %144, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %157 = bitcast <4 x float> %156 to <2 x i64>
  %158 = and <2 x i64> %157, <i64 9223372034707292159, i64 9223372034707292159>
  %159 = bitcast <2 x i64> %158 to <4 x float>
  %160 = fcmp ogt <4 x float> %159, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %161 = fadd <4 x float> %156, %155
  %162 = fsub <4 x float> %161, %155
  %163 = bitcast <4 x float> %162 to <2 x i64>
  %164 = or <2 x i64> %153, %163
  %165 = bitcast <2 x i64> %164 to <4 x float>
  %166 = select <4 x i1> %160, <4 x float> %156, <4 x float> %165
  %167 = and <2 x i64> %152, <i64 9223372034707292159, i64 9223372034707292159>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fcmp ogt <4 x float> %168, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %170 = fadd <4 x float> %144, %155
  %171 = fsub <4 x float> %170, %155
  %172 = bitcast <4 x float> %171 to <2 x i64>
  %173 = or <2 x i64> %153, %172
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = select <4 x i1> %169, <4 x float> %144, <4 x float> %174
  %176 = fmul <4 x float> %166, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %177 = fadd <4 x float> %144, %176
  %178 = fmul <4 x float> %175, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %179 = fadd <4 x float> %166, %178
  %180 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %179) #6
  %181 = add <4 x i32> %180, %112
  %182 = fadd <4 x float> %151, %177
  %183 = fsub <4 x float> %177, %182
  %184 = fadd <4 x float> %151, %183
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %46
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !25
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %50
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !25
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %54
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !25
  %191 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %58
  %192 = load float, float* %191, align 4, !tbaa !3, !noalias !25
  %193 = insertelement <4 x float> undef, float %192, i32 0
  %194 = insertelement <4 x float> %193, float %190, i32 1
  %195 = insertelement <4 x float> %194, float %188, i32 2
  %196 = insertelement <4 x float> %195, float %186, i32 3
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %46
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !25
  %199 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %50
  %200 = load float, float* %199, align 4, !tbaa !3, !noalias !25
  %201 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %54
  %202 = load float, float* %201, align 4, !tbaa !3, !noalias !25
  %203 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %58
  %204 = load float, float* %203, align 4, !tbaa !3, !noalias !25
  %205 = insertelement <4 x float> undef, float %204, i32 0
  %206 = insertelement <4 x float> %205, float %202, i32 1
  %207 = insertelement <4 x float> %206, float %200, i32 2
  %208 = insertelement <4 x float> %207, float %198, i32 3
  %209 = bitcast <4 x float> %196 to <2 x i64>
  %210 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %211 = bitcast <2 x i64> %210 to <4 x float>
  %212 = fsub <4 x float> %196, %211
  %213 = fmul <4 x float> %196, %40
  %214 = bitcast <4 x float> %213 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372034707292160, i64 -9223372034707292160>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = fmul <4 x float> %67, %211
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %212, %67
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %68, %211
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %68, %212
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %208, %40
  %226 = fadd <4 x float> %225, %224
  %227 = fadd <4 x float> %213, %182
  %228 = fsub <4 x float> %227, %182
  %229 = fsub <4 x float> %227, %228
  %230 = fsub <4 x float> %182, %229
  %231 = fsub <4 x float> %213, %228
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %226, %184
  %234 = fadd <4 x float> %233, %232
  %235 = fadd <4 x float> %227, %234
  %236 = fsub <4 x float> %227, %235
  %237 = fadd <4 x float> %234, %236
  %238 = bitcast <4 x float> %235 to <2 x i64>
  %239 = and <2 x i64> %238, <i64 -17587891081216, i64 -17587891081216>
  %240 = bitcast <2 x i64> %239 to <4 x float>
  %241 = fsub <4 x float> %235, %240
  %242 = fmul <4 x float> %235, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %243 = bitcast <4 x float> %242 to <2 x i64>
  %244 = xor <2 x i64> %243, <i64 -9223372034707292160, i64 -9223372034707292160>
  %245 = bitcast <2 x i64> %244 to <4 x float>
  %246 = fmul <4 x float> %240, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %247 = fadd <4 x float> %246, %245
  %248 = fmul <4 x float> %241, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %249 = fadd <4 x float> %248, %247
  %250 = fmul <4 x float> %240, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %251 = fadd <4 x float> %250, %249
  %252 = fmul <4 x float> %241, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %235, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %255 = fadd <4 x float> %254, %253
  %256 = fmul <4 x float> %237, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %257 = fadd <4 x float> %256, %255
  %258 = bitcast <4 x float> %242 to <4 x i32>
  %259 = bitcast <4 x float> %257 to <4 x i32>
  %260 = and <2 x i64> %65, <i64 9223372034707292159, i64 9223372034707292159>
  %261 = bitcast <2 x i64> %260 to <4 x float>
  %262 = fcmp olt <4 x float> %261, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %263 = sext <4 x i1> %262 to <4 x i32>
  %264 = and <4 x i32> %39, %263
  %265 = xor <4 x i32> %263, <i32 -1, i32 -1, i32 -1, i32 -1>
  %266 = and <4 x i32> %258, %265
  %267 = or <4 x i32> %266, %264
  %268 = and <4 x i32> %259, %265
  %269 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %270 = fcmp uno <4 x float> %1, zeroinitializer
  %271 = or <4 x i1> %269, %270
  %272 = bitcast <4 x i32> %267 to <4 x float>
  %273 = select <4 x i1> %271, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %272
  br label %274

; <label>:274:                                    ; preds = %32, %11
  %275 = phi <4 x i32> [ %33, %32 ], [ %31, %11 ]
  %276 = phi <4 x float> [ %273, %32 ], [ %26, %11 ]
  %277 = phi <4 x i32> [ %268, %32 ], [ %30, %11 ]
  %278 = phi <4 x i32> [ %181, %32 ], [ %15, %11 ]
  %279 = bitcast <4 x i32> %277 to <4 x float>
  %280 = bitcast <4 x float> %276 to <2 x i64>
  %281 = and <2 x i64> %280, <i64 -17587891081216, i64 -17587891081216>
  %282 = bitcast <2 x i64> %281 to <4 x float>
  %283 = fsub <4 x float> %276, %282
  %284 = fmul <4 x float> %279, %282
  %285 = fmul <4 x float> %283, %283
  %286 = fmul <4 x float> %283, %282
  %287 = fadd <4 x float> %286, %286
  %288 = fmul <4 x float> %282, %282
  %289 = fadd <4 x float> %284, %284
  %290 = fadd <4 x float> %289, %285
  %291 = fadd <4 x float> %290, %287
  %292 = fadd <4 x float> %288, %291
  %293 = fmul <4 x float> %292, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %294 = fadd <4 x float> %293, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %295 = fmul <4 x float> %292, %294
  %296 = fadd <4 x float> %295, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %297 = fmul <4 x float> %276, %292
  %298 = fmul <4 x float> %297, %296
  %299 = fadd <4 x float> %276, %298
  %300 = fsub <4 x float> %276, %299
  %301 = fadd <4 x float> %298, %300
  %302 = fadd <4 x float> %301, %279
  %303 = fadd <4 x float> %299, %302
  %304 = icmp eq <4 x i32> %275, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %305 = bitcast <4 x float> %303 to <4 x i32>
  %306 = select <4 x i1> %304, <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32> %305
  %307 = fmul <4 x float> %292, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %308 = fadd <4 x float> %307, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %309 = fmul <4 x float> %292, %308
  %310 = fadd <4 x float> %309, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %311 = fmul <4 x float> %292, %310
  %312 = fadd <4 x float> %311, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %313 = fmul <4 x float> %292, %312
  %314 = fadd <4 x float> %313, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %315 = bitcast <4 x float> %292 to <2 x i64>
  %316 = and <2 x i64> %315, <i64 -17587891081216, i64 -17587891081216>
  %317 = bitcast <2 x i64> %316 to <4 x float>
  %318 = fsub <4 x float> %292, %317
  %319 = bitcast <4 x float> %314 to <2 x i64>
  %320 = and <2 x i64> %319, <i64 -17587891081216, i64 -17587891081216>
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fsub <4 x float> %314, %321
  %323 = fmul <4 x float> %292, %314
  %324 = bitcast <4 x float> %323 to <2 x i64>
  %325 = xor <2 x i64> %324, <i64 -9223372034707292160, i64 -9223372034707292160>
  %326 = bitcast <2 x i64> %325 to <4 x float>
  %327 = fmul <4 x float> %317, %321
  %328 = fadd <4 x float> %327, %326
  %329 = fmul <4 x float> %318, %321
  %330 = fadd <4 x float> %329, %328
  %331 = fmul <4 x float> %322, %317
  %332 = fadd <4 x float> %331, %330
  %333 = fmul <4 x float> %318, %322
  %334 = fadd <4 x float> %333, %332
  %335 = fadd <4 x float> %323, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %336 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %335
  %337 = fadd <4 x float> %323, %336
  %338 = fadd <4 x float> %337, %334
  %339 = fadd <4 x float> %335, %338
  %340 = and <4 x i32> %278, <i32 1, i32 1, i32 1, i32 1>
  %341 = icmp eq <4 x i32> %340, zeroinitializer
  %342 = sext <4 x i1> %341 to <4 x i32>
  %343 = and <4 x i32> %306, %342
  %344 = xor <4 x i32> %342, <i32 -1, i32 -1, i32 -1, i32 -1>
  %345 = bitcast <4 x float> %339 to <4 x i32>
  %346 = and <4 x i32> %345, %344
  %347 = or <4 x i32> %346, %343
  %348 = and <4 x i32> %345, %342
  %349 = and <4 x i32> %306, %344
  %350 = or <4 x i32> %348, %349
  %351 = and <4 x i32> %278, <i32 2, i32 2, i32 2, i32 2>
  %352 = icmp ne <4 x i32> %351, zeroinitializer
  %353 = sext <4 x i1> %352 to <4 x i32>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = and <2 x i64> %354, <i64 -9223372034707292160, i64 -9223372034707292160>
  %356 = bitcast <4 x i32> %347 to <2 x i64>
  %357 = xor <2 x i64> %355, %356
  %358 = add <4 x i32> %278, <i32 1, i32 1, i32 1, i32 1>
  %359 = and <4 x i32> %358, <i32 2, i32 2, i32 2, i32 2>
  %360 = icmp ne <4 x i32> %359, zeroinitializer
  %361 = sext <4 x i1> %360 to <4 x i32>
  %362 = bitcast <4 x i32> %361 to <2 x i64>
  %363 = and <2 x i64> %362, <i64 -9223372034707292160, i64 -9223372034707292160>
  %364 = bitcast <4 x i32> %350 to <2 x i64>
  %365 = xor <2 x i64> %363, %364
  %366 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %366, align 16
  %367 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %368 = bitcast <4 x float>* %367 to <2 x i64>*
  store <2 x i64> %365, <2 x i64>* %368, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif4_u05sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = bitcast <4 x float> %10 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = fsub <4 x float> %10, %14
  %16 = bitcast <4 x float> %11 to <2 x i64>
  %17 = xor <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fmul <4 x float> %14, %14
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %15, %14
  %22 = fadd <4 x float> %21, %20
  %23 = fadd <4 x float> %21, %22
  %24 = fmul <4 x float> %15, %15
  %25 = fadd <4 x float> %24, %23
  %26 = fmul <4 x float> %11, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %27 = fadd <4 x float> %26, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %28 = fmul <4 x float> %11, %27
  %29 = fadd <4 x float> %28, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %30 = fmul <4 x float> %11, %29
  %31 = fadd <4 x float> %30, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %32 = fsub <4 x float> %31, %30
  %33 = fsub <4 x float> %31, %32
  %34 = fsub <4 x float> %30, %33
  %35 = fsub <4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %32
  %36 = fadd <4 x float> %35, %34
  %37 = fadd <4 x float> %36, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %38 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %11, %39
  %41 = bitcast <4 x float> %31 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %31, %43
  %45 = fmul <4 x float> %11, %31
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fmul <4 x float> %39, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %40, %43
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %44, %39
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %40, %44
  %56 = fadd <4 x float> %55, %54
  %57 = fmul <4 x float> %11, %37
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %31, %25
  %60 = fadd <4 x float> %59, %58
  %61 = fadd <4 x float> %45, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %62 = fsub <4 x float> %61, %45
  %63 = fsub <4 x float> %61, %62
  %64 = fsub <4 x float> %45, %63
  %65 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %62
  %66 = fadd <4 x float> %65, %64
  %67 = fadd <4 x float> %60, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %68 = fadd <4 x float> %66, %67
  %69 = bitcast <4 x float> %61 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %61, %71
  %73 = fmul <4 x float> %10, %61
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %14, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %72, %14
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %15, %71
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %15, %72
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %10, %68
  %86 = fadd <4 x float> %84, %85
  %87 = fadd <4 x float> %73, %86
  %88 = bitcast <4 x float> %1 to <4 x i32>
  %89 = icmp eq <4 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = bitcast <4 x float> %87 to <4 x i32>
  %91 = select <4 x i1> %89, <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32> %90
  %92 = fmul <4 x float> %11, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %93 = fadd <4 x float> %92, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %94 = fmul <4 x float> %11, %93
  %95 = fadd <4 x float> %94, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %96 = fmul <4 x float> %11, %95
  %97 = fadd <4 x float> %96, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %98 = fsub <4 x float> %97, %96
  %99 = fsub <4 x float> %97, %98
  %100 = fsub <4 x float> %96, %99
  %101 = fsub <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %98
  %102 = fadd <4 x float> %101, %100
  %103 = fadd <4 x float> %102, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %104 = bitcast <4 x float> %97 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %97, %106
  %108 = fmul <4 x float> %11, %97
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %39, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %40, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %39
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %40, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %11, %103
  %121 = fadd <4 x float> %120, %119
  %122 = fmul <4 x float> %97, %25
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %108, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %125 = fsub <4 x float> %124, %108
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %108, %126
  %128 = fsub <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %123, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %131 = fadd <4 x float> %129, %130
  %132 = bitcast <4 x float> %124 to <2 x i64>
  %133 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %134 = bitcast <2 x i64> %133 to <4 x float>
  %135 = fsub <4 x float> %124, %134
  %136 = fmul <4 x float> %11, %124
  %137 = bitcast <4 x float> %136 to <2 x i64>
  %138 = xor <2 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <2 x i64> %138 to <4 x float>
  %140 = fmul <4 x float> %39, %134
  %141 = fadd <4 x float> %140, %139
  %142 = fmul <4 x float> %135, %39
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %40, %134
  %145 = fadd <4 x float> %144, %143
  %146 = fmul <4 x float> %40, %135
  %147 = fadd <4 x float> %146, %145
  %148 = fmul <4 x float> %25, %124
  %149 = fadd <4 x float> %148, %147
  %150 = fmul <4 x float> %11, %131
  %151 = fadd <4 x float> %149, %150
  %152 = fadd <4 x float> %136, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %153 = fsub <4 x float> %152, %136
  %154 = fsub <4 x float> %152, %153
  %155 = fsub <4 x float> %136, %154
  %156 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %153
  %157 = fadd <4 x float> %156, %155
  %158 = fadd <4 x float> %157, %151
  %159 = fadd <4 x float> %152, %158
  %160 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %161 = icmp eq <4 x i32> %160, zeroinitializer
  %162 = sext <4 x i1> %161 to <4 x i32>
  %163 = and <4 x i32> %91, %162
  %164 = xor <4 x i32> %162, <i32 -1, i32 -1, i32 -1, i32 -1>
  %165 = bitcast <4 x float> %159 to <4 x i32>
  %166 = and <4 x i32> %165, %164
  %167 = or <4 x i32> %166, %163
  %168 = and <4 x i32> %165, %162
  %169 = and <4 x i32> %91, %164
  %170 = or <4 x i32> %169, %168
  %171 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %172 = icmp ne <4 x i32> %171, zeroinitializer
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -9223372034707292160, i64 -9223372034707292160>
  %176 = bitcast <4 x i32> %167 to <2 x i64>
  %177 = xor <2 x i64> %175, %176
  %178 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %179 = and <4 x i32> %178, <i32 4, i32 4, i32 4, i32 4>
  %180 = icmp ne <4 x i32> %179, zeroinitializer
  %181 = sext <4 x i1> %180 to <4 x i32>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = and <2 x i64> %182, <i64 -9223372034707292160, i64 -9223372034707292160>
  %184 = bitcast <4 x i32> %170 to <2 x i64>
  %185 = xor <2 x i64> %183, %184
  %186 = bitcast <4 x float> %1 to <2 x i64>
  %187 = and <2 x i64> %186, <i64 9223372034707292159, i64 9223372034707292159>
  %188 = bitcast <2 x i64> %187 to <4 x float>
  %189 = fcmp ogt <4 x float> %188, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %190 = sext <4 x i1> %189 to <4 x i32>
  %191 = bitcast <4 x i32> %190 to <2 x i64>
  %192 = xor <2 x i64> %191, <i64 -1, i64 -1>
  %193 = and <2 x i64> %177, %192
  %194 = and <2 x i64> %185, %192
  %195 = fcmp oeq <4 x float> %188, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %196 = sext <4 x i1> %195 to <4 x i32>
  %197 = bitcast <4 x i32> %196 to <2 x i64>
  %198 = or <2 x i64> %193, %197
  %199 = or <2 x i64> %194, %197
  %200 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %200, align 16
  %201 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %202 = bitcast <4 x float>* %201 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %202, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif4_u35sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <4 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <4 x float> %10, %17
  %19 = fmul <4 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <4 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <4 x float> %11, %20
  %22 = fadd <4 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <4 x float> %11, %22
  %24 = fadd <4 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <4 x float> %11, %24
  %26 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x float> %18 to <4 x i32>
  %31 = and <4 x i32> %30, %29
  %32 = xor <4 x i32> %29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x float> %26 to <4 x i32>
  %34 = and <4 x i32> %33, %32
  %35 = or <4 x i32> %34, %31
  %36 = and <4 x i32> %33, %29
  %37 = and <4 x i32> %30, %32
  %38 = or <4 x i32> %36, %37
  %39 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %40 = icmp ne <4 x i32> %39, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = and <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <4 x i32> %35 to <2 x i64>
  %45 = xor <2 x i64> %43, %44
  %46 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %47 = and <4 x i32> %46, <i32 4, i32 4, i32 4, i32 4>
  %48 = icmp ne <4 x i32> %47, zeroinitializer
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <4 x i32> %38 to <2 x i64>
  %53 = xor <2 x i64> %51, %52
  %54 = bitcast <4 x float> %1 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 9223372034707292159, i64 9223372034707292159>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fcmp ogt <4 x float> %56, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %61 = and <2 x i64> %45, %60
  %62 = and <2 x i64> %53, %60
  %63 = fcmp oeq <4 x float> %56, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = or <2 x i64> %61, %65
  %67 = or <2 x i64> %62, %65
  %68 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %66, <2 x i64>* %68, align 16
  %69 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %70 = bitcast <4 x float>* %69 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %70, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff4_sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %1, %4
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp ule <4 x float> %8, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = select <4 x i1> %9, <4 x float> %5, <4 x float> zeroinitializer
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <2 x i64> %12, %13
  %15 = fsub <4 x float> %1, %10
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <2 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %19, align 16
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <4 x float>* %20 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %21, align 16
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %30, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %13) #6
  %15 = fmul <4 x float> %13, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %16 = fadd <4 x float> %15, %0
  %17 = fmul <4 x float> %13, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %18 = fadd <4 x float> %17, %16
  %19 = fsub <4 x float> %18, %16
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %16, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %13, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %25 = fadd <4 x float> %24, %18
  %26 = fsub <4 x float> %18, %25
  %27 = fadd <4 x float> %24, %26
  %28 = fadd <4 x float> %27, %23
  %29 = bitcast <4 x float> %0 to <4 x i32>
  br label %275

; <label>:30:                                     ; preds = %1
  %31 = bitcast <4 x float> %0 to <4 x i32>
  %32 = lshr <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = and <4 x i32> %32, <i32 255, i32 255, i32 255, i32 255>
  %34 = add nsw <4 x i32> %33, <i32 -152, i32 -152, i32 -152, i32 -152>
  %35 = icmp ugt <4 x i32> %33, <i32 217, i32 217, i32 217, i32 217>
  %36 = select <4 x i1> %35, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %37 = add <4 x i32> %36, %31
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = ashr <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %40 = xor <4 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <4 x i32> %40, %34
  %42 = shl <4 x i32> %41, <i32 2, i32 2, i32 2, i32 2>
  %43 = extractelement <4 x i32> %42, i32 3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !3, !noalias !28
  %47 = extractelement <4 x i32> %42, i32 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !3, !noalias !28
  %51 = extractelement <4 x i32> %42, i32 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !28
  %55 = extractelement <4 x i32> %42, i32 0
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !28
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = insertelement <4 x float> %59, float %54, i32 1
  %61 = insertelement <4 x float> %60, float %50, i32 2
  %62 = insertelement <4 x float> %61, float %46, i32 3
  %63 = bitcast <4 x i32> %37 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %38, %65
  %67 = bitcast <4 x float> %62 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> %62, %69
  %71 = fmul <4 x float> %62, %38
  %72 = bitcast <4 x float> %71 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %65, %69
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %66, %69
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %70, %65
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %66, %70
  %82 = fadd <4 x float> %81, %80
  %83 = and <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = or <2 x i64> %83, <i64 5404319554102886400, i64 5404319554102886400>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fmul <4 x float> %71, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 9223372034707292159, i64 9223372034707292159>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fcmp ogt <4 x float> %89, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %91 = fadd <4 x float> %86, %85
  %92 = fsub <4 x float> %91, %85
  %93 = bitcast <4 x float> %92 to <2 x i64>
  %94 = or <2 x i64> %83, %93
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = select <4 x i1> %90, <4 x float> %86, <4 x float> %95
  %97 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fcmp ogt <4 x float> %98, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %100 = fadd <4 x float> %71, %85
  %101 = fsub <4 x float> %100, %85
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = or <2 x i64> %83, %102
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = select <4 x i1> %99, <4 x float> %71, <4 x float> %104
  %106 = fmul <4 x float> %96, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %107 = fadd <4 x float> %71, %106
  %108 = fmul <4 x float> %105, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %109 = fadd <4 x float> %96, %108
  %110 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %109) #6
  %111 = fadd <4 x float> %82, %107
  %112 = fsub <4 x float> %107, %111
  %113 = fadd <4 x float> %82, %112
  %114 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %44
  %115 = load float, float* %114, align 4, !tbaa !3, !noalias !28
  %116 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %48
  %117 = load float, float* %116, align 4, !tbaa !3, !noalias !28
  %118 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %119 = load float, float* %118, align 4, !tbaa !3, !noalias !28
  %120 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %121 = load float, float* %120, align 4, !tbaa !3, !noalias !28
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = insertelement <4 x float> %122, float %119, i32 1
  %124 = insertelement <4 x float> %123, float %117, i32 2
  %125 = insertelement <4 x float> %124, float %115, i32 3
  %126 = bitcast <4 x float> %125 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -17587891081216, i64 -17587891081216>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fsub <4 x float> %125, %128
  %130 = fmul <4 x float> %125, %38
  %131 = bitcast <4 x float> %130 to <2 x i64>
  %132 = xor <2 x i64> %131, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fmul <4 x float> %65, %128
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %66, %128
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %129, %65
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %66, %129
  %141 = fadd <4 x float> %140, %139
  %142 = fadd <4 x float> %130, %111
  %143 = fsub <4 x float> %142, %111
  %144 = fsub <4 x float> %142, %143
  %145 = fsub <4 x float> %111, %144
  %146 = fsub <4 x float> %130, %143
  %147 = fadd <4 x float> %146, %145
  %148 = fadd <4 x float> %141, %113
  %149 = fadd <4 x float> %148, %147
  %150 = bitcast <4 x float> %142 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -9223372034707292160, i64 -9223372034707292160>
  %152 = or <2 x i64> %151, <i64 5404319554102886400, i64 5404319554102886400>
  %153 = bitcast <2 x i64> %152 to <4 x float>
  %154 = fmul <4 x float> %142, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %155 = bitcast <4 x float> %154 to <2 x i64>
  %156 = and <2 x i64> %155, <i64 9223372034707292159, i64 9223372034707292159>
  %157 = bitcast <2 x i64> %156 to <4 x float>
  %158 = fcmp ogt <4 x float> %157, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %159 = fadd <4 x float> %154, %153
  %160 = fsub <4 x float> %159, %153
  %161 = bitcast <4 x float> %160 to <2 x i64>
  %162 = or <2 x i64> %151, %161
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = select <4 x i1> %158, <4 x float> %154, <4 x float> %163
  %165 = and <2 x i64> %150, <i64 9223372034707292159, i64 9223372034707292159>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fcmp ogt <4 x float> %166, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %168 = fadd <4 x float> %142, %153
  %169 = fsub <4 x float> %168, %153
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = or <2 x i64> %151, %170
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = select <4 x i1> %167, <4 x float> %142, <4 x float> %172
  %174 = fmul <4 x float> %164, <float -2.500000e-01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01>
  %175 = fadd <4 x float> %142, %174
  %176 = fmul <4 x float> %173, <float -4.000000e+00, float -4.000000e+00, float -4.000000e+00, float -4.000000e+00>
  %177 = fadd <4 x float> %164, %176
  %178 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %177) #6
  %179 = add <4 x i32> %178, %110
  %180 = fadd <4 x float> %149, %175
  %181 = fsub <4 x float> %175, %180
  %182 = fadd <4 x float> %149, %181
  %183 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %44
  %184 = load float, float* %183, align 4, !tbaa !3, !noalias !28
  %185 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %48
  %186 = load float, float* %185, align 4, !tbaa !3, !noalias !28
  %187 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %188 = load float, float* %187, align 4, !tbaa !3, !noalias !28
  %189 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %190 = load float, float* %189, align 4, !tbaa !3, !noalias !28
  %191 = insertelement <4 x float> undef, float %190, i32 0
  %192 = insertelement <4 x float> %191, float %188, i32 1
  %193 = insertelement <4 x float> %192, float %186, i32 2
  %194 = insertelement <4 x float> %193, float %184, i32 3
  %195 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %44
  %196 = load float, float* %195, align 4, !tbaa !3, !noalias !28
  %197 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %48
  %198 = load float, float* %197, align 4, !tbaa !3, !noalias !28
  %199 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %200 = load float, float* %199, align 4, !tbaa !3, !noalias !28
  %201 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %202 = load float, float* %201, align 4, !tbaa !3, !noalias !28
  %203 = insertelement <4 x float> undef, float %202, i32 0
  %204 = insertelement <4 x float> %203, float %200, i32 1
  %205 = insertelement <4 x float> %204, float %198, i32 2
  %206 = insertelement <4 x float> %205, float %196, i32 3
  %207 = bitcast <4 x float> %194 to <2 x i64>
  %208 = and <2 x i64> %207, <i64 -17587891081216, i64 -17587891081216>
  %209 = bitcast <2 x i64> %208 to <4 x float>
  %210 = fsub <4 x float> %194, %209
  %211 = fmul <4 x float> %194, %38
  %212 = bitcast <4 x float> %211 to <2 x i64>
  %213 = xor <2 x i64> %212, <i64 -9223372034707292160, i64 -9223372034707292160>
  %214 = bitcast <2 x i64> %213 to <4 x float>
  %215 = fmul <4 x float> %65, %209
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %210, %65
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %66, %209
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %66, %210
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %206, %38
  %224 = fadd <4 x float> %223, %222
  %225 = fadd <4 x float> %211, %180
  %226 = fsub <4 x float> %225, %180
  %227 = fsub <4 x float> %225, %226
  %228 = fsub <4 x float> %180, %227
  %229 = fsub <4 x float> %211, %226
  %230 = fadd <4 x float> %229, %228
  %231 = fadd <4 x float> %224, %182
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %225, %232
  %234 = fsub <4 x float> %225, %233
  %235 = fadd <4 x float> %232, %234
  %236 = bitcast <4 x float> %233 to <2 x i64>
  %237 = and <2 x i64> %236, <i64 -17587891081216, i64 -17587891081216>
  %238 = bitcast <2 x i64> %237 to <4 x float>
  %239 = fsub <4 x float> %233, %238
  %240 = fmul <4 x float> %233, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %241 = bitcast <4 x float> %240 to <2 x i64>
  %242 = xor <2 x i64> %241, <i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = bitcast <2 x i64> %242 to <4 x float>
  %244 = fmul <4 x float> %238, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %245 = fadd <4 x float> %244, %243
  %246 = fmul <4 x float> %239, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %247 = fadd <4 x float> %246, %245
  %248 = fmul <4 x float> %238, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %249 = fadd <4 x float> %248, %247
  %250 = fmul <4 x float> %239, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %251 = fadd <4 x float> %250, %249
  %252 = fmul <4 x float> %233, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %235, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %255 = fadd <4 x float> %254, %253
  %256 = bitcast <4 x float> %240 to <4 x i32>
  %257 = bitcast <4 x float> %255 to <4 x i32>
  %258 = and <2 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159>
  %259 = bitcast <2 x i64> %258 to <4 x float>
  %260 = fcmp olt <4 x float> %259, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = and <4 x i32> %37, %261
  %263 = xor <4 x i32> %261, <i32 -1, i32 -1, i32 -1, i32 -1>
  %264 = and <4 x i32> %256, %263
  %265 = and <4 x i32> %257, %263
  %266 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %267 = fcmp uno <4 x float> %0, zeroinitializer
  %268 = or <4 x i1> %266, %267
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = or <4 x i32> %262, %269
  %271 = or <4 x i32> %270, %264
  %272 = bitcast <4 x i32> %271 to <4 x float>
  %273 = or <4 x i32> %265, %269
  %274 = bitcast <4 x i32> %273 to <4 x float>
  br label %275

; <label>:275:                                    ; preds = %30, %10
  %276 = phi <4 x i32> [ %31, %30 ], [ %29, %10 ]
  %277 = phi <4 x float> [ %272, %30 ], [ %25, %10 ]
  %278 = phi <4 x float> [ %274, %30 ], [ %28, %10 ]
  %279 = phi <4 x i32> [ %179, %30 ], [ %14, %10 ]
  %280 = and <4 x i32> %279, <i32 1, i32 1, i32 1, i32 1>
  %281 = icmp ne <4 x i32> %280, zeroinitializer
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = and <2 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = bitcast <4 x float> %277 to <2 x i64>
  %286 = xor <2 x i64> %284, %285
  %287 = bitcast <2 x i64> %286 to <4 x float>
  %288 = bitcast <4 x float> %278 to <2 x i64>
  %289 = xor <2 x i64> %284, %288
  %290 = bitcast <2 x i64> %289 to <4 x float>
  %291 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %292 = bitcast <2 x i64> %291 to <4 x float>
  %293 = fsub <4 x float> %287, %292
  %294 = fmul <4 x float> %287, %287
  %295 = bitcast <4 x float> %294 to <2 x i64>
  %296 = xor <2 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <2 x i64> %296 to <4 x float>
  %298 = fmul <4 x float> %292, %292
  %299 = fadd <4 x float> %298, %297
  %300 = fadd <4 x float> %292, %292
  %301 = fmul <4 x float> %300, %293
  %302 = fadd <4 x float> %301, %299
  %303 = fmul <4 x float> %293, %293
  %304 = fadd <4 x float> %303, %302
  %305 = fadd <4 x float> %290, %290
  %306 = fmul <4 x float> %305, %287
  %307 = fadd <4 x float> %306, %304
  %308 = fadd <4 x float> %294, %307
  %309 = fsub <4 x float> %294, %308
  %310 = fadd <4 x float> %307, %309
  %311 = fmul <4 x float> %308, <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>
  %312 = fadd <4 x float> %311, <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>
  %313 = fmul <4 x float> %308, %312
  %314 = fadd <4 x float> %313, <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>
  %315 = fmul <4 x float> %308, %314
  %316 = fadd <4 x float> %315, <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>
  %317 = fmul <4 x float> %308, %316
  %318 = fadd <4 x float> %317, <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>
  %319 = fmul <4 x float> %308, %318
  %320 = fadd <4 x float> %319, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %321 = fsub <4 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %320
  %322 = fadd <4 x float> %319, %321
  %323 = bitcast <4 x float> %308 to <2 x i64>
  %324 = and <2 x i64> %323, <i64 -17587891081216, i64 -17587891081216>
  %325 = bitcast <2 x i64> %324 to <4 x float>
  %326 = fsub <4 x float> %308, %325
  %327 = bitcast <4 x float> %320 to <2 x i64>
  %328 = and <2 x i64> %327, <i64 -17587891081216, i64 -17587891081216>
  %329 = bitcast <2 x i64> %328 to <4 x float>
  %330 = fsub <4 x float> %320, %329
  %331 = fmul <4 x float> %308, %320
  %332 = bitcast <4 x float> %331 to <2 x i64>
  %333 = xor <2 x i64> %332, <i64 -9223372034707292160, i64 -9223372034707292160>
  %334 = bitcast <2 x i64> %333 to <4 x float>
  %335 = fmul <4 x float> %325, %329
  %336 = fadd <4 x float> %335, %334
  %337 = fmul <4 x float> %326, %329
  %338 = fadd <4 x float> %337, %336
  %339 = fmul <4 x float> %330, %325
  %340 = fadd <4 x float> %339, %338
  %341 = fmul <4 x float> %326, %330
  %342 = fadd <4 x float> %341, %340
  %343 = fmul <4 x float> %308, %322
  %344 = fadd <4 x float> %343, %342
  %345 = fmul <4 x float> %310, %320
  %346 = fadd <4 x float> %345, %344
  %347 = fadd <4 x float> %331, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %348 = fsub <4 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %347
  %349 = fadd <4 x float> %331, %348
  %350 = fadd <4 x float> %349, %346
  %351 = bitcast <4 x float> %347 to <2 x i64>
  %352 = and <2 x i64> %351, <i64 -17587891081216, i64 -17587891081216>
  %353 = bitcast <2 x i64> %352 to <4 x float>
  %354 = fsub <4 x float> %347, %353
  %355 = fmul <4 x float> %308, %347
  %356 = bitcast <4 x float> %355 to <2 x i64>
  %357 = xor <2 x i64> %356, <i64 -9223372034707292160, i64 -9223372034707292160>
  %358 = bitcast <2 x i64> %357 to <4 x float>
  %359 = fmul <4 x float> %325, %353
  %360 = fadd <4 x float> %359, %358
  %361 = fmul <4 x float> %354, %325
  %362 = fadd <4 x float> %361, %360
  %363 = fmul <4 x float> %326, %353
  %364 = fadd <4 x float> %363, %362
  %365 = fmul <4 x float> %326, %354
  %366 = fadd <4 x float> %365, %364
  %367 = fmul <4 x float> %310, %347
  %368 = fadd <4 x float> %367, %366
  %369 = fmul <4 x float> %308, %350
  %370 = fadd <4 x float> %368, %369
  %371 = fadd <4 x float> %355, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %372 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %371
  %373 = fadd <4 x float> %355, %372
  %374 = fadd <4 x float> %373, %370
  %375 = bitcast <4 x float> %371 to <2 x i64>
  %376 = and <2 x i64> %375, <i64 -17587891081216, i64 -17587891081216>
  %377 = bitcast <2 x i64> %376 to <4 x float>
  %378 = fsub <4 x float> %371, %377
  %379 = fmul <4 x float> %371, %287
  %380 = bitcast <4 x float> %379 to <2 x i64>
  %381 = xor <2 x i64> %380, <i64 -9223372034707292160, i64 -9223372034707292160>
  %382 = bitcast <2 x i64> %381 to <4 x float>
  %383 = fmul <4 x float> %292, %377
  %384 = fadd <4 x float> %383, %382
  %385 = fmul <4 x float> %293, %377
  %386 = fadd <4 x float> %385, %384
  %387 = fmul <4 x float> %378, %292
  %388 = fadd <4 x float> %387, %386
  %389 = fmul <4 x float> %293, %378
  %390 = fadd <4 x float> %389, %388
  %391 = fmul <4 x float> %374, %287
  %392 = fadd <4 x float> %390, %391
  %393 = fmul <4 x float> %371, %290
  %394 = fadd <4 x float> %393, %392
  %395 = bitcast <4 x float> %379 to <4 x i32>
  %396 = bitcast <4 x float> %394 to <4 x i32>
  %397 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %379
  %398 = and <2 x i64> %380, <i64 -17587891081216, i64 -17587891081216>
  %399 = bitcast <2 x i64> %398 to <4 x float>
  %400 = fsub <4 x float> %379, %399
  %401 = bitcast <4 x float> %397 to <2 x i64>
  %402 = and <2 x i64> %401, <i64 -17587891081216, i64 -17587891081216>
  %403 = bitcast <2 x i64> %402 to <4 x float>
  %404 = fsub <4 x float> %397, %403
  %405 = fmul <4 x float> %399, %403
  %406 = fadd <4 x float> %405, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %407 = fmul <4 x float> %404, %399
  %408 = fadd <4 x float> %407, %406
  %409 = fmul <4 x float> %400, %403
  %410 = fadd <4 x float> %409, %408
  %411 = fmul <4 x float> %400, %404
  %412 = fadd <4 x float> %411, %410
  %413 = fmul <4 x float> %397, %394
  %414 = fadd <4 x float> %412, %413
  %415 = xor <2 x i64> %401, <i64 -9223372034707292160, i64 -9223372034707292160>
  %416 = bitcast <2 x i64> %415 to <4 x float>
  %417 = fmul <4 x float> %414, %416
  %418 = bitcast <4 x float> %397 to <4 x i32>
  %419 = and <4 x i32> %418, %282
  %420 = xor <4 x i32> %282, <i32 -1, i32 -1, i32 -1, i32 -1>
  %421 = and <4 x i32> %395, %420
  %422 = or <4 x i32> %419, %421
  %423 = bitcast <4 x float> %417 to <4 x i32>
  %424 = and <4 x i32> %423, %282
  %425 = and <4 x i32> %396, %420
  %426 = or <4 x i32> %424, %425
  %427 = bitcast <4 x i32> %422 to <4 x float>
  %428 = bitcast <4 x i32> %426 to <4 x float>
  %429 = fadd <4 x float> %427, %428
  %430 = icmp eq <4 x i32> %276, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %431 = select <4 x i1> %430, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %429
  ret <4 x float> %431
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_atanf4_u35sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <4 x i32>
  %3 = ashr <4 x i32> %2, <i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <4 x float> %0 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 9223372034707292159, i64 9223372034707292159>
  %6 = bitcast <2 x i64> %5 to <4 x float>
  %7 = fcmp ogt <4 x float> %6, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %6
  %9 = select <4 x i1> %7, <4 x float> %8, <4 x float> %6
  %10 = fmul <4 x float> %9, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %10, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %14 = fadd <4 x float> %13, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %15 = fmul <4 x float> %10, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %16 = fadd <4 x float> %15, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %17 = fmul <4 x float> %11, %14
  %18 = fadd <4 x float> %16, %17
  %19 = fmul <4 x float> %10, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %20 = fadd <4 x float> %19, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %21 = fmul <4 x float> %10, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %22 = fadd <4 x float> %21, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %23 = fmul <4 x float> %11, %20
  %24 = fadd <4 x float> %22, %23
  %25 = fmul <4 x float> %12, %18
  %26 = fadd <4 x float> %24, %25
  %27 = fmul <4 x float> %10, %26
  %28 = fmul <4 x float> %9, %27
  %29 = fadd <4 x float> %9, %28
  %30 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %29
  %31 = select <4 x i1> %7, <4 x float> %30, <4 x float> %29
  %32 = and <4 x i32> %3, <i32 2, i32 2, i32 2, i32 2>
  %33 = icmp ne <4 x i32> %32, zeroinitializer
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <4 x float> %31 to <2 x i64>
  %38 = xor <2 x i64> %36, %37
  %39 = bitcast <2 x i64> %38 to <4 x float>
  ret <4 x float> %39
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atan2f4_u35sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <4 x i32>
  %7 = ashr <4 x i32> %6, <i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <4 x i32> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -4294967298, i64 -4294967298>
  %10 = bitcast <4 x float> %1 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = fcmp olt <4 x float> %12, %5
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = and <4 x i32> %14, %16
  %19 = xor <2 x i64> %17, <i64 -1, i64 -1>
  %20 = and <2 x i64> %9, %19
  %21 = or <4 x i32> %6, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = select <4 x i1> %15, <4 x float> %22, <4 x float> %5
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %12, <4 x float> %5) #6
  %25 = fdiv <4 x float> %23, %24
  %26 = fmul <4 x float> %25, %25
  %27 = fmul <4 x float> %26, %26
  %28 = fmul <4 x float> %27, %27
  %29 = fmul <4 x float> %26, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %30 = fadd <4 x float> %29, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %31 = fmul <4 x float> %26, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %32 = fadd <4 x float> %31, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %33 = fmul <4 x float> %27, %30
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %26, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %36 = fadd <4 x float> %35, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %37 = fmul <4 x float> %26, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %38 = fadd <4 x float> %37, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %39 = fmul <4 x float> %27, %36
  %40 = fadd <4 x float> %38, %39
  %41 = fmul <4 x float> %28, %34
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %26, %42
  %44 = fmul <4 x float> %25, %43
  %45 = fadd <4 x float> %25, %44
  %46 = bitcast <2 x i64> %20 to <4 x i32>
  %47 = or <4 x i32> %18, %46
  %48 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %47) #6
  %49 = fmul <4 x float> %48, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %50 = fadd <4 x float> %49, %45
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = fcmp oeq <4 x float> %1, zeroinitializer
  %58 = or <4 x i1> %54, %57
  %59 = or <2 x i64> %52, <i64 4596222329050697691, i64 4596222329050697691>
  %60 = and <2 x i64> %59, %56
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %61
  %63 = bitcast <4 x float> %62 to <4 x i32>
  %64 = bitcast <2 x i64> %53 to <4 x i32>
  %65 = select <4 x i1> %58, <4 x i32> %63, <4 x i32> %64
  %66 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %67 = or <2 x i64> %52, <i64 4560193532023345115, i64 4560193532023345115>
  %68 = and <2 x i64> %67, %56
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %69
  %71 = bitcast <4 x float> %70 to <4 x i32>
  %72 = select <4 x i1> %66, <4 x i32> %71, <4 x i32> %65
  %73 = fcmp oeq <4 x float> %0, zeroinitializer
  %74 = and <4 x i32> %7, <i32 1078530011, i32 1078530011, i32 1078530011, i32 1078530011>
  %75 = select <4 x i1> %73, <4 x i32> %74, <4 x i32> %72
  %76 = fcmp uno <4 x float> %0, %1
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = bitcast <4 x i32> %75 to <2 x i64>
  %80 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = xor <2 x i64> %80, %79
  %82 = or <2 x i64> %81, %78
  %83 = bitcast <2 x i64> %82 to <4 x float>
  ret <4 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <2 x i64> %3 to <4 x i32>
  %19 = and <4 x i32> %6, %18
  %20 = bitcast <4 x float> %17 to <4 x i32>
  %21 = and <4 x i32> %20, %12
  %22 = or <4 x i32> %21, %19
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %25 = fadd <4 x float> %24, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %26 = fmul <4 x float> %25, %16
  %27 = fadd <4 x float> %26, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %28 = fmul <4 x float> %27, %16
  %29 = fadd <4 x float> %28, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %30 = fmul <4 x float> %29, %16
  %31 = fadd <4 x float> %30, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %32 = fmul <4 x float> %16, %23
  %33 = fmul <4 x float> %31, %32
  %34 = fadd <4 x float> %33, %23
  %35 = fmul <4 x float> %34, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %36 = fadd <4 x float> %35, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %37 = bitcast <4 x float> %34 to <4 x i32>
  %38 = and <4 x i32> %37, %6
  %39 = bitcast <4 x float> %36 to <4 x i32>
  %40 = and <4 x i32> %39, %12
  %41 = or <4 x i32> %40, %38
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = xor <2 x i64> %43, %42
  %45 = bitcast <2 x i64> %44 to <4 x float>
  ret <4 x float> %45
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acosf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <2 x i64> %3 to <4 x i32>
  %19 = and <4 x i32> %6, %18
  %20 = bitcast <4 x float> %17 to <4 x i32>
  %21 = and <4 x i32> %20, %12
  %22 = or <4 x i32> %21, %19
  %23 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = bitcast <4 x i32> %22 to <4 x float>
  %25 = select <4 x i1> %23, <4 x float> %24, <4 x float> zeroinitializer
  %26 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %27 = fadd <4 x float> %26, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %28 = fmul <4 x float> %27, %16
  %29 = fadd <4 x float> %28, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %30 = fmul <4 x float> %29, %16
  %31 = fadd <4 x float> %30, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %32 = fmul <4 x float> %31, %16
  %33 = fadd <4 x float> %32, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %34 = fmul <4 x float> %25, %16
  %35 = fmul <4 x float> %33, %34
  %36 = bitcast <4 x float> %25 to <2 x i64>
  %37 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = xor <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = bitcast <4 x float> %35 to <2 x i64>
  %41 = xor <2 x i64> %37, %40
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fadd <4 x float> %39, %42
  %44 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %43
  %45 = fadd <4 x float> %25, %35
  %46 = fmul <4 x float> %45, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %47 = bitcast <4 x float> %44 to <4 x i32>
  %48 = and <4 x i32> %47, %6
  %49 = bitcast <4 x float> %46 to <4 x i32>
  %50 = and <4 x i32> %49, %12
  %51 = or <4 x i32> %48, %50
  %52 = fcmp olt <4 x float> %0, zeroinitializer
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = fadd <4 x float> %55, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %57 = select <4 x i1> %52, <4 x i32> %12, <4 x i32> zeroinitializer
  %58 = bitcast <4 x float> %56 to <4 x i32>
  %59 = and <4 x i32> %57, %58
  %60 = xor <4 x i32> %57, <i32 -1, i32 -1, i32 -1, i32 -1>
  %61 = and <4 x i32> %51, %60
  %62 = or <4 x i32> %59, %61
  %63 = bitcast <4 x i32> %62 to <4 x float>
  ret <4 x float> %63
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atan2f4_u10sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = and <4 x i32> %7, %9
  %11 = xor <4 x i32> %7, <i32 -1, i32 -1, i32 -1, i32 -1>
  %12 = bitcast <4 x float> %1 to <4 x i32>
  %13 = and <4 x i32> %11, %12
  %14 = or <4 x i32> %13, %10
  %15 = bitcast <4 x i32> %14 to <4 x float>
  %16 = fmul <4 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %17 = bitcast <4 x float> %16 to <4 x i32>
  %18 = and <4 x i32> %7, %17
  %19 = bitcast <4 x float> %0 to <4 x i32>
  %20 = and <4 x i32> %11, %19
  %21 = or <4 x i32> %20, %18
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %15, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -4294967298, i64 -4294967298>
  %30 = and <2 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <4 x i32> %14 to <2 x i64>
  %32 = xor <2 x i64> %30, %31
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = bitcast <2 x i64> %29 to <4 x i32>
  %35 = add <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  %36 = fcmp olt <4 x float> %33, %25
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <4 x i32> %35, %37
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %29, %40
  %42 = bitcast <2 x i64> %32 to <4 x i32>
  %43 = xor <4 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = and <4 x i32> %43, %37
  %45 = xor <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = bitcast <2 x i64> %24 to <4 x i32>
  %47 = and <4 x i32> %45, %46
  %48 = or <4 x i32> %47, %44
  %49 = bitcast <2 x i64> %30 to <4 x i32>
  %50 = xor <4 x i32> %49, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %51 = and <4 x i32> %50, %37
  %52 = and <4 x i32> %37, %46
  %53 = and <4 x i32> %45, %42
  %54 = or <4 x i32> %53, %52
  %55 = and <4 x i32> %45, %49
  %56 = bitcast <4 x i32> %48 to <4 x float>
  %57 = bitcast <4 x i32> %51 to <4 x float>
  %58 = bitcast <4 x i32> %54 to <4 x float>
  %59 = bitcast <4 x i32> %55 to <4 x float>
  %60 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %58
  %61 = bitcast <4 x i32> %54 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 -17587891081216, i64 -17587891081216>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> %58, %63
  %65 = bitcast <4 x float> %60 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fsub <4 x float> %60, %67
  %69 = bitcast <4 x i32> %48 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %56, %71
  %73 = fmul <4 x float> %60, %56
  %74 = fmul <4 x float> %63, %67
  %75 = fadd <4 x float> %74, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %76 = fmul <4 x float> %68, %63
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %64, %67
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %64, %68
  %81 = fadd <4 x float> %80, %79
  %82 = bitcast <4 x float> %81 to <2 x i64>
  %83 = xor <2 x i64> %82, <i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = bitcast <4 x float> %73 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %71, %67
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %68, %71
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %72, %67
  %93 = fadd <4 x float> %92, %91
  %94 = fmul <4 x float> %72, %68
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %73, %84
  %97 = fadd <4 x float> %95, %96
  %98 = fmul <4 x float> %73, %59
  %99 = fsub <4 x float> %57, %98
  %100 = fmul <4 x float> %60, %99
  %101 = fadd <4 x float> %100, %97
  %102 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fsub <4 x float> %73, %103
  %105 = fmul <4 x float> %73, %73
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fmul <4 x float> %103, %103
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %103, %103
  %112 = fmul <4 x float> %111, %104
  %113 = fadd <4 x float> %112, %110
  %114 = fmul <4 x float> %104, %104
  %115 = fadd <4 x float> %114, %113
  %116 = fadd <4 x float> %101, %101
  %117 = fmul <4 x float> %73, %116
  %118 = fadd <4 x float> %115, %117
  %119 = fadd <4 x float> %105, %118
  %120 = fsub <4 x float> %105, %119
  %121 = fadd <4 x float> %118, %120
  %122 = fmul <4 x float> %119, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %123 = fadd <4 x float> %122, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %124 = fmul <4 x float> %119, %123
  %125 = fadd <4 x float> %124, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %126 = fmul <4 x float> %119, %125
  %127 = fadd <4 x float> %126, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %128 = fmul <4 x float> %119, %127
  %129 = fadd <4 x float> %128, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %130 = fmul <4 x float> %119, %129
  %131 = fadd <4 x float> %130, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %132 = fmul <4 x float> %119, %131
  %133 = fadd <4 x float> %132, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %134 = fmul <4 x float> %119, %133
  %135 = fadd <4 x float> %134, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %136 = fmul <4 x float> %119, %135
  %137 = fadd <4 x float> %136, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %138 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %137
  %139 = fadd <4 x float> %136, %138
  %140 = bitcast <4 x float> %119 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fsub <4 x float> %119, %142
  %144 = bitcast <4 x float> %137 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fsub <4 x float> %137, %146
  %148 = fmul <4 x float> %119, %137
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fmul <4 x float> %142, %146
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %143, %146
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %147, %142
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %143, %147
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %119, %139
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %121, %137
  %163 = fadd <4 x float> %162, %161
  %164 = fadd <4 x float> %148, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %165 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %164
  %166 = fadd <4 x float> %148, %165
  %167 = fadd <4 x float> %166, %163
  %168 = bitcast <4 x float> %164 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -17587891081216, i64 -17587891081216>
  %170 = bitcast <2 x i64> %169 to <4 x float>
  %171 = fsub <4 x float> %164, %170
  %172 = fmul <4 x float> %73, %164
  %173 = bitcast <4 x float> %172 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <2 x i64> %174 to <4 x float>
  %176 = fmul <4 x float> %103, %170
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %104, %170
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %171, %103
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %104, %171
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %73, %167
  %185 = fadd <4 x float> %183, %184
  %186 = fmul <4 x float> %101, %164
  %187 = fadd <4 x float> %186, %185
  %188 = bitcast <2 x i64> %41 to <4 x i32>
  %189 = or <4 x i32> %39, %188
  %190 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %189) #6
  %191 = bitcast <4 x float> %190 to <2 x i64>
  %192 = and <2 x i64> %191, <i64 -17587891081216, i64 -17587891081216>
  %193 = bitcast <2 x i64> %192 to <4 x float>
  %194 = fsub <4 x float> %190, %193
  %195 = fmul <4 x float> %190, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %196 = bitcast <4 x float> %195 to <2 x i64>
  %197 = xor <2 x i64> %196, <i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = bitcast <2 x i64> %197 to <4 x float>
  %199 = fmul <4 x float> %193, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %200 = fadd <4 x float> %199, %198
  %201 = fmul <4 x float> %193, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %202 = fadd <4 x float> %201, %200
  %203 = fmul <4 x float> %194, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %204 = fadd <4 x float> %203, %202
  %205 = fmul <4 x float> %194, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %206 = fadd <4 x float> %205, %204
  %207 = fmul <4 x float> %190, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %208 = fadd <4 x float> %207, %206
  %209 = fadd <4 x float> %172, %195
  %210 = fsub <4 x float> %195, %209
  %211 = fadd <4 x float> %172, %210
  %212 = fadd <4 x float> %211, %208
  %213 = fadd <4 x float> %187, %212
  %214 = fadd <4 x float> %209, %213
  %215 = bitcast <4 x float> %214 to <2 x i64>
  %216 = and <2 x i64> %31, <i64 -9223372034707292160, i64 -9223372034707292160>
  %217 = xor <2 x i64> %216, %215
  %218 = and <2 x i64> %31, <i64 9223372034707292159, i64 9223372034707292159>
  %219 = bitcast <2 x i64> %218 to <4 x float>
  %220 = fcmp oeq <4 x float> %219, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %221 = sext <4 x i1> %220 to <4 x i32>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = fcmp oeq <4 x float> %15, zeroinitializer
  %224 = or <4 x i1> %220, %223
  %225 = or <2 x i64> %216, <i64 4596222329050697691, i64 4596222329050697691>
  %226 = and <2 x i64> %225, %222
  %227 = bitcast <2 x i64> %226 to <4 x float>
  %228 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %227
  %229 = bitcast <4 x float> %228 to <4 x i32>
  %230 = bitcast <2 x i64> %217 to <4 x i32>
  %231 = select <4 x i1> %224, <4 x i32> %229, <4 x i32> %230
  %232 = fcmp oeq <4 x float> %25, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %233 = or <2 x i64> %216, <i64 4560193532023345115, i64 4560193532023345115>
  %234 = and <2 x i64> %233, %222
  %235 = bitcast <2 x i64> %234 to <4 x float>
  %236 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %235
  %237 = bitcast <4 x float> %236 to <4 x i32>
  %238 = select <4 x i1> %232, <4 x i32> %237, <4 x i32> %231
  %239 = fcmp oeq <4 x float> %22, zeroinitializer
  %240 = ashr <4 x i32> %14, <i32 31, i32 31, i32 31, i32 31>
  %241 = and <4 x i32> %240, <i32 1078530011, i32 1078530011, i32 1078530011, i32 1078530011>
  %242 = select <4 x i1> %239, <4 x i32> %241, <4 x i32> %238
  %243 = fcmp uno <4 x float> %22, %15
  %244 = sext <4 x i1> %243 to <4 x i32>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = bitcast <4 x i32> %242 to <2 x i64>
  %247 = and <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %248 = xor <2 x i64> %247, %246
  %249 = or <2 x i64> %248, %245
  %250 = bitcast <2 x i64> %249 to <4 x float>
  ret <4 x float> %250
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %17, %20
  %22 = fmul <4 x float> %17, %17
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = xor <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fmul <4 x float> %20, %20
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %21, %20
  %29 = fadd <4 x float> %28, %27
  %30 = fadd <4 x float> %28, %29
  %31 = fmul <4 x float> %21, %21
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %22, %16
  %34 = fsub <4 x float> %33, %16
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %16, %35
  %37 = fsub <4 x float> %22, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %38, %32
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %40, %43
  %45 = fmul <4 x float> %20, %43
  %46 = fadd <4 x float> %45, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %47 = fmul <4 x float> %44, %20
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %21, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %21, %44
  %52 = fadd <4 x float> %51, %50
  %53 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %52, %54
  %56 = bitcast <4 x float> %33 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %33, %58
  %60 = fmul <4 x float> %40, %33
  %61 = bitcast <4 x float> %60 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fmul <4 x float> %43, %58
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %59, %43
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %44, %58
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %44, %59
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %33, %55
  %73 = fadd <4 x float> %71, %72
  %74 = fmul <4 x float> %40, %39
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %60, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fmul <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = bitcast <2 x i64> %3 to <4 x i32>
  %79 = and <4 x i32> %6, %78
  %80 = bitcast <4 x float> %76 to <4 x i32>
  %81 = and <4 x i32> %80, %12
  %82 = or <4 x i32> %81, %79
  %83 = bitcast <4 x float> %77 to <4 x i32>
  %84 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = and <4 x i32> %82, %85
  %87 = and <4 x i32> %85, %12
  %88 = and <4 x i32> %87, %83
  %89 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %90 = fadd <4 x float> %89, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %91 = fmul <4 x float> %90, %16
  %92 = fadd <4 x float> %91, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %93 = fmul <4 x float> %92, %16
  %94 = fadd <4 x float> %93, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %95 = fmul <4 x float> %94, %16
  %96 = fadd <4 x float> %95, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %97 = bitcast <4 x i32> %86 to <4 x float>
  %98 = fmul <4 x float> %16, %97
  %99 = fmul <4 x float> %96, %98
  %100 = bitcast <4 x i32> %88 to <4 x float>
  %101 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %97
  %102 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %101
  %103 = fsub <4 x float> %102, %97
  %104 = fadd <4 x float> %103, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %105 = fsub <4 x float> %104, %100
  %106 = fsub <4 x float> %101, %99
  %107 = fsub <4 x float> %101, %106
  %108 = fsub <4 x float> %107, %99
  %109 = fadd <4 x float> %108, %105
  %110 = fadd <4 x float> %99, %97
  %111 = fadd <4 x float> %106, %109
  %112 = fmul <4 x float> %111, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %113 = bitcast <4 x float> %110 to <4 x i32>
  %114 = and <4 x i32> %113, %6
  %115 = bitcast <4 x float> %112 to <4 x i32>
  %116 = and <4 x i32> %115, %12
  %117 = or <4 x i32> %116, %114
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = xor <2 x i64> %119, %118
  %121 = bitcast <2 x i64> %120 to <4 x float>
  ret <4 x float> %121
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acosf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %17, %20
  %22 = fmul <4 x float> %17, %17
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = xor <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fmul <4 x float> %20, %20
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %21, %20
  %29 = fadd <4 x float> %28, %27
  %30 = fadd <4 x float> %28, %29
  %31 = fmul <4 x float> %21, %21
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %22, %16
  %34 = fsub <4 x float> %33, %16
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %16, %35
  %37 = fsub <4 x float> %22, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %38, %32
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %40, %43
  %45 = fmul <4 x float> %20, %43
  %46 = fadd <4 x float> %45, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %47 = fmul <4 x float> %44, %20
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %21, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %21, %44
  %52 = fadd <4 x float> %51, %50
  %53 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %52, %54
  %56 = bitcast <4 x float> %33 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %33, %58
  %60 = fmul <4 x float> %40, %33
  %61 = bitcast <4 x float> %60 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fmul <4 x float> %43, %58
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %59, %43
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %44, %58
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %44, %59
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %33, %55
  %73 = fadd <4 x float> %71, %72
  %74 = fmul <4 x float> %40, %39
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %60, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fmul <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = bitcast <2 x i64> %3 to <4 x i32>
  %79 = and <4 x i32> %6, %78
  %80 = bitcast <4 x float> %76 to <4 x i32>
  %81 = and <4 x i32> %80, %12
  %82 = or <4 x i32> %81, %79
  %83 = bitcast <4 x float> %77 to <4 x i32>
  %84 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = and <4 x i32> %82, %85
  %87 = and <4 x i32> %85, %12
  %88 = and <4 x i32> %87, %83
  %89 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %90 = fadd <4 x float> %89, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %91 = fmul <4 x float> %90, %16
  %92 = fadd <4 x float> %91, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %93 = fmul <4 x float> %92, %16
  %94 = fadd <4 x float> %93, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %95 = fmul <4 x float> %94, %16
  %96 = fadd <4 x float> %95, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %97 = bitcast <4 x i32> %86 to <4 x float>
  %98 = fmul <4 x float> %16, %97
  %99 = fmul <4 x float> %96, %98
  %100 = bitcast <4 x i32> %86 to <2 x i64>
  %101 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = xor <2 x i64> %101, %100
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = bitcast <4 x float> %99 to <2 x i64>
  %105 = xor <2 x i64> %101, %104
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fadd <4 x float> %103, %106
  %108 = fsub <4 x float> %103, %107
  %109 = fadd <4 x float> %108, %106
  %110 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %107
  %111 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %110
  %112 = fsub <4 x float> %111, %107
  %113 = fadd <4 x float> %112, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %114 = fsub <4 x float> %113, %109
  %115 = bitcast <4 x float> %110 to <4 x i32>
  %116 = bitcast <4 x float> %114 to <4 x i32>
  %117 = bitcast <4 x i32> %88 to <4 x float>
  %118 = fadd <4 x float> %99, %97
  %119 = fsub <4 x float> %97, %118
  %120 = fadd <4 x float> %99, %119
  %121 = fadd <4 x float> %120, %117
  %122 = fmul <4 x float> %118, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %123 = fmul <4 x float> %121, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %124 = and <4 x i32> %115, %6
  %125 = bitcast <4 x float> %122 to <4 x i32>
  %126 = and <4 x i32> %125, %12
  %127 = or <4 x i32> %124, %126
  %128 = and <4 x i32> %116, %6
  %129 = bitcast <4 x float> %123 to <4 x i32>
  %130 = and <4 x i32> %129, %12
  %131 = or <4 x i32> %130, %128
  %132 = fcmp olt <4 x float> %0, zeroinitializer
  %133 = bitcast <4 x i32> %127 to <4 x float>
  %134 = bitcast <4 x i32> %131 to <4 x float>
  %135 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %133
  %136 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %135
  %137 = fsub <4 x float> %136, %133
  %138 = fadd <4 x float> %137, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %139 = fsub <4 x float> %138, %134
  %140 = select <4 x i1> %132, <4 x i32> %12, <4 x i32> zeroinitializer
  %141 = bitcast <4 x float> %135 to <4 x i32>
  %142 = and <4 x i32> %140, %141
  %143 = xor <4 x i32> %140, <i32 -1, i32 -1, i32 -1, i32 -1>
  %144 = and <4 x i32> %127, %143
  %145 = or <4 x i32> %142, %144
  %146 = bitcast <4 x float> %139 to <4 x i32>
  %147 = and <4 x i32> %140, %146
  %148 = and <4 x i32> %131, %143
  %149 = or <4 x i32> %147, %148
  %150 = bitcast <4 x i32> %145 to <4 x float>
  %151 = bitcast <4 x i32> %149 to <4 x float>
  %152 = fadd <4 x float> %150, %151
  ret <4 x float> %152
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atanf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = and <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %8 = and <4 x i32> %6, <i32 -1082130432, i32 -1082130432, i32 -1082130432, i32 -1082130432>
  %9 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10 = bitcast <2 x i64> %3 to <4 x i32>
  %11 = and <4 x i32> %9, %10
  %12 = or <4 x i32> %11, %8
  %13 = and <4 x i32> %6, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %14 = and <4 x i32> %6, %10
  %15 = and <4 x i32> %9, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = or <4 x i32> %15, %14
  %17 = bitcast <4 x i32> %12 to <4 x float>
  %18 = bitcast <4 x i32> %13 to <4 x float>
  %19 = bitcast <4 x i32> %16 to <4 x float>
  %20 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %19
  %21 = bitcast <4 x i32> %16 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <2 x i64> %22 to <4 x float>
  %24 = fsub <4 x float> %19, %23
  %25 = bitcast <4 x float> %20 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fsub <4 x float> %20, %27
  %29 = bitcast <4 x i32> %12 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %17, %31
  %33 = fmul <4 x float> %20, %17
  %34 = fmul <4 x float> %23, %27
  %35 = fadd <4 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <4 x float> %28, %23
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %24, %27
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %24, %28
  %41 = fadd <4 x float> %40, %39
  %42 = bitcast <4 x float> %41 to <2 x i64>
  %43 = xor <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = bitcast <4 x float> %33 to <2 x i64>
  %46 = xor <2 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fmul <4 x float> %31, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %28, %31
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %32, %27
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %32, %28
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %33, %44
  %57 = fadd <4 x float> %55, %56
  %58 = fmul <4 x float> %33, zeroinitializer
  %59 = fsub <4 x float> %18, %58
  %60 = fmul <4 x float> %20, %59
  %61 = fadd <4 x float> %60, %57
  %62 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> %33, %63
  %65 = fmul <4 x float> %33, %33
  %66 = bitcast <4 x float> %65 to <2 x i64>
  %67 = xor <2 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <2 x i64> %67 to <4 x float>
  %69 = fmul <4 x float> %63, %63
  %70 = fadd <4 x float> %69, %68
  %71 = fadd <4 x float> %63, %63
  %72 = fmul <4 x float> %71, %64
  %73 = fadd <4 x float> %72, %70
  %74 = fmul <4 x float> %64, %64
  %75 = fadd <4 x float> %74, %73
  %76 = fadd <4 x float> %61, %61
  %77 = fmul <4 x float> %33, %76
  %78 = fadd <4 x float> %75, %77
  %79 = fadd <4 x float> %65, %78
  %80 = fsub <4 x float> %65, %79
  %81 = fadd <4 x float> %78, %80
  %82 = fmul <4 x float> %79, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %83 = fadd <4 x float> %82, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %84 = fmul <4 x float> %79, %83
  %85 = fadd <4 x float> %84, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %86 = fmul <4 x float> %79, %85
  %87 = fadd <4 x float> %86, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %88 = fmul <4 x float> %79, %87
  %89 = fadd <4 x float> %88, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %90 = fmul <4 x float> %79, %89
  %91 = fadd <4 x float> %90, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %92 = fmul <4 x float> %79, %91
  %93 = fadd <4 x float> %92, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %94 = fmul <4 x float> %79, %93
  %95 = fadd <4 x float> %94, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %96 = fmul <4 x float> %79, %95
  %97 = fadd <4 x float> %96, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %98 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %97
  %99 = fadd <4 x float> %96, %98
  %100 = bitcast <4 x float> %79 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %79, %102
  %104 = bitcast <4 x float> %97 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %97, %106
  %108 = fmul <4 x float> %79, %97
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %79, %99
  %121 = fadd <4 x float> %120, %119
  %122 = fmul <4 x float> %81, %97
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %108, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %125 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %124
  %126 = fadd <4 x float> %108, %125
  %127 = fadd <4 x float> %126, %123
  %128 = bitcast <4 x float> %124 to <2 x i64>
  %129 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %130 = bitcast <2 x i64> %129 to <4 x float>
  %131 = fsub <4 x float> %124, %130
  %132 = fmul <4 x float> %33, %124
  %133 = bitcast <4 x float> %132 to <2 x i64>
  %134 = xor <2 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fmul <4 x float> %63, %130
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %64, %130
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %131, %63
  %141 = fadd <4 x float> %140, %139
  %142 = fmul <4 x float> %64, %131
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %33, %127
  %145 = fadd <4 x float> %143, %144
  %146 = fmul <4 x float> %61, %124
  %147 = fadd <4 x float> %146, %145
  %148 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = and <2 x i64> %149, <i64 -17587891081216, i64 -17587891081216>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fsub <4 x float> %148, %151
  %153 = fmul <4 x float> %148, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %154 = bitcast <4 x float> %153 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372034707292160, i64 -9223372034707292160>
  %156 = bitcast <2 x i64> %155 to <4 x float>
  %157 = fmul <4 x float> %151, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %158 = fadd <4 x float> %157, %156
  %159 = fmul <4 x float> %151, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %160 = fadd <4 x float> %159, %158
  %161 = fmul <4 x float> %152, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %162 = fadd <4 x float> %161, %160
  %163 = fmul <4 x float> %152, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %148, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %166 = fadd <4 x float> %165, %164
  %167 = fadd <4 x float> %132, %153
  %168 = fsub <4 x float> %153, %167
  %169 = fadd <4 x float> %132, %168
  %170 = fadd <4 x float> %169, %166
  %171 = fadd <4 x float> %147, %170
  %172 = fadd <4 x float> %167, %171
  %173 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %174 = select <4 x i1> %173, <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <4 x float> %172
  %175 = bitcast <4 x float> %174 to <2 x i64>
  %176 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = xor <2 x i64> %176, %175
  %178 = bitcast <2 x i64> %177 to <4 x float>
  ret <4 x float> %178
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_logf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <4 x float> %14, %15
  %17 = fmul <4 x float> %16, %16
  %18 = fmul <4 x float> %17, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %19 = fadd <4 x float> %18, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %20 = fmul <4 x float> %17, %19
  %21 = fadd <4 x float> %20, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %22 = fmul <4 x float> %17, %21
  %23 = fadd <4 x float> %22, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %24 = fmul <4 x float> %17, %23
  %25 = fadd <4 x float> %24, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %26 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %27 = add nsw <4 x i32> %9, %26
  %28 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %27) #6
  %29 = fmul <4 x float> %28, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %30 = fmul <4 x float> %16, %25
  %31 = fadd <4 x float> %30, %29
  %32 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %33 = fcmp ult <4 x float> %4, zeroinitializer
  %34 = fcmp oeq <4 x float> %4, zeroinitializer
  %35 = select <4 x i1> %32, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %31
  %36 = select <4 x i1> %33, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %35
  %37 = select <4 x i1> %34, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %36
  ret <4 x float> %37
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_expf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fmul <4 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <4 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <4 x float> %8, %8
  %20 = fmul <4 x float> %19, %18
  %21 = fadd <4 x float> %8, %20
  %22 = fadd <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = sub <4 x i32> %3, %23
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = bitcast <4 x float> %32 to <2 x i64>
  %37 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %38 = and <2 x i64> %36, %37
  %39 = fcmp ogt <4 x float> %0, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = select <4 x i1> %39, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %40
  ret <4 x float> %41
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %0) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cbrtf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = select <4 x i1> %5, <4 x float> %8, <4 x float> %4
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = and <2 x i64> %7, <i64 820338753727, i64 820338753727>
  %13 = and <2 x i64> %7, <i64 545460846719, i64 545460846719>
  %14 = xor <2 x i64> %13, <i64 545460846719, i64 545460846719>
  %15 = or <2 x i64> %14, %12
  %16 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = sub <4 x i32> %16, %17
  %19 = add <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = xor <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %24, %0
  %26 = sub <4 x i32> %20, %21
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %19) #6
  %32 = fadd <4 x float> %31, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %33 = fmul <4 x float> %32, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %33) #6
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %37 = fsub <4 x float> %32, %36
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %37) #6
  %39 = icmp eq <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 1067533592, i32 1067533592, i32 1067533592, i32 1067533592>
  %42 = and <4 x i32> %40, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = xor <4 x i32> %42, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %44 = or <4 x i32> %43, %41
  %45 = icmp eq <4 x i32> %38, <i32 2, i32 2, i32 2, i32 2>
  %46 = bitcast <4 x i32> %44 to <4 x float>
  %47 = select <4 x i1> %45, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %46
  %48 = add <4 x i32> %34, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %49 = ashr <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %50 = shl <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %51 = add <4 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = fmul <4 x float> %47, %52
  %54 = sub <4 x i32> %48, %49
  %55 = shl <4 x i32> %54, <i32 23, i32 23, i32 23, i32 23>
  %56 = add <4 x i32> %55, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %57 = bitcast <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %53, %57
  %59 = bitcast <4 x float> %58 to <2 x i64>
  %60 = bitcast <4 x float> %30 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = xor <2 x i64> %61, %59
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = and <2 x i64> %60, <i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fmul <4 x float> %65, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %67 = fadd <4 x float> %66, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %68 = fmul <4 x float> %67, %65
  %69 = fadd <4 x float> %68, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %70 = fmul <4 x float> %69, %65
  %71 = fadd <4 x float> %70, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %72 = fmul <4 x float> %71, %65
  %73 = fadd <4 x float> %72, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %74 = fmul <4 x float> %73, %65
  %75 = fadd <4 x float> %74, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %76 = fmul <4 x float> %75, %65
  %77 = fmul <4 x float> %75, %76
  %78 = fmul <4 x float> %77, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %79 = fmul <4 x float> %75, %77
  %80 = fadd <4 x float> %79, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %81 = fmul <4 x float> %78, %80
  %82 = fsub <4 x float> %77, %81
  %83 = fmul <4 x float> %82, %63
  ret <4 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cbrtf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = select <4 x i1> %5, <4 x float> %8, <4 x float> %4
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = and <2 x i64> %7, <i64 820338753727, i64 820338753727>
  %13 = and <2 x i64> %7, <i64 545460846719, i64 545460846719>
  %14 = xor <2 x i64> %13, <i64 545460846719, i64 545460846719>
  %15 = or <2 x i64> %14, %12
  %16 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = sub <4 x i32> %16, %17
  %19 = add <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = xor <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %24, %0
  %26 = sub <4 x i32> %20, %21
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %19) #6
  %32 = fadd <4 x float> %31, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %33 = fmul <4 x float> %32, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %33) #6
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %37 = fsub <4 x float> %32, %36
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %37) #6
  %39 = icmp eq <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 1067533592, i32 1067533592, i32 1067533592, i32 1067533592>
  %42 = and <4 x i32> %40, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = xor <4 x i32> %42, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %44 = or <4 x i32> %43, %41
  %45 = and <4 x i32> %40, <i32 -1295101521, i32 -1295101521, i32 -1295101521, i32 -1295101521>
  %46 = icmp eq <4 x i32> %38, <i32 2, i32 2, i32 2, i32 2>
  %47 = select <4 x i1> %46, <4 x i32> <i32 849849800, i32 849849800, i32 849849800, i32 849849800>, <4 x i32> zeroinitializer
  %48 = or <4 x i32> %45, %47
  %49 = bitcast <4 x i32> %44 to <4 x float>
  %50 = select <4 x i1> %46, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %49
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = bitcast <4 x float> %30 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = xor <2 x i64> %53, %51
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = bitcast <4 x i32> %48 to <2 x i64>
  %57 = xor <2 x i64> %53, %56
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = and <2 x i64> %52, <i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fmul <4 x float> %60, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %62 = fadd <4 x float> %61, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %63 = fmul <4 x float> %62, %60
  %64 = fadd <4 x float> %63, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %65 = fmul <4 x float> %64, %60
  %66 = fadd <4 x float> %65, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %67 = fmul <4 x float> %66, %60
  %68 = fadd <4 x float> %67, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %69 = fmul <4 x float> %68, %60
  %70 = fadd <4 x float> %69, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %71 = fmul <4 x float> %70, %70
  %72 = fmul <4 x float> %71, %71
  %73 = fmul <4 x float> %72, %60
  %74 = fsub <4 x float> %70, %73
  %75 = fmul <4 x float> %74, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %76 = fsub <4 x float> %70, %75
  %77 = bitcast <4 x float> %76 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fsub <4 x float> %76, %79
  %81 = fmul <4 x float> %76, %76
  %82 = bitcast <4 x float> %81 to <2 x i64>
  %83 = xor <2 x i64> %82, <i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fmul <4 x float> %79, %79
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %80, %79
  %88 = fadd <4 x float> %87, %86
  %89 = fadd <4 x float> %87, %88
  %90 = fmul <4 x float> %80, %80
  %91 = fadd <4 x float> %90, %89
  %92 = and <2 x i64> %82, <i64 -17587891081216, i64 -17587891081216>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fsub <4 x float> %81, %93
  %95 = fmul <4 x float> %81, %81
  %96 = bitcast <4 x float> %95 to <2 x i64>
  %97 = xor <2 x i64> %96, <i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fmul <4 x float> %93, %93
  %100 = fadd <4 x float> %99, %98
  %101 = fmul <4 x float> %94, %93
  %102 = fadd <4 x float> %101, %100
  %103 = fadd <4 x float> %101, %102
  %104 = fmul <4 x float> %94, %94
  %105 = fadd <4 x float> %104, %103
  %106 = fmul <4 x float> %81, %91
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %106, %107
  %109 = and <2 x i64> %96, <i64 -17587891081216, i64 -17587891081216>
  %110 = bitcast <2 x i64> %109 to <4 x float>
  %111 = fsub <4 x float> %95, %110
  %112 = and <2 x i64> %52, <i64 9223354446816210944, i64 9223354446816210944>
  %113 = bitcast <2 x i64> %112 to <4 x float>
  %114 = fsub <4 x float> %60, %113
  %115 = fmul <4 x float> %95, %60
  %116 = bitcast <4 x float> %115 to <2 x i64>
  %117 = xor <2 x i64> %116, <i64 -9223372034707292160, i64 -9223372034707292160>
  %118 = bitcast <2 x i64> %117 to <4 x float>
  %119 = fmul <4 x float> %113, %110
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %111, %113
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %114, %110
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %114, %111
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %108, %60
  %128 = fadd <4 x float> %126, %127
  %129 = xor <2 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160>
  %130 = bitcast <2 x i64> %129 to <4 x float>
  %131 = fadd <4 x float> %115, %130
  %132 = fsub <4 x float> %131, %115
  %133 = fsub <4 x float> %131, %132
  %134 = fsub <4 x float> %115, %133
  %135 = fsub <4 x float> %130, %132
  %136 = fadd <4 x float> %135, %134
  %137 = fadd <4 x float> %136, %128
  %138 = fadd <4 x float> %131, %137
  %139 = fmul <4 x float> %138, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %140 = fmul <4 x float> %76, %139
  %141 = fadd <4 x float> %81, %140
  %142 = fsub <4 x float> %141, %81
  %143 = fsub <4 x float> %141, %142
  %144 = fsub <4 x float> %81, %143
  %145 = fsub <4 x float> %140, %142
  %146 = fadd <4 x float> %145, %144
  %147 = fadd <4 x float> %91, %146
  %148 = bitcast <4 x float> %141 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -17587891081216, i64 -17587891081216>
  %150 = bitcast <2 x i64> %149 to <4 x float>
  %151 = fsub <4 x float> %141, %150
  %152 = fmul <4 x float> %141, %60
  %153 = bitcast <4 x float> %152 to <2 x i64>
  %154 = xor <2 x i64> %153, <i64 -9223372034707292160, i64 -9223372034707292160>
  %155 = bitcast <2 x i64> %154 to <4 x float>
  %156 = fmul <4 x float> %113, %150
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %151, %113
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %114, %150
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %114, %151
  %163 = fadd <4 x float> %162, %161
  %164 = fmul <4 x float> %147, %60
  %165 = fadd <4 x float> %164, %163
  %166 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fsub <4 x float> %152, %167
  %169 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %170 = bitcast <2 x i64> %169 to <4 x float>
  %171 = fsub <4 x float> %55, %170
  %172 = fmul <4 x float> %152, %55
  %173 = bitcast <4 x float> %172 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <2 x i64> %174 to <4 x float>
  %176 = fmul <4 x float> %167, %170
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %168, %170
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %171, %167
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %168, %171
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %152, %58
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %165, %55
  %187 = fadd <4 x float> %186, %185
  %188 = fadd <4 x float> %172, %187
  %189 = add <4 x i32> %34, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %190 = ashr <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  %191 = shl <4 x i32> %190, <i32 23, i32 23, i32 23, i32 23>
  %192 = add <4 x i32> %191, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %193 = bitcast <4 x i32> %192 to <4 x float>
  %194 = fmul <4 x float> %188, %193
  %195 = sub <4 x i32> %189, %190
  %196 = shl <4 x i32> %195, <i32 23, i32 23, i32 23, i32 23>
  %197 = add <4 x i32> %196, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %198 = bitcast <4 x i32> %197 to <4 x float>
  %199 = fmul <4 x float> %194, %198
  %200 = fcmp oeq <4 x float> %60, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %201 = bitcast <2 x i64> %54 to <4 x i32>
  %202 = and <4 x i32> %201, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %203 = or <4 x i32> %202, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %204 = bitcast <4 x float> %199 to <4 x i32>
  %205 = select <4 x i1> %200, <4 x i32> %203, <4 x i32> %204
  %206 = fcmp oeq <4 x float> %60, zeroinitializer
  %207 = select <4 x i1> %206, <4 x i32> %202, <4 x i32> %205
  %208 = bitcast <4 x i32> %207 to <4 x float>
  ret <4 x float> %208
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_logf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %15 = add nsw <4 x i32> %9, %14
  %16 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %15) #6
  %17 = bitcast <4 x float> %16 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 -17587891081216, i64 -17587891081216>
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = fsub <4 x float> %16, %19
  %21 = fmul <4 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %22 = bitcast <4 x float> %21 to <2 x i64>
  %23 = xor <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fmul <4 x float> %19, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %26 = fadd <4 x float> %25, %24
  %27 = fmul <4 x float> %19, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %20, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %20, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %16, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fadd <4 x float> %35, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %37 = fsub <4 x float> %35, %36
  %38 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %37
  %39 = fsub <4 x float> %13, %36
  %40 = fadd <4 x float> %39, %38
  %41 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fadd <4 x float> %41, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fsub <4 x float> %41, %42
  %44 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %43
  %45 = fsub <4 x float> %13, %42
  %46 = fadd <4 x float> %45, %44
  %47 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %48 = bitcast <4 x float> %41 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %41, %50
  %52 = bitcast <4 x float> %47 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %47, %54
  %56 = bitcast <4 x float> %35 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %35, %58
  %60 = fmul <4 x float> %35, %47
  %61 = fmul <4 x float> %50, %54
  %62 = fadd <4 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <4 x float> %55, %50
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %51, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %51, %55
  %68 = fadd <4 x float> %67, %66
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = bitcast <4 x float> %60 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %58, %54
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %55, %58
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %59, %54
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %59, %55
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %60, %71
  %84 = fadd <4 x float> %82, %83
  %85 = fmul <4 x float> %60, %46
  %86 = fsub <4 x float> %40, %85
  %87 = fmul <4 x float> %47, %86
  %88 = fadd <4 x float> %87, %84
  %89 = fmul <4 x float> %60, %60
  %90 = fmul <4 x float> %89, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %91 = fadd <4 x float> %90, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %92 = fmul <4 x float> %89, %91
  %93 = fadd <4 x float> %92, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %94 = fmul <4 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <4 x float> %88, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <4 x float> %94, %21
  %97 = fsub <4 x float> %21, %96
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %98, %34
  %100 = fadd <4 x float> %95, %99
  %101 = fmul <4 x float> %60, %89
  %102 = fmul <4 x float> %101, %93
  %103 = fadd <4 x float> %102, %96
  %104 = fsub <4 x float> %96, %103
  %105 = fadd <4 x float> %102, %104
  %106 = fadd <4 x float> %105, %100
  %107 = fadd <4 x float> %103, %106
  %108 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %109 = fcmp ult <4 x float> %4, zeroinitializer
  %110 = fcmp oeq <4 x float> %4, zeroinitializer
  %111 = select <4 x i1> %108, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %107
  %112 = select <4 x i1> %109, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %111
  %113 = select <4 x i1> %110, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %112
  ret <4 x float> %113
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_powf4_u10sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fcmp oeq <4 x float> %4, %1
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp ogt <4 x float> %8, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = or <4 x i1> %5, %9
  %11 = sext <4 x i1> %10 to <4 x i32>
  %12 = and <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %13 = icmp ne <4 x i32> %12, zeroinitializer
  %14 = fcmp olt <4 x float> %8, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = and <4 x i1> %13, %14
  %16 = and <4 x i1> %15, %10
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x float> %0 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fcmp olt <4 x float> %20, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %22 = fmul <4 x float> %20, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %23 = select <4 x i1> %21, <4 x float> %22, <4 x float> %20
  %24 = bitcast <4 x float> %23 to <4 x i32>
  %25 = fmul <4 x float> %23, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %26 = bitcast <4 x float> %25 to <4 x i32>
  %27 = lshr <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = and <4 x i32> %27, <i32 255, i32 255, i32 255, i32 255>
  %29 = shl nuw nsw <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = sub <4 x i32> %30, %29
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fadd <4 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %35
  %37 = fsub <4 x float> %32, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %40 = fadd <4 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fsub <4 x float> %39, %40
  %42 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %43 = fsub <4 x float> %32, %40
  %44 = fadd <4 x float> %43, %42
  %45 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %46 = bitcast <4 x float> %39 to <2 x i64>
  %47 = and <2 x i64> %46, <i64 -17587891081216, i64 -17587891081216>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fsub <4 x float> %39, %48
  %50 = bitcast <4 x float> %45 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = fsub <4 x float> %45, %52
  %54 = bitcast <4 x float> %33 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fsub <4 x float> %33, %56
  %58 = fmul <4 x float> %33, %45
  %59 = fmul <4 x float> %48, %52
  %60 = fadd <4 x float> %59, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %61 = fmul <4 x float> %53, %48
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %49, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %49, %53
  %66 = fadd <4 x float> %65, %64
  %67 = bitcast <4 x float> %66 to <2 x i64>
  %68 = xor <2 x i64> %67, <i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = bitcast <4 x float> %58 to <2 x i64>
  %71 = xor <2 x i64> %70, <i64 -9223372034707292160, i64 -9223372034707292160>
  %72 = bitcast <2 x i64> %71 to <4 x float>
  %73 = fmul <4 x float> %56, %52
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %53, %56
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %57, %52
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %57, %53
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %58, %69
  %82 = fadd <4 x float> %80, %81
  %83 = fmul <4 x float> %58, %44
  %84 = fsub <4 x float> %38, %83
  %85 = fmul <4 x float> %45, %84
  %86 = fadd <4 x float> %85, %82
  %87 = and <2 x i64> %70, <i64 -17587891081216, i64 -17587891081216>
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = fsub <4 x float> %58, %88
  %90 = fmul <4 x float> %58, %58
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %88, %88
  %95 = fadd <4 x float> %94, %93
  %96 = fadd <4 x float> %88, %88
  %97 = fmul <4 x float> %96, %89
  %98 = fadd <4 x float> %97, %95
  %99 = fmul <4 x float> %89, %89
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %86, %86
  %102 = fmul <4 x float> %58, %101
  %103 = fadd <4 x float> %100, %102
  %104 = fmul <4 x float> %90, <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>
  %105 = fadd <4 x float> %104, <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>
  %106 = fmul <4 x float> %90, %105
  %107 = fadd <4 x float> %106, <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>
  %108 = select <4 x i1> %21, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %109 = add nsw <4 x i32> %28, %108
  %110 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %109) #6
  %111 = bitcast <4 x float> %110 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -17587891081216, i64 -17587891081216>
  %113 = bitcast <2 x i64> %112 to <4 x float>
  %114 = fsub <4 x float> %110, %113
  %115 = fmul <4 x float> %110, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %116 = bitcast <4 x float> %115 to <2 x i64>
  %117 = xor <2 x i64> %116, <i64 -9223372034707292160, i64 -9223372034707292160>
  %118 = bitcast <2 x i64> %117 to <4 x float>
  %119 = fmul <4 x float> %113, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %113, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %114, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %114, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %110, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %58, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %130 = fmul <4 x float> %86, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %131 = fadd <4 x float> %129, %115
  %132 = fsub <4 x float> %115, %131
  %133 = fadd <4 x float> %129, %132
  %134 = fadd <4 x float> %133, %128
  %135 = fadd <4 x float> %130, %134
  %136 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %137 = bitcast <2 x i64> %136 to <4 x float>
  %138 = fsub <4 x float> %90, %137
  %139 = fmul <4 x float> %58, %90
  %140 = bitcast <4 x float> %139 to <2 x i64>
  %141 = xor <2 x i64> %140, <i64 -9223372034707292160, i64 -9223372034707292160>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fmul <4 x float> %88, %137
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %138, %88
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %89, %137
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %89, %138
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %90, %86
  %152 = fadd <4 x float> %150, %151
  %153 = fmul <4 x float> %58, %103
  %154 = fadd <4 x float> %152, %153
  %155 = bitcast <4 x float> %107 to <2 x i64>
  %156 = and <2 x i64> %155, <i64 -17587891081216, i64 -17587891081216>
  %157 = bitcast <2 x i64> %156 to <4 x float>
  %158 = fsub <4 x float> %107, %157
  %159 = fmul <4 x float> %90, %107
  %160 = bitcast <4 x float> %159 to <2 x i64>
  %161 = xor <2 x i64> %160, <i64 -9223372034707292160, i64 -9223372034707292160>
  %162 = bitcast <2 x i64> %161 to <4 x float>
  %163 = fmul <4 x float> %137, %157
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %138, %157
  %166 = fadd <4 x float> %165, %164
  %167 = fmul <4 x float> %158, %137
  %168 = fadd <4 x float> %167, %166
  %169 = fmul <4 x float> %138, %158
  %170 = fadd <4 x float> %169, %168
  %171 = fmul <4 x float> %107, %103
  %172 = fadd <4 x float> %170, %171
  %173 = fadd <4 x float> %159, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %174 = fsub <4 x float> %173, %159
  %175 = fsub <4 x float> %173, %174
  %176 = fsub <4 x float> %159, %175
  %177 = fsub <4 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %174
  %178 = fadd <4 x float> %177, %176
  %179 = fadd <4 x float> %172, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %180 = fadd <4 x float> %178, %179
  %181 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %182 = bitcast <2 x i64> %181 to <4 x float>
  %183 = fsub <4 x float> %139, %182
  %184 = bitcast <4 x float> %173 to <2 x i64>
  %185 = and <2 x i64> %184, <i64 -17587891081216, i64 -17587891081216>
  %186 = bitcast <2 x i64> %185 to <4 x float>
  %187 = fsub <4 x float> %173, %186
  %188 = fmul <4 x float> %139, %173
  %189 = bitcast <4 x float> %188 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -9223372034707292160, i64 -9223372034707292160>
  %191 = bitcast <2 x i64> %190 to <4 x float>
  %192 = fmul <4 x float> %182, %186
  %193 = fadd <4 x float> %192, %191
  %194 = fmul <4 x float> %183, %186
  %195 = fadd <4 x float> %194, %193
  %196 = fmul <4 x float> %187, %182
  %197 = fadd <4 x float> %196, %195
  %198 = fmul <4 x float> %183, %187
  %199 = fadd <4 x float> %198, %197
  %200 = fmul <4 x float> %139, %180
  %201 = fadd <4 x float> %199, %200
  %202 = fmul <4 x float> %173, %154
  %203 = fadd <4 x float> %202, %201
  %204 = fadd <4 x float> %188, %131
  %205 = fsub <4 x float> %131, %204
  %206 = fadd <4 x float> %188, %205
  %207 = fadd <4 x float> %206, %135
  %208 = fadd <4 x float> %203, %207
  %209 = bitcast <4 x float> %204 to <2 x i64>
  %210 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %211 = bitcast <2 x i64> %210 to <4 x float>
  %212 = fsub <4 x float> %204, %211
  %213 = and <2 x i64> %6, <i64 -17587891081216, i64 -17587891081216>
  %214 = bitcast <2 x i64> %213 to <4 x float>
  %215 = fsub <4 x float> %1, %214
  %216 = fmul <4 x float> %204, %1
  %217 = bitcast <4 x float> %216 to <2 x i64>
  %218 = xor <2 x i64> %217, <i64 -9223372034707292160, i64 -9223372034707292160>
  %219 = bitcast <2 x i64> %218 to <4 x float>
  %220 = fmul <4 x float> %214, %211
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %212, %214
  %223 = fadd <4 x float> %222, %221
  %224 = fmul <4 x float> %215, %211
  %225 = fadd <4 x float> %224, %223
  %226 = fmul <4 x float> %215, %212
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %208, %1
  %229 = fadd <4 x float> %227, %228
  %230 = fadd <4 x float> %216, %229
  %231 = fmul <4 x float> %230, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %232 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %231) #6
  %233 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %232) #6
  %234 = fmul <4 x float> %233, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %235 = fadd <4 x float> %234, %216
  %236 = fsub <4 x float> %235, %216
  %237 = fsub <4 x float> %235, %236
  %238 = fsub <4 x float> %216, %237
  %239 = fsub <4 x float> %234, %236
  %240 = fadd <4 x float> %239, %238
  %241 = fadd <4 x float> %240, %229
  %242 = fmul <4 x float> %233, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %243 = fadd <4 x float> %242, %235
  %244 = fsub <4 x float> %243, %235
  %245 = fsub <4 x float> %243, %244
  %246 = fsub <4 x float> %235, %245
  %247 = fsub <4 x float> %242, %244
  %248 = fadd <4 x float> %247, %246
  %249 = fadd <4 x float> %248, %241
  %250 = fadd <4 x float> %243, %249
  %251 = fsub <4 x float> %243, %250
  %252 = fadd <4 x float> %249, %251
  %253 = fmul <4 x float> %250, <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>
  %254 = fadd <4 x float> %253, <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>
  %255 = fmul <4 x float> %250, %254
  %256 = fadd <4 x float> %255, <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>
  %257 = fmul <4 x float> %250, %256
  %258 = fadd <4 x float> %257, <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>
  %259 = fmul <4 x float> %250, %258
  %260 = fadd <4 x float> %259, <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>
  %261 = bitcast <4 x float> %250 to <2 x i64>
  %262 = and <2 x i64> %261, <i64 -17587891081216, i64 -17587891081216>
  %263 = bitcast <2 x i64> %262 to <4 x float>
  %264 = fsub <4 x float> %250, %263
  %265 = fmul <4 x float> %250, %250
  %266 = bitcast <4 x float> %265 to <2 x i64>
  %267 = xor <2 x i64> %266, <i64 -9223372034707292160, i64 -9223372034707292160>
  %268 = bitcast <2 x i64> %267 to <4 x float>
  %269 = fmul <4 x float> %263, %263
  %270 = fadd <4 x float> %269, %268
  %271 = fadd <4 x float> %263, %263
  %272 = fmul <4 x float> %271, %264
  %273 = fadd <4 x float> %272, %270
  %274 = fmul <4 x float> %264, %264
  %275 = fadd <4 x float> %274, %273
  %276 = fadd <4 x float> %252, %252
  %277 = fmul <4 x float> %250, %276
  %278 = fadd <4 x float> %277, %275
  %279 = and <2 x i64> %266, <i64 -17587891081216, i64 -17587891081216>
  %280 = bitcast <2 x i64> %279 to <4 x float>
  %281 = fsub <4 x float> %265, %280
  %282 = bitcast <4 x float> %260 to <2 x i64>
  %283 = and <2 x i64> %282, <i64 -17587891081216, i64 -17587891081216>
  %284 = bitcast <2 x i64> %283 to <4 x float>
  %285 = fsub <4 x float> %260, %284
  %286 = fmul <4 x float> %265, %260
  %287 = bitcast <4 x float> %286 to <2 x i64>
  %288 = xor <2 x i64> %287, <i64 -9223372034707292160, i64 -9223372034707292160>
  %289 = bitcast <2 x i64> %288 to <4 x float>
  %290 = fmul <4 x float> %280, %284
  %291 = fadd <4 x float> %290, %289
  %292 = fmul <4 x float> %281, %284
  %293 = fadd <4 x float> %292, %291
  %294 = fmul <4 x float> %285, %280
  %295 = fadd <4 x float> %294, %293
  %296 = fmul <4 x float> %281, %285
  %297 = fadd <4 x float> %296, %295
  %298 = fmul <4 x float> %278, %260
  %299 = fadd <4 x float> %298, %297
  %300 = fadd <4 x float> %250, %286
  %301 = fsub <4 x float> %250, %300
  %302 = fadd <4 x float> %286, %301
  %303 = fadd <4 x float> %252, %302
  %304 = fadd <4 x float> %303, %299
  %305 = fadd <4 x float> %300, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %306 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %305
  %307 = fadd <4 x float> %300, %306
  %308 = fadd <4 x float> %307, %304
  %309 = fadd <4 x float> %305, %308
  %310 = ashr <4 x i32> %232, <i32 31, i32 31, i32 31, i32 31>
  %311 = add <4 x i32> %310, %232
  %312 = ashr <4 x i32> %311, <i32 6, i32 6, i32 6, i32 6>
  %313 = sub nsw <4 x i32> %312, %310
  %314 = shl nsw <4 x i32> %313, <i32 4, i32 4, i32 4, i32 4>
  %315 = shl <4 x i32> %313, <i32 6, i32 6, i32 6, i32 6>
  %316 = sub <4 x i32> %232, %315
  %317 = add nsw <4 x i32> %314, <i32 127, i32 127, i32 127, i32 127>
  %318 = icmp sgt <4 x i32> %313, <i32 -8, i32 -8, i32 -8, i32 -8>
  %319 = select <4 x i1> %318, <4 x i32> %317, <4 x i32> zeroinitializer
  %320 = bitcast <4 x i32> %319 to <2 x i64>
  %321 = icmp sgt <4 x i32> %319, <i32 255, i32 255, i32 255, i32 255>
  %322 = sext <4 x i1> %321 to <4 x i32>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = xor <2 x i64> %323, <i64 -1, i64 -1>
  %325 = and <2 x i64> %324, %320
  %326 = and <2 x i64> %323, <i64 1095216660735, i64 1095216660735>
  %327 = or <2 x i64> %326, %325
  %328 = bitcast <2 x i64> %327 to <4 x i32>
  %329 = shl <4 x i32> %328, <i32 23, i32 23, i32 23, i32 23>
  %330 = bitcast <4 x i32> %329 to <4 x float>
  %331 = fmul <4 x float> %309, %330
  %332 = fmul <4 x float> %331, %330
  %333 = fmul <4 x float> %332, %330
  %334 = fmul <4 x float> %333, %330
  %335 = shl <4 x i32> %316, <i32 23, i32 23, i32 23, i32 23>
  %336 = add <4 x i32> %335, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %337 = bitcast <4 x i32> %336 to <4 x float>
  %338 = fmul <4 x float> %334, %337
  %339 = fcmp olt <4 x float> %216, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %340 = sext <4 x i1> %339 to <4 x i32>
  %341 = bitcast <4 x i32> %340 to <2 x i64>
  %342 = bitcast <4 x float> %338 to <2 x i64>
  %343 = xor <2 x i64> %341, <i64 -1, i64 -1>
  %344 = and <2 x i64> %342, %343
  %345 = bitcast <2 x i64> %344 to <4 x float>
  %346 = fcmp uno <4 x float> %345, zeroinitializer
  %347 = select <4 x i1> %346, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %345
  %348 = fcmp ogt <4 x float> %0, zeroinitializer
  %349 = and <4 x i32> %17, <i32 -1082130432, i32 -1082130432, i32 -1082130432, i32 -1082130432>
  %350 = and <4 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %351 = xor <4 x i32> %350, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %352 = or <4 x i32> %351, %349
  %353 = and <4 x i32> %352, %11
  %354 = and <4 x i32> %11, <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>
  %355 = xor <4 x i32> %354, <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>
  %356 = or <4 x i32> %353, %355
  %357 = bitcast <4 x i32> %356 to <4 x float>
  %358 = select <4 x i1> %348, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %357
  %359 = fmul <4 x float> %358, %347
  %360 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %361 = bitcast <4 x float> %360 to <2 x i64>
  %362 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %363 = xor <2 x i64> %362, %361
  %364 = bitcast <2 x i64> %363 to <4 x float>
  %365 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %366 = fcmp uge <4 x float> %364, zeroinitializer
  %367 = fcmp oeq <4 x float> %364, zeroinitializer
  %368 = sext <4 x i1> %367 to <4 x i32>
  %369 = and <4 x i32> %368, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %370 = and <4 x i32> %368, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %371 = xor <4 x i32> %370, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %372 = or <4 x i32> %371, %369
  %373 = fcmp oeq <4 x float> %20, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %374 = fcmp oeq <4 x float> %0, zeroinitializer
  %375 = or <4 x i1> %373, %374
  %376 = bitcast <4 x float> %0 to <4 x i32>
  %377 = and <4 x i32> %376, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %378 = or <4 x i32> %377, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %379 = and <4 x i32> %378, %17
  %380 = or <4 x i32> %351, %379
  %381 = bitcast <4 x i32> %380 to <4 x float>
  %382 = bitcast <4 x float> %1 to <4 x i32>
  %383 = xor <4 x i32> %382, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %384 = bitcast <4 x i32> %383 to <4 x float>
  %385 = select <4 x i1> %374, <4 x float> %384, <4 x float> %1
  %386 = fcmp olt <4 x float> %385, zeroinitializer
  %387 = sext <4 x i1> %386 to <4 x i32>
  %388 = bitcast <4 x i32> %387 to <2 x i64>
  %389 = and <2 x i64> %388, <i64 9187343241974906880, i64 9187343241974906880>
  %390 = xor <2 x i64> %389, <i64 9187343241974906880, i64 9187343241974906880>
  %391 = bitcast <2 x i64> %390 to <4 x float>
  %392 = fmul <4 x float> %391, %381
  %393 = bitcast <4 x i32> %372 to <4 x float>
  %394 = select <4 x i1> %366, <4 x float> %393, <4 x float> zeroinitializer
  %395 = select <4 x i1> %365, <4 x float> %394, <4 x float> %359
  %396 = select <4 x i1> %375, <4 x float> %392, <4 x float> %395
  %397 = fcmp uno <4 x float> %1, %0
  %398 = fcmp oeq <4 x float> %1, zeroinitializer
  %399 = fcmp oeq <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %400 = or <4 x i1> %398, %399
  %401 = select <4 x i1> %397, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %396
  %402 = select <4 x i1> %400, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %401
  ret <4 x float> %402
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastpowf4_u3500sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %7 = fmul <4 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = select <4 x i1> %6, <4 x float> %7, <4 x float> %5
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = fmul <4 x float> %8, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <4 x float> %10 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %14 = shl nuw nsw <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = add <4 x i32> %9, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = sub <4 x i32> %15, %14
  %17 = bitcast <4 x i32> %16 to <4 x float>
  %18 = fadd <4 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %20 = fdiv <4 x float> %18, %19
  %21 = fmul <4 x float> %20, %20
  %22 = fmul <4 x float> %21, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %23 = fadd <4 x float> %22, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %24 = fmul <4 x float> %21, %23
  %25 = fadd <4 x float> %24, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %26 = fmul <4 x float> %21, %25
  %27 = fadd <4 x float> %26, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %28 = fmul <4 x float> %21, %27
  %29 = fadd <4 x float> %28, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %30 = select <4 x i1> %6, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %31 = add nsw <4 x i32> %13, %30
  %32 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %31) #6
  %33 = fmul <4 x float> %32, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %34 = fmul <4 x float> %20, %29
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %35, %1
  %37 = fmul <4 x float> %36, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %37) #6
  %39 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %38) #6
  %40 = fmul <4 x float> %39, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %41 = fadd <4 x float> %40, %36
  %42 = fmul <4 x float> %39, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %43, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %45 = fadd <4 x float> %44, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %46 = fmul <4 x float> %43, %45
  %47 = fadd <4 x float> %46, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %48 = fmul <4 x float> %43, %47
  %49 = fadd <4 x float> %48, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %50 = fmul <4 x float> %43, %49
  %51 = fadd <4 x float> %50, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %52 = fmul <4 x float> %43, %51
  %53 = fadd <4 x float> %52, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %54 = fmul <4 x float> %43, %43
  %55 = fadd <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fmul <4 x float> %54, %53
  %57 = fadd <4 x float> %55, %56
  %58 = ashr <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %59 = shl <4 x i32> %58, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = fmul <4 x float> %57, %61
  %63 = sub <4 x i32> %38, %58
  %64 = shl <4 x i32> %63, <i32 23, i32 23, i32 23, i32 23>
  %65 = add <4 x i32> %64, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %66 = bitcast <4 x i32> %65 to <4 x float>
  %67 = fmul <4 x float> %62, %66
  %68 = fcmp olt <4 x float> %36, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %69 = sext <4 x i1> %68 to <4 x i32>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = bitcast <4 x float> %67 to <2 x i64>
  %72 = xor <2 x i64> %70, <i64 -1, i64 -1>
  %73 = and <2 x i64> %71, %72
  %74 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = fcmp oeq <4 x float> %75, %1
  %77 = bitcast <4 x float> %1 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 9223372034707292159, i64 9223372034707292159>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fcmp ogt <4 x float> %79, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %81 = or <4 x i1> %76, %80
  %82 = and <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  %83 = icmp ne <4 x i32> %82, zeroinitializer
  %84 = fcmp olt <4 x float> %79, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %85 = and <4 x i1> %83, %84
  %86 = and <4 x i1> %85, %81
  %87 = bitcast <4 x float> %0 to <4 x i32>
  %88 = ashr <4 x i32> %87, <i32 31, i32 31, i32 31, i32 31>
  %89 = select <4 x i1> %86, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = bitcast <2 x i64> %73 to <4 x i32>
  %91 = xor <4 x i32> %90, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %92 = and <4 x i32> %91, %89
  %93 = xor <4 x i32> %89, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = and <4 x i32> %90, %93
  %95 = or <4 x i32> %92, %94
  %96 = fcmp une <4 x float> %0, zeroinitializer
  %97 = fcmp oeq <4 x float> %1, zeroinitializer
  %98 = bitcast <4 x i32> %95 to <4 x float>
  %99 = select <4 x i1> %96, <4 x float> %98, <4 x float> zeroinitializer
  %100 = select <4 x i1> %97, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %99
  ret <4 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = fsub <4 x float> %156, %158
  %180 = fsub <4 x float> %156, %179
  %181 = fsub <4 x float> %180, %158
  %182 = fadd <4 x float> %181, %157
  %183 = fsub <4 x float> %182, %178
  %184 = fadd <4 x float> %179, %183
  %185 = fmul <4 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fcmp ogt <4 x float> %4, <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>
  %187 = fcmp uno <4 x float> %185, zeroinitializer
  %188 = or <4 x i1> %187, %186
  %189 = select <4 x i1> %188, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %185
  %190 = bitcast <4 x float> %189 to <2 x i64>
  %191 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %192 = xor <2 x i64> %191, %190
  %193 = fcmp uno <4 x float> %0, zeroinitializer
  %194 = sext <4 x i1> %193 to <4 x i32>
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = or <2 x i64> %192, %195
  %197 = bitcast <2 x i64> %196 to <4 x float>
  ret <4 x float> %197
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_coshf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = fadd <4 x float> %158, %156
  %180 = fsub <4 x float> %156, %179
  %181 = fadd <4 x float> %158, %180
  %182 = fadd <4 x float> %181, %157
  %183 = fadd <4 x float> %182, %178
  %184 = fadd <4 x float> %179, %183
  %185 = fmul <4 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fcmp ogt <4 x float> %4, <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>
  %187 = fcmp uno <4 x float> %185, zeroinitializer
  %188 = or <4 x i1> %187, %186
  %189 = select <4 x i1> %188, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %185
  %190 = fcmp uno <4 x float> %0, zeroinitializer
  %191 = sext <4 x i1> %190 to <4 x i32>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = bitcast <4 x float> %189 to <2 x i64>
  %194 = or <2 x i64> %193, %192
  %195 = bitcast <2 x i64> %194 to <4 x float>
  ret <4 x float> %195
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = bitcast <4 x float> %178 to <2 x i64>
  %180 = xor <2 x i64> %179, <i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = bitcast <2 x i64> %180 to <4 x float>
  %182 = fadd <4 x float> %156, %177
  %183 = fsub <4 x float> %156, %182
  %184 = fadd <4 x float> %183, %177
  %185 = fadd <4 x float> %184, %157
  %186 = fadd <4 x float> %185, %181
  %187 = fadd <4 x float> %158, %156
  %188 = fsub <4 x float> %156, %187
  %189 = fadd <4 x float> %158, %188
  %190 = fadd <4 x float> %189, %157
  %191 = fadd <4 x float> %190, %178
  %192 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %187
  %193 = bitcast <4 x float> %187 to <2 x i64>
  %194 = and <2 x i64> %193, <i64 -17587891081216, i64 -17587891081216>
  %195 = bitcast <2 x i64> %194 to <4 x float>
  %196 = fsub <4 x float> %187, %195
  %197 = bitcast <4 x float> %192 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -17587891081216, i64 -17587891081216>
  %199 = bitcast <2 x i64> %198 to <4 x float>
  %200 = fsub <4 x float> %192, %199
  %201 = bitcast <4 x float> %182 to <2 x i64>
  %202 = and <2 x i64> %201, <i64 -17587891081216, i64 -17587891081216>
  %203 = bitcast <2 x i64> %202 to <4 x float>
  %204 = fsub <4 x float> %182, %203
  %205 = fmul <4 x float> %192, %182
  %206 = fmul <4 x float> %195, %199
  %207 = fadd <4 x float> %206, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %208 = fmul <4 x float> %200, %195
  %209 = fadd <4 x float> %208, %207
  %210 = fmul <4 x float> %196, %199
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %196, %200
  %213 = fadd <4 x float> %212, %211
  %214 = bitcast <4 x float> %213 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372034707292160, i64 -9223372034707292160>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = bitcast <4 x float> %205 to <2 x i64>
  %218 = xor <2 x i64> %217, <i64 -9223372034707292160, i64 -9223372034707292160>
  %219 = bitcast <2 x i64> %218 to <4 x float>
  %220 = fmul <4 x float> %199, %203
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %200, %203
  %223 = fadd <4 x float> %222, %221
  %224 = fmul <4 x float> %204, %199
  %225 = fadd <4 x float> %224, %223
  %226 = fmul <4 x float> %200, %204
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %205, %216
  %229 = fadd <4 x float> %227, %228
  %230 = fmul <4 x float> %205, %191
  %231 = fsub <4 x float> %186, %230
  %232 = fmul <4 x float> %192, %231
  %233 = fadd <4 x float> %229, %232
  %234 = fadd <4 x float> %205, %233
  %235 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %236 = fcmp uno <4 x float> %234, zeroinitializer
  %237 = or <4 x i1> %236, %235
  %238 = select <4 x i1> %237, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %234
  %239 = bitcast <4 x float> %238 to <2 x i64>
  %240 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %241 = xor <2 x i64> %240, %239
  %242 = fcmp uno <4 x float> %0, zeroinitializer
  %243 = sext <4 x i1> %242 to <4 x i32>
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = or <2 x i64> %241, %244
  %246 = bitcast <2 x i64> %245 to <4 x float>
  ret <4 x float> %246
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinhf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <4 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <4 x float> %12, %17
  %21 = fadd <4 x float> %19, %20
  %22 = fmul <4 x float> %13, %15
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %12, %23
  %25 = fadd <4 x float> %11, %24
  %26 = icmp eq <4 x i32> %6, zeroinitializer
  %27 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = sub <4 x i32> %6, %28
  %34 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %35 = add <4 x i32> %34, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %32, %36
  %38 = fadd <4 x float> %37, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %39 = select <4 x i1> %26, <4 x float> %25, <4 x float> %38
  %40 = fadd <4 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %41 = fadd <4 x float> %39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fdiv <4 x float> %40, %41
  %43 = fmul <4 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fmul <4 x float> %43, %42
  %45 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %46 = fcmp uno <4 x float> %44, zeroinitializer
  %47 = or <4 x i1> %46, %45
  %48 = select <4 x i1> %47, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %44
  %49 = bitcast <4 x float> %48 to <2 x i64>
  %50 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %51 = xor <2 x i64> %50, %49
  %52 = fcmp uno <4 x float> %0, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = or <2 x i64> %51, %54
  %56 = bitcast <2 x i64> %55 to <4 x float>
  ret <4 x float> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_coshf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <4 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <4 x float> %11, %11
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %11, %23
  %25 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = sub <4 x i32> %6, %26
  %32 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = fmul <4 x float> %30, %34
  %36 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = bitcast <4 x float> %35 to <2 x i64>
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %39, %40
  %42 = fcmp ogt <4 x float> %4, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %43 = bitcast <2 x i64> %41 to <4 x float>
  %44 = select <4 x i1> %42, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %43
  %45 = fdiv <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %44
  %46 = fmul <4 x float> %44, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = fadd <4 x float> %46, %45
  %48 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %49 = fcmp uno <4 x float> %47, zeroinitializer
  %50 = or <4 x i1> %49, %48
  %51 = select <4 x i1> %50, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %47
  %52 = fcmp uno <4 x float> %0, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = bitcast <4 x float> %51 to <2 x i64>
  %56 = or <2 x i64> %55, %54
  %57 = bitcast <2 x i64> %56 to <4 x float>
  ret <4 x float> %57
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanhf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %5, %9
  %11 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <4 x float> %11, %10
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %13, %13
  %15 = fmul <4 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <4 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <4 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <4 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <4 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <4 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <4 x float> %13, %18
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %14, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %13, %24
  %26 = fadd <4 x float> %12, %25
  %27 = icmp eq <4 x i32> %7, zeroinitializer
  %28 = fadd <4 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %28, %32
  %34 = sub <4 x i32> %7, %29
  %35 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = fmul <4 x float> %33, %37
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = select <4 x i1> %27, <4 x float> %26, <4 x float> %39
  %41 = fadd <4 x float> %40, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %42 = fdiv <4 x float> %40, %41
  %43 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %44 = fcmp uno <4 x float> %42, zeroinitializer
  %45 = or <4 x i1> %44, %43
  %46 = select <4 x i1> %45, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %42
  %47 = bitcast <4 x float> %46 to <2 x i64>
  %48 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = xor <2 x i64> %48, %47
  %50 = fcmp uno <4 x float> %0, zeroinitializer
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = or <2 x i64> %49, %52
  %54 = bitcast <2 x i64> %53 to <4 x float>
  ret <4 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %8 = and <2 x i64> %2, <i64 -17587891081216, i64 -17587891081216>
  %9 = bitcast <2 x i64> %8 to <4 x float>
  %10 = fsub <4 x float> %0, %9
  %11 = bitcast <4 x float> %7 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 -17587891081216, i64 -17587891081216>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = fsub <4 x float> %7, %13
  %15 = fmul <4 x float> %9, %13
  %16 = fadd <4 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %17 = fmul <4 x float> %14, %9
  %18 = fadd <4 x float> %17, %16
  %19 = fmul <4 x float> %10, %13
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %10, %14
  %22 = fadd <4 x float> %21, %20
  %23 = xor <2 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fmul <4 x float> %22, %24
  %26 = bitcast <4 x float> %7 to <4 x i32>
  %27 = and <4 x i32> %6, %26
  %28 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %29 = bitcast <2 x i64> %3 to <4 x i32>
  %30 = and <4 x i32> %28, %29
  %31 = or <4 x i32> %30, %27
  %32 = bitcast <4 x float> %25 to <4 x i32>
  %33 = and <4 x i32> %32, %6
  %34 = bitcast <4 x i32> %31 to <4 x float>
  %35 = bitcast <4 x i32> %33 to <4 x float>
  %36 = bitcast <4 x i32> %31 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %38 = bitcast <2 x i64> %37 to <4 x float>
  %39 = fsub <4 x float> %34, %38
  %40 = fmul <4 x float> %34, %34
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fmul <4 x float> %38, %38
  %45 = fadd <4 x float> %44, %43
  %46 = fadd <4 x float> %38, %38
  %47 = fmul <4 x float> %46, %39
  %48 = fadd <4 x float> %47, %45
  %49 = fmul <4 x float> %39, %39
  %50 = fadd <4 x float> %49, %48
  %51 = fadd <4 x float> %35, %35
  %52 = fmul <4 x float> %51, %34
  %53 = fadd <4 x float> %52, %50
  %54 = fadd <4 x float> %40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fsub <4 x float> %54, %40
  %56 = fsub <4 x float> %54, %55
  %57 = fsub <4 x float> %40, %56
  %58 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %59 = fadd <4 x float> %58, %57
  %60 = fadd <4 x float> %59, %53
  %61 = fadd <4 x float> %54, %60
  %62 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %61) #6
  %63 = bitcast <4 x float> %62 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %62, %65
  %67 = fmul <4 x float> %62, %62
  %68 = bitcast <4 x float> %67 to <2 x i64>
  %69 = xor <2 x i64> %68, <i64 -9223372034707292160, i64 -9223372034707292160>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = fmul <4 x float> %65, %65
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %66, %65
  %74 = fadd <4 x float> %73, %72
  %75 = fadd <4 x float> %73, %74
  %76 = fmul <4 x float> %66, %66
  %77 = fadd <4 x float> %76, %75
  %78 = fadd <4 x float> %54, %67
  %79 = fsub <4 x float> %78, %54
  %80 = fsub <4 x float> %78, %79
  %81 = fsub <4 x float> %54, %80
  %82 = fsub <4 x float> %67, %79
  %83 = fadd <4 x float> %82, %81
  %84 = fadd <4 x float> %60, %77
  %85 = fadd <4 x float> %83, %84
  %86 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %62
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 -17587891081216, i64 -17587891081216>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fsub <4 x float> %86, %89
  %91 = fmul <4 x float> %65, %89
  %92 = fadd <4 x float> %91, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %93 = fmul <4 x float> %90, %65
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %66, %89
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %66, %90
  %98 = fadd <4 x float> %97, %96
  %99 = xor <2 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fmul <4 x float> %98, %100
  %102 = bitcast <4 x float> %78 to <2 x i64>
  %103 = and <2 x i64> %102, <i64 -17587891081216, i64 -17587891081216>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fsub <4 x float> %78, %104
  %106 = fmul <4 x float> %86, %78
  %107 = bitcast <4 x float> %106 to <2 x i64>
  %108 = xor <2 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = fmul <4 x float> %89, %104
  %111 = fadd <4 x float> %110, %109
  %112 = fmul <4 x float> %105, %89
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %90, %104
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %90, %105
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %78, %101
  %119 = fadd <4 x float> %117, %118
  %120 = fmul <4 x float> %86, %85
  %121 = fadd <4 x float> %120, %119
  %122 = fmul <4 x float> %106, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %123 = fmul <4 x float> %121, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %124 = bitcast <4 x float> %122 to <4 x i32>
  %125 = bitcast <4 x float> %123 to <4 x i32>
  %126 = bitcast <4 x float> %122 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -17587891081216, i64 -17587891081216>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fsub <4 x float> %122, %128
  %130 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %131 = bitcast <2 x i64> %130 to <4 x float>
  %132 = fsub <4 x float> %4, %131
  %133 = fmul <4 x float> %122, %4
  %134 = bitcast <4 x float> %133 to <2 x i64>
  %135 = xor <2 x i64> %134, <i64 -9223372034707292160, i64 -9223372034707292160>
  %136 = bitcast <2 x i64> %135 to <4 x float>
  %137 = fmul <4 x float> %131, %128
  %138 = fadd <4 x float> %137, %136
  %139 = fmul <4 x float> %129, %131
  %140 = fadd <4 x float> %139, %138
  %141 = fmul <4 x float> %132, %128
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %132, %129
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %123, %4
  %146 = fadd <4 x float> %144, %145
  %147 = bitcast <4 x float> %133 to <4 x i32>
  %148 = and <4 x i32> %147, %6
  %149 = and <4 x i32> %124, %28
  %150 = or <4 x i32> %148, %149
  %151 = bitcast <4 x float> %146 to <4 x i32>
  %152 = and <4 x i32> %151, %6
  %153 = and <4 x i32> %125, %28
  %154 = or <4 x i32> %152, %153
  %155 = bitcast <4 x i32> %150 to <4 x float>
  %156 = bitcast <4 x i32> %154 to <4 x float>
  %157 = fadd <4 x float> %155, %0
  %158 = fsub <4 x float> %157, %155
  %159 = fsub <4 x float> %157, %158
  %160 = fsub <4 x float> %155, %159
  %161 = fsub <4 x float> %0, %158
  %162 = fadd <4 x float> %161, %160
  %163 = fadd <4 x float> %162, %156
  %164 = fadd <4 x float> %157, %163
  %165 = fsub <4 x float> %157, %164
  %166 = fadd <4 x float> %163, %165
  %167 = fmul <4 x float> %164, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %168 = fcmp olt <4 x float> %167, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = fmul <4 x float> %167, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %172 = select <4 x i1> %168, <4 x float> %171, <4 x float> %167
  %173 = bitcast <4 x float> %172 to <4 x i32>
  %174 = lshr <4 x i32> %173, <i32 23, i32 23, i32 23, i32 23>
  %175 = and <2 x i64> %170, <i64 820338753727, i64 820338753727>
  %176 = and <2 x i64> %170, <i64 545460846719, i64 545460846719>
  %177 = xor <2 x i64> %176, <i64 545460846719, i64 545460846719>
  %178 = or <2 x i64> %177, %175
  %179 = and <4 x i32> %174, <i32 255, i32 255, i32 255, i32 255>
  %180 = bitcast <2 x i64> %178 to <4 x i32>
  %181 = sub <4 x i32> %179, %180
  %182 = shl <4 x i32> %181, <i32 23, i32 23, i32 23, i32 23>
  %183 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %182
  %184 = bitcast <4 x i32> %183 to <4 x float>
  %185 = fmul <4 x float> %164, %184
  %186 = fmul <4 x float> %166, %184
  %187 = fadd <4 x float> %185, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %188 = fsub <4 x float> %187, %185
  %189 = fsub <4 x float> %187, %188
  %190 = fsub <4 x float> %185, %189
  %191 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %188
  %192 = fadd <4 x float> %191, %190
  %193 = fadd <4 x float> %186, %192
  %194 = fadd <4 x float> %185, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %195 = fsub <4 x float> %194, %185
  %196 = fsub <4 x float> %194, %195
  %197 = fsub <4 x float> %185, %196
  %198 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %195
  %199 = fadd <4 x float> %198, %197
  %200 = fadd <4 x float> %186, %199
  %201 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %194
  %202 = bitcast <4 x float> %194 to <2 x i64>
  %203 = and <2 x i64> %202, <i64 -17587891081216, i64 -17587891081216>
  %204 = bitcast <2 x i64> %203 to <4 x float>
  %205 = fsub <4 x float> %194, %204
  %206 = bitcast <4 x float> %201 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -17587891081216, i64 -17587891081216>
  %208 = bitcast <2 x i64> %207 to <4 x float>
  %209 = fsub <4 x float> %201, %208
  %210 = bitcast <4 x float> %187 to <2 x i64>
  %211 = and <2 x i64> %210, <i64 -17587891081216, i64 -17587891081216>
  %212 = bitcast <2 x i64> %211 to <4 x float>
  %213 = fsub <4 x float> %187, %212
  %214 = fmul <4 x float> %187, %201
  %215 = fmul <4 x float> %204, %208
  %216 = fadd <4 x float> %215, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %217 = fmul <4 x float> %209, %204
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %205, %208
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %205, %209
  %222 = fadd <4 x float> %221, %220
  %223 = bitcast <4 x float> %222 to <2 x i64>
  %224 = xor <2 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <2 x i64> %224 to <4 x float>
  %226 = bitcast <4 x float> %214 to <2 x i64>
  %227 = xor <2 x i64> %226, <i64 -9223372034707292160, i64 -9223372034707292160>
  %228 = bitcast <2 x i64> %227 to <4 x float>
  %229 = fmul <4 x float> %212, %208
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %209, %212
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %213, %208
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %213, %209
  %236 = fadd <4 x float> %235, %234
  %237 = fmul <4 x float> %214, %225
  %238 = fadd <4 x float> %236, %237
  %239 = fmul <4 x float> %214, %200
  %240 = fsub <4 x float> %193, %239
  %241 = fmul <4 x float> %201, %240
  %242 = fadd <4 x float> %241, %238
  %243 = and <2 x i64> %226, <i64 -17587891081216, i64 -17587891081216>
  %244 = bitcast <2 x i64> %243 to <4 x float>
  %245 = fsub <4 x float> %214, %244
  %246 = fmul <4 x float> %214, %214
  %247 = bitcast <4 x float> %246 to <2 x i64>
  %248 = xor <2 x i64> %247, <i64 -9223372034707292160, i64 -9223372034707292160>
  %249 = bitcast <2 x i64> %248 to <4 x float>
  %250 = fmul <4 x float> %244, %244
  %251 = fadd <4 x float> %250, %249
  %252 = fadd <4 x float> %244, %244
  %253 = fmul <4 x float> %252, %245
  %254 = fadd <4 x float> %253, %251
  %255 = fmul <4 x float> %245, %245
  %256 = fadd <4 x float> %255, %254
  %257 = fadd <4 x float> %242, %242
  %258 = fmul <4 x float> %214, %257
  %259 = fadd <4 x float> %256, %258
  %260 = fmul <4 x float> %246, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %261 = fadd <4 x float> %260, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %262 = fmul <4 x float> %246, %261
  %263 = fadd <4 x float> %262, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %264 = fmul <4 x float> %246, %263
  %265 = fadd <4 x float> %264, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %266 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %181) #6
  %267 = bitcast <4 x float> %266 to <2 x i64>
  %268 = and <2 x i64> %267, <i64 -17587891081216, i64 -17587891081216>
  %269 = bitcast <2 x i64> %268 to <4 x float>
  %270 = fsub <4 x float> %266, %269
  %271 = fmul <4 x float> %266, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %272 = bitcast <4 x float> %271 to <2 x i64>
  %273 = xor <2 x i64> %272, <i64 -9223372034707292160, i64 -9223372034707292160>
  %274 = bitcast <2 x i64> %273 to <4 x float>
  %275 = fmul <4 x float> %269, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %276 = fadd <4 x float> %275, %274
  %277 = fmul <4 x float> %269, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %278 = fadd <4 x float> %277, %276
  %279 = fmul <4 x float> %270, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %270, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %266, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %284 = fadd <4 x float> %283, %282
  %285 = fmul <4 x float> %214, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %286 = fmul <4 x float> %242, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %287 = fadd <4 x float> %271, %285
  %288 = fsub <4 x float> %271, %287
  %289 = fadd <4 x float> %285, %288
  %290 = fadd <4 x float> %284, %289
  %291 = fadd <4 x float> %290, %286
  %292 = and <2 x i64> %247, <i64 -17587891081216, i64 -17587891081216>
  %293 = bitcast <2 x i64> %292 to <4 x float>
  %294 = fsub <4 x float> %246, %293
  %295 = fmul <4 x float> %214, %246
  %296 = bitcast <4 x float> %295 to <2 x i64>
  %297 = xor <2 x i64> %296, <i64 -9223372034707292160, i64 -9223372034707292160>
  %298 = bitcast <2 x i64> %297 to <4 x float>
  %299 = fmul <4 x float> %244, %293
  %300 = fadd <4 x float> %299, %298
  %301 = fmul <4 x float> %294, %244
  %302 = fadd <4 x float> %301, %300
  %303 = fmul <4 x float> %245, %293
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %245, %294
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %246, %242
  %308 = fadd <4 x float> %306, %307
  %309 = fmul <4 x float> %214, %259
  %310 = fadd <4 x float> %308, %309
  %311 = and <2 x i64> %296, <i64 -17587891081216, i64 -17587891081216>
  %312 = bitcast <2 x i64> %311 to <4 x float>
  %313 = fsub <4 x float> %295, %312
  %314 = bitcast <4 x float> %265 to <2 x i64>
  %315 = and <2 x i64> %314, <i64 -17587891081216, i64 -17587891081216>
  %316 = bitcast <2 x i64> %315 to <4 x float>
  %317 = fsub <4 x float> %265, %316
  %318 = fmul <4 x float> %295, %265
  %319 = bitcast <4 x float> %318 to <2 x i64>
  %320 = xor <2 x i64> %319, <i64 -9223372034707292160, i64 -9223372034707292160>
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fmul <4 x float> %312, %316
  %323 = fadd <4 x float> %322, %321
  %324 = fmul <4 x float> %313, %316
  %325 = fadd <4 x float> %324, %323
  %326 = fmul <4 x float> %317, %312
  %327 = fadd <4 x float> %326, %325
  %328 = fmul <4 x float> %313, %317
  %329 = fadd <4 x float> %328, %327
  %330 = fmul <4 x float> %265, %310
  %331 = fadd <4 x float> %329, %330
  %332 = fadd <4 x float> %287, %318
  %333 = fsub <4 x float> %287, %332
  %334 = fadd <4 x float> %318, %333
  %335 = fadd <4 x float> %334, %291
  %336 = fadd <4 x float> %335, %331
  %337 = fadd <4 x float> %332, %336
  %338 = fcmp ogt <4 x float> %4, <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>
  %339 = fcmp uno <4 x float> %337, zeroinitializer
  %340 = or <4 x i1> %339, %338
  %341 = bitcast <4 x float> %0 to <4 x i32>
  %342 = and <4 x i32> %341, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %343 = or <4 x i32> %342, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %344 = fcmp uno <4 x float> %0, zeroinitializer
  %345 = icmp eq <4 x i32> %341, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %346 = bitcast <4 x i32> %343 to <4 x float>
  %347 = select <4 x i1> %340, <4 x float> %346, <4 x float> %337
  %348 = select <4 x i1> %344, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %347
  %349 = select <4 x i1> %345, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %348
  ret <4 x float> %349
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acoshf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <4 x float> %2, %0
  %4 = fsub <4 x float> %2, %3
  %5 = fsub <4 x float> %0, %4
  %6 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <4 x float> %6, %5
  %8 = fadd <4 x float> %2, %7
  %9 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -17587891081216, i64 -17587891081216>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fsub <4 x float> %9, %12
  %14 = fmul <4 x float> %9, %9
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = xor <2 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <2 x i64> %16 to <4 x float>
  %18 = fmul <4 x float> %12, %12
  %19 = fadd <4 x float> %18, %17
  %20 = fmul <4 x float> %13, %12
  %21 = fadd <4 x float> %20, %19
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %13, %13
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %2, %14
  %26 = fsub <4 x float> %25, %2
  %27 = fsub <4 x float> %25, %26
  %28 = fsub <4 x float> %2, %27
  %29 = fsub <4 x float> %14, %26
  %30 = fadd <4 x float> %29, %28
  %31 = fadd <4 x float> %7, %24
  %32 = fadd <4 x float> %30, %31
  %33 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %34 = bitcast <4 x float> %33 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fsub <4 x float> %33, %36
  %38 = fmul <4 x float> %12, %36
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = fmul <4 x float> %37, %12
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %13, %36
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %13, %37
  %45 = fadd <4 x float> %44, %43
  %46 = xor <2 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fmul <4 x float> %45, %47
  %49 = bitcast <4 x float> %25 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %25, %51
  %53 = fmul <4 x float> %33, %25
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %36, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %52, %36
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %37, %51
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %37, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %25, %48
  %66 = fadd <4 x float> %64, %65
  %67 = fmul <4 x float> %33, %32
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %53, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %70 = fmul <4 x float> %68, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fadd <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %72 = fsub <4 x float> %71, %0
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %0, %73
  %75 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %71, %76
  %78 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %77) #6
  %79 = bitcast <4 x float> %78 to <2 x i64>
  %80 = and <2 x i64> %79, <i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fsub <4 x float> %78, %81
  %83 = fmul <4 x float> %78, %78
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fmul <4 x float> %81, %81
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %82, %81
  %90 = fadd <4 x float> %89, %88
  %91 = fadd <4 x float> %89, %90
  %92 = fmul <4 x float> %82, %82
  %93 = fadd <4 x float> %92, %91
  %94 = fadd <4 x float> %71, %83
  %95 = fsub <4 x float> %94, %71
  %96 = fsub <4 x float> %94, %95
  %97 = fsub <4 x float> %71, %96
  %98 = fsub <4 x float> %83, %95
  %99 = fadd <4 x float> %98, %97
  %100 = fadd <4 x float> %76, %93
  %101 = fadd <4 x float> %99, %100
  %102 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <2 x i64> %104 to <4 x float>
  %106 = fsub <4 x float> %102, %105
  %107 = fmul <4 x float> %81, %105
  %108 = fadd <4 x float> %107, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %109 = fmul <4 x float> %106, %81
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %82, %105
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %82, %106
  %114 = fadd <4 x float> %113, %112
  %115 = xor <2 x i64> %103, <i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fmul <4 x float> %114, %116
  %118 = bitcast <4 x float> %94 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fsub <4 x float> %94, %120
  %122 = fmul <4 x float> %102, %94
  %123 = bitcast <4 x float> %122 to <2 x i64>
  %124 = xor <2 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <2 x i64> %124 to <4 x float>
  %126 = fmul <4 x float> %105, %120
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %121, %105
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %106, %120
  %131 = fadd <4 x float> %130, %129
  %132 = fmul <4 x float> %106, %121
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %94, %117
  %135 = fadd <4 x float> %133, %134
  %136 = fmul <4 x float> %102, %101
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %122, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %139 = fmul <4 x float> %137, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %140 = bitcast <4 x float> %69 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fsub <4 x float> %69, %142
  %144 = bitcast <4 x float> %138 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fsub <4 x float> %138, %146
  %148 = fmul <4 x float> %69, %138
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fmul <4 x float> %142, %146
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %143, %146
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %147, %142
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %143, %147
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %69, %139
  %161 = fadd <4 x float> %159, %160
  %162 = fmul <4 x float> %138, %70
  %163 = fadd <4 x float> %162, %161
  %164 = fadd <4 x float> %148, %0
  %165 = fsub <4 x float> %164, %148
  %166 = fsub <4 x float> %164, %165
  %167 = fsub <4 x float> %148, %166
  %168 = fsub <4 x float> %0, %165
  %169 = fadd <4 x float> %168, %167
  %170 = fadd <4 x float> %169, %163
  %171 = fmul <4 x float> %164, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %172 = fcmp olt <4 x float> %171, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = fmul <4 x float> %171, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %176 = select <4 x i1> %172, <4 x float> %175, <4 x float> %171
  %177 = bitcast <4 x float> %176 to <4 x i32>
  %178 = lshr <4 x i32> %177, <i32 23, i32 23, i32 23, i32 23>
  %179 = and <2 x i64> %174, <i64 820338753727, i64 820338753727>
  %180 = and <2 x i64> %174, <i64 545460846719, i64 545460846719>
  %181 = xor <2 x i64> %180, <i64 545460846719, i64 545460846719>
  %182 = or <2 x i64> %181, %179
  %183 = and <4 x i32> %178, <i32 255, i32 255, i32 255, i32 255>
  %184 = bitcast <2 x i64> %182 to <4 x i32>
  %185 = sub <4 x i32> %183, %184
  %186 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %187 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %186
  %188 = bitcast <4 x i32> %187 to <4 x float>
  %189 = fmul <4 x float> %164, %188
  %190 = fmul <4 x float> %170, %188
  %191 = fadd <4 x float> %189, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %192 = fsub <4 x float> %191, %189
  %193 = fsub <4 x float> %191, %192
  %194 = fsub <4 x float> %189, %193
  %195 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %192
  %196 = fadd <4 x float> %195, %194
  %197 = fadd <4 x float> %190, %196
  %198 = fadd <4 x float> %189, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %199 = fsub <4 x float> %198, %189
  %200 = fsub <4 x float> %198, %199
  %201 = fsub <4 x float> %189, %200
  %202 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %199
  %203 = fadd <4 x float> %202, %201
  %204 = fadd <4 x float> %190, %203
  %205 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %198
  %206 = bitcast <4 x float> %198 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -17587891081216, i64 -17587891081216>
  %208 = bitcast <2 x i64> %207 to <4 x float>
  %209 = fsub <4 x float> %198, %208
  %210 = bitcast <4 x float> %205 to <2 x i64>
  %211 = and <2 x i64> %210, <i64 -17587891081216, i64 -17587891081216>
  %212 = bitcast <2 x i64> %211 to <4 x float>
  %213 = fsub <4 x float> %205, %212
  %214 = bitcast <4 x float> %191 to <2 x i64>
  %215 = and <2 x i64> %214, <i64 -17587891081216, i64 -17587891081216>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = fsub <4 x float> %191, %216
  %218 = fmul <4 x float> %191, %205
  %219 = fmul <4 x float> %208, %212
  %220 = fadd <4 x float> %219, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %221 = fmul <4 x float> %213, %208
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %209, %212
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %209, %213
  %226 = fadd <4 x float> %225, %224
  %227 = bitcast <4 x float> %226 to <2 x i64>
  %228 = xor <2 x i64> %227, <i64 -9223372034707292160, i64 -9223372034707292160>
  %229 = bitcast <2 x i64> %228 to <4 x float>
  %230 = bitcast <4 x float> %218 to <2 x i64>
  %231 = xor <2 x i64> %230, <i64 -9223372034707292160, i64 -9223372034707292160>
  %232 = bitcast <2 x i64> %231 to <4 x float>
  %233 = fmul <4 x float> %216, %212
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %213, %216
  %236 = fadd <4 x float> %235, %234
  %237 = fmul <4 x float> %217, %212
  %238 = fadd <4 x float> %237, %236
  %239 = fmul <4 x float> %217, %213
  %240 = fadd <4 x float> %239, %238
  %241 = fmul <4 x float> %218, %229
  %242 = fadd <4 x float> %240, %241
  %243 = fmul <4 x float> %218, %204
  %244 = fsub <4 x float> %197, %243
  %245 = fmul <4 x float> %205, %244
  %246 = fadd <4 x float> %245, %242
  %247 = and <2 x i64> %230, <i64 -17587891081216, i64 -17587891081216>
  %248 = bitcast <2 x i64> %247 to <4 x float>
  %249 = fsub <4 x float> %218, %248
  %250 = fmul <4 x float> %218, %218
  %251 = bitcast <4 x float> %250 to <2 x i64>
  %252 = xor <2 x i64> %251, <i64 -9223372034707292160, i64 -9223372034707292160>
  %253 = bitcast <2 x i64> %252 to <4 x float>
  %254 = fmul <4 x float> %248, %248
  %255 = fadd <4 x float> %254, %253
  %256 = fadd <4 x float> %248, %248
  %257 = fmul <4 x float> %256, %249
  %258 = fadd <4 x float> %257, %255
  %259 = fmul <4 x float> %249, %249
  %260 = fadd <4 x float> %259, %258
  %261 = fadd <4 x float> %246, %246
  %262 = fmul <4 x float> %218, %261
  %263 = fadd <4 x float> %260, %262
  %264 = fmul <4 x float> %250, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %265 = fadd <4 x float> %264, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %266 = fmul <4 x float> %250, %265
  %267 = fadd <4 x float> %266, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %268 = fmul <4 x float> %250, %267
  %269 = fadd <4 x float> %268, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %270 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %185) #6
  %271 = bitcast <4 x float> %270 to <2 x i64>
  %272 = and <2 x i64> %271, <i64 -17587891081216, i64 -17587891081216>
  %273 = bitcast <2 x i64> %272 to <4 x float>
  %274 = fsub <4 x float> %270, %273
  %275 = fmul <4 x float> %270, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %276 = bitcast <4 x float> %275 to <2 x i64>
  %277 = xor <2 x i64> %276, <i64 -9223372034707292160, i64 -9223372034707292160>
  %278 = bitcast <2 x i64> %277 to <4 x float>
  %279 = fmul <4 x float> %273, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %273, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %274, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %284 = fadd <4 x float> %283, %282
  %285 = fmul <4 x float> %274, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %286 = fadd <4 x float> %285, %284
  %287 = fmul <4 x float> %270, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %288 = fadd <4 x float> %287, %286
  %289 = fmul <4 x float> %218, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %290 = fmul <4 x float> %246, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %291 = fadd <4 x float> %275, %289
  %292 = fsub <4 x float> %275, %291
  %293 = fadd <4 x float> %289, %292
  %294 = fadd <4 x float> %288, %293
  %295 = fadd <4 x float> %294, %290
  %296 = and <2 x i64> %251, <i64 -17587891081216, i64 -17587891081216>
  %297 = bitcast <2 x i64> %296 to <4 x float>
  %298 = fsub <4 x float> %250, %297
  %299 = fmul <4 x float> %218, %250
  %300 = bitcast <4 x float> %299 to <2 x i64>
  %301 = xor <2 x i64> %300, <i64 -9223372034707292160, i64 -9223372034707292160>
  %302 = bitcast <2 x i64> %301 to <4 x float>
  %303 = fmul <4 x float> %248, %297
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %298, %248
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %249, %297
  %308 = fadd <4 x float> %307, %306
  %309 = fmul <4 x float> %249, %298
  %310 = fadd <4 x float> %309, %308
  %311 = fmul <4 x float> %250, %246
  %312 = fadd <4 x float> %310, %311
  %313 = fmul <4 x float> %218, %263
  %314 = fadd <4 x float> %312, %313
  %315 = and <2 x i64> %300, <i64 -17587891081216, i64 -17587891081216>
  %316 = bitcast <2 x i64> %315 to <4 x float>
  %317 = fsub <4 x float> %299, %316
  %318 = bitcast <4 x float> %269 to <2 x i64>
  %319 = and <2 x i64> %318, <i64 -17587891081216, i64 -17587891081216>
  %320 = bitcast <2 x i64> %319 to <4 x float>
  %321 = fsub <4 x float> %269, %320
  %322 = fmul <4 x float> %299, %269
  %323 = bitcast <4 x float> %322 to <2 x i64>
  %324 = xor <2 x i64> %323, <i64 -9223372034707292160, i64 -9223372034707292160>
  %325 = bitcast <2 x i64> %324 to <4 x float>
  %326 = fmul <4 x float> %316, %320
  %327 = fadd <4 x float> %326, %325
  %328 = fmul <4 x float> %317, %320
  %329 = fadd <4 x float> %328, %327
  %330 = fmul <4 x float> %321, %316
  %331 = fadd <4 x float> %330, %329
  %332 = fmul <4 x float> %317, %321
  %333 = fadd <4 x float> %332, %331
  %334 = fmul <4 x float> %269, %314
  %335 = fadd <4 x float> %333, %334
  %336 = fadd <4 x float> %291, %322
  %337 = fsub <4 x float> %291, %336
  %338 = fadd <4 x float> %322, %337
  %339 = fadd <4 x float> %338, %295
  %340 = fadd <4 x float> %339, %335
  %341 = fadd <4 x float> %336, %340
  %342 = bitcast <4 x float> %0 to <2 x i64>
  %343 = and <2 x i64> %342, <i64 9223372034707292159, i64 9223372034707292159>
  %344 = bitcast <2 x i64> %343 to <4 x float>
  %345 = fcmp ogt <4 x float> %344, <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>
  %346 = fcmp uno <4 x float> %341, zeroinitializer
  %347 = or <4 x i1> %346, %345
  %348 = select <4 x i1> %347, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %341
  %349 = fcmp oeq <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %350 = sext <4 x i1> %349 to <4 x i32>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = bitcast <4 x float> %348 to <2 x i64>
  %353 = xor <2 x i64> %351, <i64 -1, i64 -1>
  %354 = and <2 x i64> %352, %353
  %355 = fcmp olt <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %356 = fcmp uno <4 x float> %0, zeroinitializer
  %357 = or <4 x i1> %356, %355
  %358 = sext <4 x i1> %357 to <4 x i32>
  %359 = bitcast <4 x i32> %358 to <2 x i64>
  %360 = or <2 x i64> %354, %359
  %361 = bitcast <2 x i64> %360 to <4 x float>
  ret <4 x float> %361
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atanhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <4 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <4 x float> %5, %6
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <4 x float> %4, %6
  %10 = fadd <4 x float> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <4 x float> %13, %14
  %16 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <4 x float> %12, %14
  %18 = fadd <4 x float> %17, %16
  %19 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = bitcast <4 x float> %13 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = fsub <4 x float> %13, %22
  %24 = bitcast <4 x float> %19 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %19, %26
  %28 = bitcast <4 x float> %5 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %5, %30
  %32 = fmul <4 x float> %5, %19
  %33 = fmul <4 x float> %22, %26
  %34 = fadd <4 x float> %33, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %35 = fmul <4 x float> %27, %22
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %23, %26
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %23, %27
  %40 = fadd <4 x float> %39, %38
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = bitcast <4 x float> %32 to <2 x i64>
  %45 = xor <2 x i64> %44, <i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = fmul <4 x float> %30, %26
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %27, %30
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %31, %26
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %31, %27
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %32, %43
  %56 = fadd <4 x float> %54, %55
  %57 = fmul <4 x float> %32, %18
  %58 = fsub <4 x float> %10, %57
  %59 = fmul <4 x float> %19, %58
  %60 = fadd <4 x float> %59, %56
  %61 = fmul <4 x float> %32, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %62 = fcmp olt <4 x float> %61, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = fmul <4 x float> %61, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %66 = select <4 x i1> %62, <4 x float> %65, <4 x float> %61
  %67 = bitcast <4 x float> %66 to <4 x i32>
  %68 = lshr <4 x i32> %67, <i32 23, i32 23, i32 23, i32 23>
  %69 = and <2 x i64> %64, <i64 820338753727, i64 820338753727>
  %70 = and <2 x i64> %64, <i64 545460846719, i64 545460846719>
  %71 = xor <2 x i64> %70, <i64 545460846719, i64 545460846719>
  %72 = or <2 x i64> %71, %69
  %73 = and <4 x i32> %68, <i32 255, i32 255, i32 255, i32 255>
  %74 = bitcast <2 x i64> %72 to <4 x i32>
  %75 = sub <4 x i32> %73, %74
  %76 = shl <4 x i32> %75, <i32 23, i32 23, i32 23, i32 23>
  %77 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %76
  %78 = bitcast <4 x i32> %77 to <4 x float>
  %79 = fmul <4 x float> %32, %78
  %80 = fmul <4 x float> %60, %78
  %81 = fadd <4 x float> %79, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %82 = fsub <4 x float> %81, %79
  %83 = fsub <4 x float> %81, %82
  %84 = fsub <4 x float> %79, %83
  %85 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %82
  %86 = fadd <4 x float> %85, %84
  %87 = fadd <4 x float> %80, %86
  %88 = fadd <4 x float> %79, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %89 = fsub <4 x float> %88, %79
  %90 = fsub <4 x float> %88, %89
  %91 = fsub <4 x float> %79, %90
  %92 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %89
  %93 = fadd <4 x float> %92, %91
  %94 = fadd <4 x float> %80, %93
  %95 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %88
  %96 = bitcast <4 x float> %88 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -17587891081216, i64 -17587891081216>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fsub <4 x float> %88, %98
  %100 = bitcast <4 x float> %95 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %95, %102
  %104 = bitcast <4 x float> %81 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %81, %106
  %108 = fmul <4 x float> %81, %95
  %109 = fmul <4 x float> %98, %102
  %110 = fadd <4 x float> %109, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %111 = fmul <4 x float> %103, %98
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %99, %102
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %99, %103
  %116 = fadd <4 x float> %115, %114
  %117 = bitcast <4 x float> %116 to <2 x i64>
  %118 = xor <2 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160>
  %119 = bitcast <2 x i64> %118 to <4 x float>
  %120 = bitcast <4 x float> %108 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fmul <4 x float> %106, %102
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %103, %106
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %107, %102
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %107, %103
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %108, %119
  %132 = fadd <4 x float> %130, %131
  %133 = fmul <4 x float> %108, %94
  %134 = fsub <4 x float> %87, %133
  %135 = fmul <4 x float> %95, %134
  %136 = fadd <4 x float> %135, %132
  %137 = and <2 x i64> %120, <i64 -17587891081216, i64 -17587891081216>
  %138 = bitcast <2 x i64> %137 to <4 x float>
  %139 = fsub <4 x float> %108, %138
  %140 = fmul <4 x float> %108, %108
  %141 = bitcast <4 x float> %140 to <2 x i64>
  %142 = xor <2 x i64> %141, <i64 -9223372034707292160, i64 -9223372034707292160>
  %143 = bitcast <2 x i64> %142 to <4 x float>
  %144 = fmul <4 x float> %138, %138
  %145 = fadd <4 x float> %144, %143
  %146 = fadd <4 x float> %138, %138
  %147 = fmul <4 x float> %146, %139
  %148 = fadd <4 x float> %147, %145
  %149 = fmul <4 x float> %139, %139
  %150 = fadd <4 x float> %149, %148
  %151 = fadd <4 x float> %136, %136
  %152 = fmul <4 x float> %108, %151
  %153 = fadd <4 x float> %150, %152
  %154 = fmul <4 x float> %140, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %155 = fadd <4 x float> %154, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %156 = fmul <4 x float> %140, %155
  %157 = fadd <4 x float> %156, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %158 = fmul <4 x float> %140, %157
  %159 = fadd <4 x float> %158, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %160 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %75) #6
  %161 = bitcast <4 x float> %160 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -17587891081216, i64 -17587891081216>
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = fsub <4 x float> %160, %163
  %165 = fmul <4 x float> %160, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %166 = bitcast <4 x float> %165 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fmul <4 x float> %163, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %170 = fadd <4 x float> %169, %168
  %171 = fmul <4 x float> %163, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %172 = fadd <4 x float> %171, %170
  %173 = fmul <4 x float> %164, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %164, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %160, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %178 = fadd <4 x float> %177, %176
  %179 = fmul <4 x float> %108, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %180 = fmul <4 x float> %136, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %181 = fadd <4 x float> %179, %165
  %182 = fsub <4 x float> %165, %181
  %183 = fadd <4 x float> %179, %182
  %184 = fadd <4 x float> %183, %178
  %185 = fadd <4 x float> %180, %184
  %186 = and <2 x i64> %141, <i64 -17587891081216, i64 -17587891081216>
  %187 = bitcast <2 x i64> %186 to <4 x float>
  %188 = fsub <4 x float> %140, %187
  %189 = fmul <4 x float> %108, %140
  %190 = bitcast <4 x float> %189 to <2 x i64>
  %191 = xor <2 x i64> %190, <i64 -9223372034707292160, i64 -9223372034707292160>
  %192 = bitcast <2 x i64> %191 to <4 x float>
  %193 = fmul <4 x float> %138, %187
  %194 = fadd <4 x float> %193, %192
  %195 = fmul <4 x float> %188, %138
  %196 = fadd <4 x float> %195, %194
  %197 = fmul <4 x float> %139, %187
  %198 = fadd <4 x float> %197, %196
  %199 = fmul <4 x float> %139, %188
  %200 = fadd <4 x float> %199, %198
  %201 = fmul <4 x float> %140, %136
  %202 = fadd <4 x float> %200, %201
  %203 = fmul <4 x float> %108, %153
  %204 = fadd <4 x float> %202, %203
  %205 = and <2 x i64> %190, <i64 -17587891081216, i64 -17587891081216>
  %206 = bitcast <2 x i64> %205 to <4 x float>
  %207 = fsub <4 x float> %189, %206
  %208 = bitcast <4 x float> %159 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -17587891081216, i64 -17587891081216>
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fsub <4 x float> %159, %210
  %212 = fmul <4 x float> %189, %159
  %213 = bitcast <4 x float> %212 to <2 x i64>
  %214 = xor <2 x i64> %213, <i64 -9223372034707292160, i64 -9223372034707292160>
  %215 = bitcast <2 x i64> %214 to <4 x float>
  %216 = fmul <4 x float> %206, %210
  %217 = fadd <4 x float> %216, %215
  %218 = fmul <4 x float> %207, %210
  %219 = fadd <4 x float> %218, %217
  %220 = fmul <4 x float> %211, %206
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %207, %211
  %223 = fadd <4 x float> %222, %221
  %224 = fmul <4 x float> %159, %204
  %225 = fadd <4 x float> %223, %224
  %226 = fadd <4 x float> %212, %181
  %227 = fsub <4 x float> %181, %226
  %228 = fadd <4 x float> %212, %227
  %229 = fadd <4 x float> %228, %185
  %230 = fadd <4 x float> %225, %229
  %231 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %232 = sext <4 x i1> %231 to <4 x i32>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %235 = fadd <4 x float> %226, %230
  %236 = fmul <4 x float> %235, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %237 = select <4 x i1> %234, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %236
  %238 = bitcast <4 x float> %237 to <2 x i64>
  %239 = or <2 x i64> %238, %233
  %240 = bitcast <2 x i64> %239 to <4 x float>
  %241 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %242 = fcmp uno <4 x float> %240, zeroinitializer
  %243 = or <4 x i1> %242, %241
  %244 = sext <4 x i1> %243 to <4 x i32>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = or <2 x i64> %239, %245
  %247 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %248 = xor <2 x i64> %246, %247
  %249 = fcmp uno <4 x float> %0, zeroinitializer
  %250 = sext <4 x i1> %249 to <4 x i32>
  %251 = bitcast <4 x i32> %250 to <2 x i64>
  %252 = or <2 x i64> %248, %251
  %253 = bitcast <2 x i64> %252 to <4 x float>
  ret <4 x float> %253
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp2f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fsub <4 x float> %0, %3
  %6 = fmul <4 x float> %5, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %7 = fadd <4 x float> %6, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %8 = fmul <4 x float> %5, %7
  %9 = fadd <4 x float> %8, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %10 = fmul <4 x float> %5, %9
  %11 = fadd <4 x float> %10, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %12 = fmul <4 x float> %5, %11
  %13 = fadd <4 x float> %12, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %14 = fmul <4 x float> %5, %13
  %15 = fadd <4 x float> %14, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fsub <4 x float> %15, %18
  %20 = bitcast <4 x float> %5 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = fsub <4 x float> %5, %22
  %24 = fmul <4 x float> %5, %15
  %25 = bitcast <4 x float> %24 to <2 x i64>
  %26 = xor <2 x i64> %25, <i64 -9223372034707292160, i64 -9223372034707292160>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fmul <4 x float> %22, %18
  %29 = fadd <4 x float> %28, %27
  %30 = fmul <4 x float> %19, %22
  %31 = fadd <4 x float> %30, %29
  %32 = fmul <4 x float> %23, %18
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %23, %19
  %35 = fadd <4 x float> %34, %33
  %36 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %37 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %36
  %38 = fadd <4 x float> %24, %37
  %39 = fadd <4 x float> %38, %35
  %40 = fadd <4 x float> %36, %39
  %41 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %42 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = add <4 x i32> %42, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fmul <4 x float> %40, %44
  %46 = sub <4 x i32> %4, %41
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = add <4 x i32> %47, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %45, %49
  %51 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %52 = select <4 x i1> %51, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %50
  %53 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %54 = sext <4 x i1> %53 to <4 x i32>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = bitcast <4 x float> %52 to <2 x i64>
  %57 = xor <2 x i64> %55, <i64 -1, i64 -1>
  %58 = and <2 x i64> %56, %57
  %59 = bitcast <2 x i64> %58 to <4 x float>
  ret <4 x float> %59
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp2f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fsub <4 x float> %0, %3
  %6 = fmul <4 x float> %5, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %7 = fadd <4 x float> %6, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %8 = fmul <4 x float> %5, %7
  %9 = fadd <4 x float> %8, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %10 = fmul <4 x float> %5, %9
  %11 = fadd <4 x float> %10, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %12 = fmul <4 x float> %5, %11
  %13 = fadd <4 x float> %12, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %14 = fmul <4 x float> %5, %13
  %15 = fadd <4 x float> %14, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %16 = fmul <4 x float> %5, %15
  %17 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %19 = shl <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %20 = add <4 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = fmul <4 x float> %17, %21
  %23 = sub <4 x i32> %4, %18
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %29 = select <4 x i1> %28, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %27
  %30 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = bitcast <4 x float> %29 to <2 x i64>
  %34 = xor <2 x i64> %32, <i64 -1, i64 -1>
  %35 = and <2 x i64> %33, %34
  %36 = bitcast <2 x i64> %35 to <4 x float>
  ret <4 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp10f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %4) #6
  %6 = fmul <4 x float> %4, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fmul <4 x float> %4, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %9 = fadd <4 x float> %8, %7
  %10 = fmul <4 x float> %9, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %11 = fadd <4 x float> %10, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %14 = fmul <4 x float> %9, %13
  %15 = fadd <4 x float> %14, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %16 = fmul <4 x float> %9, %15
  %17 = fadd <4 x float> %16, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %18 = fmul <4 x float> %9, %17
  %19 = fadd <4 x float> %18, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %20 = fmul <4 x float> %9, %19
  %21 = fadd <4 x float> %20, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %22 = fsub <4 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %21
  %23 = fadd <4 x float> %20, %22
  %24 = fadd <4 x float> %23, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %25 = bitcast <4 x float> %21 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fsub <4 x float> %21, %27
  %29 = bitcast <4 x float> %9 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %9, %31
  %33 = fmul <4 x float> %9, %21
  %34 = bitcast <4 x float> %33 to <2 x i64>
  %35 = xor <2 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fmul <4 x float> %31, %27
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %28, %31
  %40 = fadd <4 x float> %39, %38
  %41 = fmul <4 x float> %32, %27
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %32, %28
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %9, %24
  %46 = fadd <4 x float> %45, %44
  %47 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %48 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %49 = fadd <4 x float> %33, %48
  %50 = fadd <4 x float> %49, %46
  %51 = fadd <4 x float> %47, %50
  %52 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %53 = shl <4 x i32> %52, <i32 23, i32 23, i32 23, i32 23>
  %54 = add <4 x i32> %53, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %55 = bitcast <4 x i32> %54 to <4 x float>
  %56 = fmul <4 x float> %51, %55
  %57 = sub <4 x i32> %5, %52
  %58 = shl <4 x i32> %57, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = bitcast <4 x i32> %59 to <4 x float>
  %61 = fmul <4 x float> %56, %60
  %62 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %63 = select <4 x i1> %62, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %61
  %64 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %65 = sext <4 x i1> %64 to <4 x i32>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = bitcast <4 x float> %63 to <2 x i64>
  %68 = xor <2 x i64> %66, <i64 -1, i64 -1>
  %69 = and <2 x i64> %67, %68
  %70 = bitcast <2 x i64> %69 to <4 x float>
  ret <4 x float> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp10f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %4) #6
  %6 = fmul <4 x float> %4, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fmul <4 x float> %4, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %9 = fadd <4 x float> %8, %7
  %10 = fmul <4 x float> %9, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %11 = fadd <4 x float> %10, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %14 = fmul <4 x float> %9, %13
  %15 = fadd <4 x float> %14, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %16 = fmul <4 x float> %9, %15
  %17 = fadd <4 x float> %16, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %18 = fmul <4 x float> %9, %17
  %19 = fadd <4 x float> %18, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %20 = fmul <4 x float> %9, %19
  %21 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %21, %25
  %27 = sub <4 x i32> %5, %22
  %28 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %29 = add <4 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = fmul <4 x float> %26, %30
  %32 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %33 = select <4 x i1> %32, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %31
  %34 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = bitcast <4 x float> %33 to <2 x i64>
  %38 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %39 = and <2 x i64> %37, %38
  %40 = bitcast <2 x i64> %39 to <4 x float>
  ret <4 x float> %40
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_expm1f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, zeroinitializer
  %3 = fmul <4 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %4) #6
  %6 = fmul <4 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fsub <4 x float> %7, %0
  %9 = fsub <4 x float> %7, %8
  %10 = fsub <4 x float> %0, %9
  %11 = fsub <4 x float> %6, %8
  %12 = fadd <4 x float> %11, %10
  %13 = fadd <4 x float> %12, zeroinitializer
  %14 = fmul <4 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <4 x float> %14, %7
  %16 = fsub <4 x float> %15, %7
  %17 = fsub <4 x float> %15, %16
  %18 = fsub <4 x float> %7, %17
  %19 = fsub <4 x float> %14, %16
  %20 = fadd <4 x float> %19, %18
  %21 = fadd <4 x float> %20, %13
  %22 = fmul <4 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <4 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <4 x float> %15, %23
  %25 = fadd <4 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <4 x float> %15, %25
  %27 = fadd <4 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <4 x float> %15 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %15, %30
  %32 = bitcast <4 x float> %27 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = fsub <4 x float> %27, %34
  %36 = fmul <4 x float> %15, %27
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fmul <4 x float> %30, %34
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %34
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %35, %30
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %31, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %21, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fadd <4 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <4 x float> %50, %36
  %52 = fsub <4 x float> %50, %51
  %53 = fsub <4 x float> %36, %52
  %54 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %55, %49
  %57 = bitcast <4 x float> %50 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %50, %59
  %61 = fmul <4 x float> %15, %50
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %31, %59
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %60, %30
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %15, %56
  %74 = fadd <4 x float> %72, %73
  %75 = fmul <4 x float> %21, %50
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <4 x float> %77, %61
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %61, %79
  %81 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fmul <4 x float> %15, %15
  %85 = bitcast <4 x float> %84 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %30, %30
  %89 = fadd <4 x float> %88, %87
  %90 = fadd <4 x float> %30, %30
  %91 = fmul <4 x float> %90, %31
  %92 = fadd <4 x float> %91, %89
  %93 = fmul <4 x float> %31, %31
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %21, %21
  %96 = fmul <4 x float> %15, %95
  %97 = fadd <4 x float> %96, %94
  %98 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %84, %99
  %101 = bitcast <4 x float> %77 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fsub <4 x float> %77, %103
  %105 = fmul <4 x float> %84, %77
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fmul <4 x float> %99, %103
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %100, %103
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %104, %99
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %100, %104
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %84, %83
  %118 = fadd <4 x float> %116, %117
  %119 = fmul <4 x float> %97, %77
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %15, %105
  %122 = fsub <4 x float> %121, %15
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %15, %123
  %125 = fsub <4 x float> %105, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <4 x float> %121, %130
  %132 = fadd <4 x float> %131, %128
  %133 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %134 = shl <4 x i32> %133, <i32 23, i32 23, i32 23, i32 23>
  %135 = add <4 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = fmul <4 x float> %129, %136
  %138 = sub <4 x i32> %4, %133
  %139 = shl <4 x i32> %138, <i32 23, i32 23, i32 23, i32 23>
  %140 = add <4 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <4 x i32> %140 to <4 x float>
  %142 = fmul <4 x float> %137, %141
  %143 = fmul <4 x float> %132, %136
  %144 = fmul <4 x float> %143, %141
  %145 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %146 = sext <4 x i1> %145 to <4 x i32>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = bitcast <4 x float> %142 to <2 x i64>
  %149 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %150 = and <2 x i64> %148, %149
  %151 = bitcast <4 x float> %144 to <2 x i64>
  %152 = and <2 x i64> %151, %149
  %153 = bitcast <2 x i64> %150 to <4 x float>
  %154 = bitcast <2 x i64> %152 to <4 x float>
  %155 = fadd <4 x float> %153, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %156 = fsub <4 x float> %155, %153
  %157 = fsub <4 x float> %155, %156
  %158 = fsub <4 x float> %153, %157
  %159 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %156
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %160, %154
  %162 = fadd <4 x float> %155, %161
  %163 = fcmp ogt <4 x float> %0, <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>
  %164 = fcmp olt <4 x float> %0, <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>
  %165 = bitcast <4 x float> %0 to <4 x i32>
  %166 = icmp eq <4 x i32> %165, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %167 = select <4 x i1> %163, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %162
  %168 = select <4 x i1> %164, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %167
  %169 = select <4 x i1> %166, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %168
  ret <4 x float> %169
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log10f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fsub <4 x float> %14, %15
  %17 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %16
  %18 = fsub <4 x float> %13, %15
  %19 = fadd <4 x float> %18, %17
  %20 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %22 = fsub <4 x float> %20, %21
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fsub <4 x float> %13, %21
  %25 = fadd <4 x float> %24, %23
  %26 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %20
  %27 = bitcast <4 x float> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %20, %29
  %31 = bitcast <4 x float> %26 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %26, %33
  %35 = bitcast <4 x float> %14 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %14, %37
  %39 = fmul <4 x float> %14, %26
  %40 = fmul <4 x float> %29, %33
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %34, %29
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %30, %33
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %30, %34
  %47 = fadd <4 x float> %46, %45
  %48 = bitcast <4 x float> %47 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = bitcast <4 x float> %39 to <2 x i64>
  %52 = xor <2 x i64> %51, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fmul <4 x float> %37, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %34, %37
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %38, %33
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %38, %34
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %39, %50
  %63 = fadd <4 x float> %61, %62
  %64 = fmul <4 x float> %39, %25
  %65 = fsub <4 x float> %19, %64
  %66 = fmul <4 x float> %26, %65
  %67 = fadd <4 x float> %66, %63
  %68 = fmul <4 x float> %39, %39
  %69 = fmul <4 x float> %68, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %70 = fadd <4 x float> %69, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %71, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %73 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %74 = add nsw <4 x i32> %9, %73
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = fsub <4 x float> %75, %78
  %80 = fmul <4 x float> %75, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %81 = bitcast <4 x float> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fmul <4 x float> %78, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %78, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %79, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %79, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %75, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %93 = fadd <4 x float> %92, %91
  %94 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fsub <4 x float> %39, %95
  %97 = fmul <4 x float> %39, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %98 = bitcast <4 x float> %97 to <2 x i64>
  %99 = xor <2 x i64> %98, <i64 -9223372034707292160, i64 -9223372034707292160>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fmul <4 x float> %95, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %96, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %104 = fadd <4 x float> %103, %102
  %105 = fmul <4 x float> %95, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %96, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %39, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %67, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %112 = fadd <4 x float> %110, %111
  %113 = fadd <4 x float> %97, %80
  %114 = fsub <4 x float> %80, %113
  %115 = fadd <4 x float> %97, %114
  %116 = fadd <4 x float> %115, %93
  %117 = fadd <4 x float> %112, %116
  %118 = fmul <4 x float> %39, %68
  %119 = fmul <4 x float> %118, %72
  %120 = fadd <4 x float> %119, %113
  %121 = fsub <4 x float> %113, %120
  %122 = fadd <4 x float> %119, %121
  %123 = fadd <4 x float> %122, %117
  %124 = fadd <4 x float> %120, %123
  %125 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %126 = fcmp ult <4 x float> %4, zeroinitializer
  %127 = fcmp oeq <4 x float> %4, zeroinitializer
  %128 = select <4 x i1> %125, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %124
  %129 = select <4 x i1> %126, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %128
  %130 = select <4 x i1> %127, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %129
  ret <4 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log2f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fsub <4 x float> %14, %15
  %17 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %16
  %18 = fsub <4 x float> %13, %15
  %19 = fadd <4 x float> %18, %17
  %20 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %22 = fsub <4 x float> %20, %21
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fsub <4 x float> %13, %21
  %25 = fadd <4 x float> %24, %23
  %26 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %20
  %27 = bitcast <4 x float> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %20, %29
  %31 = bitcast <4 x float> %26 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %26, %33
  %35 = bitcast <4 x float> %14 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %14, %37
  %39 = fmul <4 x float> %14, %26
  %40 = fmul <4 x float> %29, %33
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %34, %29
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %30, %33
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %30, %34
  %47 = fadd <4 x float> %46, %45
  %48 = bitcast <4 x float> %47 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = bitcast <4 x float> %39 to <2 x i64>
  %52 = xor <2 x i64> %51, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fmul <4 x float> %37, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %34, %37
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %38, %33
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %38, %34
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %39, %50
  %63 = fadd <4 x float> %61, %62
  %64 = fmul <4 x float> %39, %25
  %65 = fsub <4 x float> %19, %64
  %66 = fmul <4 x float> %26, %65
  %67 = fadd <4 x float> %66, %63
  %68 = fmul <4 x float> %39, %39
  %69 = fmul <4 x float> %68, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %70 = fadd <4 x float> %69, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %71, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %73 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %74 = add nsw <4 x i32> %9, %73
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %39, %77
  %79 = fmul <4 x float> %39, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %77, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %78, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %77, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %78, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %39, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %67, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %94 = fadd <4 x float> %92, %93
  %95 = fadd <4 x float> %79, %75
  %96 = fsub <4 x float> %95, %75
  %97 = fsub <4 x float> %95, %96
  %98 = fsub <4 x float> %75, %97
  %99 = fsub <4 x float> %79, %96
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %94, %100
  %102 = fmul <4 x float> %39, %68
  %103 = fmul <4 x float> %102, %72
  %104 = fadd <4 x float> %103, %95
  %105 = fsub <4 x float> %104, %95
  %106 = fsub <4 x float> %104, %105
  %107 = fsub <4 x float> %95, %106
  %108 = fsub <4 x float> %103, %105
  %109 = fadd <4 x float> %108, %107
  %110 = fadd <4 x float> %109, %101
  %111 = fadd <4 x float> %104, %110
  %112 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %113 = fcmp ult <4 x float> %4, zeroinitializer
  %114 = fcmp oeq <4 x float> %4, zeroinitializer
  %115 = select <4 x i1> %112, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %111
  %116 = select <4 x i1> %113, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %115
  %117 = select <4 x i1> %114, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %116
  ret <4 x float> %117
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log2f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <4 x float> %14, %15
  %17 = fmul <4 x float> %16, %16
  %18 = fmul <4 x float> %17, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %19 = fadd <4 x float> %18, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %20 = fmul <4 x float> %17, %19
  %21 = fadd <4 x float> %20, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %22 = fmul <4 x float> %16, %17
  %23 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %24 = add nsw <4 x i32> %9, %23
  %25 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %24) #6
  %26 = fmul <4 x float> %16, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %22, %21
  %29 = fadd <4 x float> %28, %27
  %30 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %31 = fcmp ult <4 x float> %4, zeroinitializer
  %32 = fcmp oeq <4 x float> %4, zeroinitializer
  %33 = select <4 x i1> %30, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %29
  %34 = select <4 x i1> %31, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %33
  %35 = select <4 x i1> %32, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %34
  ret <4 x float> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log1pf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fcmp olt <4 x float> %2, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %4 = fmul <4 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = select <4 x i1> %3, <4 x float> %4, <4 x float> %2
  %6 = fmul <4 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %10
  %12 = bitcast <4 x i32> %11 to <4 x float>
  %13 = fadd <4 x float> %12, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fmul <4 x float> %12, %0
  %15 = fadd <4 x float> %14, %13
  %16 = select <4 x i1> %3, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = add nsw <4 x i32> %9, %16
  %18 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %17) #6
  %19 = bitcast <4 x float> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %18, %21
  %23 = fmul <4 x float> %18, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fmul <4 x float> %21, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %21, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %22, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %22, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fmul <4 x float> %18, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %36 = fadd <4 x float> %35, %34
  %37 = fadd <4 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %37
  %39 = fadd <4 x float> %15, %38
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %37
  %41 = bitcast <4 x float> %37 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %37, %43
  %45 = bitcast <4 x float> %40 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %40, %47
  %49 = bitcast <4 x float> %15 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %15, %51
  %53 = fmul <4 x float> %15, %40
  %54 = fmul <4 x float> %43, %47
  %55 = fadd <4 x float> %54, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %56 = fmul <4 x float> %48, %43
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %44, %47
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %44, %48
  %61 = fadd <4 x float> %60, %59
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = bitcast <4 x float> %53 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %51, %47
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %48, %51
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %52, %47
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %52, %48
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %53, %64
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %53, %39
  %79 = fsub <4 x float> zeroinitializer, %78
  %80 = fmul <4 x float> %40, %79
  %81 = fadd <4 x float> %80, %77
  %82 = fmul <4 x float> %53, %53
  %83 = fmul <4 x float> %82, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %84 = fadd <4 x float> %83, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %85 = fmul <4 x float> %82, %84
  %86 = fadd <4 x float> %85, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %87 = fmul <4 x float> %53, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %88 = fmul <4 x float> %81, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %89 = fadd <4 x float> %87, %23
  %90 = fsub <4 x float> %23, %89
  %91 = fadd <4 x float> %87, %90
  %92 = fadd <4 x float> %91, %36
  %93 = fadd <4 x float> %88, %92
  %94 = fmul <4 x float> %53, %82
  %95 = fmul <4 x float> %94, %86
  %96 = fadd <4 x float> %95, %89
  %97 = fsub <4 x float> %89, %96
  %98 = fadd <4 x float> %95, %97
  %99 = fadd <4 x float> %98, %93
  %100 = fadd <4 x float> %96, %99
  %101 = fcmp ogt <4 x float> %0, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %102 = fcmp olt <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %103 = fcmp oeq <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %104 = bitcast <4 x float> %0 to <4 x i32>
  %105 = icmp eq <4 x i32> %104, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %106 = select <4 x i1> %101, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %100
  %107 = select <4 x i1> %102, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %106
  %108 = select <4 x i1> %103, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %107
  %109 = select <4 x i1> %105, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %108
  ret <4 x float> %109
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_fabsf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  ret <4 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_copysignf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <4 x float>
  ret <4 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmaxf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %0, <4 x float> %1) #6
  %5 = select <4 x i1> %3, <4 x float> %0, <4 x float> %4
  ret <4 x float> %5
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fminf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %0, <4 x float> %1) #6
  %5 = select <4 x i1> %3, <4 x float> %0, <4 x float> %4
  ret <4 x float> %5
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_fdimf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fsub <4 x float> %0, %1
  %4 = fcmp uge <4 x float> %3, zeroinitializer
  %5 = fcmp une <4 x float> %0, %1
  %6 = and <4 x i1> %4, %5
  %7 = select <4 x i1> %6, <4 x float> %3, <4 x float> zeroinitializer
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_truncf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = bitcast <4 x float> %0 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = fcmp oeq <4 x float> %7, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %9 = fcmp oge <4 x float> %7, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = or <4 x i1> %9, %8
  %11 = fsub <4 x float> %0, %4
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 9223372034707292159, i64 9223372034707292159>
  %14 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = or <2 x i64> %13, %14
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = select <4 x i1> %10, <4 x float> %0, <4 x float> %16
  ret <4 x float> %17
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_floorf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp olt <4 x float> %4, zeroinitializer
  %6 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = select <4 x i1> %5, <4 x float> %6, <4 x float> %4
  %8 = bitcast <4 x float> %0 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = fcmp oge <4 x float> %10, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %13 = or <4 x i1> %12, %11
  %14 = fsub <4 x float> %0, %7
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372034707292159, i64 9223372034707292159>
  %17 = and <2 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = or <2 x i64> %16, %17
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = select <4 x i1> %13, <4 x float> %0, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_ceilf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp ole <4 x float> %4, zeroinitializer
  %6 = fadd <4 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = select <4 x i1> %5, <4 x float> %4, <4 x float> %6
  %8 = bitcast <4 x float> %0 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = fcmp oge <4 x float> %10, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %13 = or <4 x i1> %12, %11
  %14 = fsub <4 x float> %0, %7
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372034707292159, i64 9223372034707292159>
  %17 = and <2 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = or <2 x i64> %16, %17
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = select <4 x i1> %13, <4 x float> %0, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_roundf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %2, %4
  %6 = fcmp ole <4 x float> %2, zeroinitializer
  %7 = fcmp oeq <4 x float> %5, zeroinitializer
  %8 = and <4 x i1> %7, %6
  %9 = fadd <4 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %10 = select <4 x i1> %8, <4 x float> %9, <4 x float> %2
  %11 = fcmp olt <4 x float> %5, zeroinitializer
  %12 = fadd <4 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = select <4 x i1> %11, <4 x float> %12, <4 x float> %5
  %14 = fcmp une <4 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %15 = select <4 x i1> %14, <4 x float> %10, <4 x float> zeroinitializer
  %16 = bitcast <4 x float> %0 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fcmp oeq <4 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %20 = fcmp oge <4 x float> %18, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %21 = or <4 x i1> %20, %19
  %22 = fsub <4 x float> %15, %13
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159>
  %25 = and <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = or <2 x i64> %24, %25
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = select <4 x i1> %21, <4 x float> %0, <4 x float> %27
  ret <4 x float> %28
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_rintf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %4 = or <2 x i64> %3, <i64 5404319554102886400, i64 5404319554102886400>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = fcmp ogt <4 x float> %7, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %9 = fadd <4 x float> %5, %0
  %10 = fsub <4 x float> %9, %5
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = or <2 x i64> %3, %11
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = select <4 x i1> %8, <4 x float> %0, <4 x float> %13
  ret <4 x float> %14
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmaf4_sse2(<4 x float>, <4 x float>, <4 x float>) local_unnamed_addr #2 {
  %4 = fmul <4 x float> %0, %1
  %5 = fadd <4 x float> %4, %2
  %6 = bitcast <4 x float> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <4 x float> %0 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %10, %20
  %22 = bitcast <4 x float> %1 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %27 = bitcast <4 x float> %26 to <4 x i32>
  %28 = and <4 x i32> %10, %27
  %29 = bitcast <4 x float> %2 to <4 x i32>
  %30 = and <4 x i32> %14, %29
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %10, <i32 226492416, i32 226492416, i32 226492416, i32 226492416>
  %34 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = or <4 x i32> %34, %33
  %36 = fcmp ogt <4 x float> %8, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = fmul <4 x float> %18, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %39 = bitcast <4 x float> %38 to <4 x i32>
  %40 = and <4 x i32> %39, %37
  %41 = xor <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %42 = and <4 x i32> %17, %41
  %43 = or <4 x i32> %40, %42
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fmul <4 x float> %25, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %46 = bitcast <4 x float> %45 to <4 x i32>
  %47 = and <4 x i32> %46, %37
  %48 = and <4 x i32> %24, %41
  %49 = or <4 x i32> %47, %48
  %50 = bitcast <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %32, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %52 = bitcast <4 x float> %51 to <4 x i32>
  %53 = and <4 x i32> %52, %37
  %54 = and <4 x i32> %31, %41
  %55 = or <4 x i32> %53, %54
  %56 = bitcast <4 x i32> %55 to <4 x float>
  %57 = and <4 x i32> %37, <i32 1904214016, i32 1904214016, i32 1904214016, i32 1904214016>
  %58 = and <4 x i32> %35, %41
  %59 = or <4 x i32> %58, %57
  %60 = bitcast <4 x i32> %59 to <4 x float>
  %61 = bitcast <4 x i32> %43 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 -17587891081216, i64 -17587891081216>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> %44, %63
  %65 = bitcast <4 x i32> %49 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fsub <4 x float> %50, %67
  %69 = fmul <4 x float> %44, %50
  %70 = bitcast <4 x float> %69 to <2 x i64>
  %71 = xor <2 x i64> %70, <i64 -9223372034707292160, i64 -9223372034707292160>
  %72 = bitcast <2 x i64> %71 to <4 x float>
  %73 = fmul <4 x float> %63, %67
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %64, %67
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %68, %63
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %64, %68
  %80 = fadd <4 x float> %79, %78
  %81 = fadd <4 x float> %69, %56
  %82 = fsub <4 x float> %81, %69
  %83 = fsub <4 x float> %81, %82
  %84 = fsub <4 x float> %69, %83
  %85 = fsub <4 x float> %56, %82
  %86 = fadd <4 x float> %85, %84
  %87 = fadd <4 x float> %86, %80
  %88 = fcmp oeq <4 x float> %44, zeroinitializer
  %89 = fcmp oeq <4 x float> %50, zeroinitializer
  %90 = or <4 x i1> %89, %88
  %91 = fadd <4 x float> %81, %87
  %92 = select <4 x i1> %90, <4 x float> %56, <4 x float> %91
  %93 = bitcast <4 x i32> %55 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 9223372034707292159, i64 9223372034707292159>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fcmp oeq <4 x float> %95, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %97 = sext <4 x i1> %96 to <4 x i32>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = and <2 x i64> %61, <i64 9223372034707292159, i64 9223372034707292159>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fcmp oeq <4 x float> %100, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <4 x i1> %101 to <4 x i32>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -1, i64 -1>
  %105 = and <2 x i64> %65, <i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fcmp oeq <4 x float> %106, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %108 = sext <4 x i1> %107 to <4 x i32>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -1, i64 -1>
  %111 = fcmp uno <4 x float> %50, %44
  %112 = sext <4 x i1> %111 to <4 x i32>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = xor <2 x i64> %113, <i64 -1, i64 -1>
  %115 = and <2 x i64> %114, %98
  %116 = and <2 x i64> %115, %104
  %117 = and <2 x i64> %116, %110
  %118 = bitcast <2 x i64> %117 to <4 x i32>
  %119 = and <4 x i32> %55, %118
  %120 = xor <4 x i32> %118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = bitcast <4 x float> %5 to <4 x i32>
  %122 = and <4 x i32> %120, %121
  %123 = or <4 x i32> %122, %119
  %124 = bitcast <4 x i32> %123 to <4 x float>
  %125 = bitcast <4 x i32> %123 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 9223372034707292159, i64 9223372034707292159>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fcmp oeq <4 x float> %127, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %129 = fcmp uno <4 x float> %124, zeroinitializer
  %130 = or <4 x i1> %128, %129
  %131 = fmul <4 x float> %92, %60
  %132 = select <4 x i1> %130, <4 x float> %124, <4 x float> %131
  ret <4 x float> %132
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_u05sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, zeroinitializer
  %3 = bitcast <4 x float> %0 to <4 x i32>
  %4 = select <4 x i1> %2, <4 x i32> <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>, <4 x i32> %3
  %5 = bitcast <4 x i32> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %5, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = and <4 x i32> %9, %7
  %11 = xor <4 x i32> %7, <i32 -1, i32 -1, i32 -1, i32 -1>
  %12 = and <4 x i32> %4, %11
  %13 = or <4 x i32> %12, %10
  %14 = bitcast <4 x i32> %13 to <4 x float>
  %15 = and <4 x i32> %7, <i32 746586112, i32 746586112, i32 746586112, i32 746586112>
  %16 = and <4 x i32> %11, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %17 = or <4 x i32> %16, %15
  %18 = fcmp ogt <4 x float> %14, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = fmul <4 x float> %14, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = and <4 x i32> %21, %19
  %23 = xor <4 x i32> %19, <i32 -1, i32 -1, i32 -1, i32 -1>
  %24 = and <4 x i32> %13, %23
  %25 = or <4 x i32> %24, %22
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = and <4 x i32> %19, <i32 1325400064, i32 1325400064, i32 1325400064, i32 1325400064>
  %28 = and <4 x i32> %17, %23
  %29 = or <4 x i32> %28, %27
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = fadd <4 x float> %26, <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>
  %32 = bitcast <4 x float> %31 to <4 x i32>
  %33 = lshr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> <i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174>, %33
  %35 = bitcast <4 x i32> %34 to <4 x float>
  %36 = fmul <4 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %37 = fmul <4 x float> %36, %35
  %38 = fmul <4 x float> %37, %35
  %39 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %38
  %40 = fmul <4 x float> %39, %35
  %41 = fmul <4 x float> %36, %40
  %42 = fmul <4 x float> %40, %41
  %43 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %42
  %44 = fmul <4 x float> %40, %43
  %45 = fmul <4 x float> %36, %44
  %46 = fmul <4 x float> %44, %45
  %47 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %46
  %48 = fmul <4 x float> %44, %47
  %49 = fmul <4 x float> %48, %26
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = fsub <4 x float> %49, %52
  %54 = fmul <4 x float> %49, %49
  %55 = bitcast <4 x float> %54 to <2 x i64>
  %56 = xor <2 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <2 x i64> %56 to <4 x float>
  %58 = fmul <4 x float> %52, %52
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %53, %52
  %61 = fadd <4 x float> %60, %59
  %62 = fadd <4 x float> %60, %61
  %63 = fmul <4 x float> %53, %53
  %64 = fadd <4 x float> %63, %62
  %65 = fadd <4 x float> %54, %26
  %66 = fsub <4 x float> %65, %26
  %67 = fsub <4 x float> %65, %66
  %68 = fsub <4 x float> %26, %67
  %69 = fsub <4 x float> %54, %66
  %70 = fadd <4 x float> %69, %68
  %71 = fadd <4 x float> %70, %64
  %72 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %73 = bitcast <4 x float> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %75 = bitcast <2 x i64> %74 to <4 x float>
  %76 = fsub <4 x float> %72, %75
  %77 = fmul <4 x float> %52, %75
  %78 = fadd <4 x float> %77, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %79 = fmul <4 x float> %76, %52
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %53, %75
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %53, %76
  %84 = fadd <4 x float> %83, %82
  %85 = xor <2 x i64> %73, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fmul <4 x float> %84, %86
  %88 = bitcast <4 x float> %65 to <2 x i64>
  %89 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fsub <4 x float> %65, %90
  %92 = fmul <4 x float> %72, %65
  %93 = bitcast <4 x float> %92 to <2 x i64>
  %94 = xor <2 x i64> %93, <i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fmul <4 x float> %75, %90
  %97 = fadd <4 x float> %96, %95
  %98 = fmul <4 x float> %91, %75
  %99 = fadd <4 x float> %98, %97
  %100 = fmul <4 x float> %76, %90
  %101 = fadd <4 x float> %100, %99
  %102 = fmul <4 x float> %76, %91
  %103 = fadd <4 x float> %102, %101
  %104 = fmul <4 x float> %65, %87
  %105 = fadd <4 x float> %103, %104
  %106 = fmul <4 x float> %72, %71
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %92, %107
  %109 = fmul <4 x float> %108, %30
  %110 = fcmp oeq <4 x float> %26, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %111 = bitcast <4 x float> %109 to <4 x i32>
  %112 = select <4 x i1> %110, <4 x i32> <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>, <4 x i32> %111
  %113 = fcmp oeq <4 x float> %26, zeroinitializer
  %114 = select <4 x i1> %113, <4 x i32> %25, <4 x i32> %112
  %115 = bitcast <4 x i32> %114 to <4 x float>
  ret <4 x float> %115
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %0) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_hypotf4_u05sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fcmp olt <4 x float> %10, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = fmul <4 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %14 = bitcast <4 x float> %13 to <4 x i32>
  %15 = and <4 x i32> %12, %14
  %16 = xor <4 x i32> %12, <i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = bitcast <4 x float> %9 to <4 x i32>
  %18 = and <4 x i32> %16, %17
  %19 = or <4 x i32> %18, %15
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = fmul <4 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %22 = bitcast <4 x float> %21 to <4 x i32>
  %23 = and <4 x i32> %22, %12
  %24 = bitcast <4 x float> %10 to <4 x i32>
  %25 = and <4 x i32> %16, %24
  %26 = or <4 x i32> %25, %23
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %29 = bitcast <4 x i32> %26 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %27, %31
  %33 = bitcast <4 x float> %28 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fsub <4 x float> %28, %35
  %37 = bitcast <4 x i32> %19 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %20, %39
  %41 = fmul <4 x float> %28, %20
  %42 = fmul <4 x float> %31, %35
  %43 = fadd <4 x float> %42, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %44 = fmul <4 x float> %36, %31
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %32, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %32, %36
  %49 = fadd <4 x float> %48, %47
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = bitcast <4 x float> %41 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = fmul <4 x float> %39, %35
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %36, %39
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %40, %35
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %40, %36
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %41, %52
  %65 = fadd <4 x float> %63, %64
  %66 = fmul <4 x float> %41, zeroinitializer
  %67 = fsub <4 x float> zeroinitializer, %66
  %68 = fmul <4 x float> %28, %67
  %69 = fadd <4 x float> %68, %65
  %70 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %41, %71
  %73 = fmul <4 x float> %41, %41
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %71, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fadd <4 x float> %71, %71
  %80 = fmul <4 x float> %79, %72
  %81 = fadd <4 x float> %80, %78
  %82 = fmul <4 x float> %72, %72
  %83 = fadd <4 x float> %82, %81
  %84 = fadd <4 x float> %69, %69
  %85 = fmul <4 x float> %41, %84
  %86 = fadd <4 x float> %83, %85
  %87 = fadd <4 x float> %73, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = fsub <4 x float> %87, %73
  %89 = fsub <4 x float> %87, %88
  %90 = fsub <4 x float> %73, %89
  %91 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %88
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %92, %86
  %94 = fadd <4 x float> %87, %93
  %95 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %94) #6
  %96 = bitcast <4 x float> %95 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -17587891081216, i64 -17587891081216>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fsub <4 x float> %95, %98
  %100 = fmul <4 x float> %95, %95
  %101 = bitcast <4 x float> %100 to <2 x i64>
  %102 = xor <2 x i64> %101, <i64 -9223372034707292160, i64 -9223372034707292160>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fmul <4 x float> %98, %98
  %105 = fadd <4 x float> %104, %103
  %106 = fmul <4 x float> %99, %98
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %106, %107
  %109 = fmul <4 x float> %99, %99
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %100, %87
  %112 = fsub <4 x float> %111, %87
  %113 = fsub <4 x float> %111, %112
  %114 = fsub <4 x float> %87, %113
  %115 = fsub <4 x float> %100, %112
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %110, %93
  %118 = fadd <4 x float> %116, %117
  %119 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %95
  %120 = bitcast <4 x float> %119 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fsub <4 x float> %119, %122
  %124 = fmul <4 x float> %98, %122
  %125 = fadd <4 x float> %124, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %126 = fmul <4 x float> %123, %98
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %99, %122
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %99, %123
  %131 = fadd <4 x float> %130, %129
  %132 = xor <2 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fmul <4 x float> %131, %133
  %135 = bitcast <4 x float> %111 to <2 x i64>
  %136 = and <2 x i64> %135, <i64 -17587891081216, i64 -17587891081216>
  %137 = bitcast <2 x i64> %136 to <4 x float>
  %138 = fsub <4 x float> %111, %137
  %139 = fmul <4 x float> %119, %111
  %140 = bitcast <4 x float> %139 to <2 x i64>
  %141 = xor <2 x i64> %140, <i64 -9223372034707292160, i64 -9223372034707292160>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fmul <4 x float> %122, %137
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %138, %122
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %123, %137
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %123, %138
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %111, %134
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %119, %118
  %154 = fadd <4 x float> %152, %153
  %155 = fmul <4 x float> %139, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %156 = fmul <4 x float> %154, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %157 = bitcast <4 x float> %155 to <2 x i64>
  %158 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %159 = bitcast <2 x i64> %158 to <4 x float>
  %160 = fsub <4 x float> %155, %159
  %161 = bitcast <4 x float> %10 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -17587891081216, i64 -17587891081216>
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = fsub <4 x float> %10, %163
  %165 = fmul <4 x float> %10, %155
  %166 = bitcast <4 x float> %165 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fmul <4 x float> %163, %159
  %170 = fadd <4 x float> %169, %168
  %171 = fmul <4 x float> %160, %163
  %172 = fadd <4 x float> %171, %170
  %173 = fmul <4 x float> %164, %159
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %164, %160
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %10, %156
  %178 = fadd <4 x float> %176, %177
  %179 = fadd <4 x float> %165, %178
  %180 = fcmp uno <4 x float> %179, zeroinitializer
  %181 = bitcast <4 x float> %179 to <4 x i32>
  %182 = select <4 x i1> %180, <4 x i32> <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>, <4 x i32> %181
  %183 = fcmp oeq <4 x float> %9, zeroinitializer
  %184 = select <4 x i1> %183, <4 x i32> %24, <4 x i32> %182
  %185 = fcmp uno <4 x float> %8, %5
  %186 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %187 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %188 = or <4 x i1> %187, %186
  %189 = bitcast <4 x i32> %184 to <4 x float>
  %190 = select <4 x i1> %185, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %189
  %191 = select <4 x i1> %188, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %190
  ret <4 x float> %191
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_hypotf4_u35sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fdiv <4 x float> %9, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %13) #6
  %15 = fmul <4 x float> %10, %14
  %16 = fcmp oeq <4 x float> %9, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> %10, <4 x float> %15
  %18 = fcmp uno <4 x float> %8, %5
  %19 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %20 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %21 = or <4 x i1> %20, %19
  %22 = select <4 x i1> %18, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %17
  %23 = select <4 x i1> %21, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %22
  ret <4 x float> %23
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_nextafterf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x float> %0, zeroinitializer
  %4 = bitcast <4 x float> %1 to <4 x i32>
  %5 = and <4 x i32> %4, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %6 = bitcast <4 x float> %0 to <4 x i32>
  %7 = select <4 x i1> %3, <4 x i32> %5, <4 x i32> %6
  %8 = bitcast <4 x i32> %7 to <4 x float>
  %9 = bitcast <4 x i32> %7 to <2 x i64>
  %10 = ashr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %11 = fcmp ole <4 x float> %8, %1
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = xor <4 x i32> %10, %12
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = xor <4 x i32> %7, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %16 = sub <4 x i32> zeroinitializer, %15
  %17 = and <4 x i32> %13, %16
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %20 = and <2 x i64> %19, %9
  %21 = or <2 x i64> %20, %18
  %22 = fcmp une <4 x float> %8, %1
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %21 to <4 x i32>
  %26 = add <4 x i32> %25, <i32 -1, i32 -1, i32 -1, i32 -1>
  %27 = and <4 x i32> %26, %23
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = xor <2 x i64> %24, <i64 -1, i64 -1>
  %30 = and <2 x i64> %21, %29
  %31 = or <2 x i64> %30, %28
  %32 = bitcast <2 x i64> %31 to <4 x i32>
  %33 = xor <4 x i32> %32, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %34 = sub <4 x i32> zeroinitializer, %33
  %35 = and <4 x i32> %13, %34
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = and <2 x i64> %31, %19
  %38 = or <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fcmp oeq <4 x float> %39, zeroinitializer
  %41 = fcmp une <4 x float> %8, zeroinitializer
  %42 = and <4 x i1> %40, %41
  %43 = and <4 x i32> %7, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = bitcast <2 x i64> %38 to <4 x i32>
  %45 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %44
  %46 = fcmp oeq <4 x float> %8, zeroinitializer
  %47 = fcmp oeq <4 x float> %1, zeroinitializer
  %48 = and <4 x i1> %46, %47
  %49 = fcmp uno <4 x float> %8, %1
  %50 = bitcast <4 x i32> %45 to <4 x float>
  %51 = select <4 x i1> %48, <4 x float> %1, <4 x float> %50
  %52 = select <4 x i1> %49, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %51
  ret <4 x float> %52
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_frfrexpf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %6 = fmul <4 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = select <4 x i1> %5, <4 x float> %6, <4 x float> %0
  %8 = bitcast <4 x float> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = bitcast <4 x float> %7 to <4 x i32>
  %13 = and <4 x i32> %12, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %14 = or <4 x i32> %13, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %15 = and <4 x i32> %12, <i32 -2139095041, i32 -2139095041, i32 -2139095041, i32 -2139095041>
  %16 = or <4 x i32> %15, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %17 = select <4 x i1> %11, <4 x i32> %14, <4 x i32> %16
  %18 = fcmp oeq <4 x float> %7, zeroinitializer
  %19 = bitcast <4 x i32> %17 to <4 x float>
  %20 = select <4 x i1> %18, <4 x float> %7, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpf4_sse2(<4 x float>) local_unnamed_addr #0 {
  ret <2 x i64> zeroinitializer
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmodf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <2 x i64> %4 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %20, %10
  %22 = bitcast <2 x i64> %7 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = and <4 x i32> %10, <i32 855638016, i32 855638016, i32 855638016, i32 855638016>
  %27 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = or <4 x i32> %27, %26
  %29 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %30 = bitcast <4 x float> %29 to <4 x i32>
  %31 = add <4 x i32> %30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = fcmp une <4 x float> %29, zeroinitializer
  %33 = bitcast <4 x i32> %31 to <4 x float>
  %34 = select <4 x i1> %32, <4 x float> %33, <4 x float> zeroinitializer
  %35 = fmul <4 x float> %25, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %36 = fmul <4 x float> %25, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %37 = bitcast <4 x i32> %24 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = fsub <4 x float> %39, %41
  br label %43

; <label>:43:                                     ; preds = %43, %2
  %44 = phi i32 [ 0, %2 ], [ %110, %43 ]
  %45 = phi <4 x float> [ zeroinitializer, %2 ], [ %104, %43 ]
  %46 = phi <4 x float> [ %18, %2 ], [ %102, %43 ]
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = add <4 x i32> %47, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = fcmp une <4 x float> %46, zeroinitializer
  %50 = bitcast <4 x i32> %48 to <4 x float>
  %51 = select <4 x i1> %49, <4 x float> %50, <4 x float> zeroinitializer
  %52 = fmul <4 x float> %34, %51
  %53 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %52) #6
  %54 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %53) #6
  %55 = fsub <4 x float> %52, %54
  %56 = bitcast <4 x float> %52 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 9223372034707292159, i64 9223372034707292159>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fcmp oge <4 x float> %58, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %60 = fsub <4 x float> %52, %55
  %61 = select <4 x i1> %59, <4 x float> %52, <4 x float> %60
  %62 = fcmp olt <4 x float> %46, %35
  %63 = fcmp oge <4 x float> %46, %25
  %64 = and <4 x i1> %63, %62
  %65 = fcmp olt <4 x float> %46, %36
  %66 = and <4 x i1> %63, %65
  %67 = select <4 x i1> %64, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %61
  %68 = select <4 x i1> %66, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %67
  %69 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %68) #6
  %70 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %69) #6
  %71 = fsub <4 x float> %68, %70
  %72 = bitcast <4 x float> %68 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fcmp oge <4 x float> %74, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %76 = fsub <4 x float> %68, %71
  %77 = select <4 x i1> %75, <4 x float> %68, <4 x float> %76
  %78 = bitcast <4 x float> %77 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fsub <4 x float> %77, %80
  %82 = fmul <4 x float> %77, %39
  %83 = bitcast <4 x float> %82 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fmul <4 x float> %41, %80
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %81, %41
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %42, %80
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %42, %81
  %93 = fadd <4 x float> %92, %91
  %94 = fadd <4 x float> %46, %82
  %95 = fsub <4 x float> %94, %46
  %96 = fsub <4 x float> %94, %95
  %97 = fsub <4 x float> %46, %96
  %98 = fsub <4 x float> %82, %95
  %99 = fadd <4 x float> %98, %97
  %100 = fadd <4 x float> %45, %93
  %101 = fadd <4 x float> %99, %100
  %102 = fadd <4 x float> %94, %101
  %103 = fsub <4 x float> %94, %102
  %104 = fadd <4 x float> %101, %103
  %105 = fcmp olt <4 x float> %102, %25
  %106 = sext <4 x i1> %105 to <4 x i32>
  %107 = bitcast <4 x i32> %106 to <16 x i8>
  %108 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %107) #6
  %109 = icmp ne i32 %108, 65535
  %110 = add nuw nsw i32 %44, 1
  %111 = icmp ult i32 %110, 8
  %112 = and i1 %109, %111
  br i1 %112, label %43, label %113

; <label>:113:                                    ; preds = %43
  %114 = bitcast <4 x i32> %28 to <4 x float>
  %115 = fadd <4 x float> %102, %104
  %116 = fmul <4 x float> %115, %114
  %117 = fcmp une <4 x float> %115, %25
  %118 = select <4 x i1> %117, <4 x float> %116, <4 x float> zeroinitializer
  %119 = bitcast <4 x float> %118 to <2 x i64>
  %120 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <2 x i64> %120, %119
  %122 = fcmp olt <4 x float> %18, %25
  %123 = fcmp oeq <4 x float> %25, zeroinitializer
  %124 = bitcast <2 x i64> %121 to <4 x float>
  %125 = select <4 x i1> %122, <4 x float> %0, <4 x float> %124
  %126 = select <4 x i1> %123, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %125
  ret <4 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_remainderf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <2 x i64> %4 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %20, %10
  %22 = bitcast <2 x i64> %7 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = and <4 x i32> %10, <i32 855638016, i32 855638016, i32 855638016, i32 855638016>
  %27 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = or <4 x i32> %27, %26
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %31 = fmul <4 x float> %25, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %32 = fmul <4 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = bitcast <4 x i32> %24 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %35, %37
  br label %39

; <label>:39:                                     ; preds = %2, %76
  %40 = phi i32 [ 0, %2 ], [ %124, %76 ]
  %41 = phi <2 x i64> [ zeroinitializer, %2 ], [ %97, %76 ]
  %42 = phi <4 x float> [ zeroinitializer, %2 ], [ %123, %76 ]
  %43 = phi <4 x float> [ %18, %2 ], [ %121, %76 ]
  %44 = fmul <4 x float> %30, %43
  %45 = bitcast <4 x float> %44 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = or <2 x i64> %46, <i64 5404319554102886400, i64 5404319554102886400>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = and <2 x i64> %45, <i64 9223372034707292159, i64 9223372034707292159>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fcmp ogt <4 x float> %50, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %52 = fadd <4 x float> %44, %48
  %53 = fsub <4 x float> %52, %48
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = or <2 x i64> %46, %54
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = select <4 x i1> %51, <4 x float> %44, <4 x float> %56
  %58 = bitcast <4 x float> %43 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fcmp ogt <4 x float> %31, %60
  %62 = bitcast <4 x float> %57 to <4 x i32>
  %63 = select <4 x i1> %61, <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, <4 x i32> %62
  %64 = fcmp ogt <4 x float> %32, %60
  %65 = fcmp oeq <4 x float> %32, %60
  %66 = bitcast <2 x i64> %41 to <4 x i32>
  %67 = select <4 x i1> %65, <4 x i32> %66, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>
  %68 = select <4 x i1> %64, <4 x i32> zeroinitializer, <4 x i32> %67
  %69 = and <4 x i32> %63, %68
  %70 = bitcast <4 x i32> %69 to <4 x float>
  %71 = fcmp oeq <4 x float> %70, zeroinitializer
  %72 = sext <4 x i1> %71 to <4 x i32>
  %73 = bitcast <4 x i32> %72 to <16 x i8>
  %74 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %73) #6
  %75 = icmp eq i32 %74, 65535
  br i1 %75, label %126, label %76

; <label>:76:                                     ; preds = %39
  %77 = fmul <4 x float> %35, %70
  %78 = bitcast <4 x float> %77 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 9223372034707292159, i64 9223372034707292159>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fcmp oeq <4 x float> %80, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %82 = and <2 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = xor <2 x i64> %82, <i64 -4647714812233515008, i64 -4647714812233515008>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fadd <4 x float> %84, %70
  %86 = select <4 x i1> %81, <4 x float> %85, <4 x float> %70
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %86) #6
  %88 = and <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = icmp ne <4 x i32> %88, zeroinitializer
  %90 = bitcast <4 x float> %86 to <2 x i64>
  %91 = and <2 x i64> %90, <i64 9223372034707292159, i64 9223372034707292159>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fcmp olt <4 x float> %92, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %94 = and <4 x i1> %89, %93
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = xor <2 x i64> %41, %96
  %98 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %86, %99
  %101 = fmul <4 x float> %86, %35
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fmul <4 x float> %37, %99
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %100, %37
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %38, %99
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %38, %100
  %112 = fadd <4 x float> %111, %110
  %113 = fadd <4 x float> %43, %101
  %114 = fsub <4 x float> %113, %43
  %115 = fsub <4 x float> %113, %114
  %116 = fsub <4 x float> %43, %115
  %117 = fsub <4 x float> %101, %114
  %118 = fadd <4 x float> %117, %116
  %119 = fadd <4 x float> %42, %112
  %120 = fadd <4 x float> %118, %119
  %121 = fadd <4 x float> %113, %120
  %122 = fsub <4 x float> %113, %121
  %123 = fadd <4 x float> %120, %122
  %124 = add nuw nsw i32 %40, 1
  %125 = icmp ult i32 %124, 8
  br i1 %125, label %39, label %126

; <label>:126:                                    ; preds = %39, %76
  %127 = phi <4 x float> [ %43, %39 ], [ %121, %76 ]
  %128 = phi <4 x float> [ %42, %39 ], [ %123, %76 ]
  %129 = fadd <4 x float> %127, %128
  %130 = fmul <4 x float> %129, %29
  %131 = bitcast <4 x float> %130 to <2 x i64>
  %132 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = xor <2 x i64> %132, %131
  %134 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %135 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %136 = bitcast <4 x float> %0 to <4 x i32>
  %137 = select <4 x i1> %135, <4 x i32> <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>, <4 x i32> %136
  %138 = bitcast <2 x i64> %133 to <4 x i32>
  %139 = select <4 x i1> %134, <4 x i32> %137, <4 x i32> %138
  %140 = fcmp oeq <4 x float> %25, zeroinitializer
  %141 = bitcast <4 x i32> %139 to <4 x float>
  %142 = select <4 x i1> %140, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %141
  ret <4 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinpif4_u05sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = and <4 x i32> %9, <i32 -1294939720, i32 -1294939720, i32 -1294939720, i32 -1294939720>
  %29 = xor <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = and <4 x i32> %29, <i32 883300721, i32 883300721, i32 883300721, i32 883300721>
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %9, <i32 913372581, i32 913372581, i32 913372581, i32 913372581>
  %34 = and <4 x i32> %29, <i32 -1206295030, i32 -1206295030, i32 -1206295030, i32 -1206295030>
  %35 = or <4 x i32> %34, %33
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %13, %32
  %38 = fadd <4 x float> %37, %36
  %39 = and <4 x i32> %9, <i32 -1179981344, i32 -1179981344, i32 -1179981344, i32 -1179981344>
  %40 = and <4 x i32> %29, <i32 992163295, i32 992163295, i32 992163295, i32 992163295>
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %13, %38
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %13, %44
  %46 = and <4 x i32> %9, <i32 1015144696, i32 1015144696, i32 1015144696, i32 1015144696>
  %47 = and <4 x i32> %29, <i32 -1113235993, i32 -1113235993, i32 -1113235993, i32 -1113235993>
  %48 = or <4 x i32> %47, %46
  %49 = and <4 x i32> %9, <i32 804720512, i32 804720512, i32 804720512, i32 804720512>
  %50 = and <4 x i32> %29, <i32 -1330131353, i32 -1330131353, i32 -1330131353, i32 -1330131353>
  %51 = or <4 x i32> %50, %49
  %52 = bitcast <4 x i32> %48 to <4 x float>
  %53 = bitcast <4 x i32> %51 to <4 x float>
  %54 = fadd <4 x float> %45, %52
  %55 = fsub <4 x float> %54, %45
  %56 = fsub <4 x float> %54, %55
  %57 = fsub <4 x float> %45, %56
  %58 = fsub <4 x float> %52, %55
  %59 = fadd <4 x float> %58, %57
  %60 = fadd <4 x float> %59, %53
  %61 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %13, %62
  %64 = bitcast <4 x float> %54 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fsub <4 x float> %54, %66
  %68 = fmul <4 x float> %13, %54
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fmul <4 x float> %62, %66
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %63, %66
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %67, %62
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %63, %67
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %13, %60
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %27, %54
  %83 = fadd <4 x float> %82, %81
  %84 = and <4 x i32> %9, <i32 -1096947226, i32 -1096947226, i32 -1096947226, i32 -1096947226>
  %85 = and <4 x i32> %29, <i32 1061752795, i32 1061752795, i32 1061752795, i32 1061752795>
  %86 = or <4 x i32> %85, %84
  %87 = and <4 x i32> %9, <i32 -1306796353, i32 -1306796353, i32 -1306796353, i32 -1306796353>
  %88 = and <4 x i32> %29, <i32 -1296318260, i32 -1296318260, i32 -1296318260, i32 -1296318260>
  %89 = or <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %86 to <4 x float>
  %91 = bitcast <4 x i32> %89 to <4 x float>
  %92 = fadd <4 x float> %68, %90
  %93 = fsub <4 x float> %92, %68
  %94 = fsub <4 x float> %92, %93
  %95 = fsub <4 x float> %68, %94
  %96 = fsub <4 x float> %90, %93
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %83, %91
  %99 = fadd <4 x float> %97, %98
  %100 = bitcast <4 x float> %13 to <4 x i32>
  %101 = and <4 x i32> %9, %100
  %102 = bitcast <4 x float> %12 to <4 x i32>
  %103 = and <4 x i32> %29, %102
  %104 = or <4 x i32> %103, %101
  %105 = bitcast <4 x float> %27 to <4 x i32>
  %106 = and <4 x i32> %105, %9
  %107 = bitcast <4 x i32> %104 to <4 x float>
  %108 = bitcast <4 x i32> %106 to <4 x float>
  %109 = bitcast <4 x float> %92 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fsub <4 x float> %92, %111
  %113 = bitcast <4 x i32> %104 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = fsub <4 x float> %107, %115
  %117 = fmul <4 x float> %92, %107
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %115, %111
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %112, %115
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %116, %111
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %116, %112
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %92, %108
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %99, %107
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %117 to <4 x i32>
  %134 = bitcast <4 x float> %132 to <4 x i32>
  %135 = fadd <4 x float> %117, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> %135, %117
  %137 = fsub <4 x float> %135, %136
  %138 = fsub <4 x float> %117, %137
  %139 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %136
  %140 = fadd <4 x float> %139, %138
  %141 = fadd <4 x float> %140, %132
  %142 = bitcast <4 x float> %135 to <4 x i32>
  %143 = and <4 x i32> %142, %9
  %144 = and <4 x i32> %133, %29
  %145 = or <4 x i32> %143, %144
  %146 = bitcast <4 x float> %141 to <4 x i32>
  %147 = and <4 x i32> %146, %9
  %148 = and <4 x i32> %134, %29
  %149 = or <4 x i32> %147, %148
  %150 = shl <4 x i32> %6, <i32 29, i32 29, i32 29, i32 29>
  %151 = and <4 x i32> %150, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %152 = xor <4 x i32> %145, %151
  %153 = xor <4 x i32> %149, %151
  %154 = bitcast <4 x i32> %152 to <4 x float>
  %155 = bitcast <4 x i32> %153 to <4 x float>
  %156 = fadd <4 x float> %154, %155
  %157 = bitcast <4 x float> %0 to <4 x i32>
  %158 = icmp eq <4 x i32> %157, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %159 = select <4 x i1> %158, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %156
  %160 = bitcast <4 x float> %0 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 9223372034707292159, i64 9223372034707292159>
  %162 = bitcast <2 x i64> %161 to <4 x float>
  %163 = fcmp ogt <4 x float> %162, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <4 x float> %159 to <2 x i64>
  %167 = xor <2 x i64> %165, <i64 -1, i64 -1>
  %168 = and <2 x i64> %166, %167
  %169 = fcmp oeq <4 x float> %162, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %170 = sext <4 x i1> %169 to <4 x i32>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = or <2 x i64> %168, %171
  %173 = bitcast <2 x i64> %172 to <4 x float>
  ret <4 x float> %173
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cospif4_u05sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = and <4 x i32> %9, <i32 -1294939720, i32 -1294939720, i32 -1294939720, i32 -1294939720>
  %29 = xor <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = and <4 x i32> %29, <i32 883300721, i32 883300721, i32 883300721, i32 883300721>
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %9, <i32 913372581, i32 913372581, i32 913372581, i32 913372581>
  %34 = and <4 x i32> %29, <i32 -1206295030, i32 -1206295030, i32 -1206295030, i32 -1206295030>
  %35 = or <4 x i32> %34, %33
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %13, %32
  %38 = fadd <4 x float> %37, %36
  %39 = and <4 x i32> %9, <i32 -1179981344, i32 -1179981344, i32 -1179981344, i32 -1179981344>
  %40 = and <4 x i32> %29, <i32 992163295, i32 992163295, i32 992163295, i32 992163295>
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %13, %38
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %13, %44
  %46 = and <4 x i32> %9, <i32 1015144696, i32 1015144696, i32 1015144696, i32 1015144696>
  %47 = and <4 x i32> %29, <i32 -1113235993, i32 -1113235993, i32 -1113235993, i32 -1113235993>
  %48 = or <4 x i32> %47, %46
  %49 = and <4 x i32> %9, <i32 804720512, i32 804720512, i32 804720512, i32 804720512>
  %50 = and <4 x i32> %29, <i32 -1330131353, i32 -1330131353, i32 -1330131353, i32 -1330131353>
  %51 = or <4 x i32> %50, %49
  %52 = bitcast <4 x i32> %48 to <4 x float>
  %53 = bitcast <4 x i32> %51 to <4 x float>
  %54 = fadd <4 x float> %45, %52
  %55 = fsub <4 x float> %54, %45
  %56 = fsub <4 x float> %54, %55
  %57 = fsub <4 x float> %45, %56
  %58 = fsub <4 x float> %52, %55
  %59 = fadd <4 x float> %58, %57
  %60 = fadd <4 x float> %59, %53
  %61 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %13, %62
  %64 = bitcast <4 x float> %54 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fsub <4 x float> %54, %66
  %68 = fmul <4 x float> %13, %54
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fmul <4 x float> %62, %66
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %63, %66
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %67, %62
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %63, %67
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %13, %60
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %27, %54
  %83 = fadd <4 x float> %82, %81
  %84 = and <4 x i32> %9, <i32 -1096947226, i32 -1096947226, i32 -1096947226, i32 -1096947226>
  %85 = and <4 x i32> %29, <i32 1061752795, i32 1061752795, i32 1061752795, i32 1061752795>
  %86 = or <4 x i32> %85, %84
  %87 = and <4 x i32> %9, <i32 -1306796353, i32 -1306796353, i32 -1306796353, i32 -1306796353>
  %88 = and <4 x i32> %29, <i32 -1296318260, i32 -1296318260, i32 -1296318260, i32 -1296318260>
  %89 = or <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %86 to <4 x float>
  %91 = bitcast <4 x i32> %89 to <4 x float>
  %92 = fadd <4 x float> %68, %90
  %93 = fsub <4 x float> %92, %68
  %94 = fsub <4 x float> %92, %93
  %95 = fsub <4 x float> %68, %94
  %96 = fsub <4 x float> %90, %93
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %83, %91
  %99 = fadd <4 x float> %97, %98
  %100 = bitcast <4 x float> %13 to <4 x i32>
  %101 = and <4 x i32> %9, %100
  %102 = bitcast <4 x float> %12 to <4 x i32>
  %103 = and <4 x i32> %29, %102
  %104 = or <4 x i32> %103, %101
  %105 = bitcast <4 x float> %27 to <4 x i32>
  %106 = and <4 x i32> %105, %9
  %107 = bitcast <4 x i32> %104 to <4 x float>
  %108 = bitcast <4 x i32> %106 to <4 x float>
  %109 = bitcast <4 x float> %92 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fsub <4 x float> %92, %111
  %113 = bitcast <4 x i32> %104 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = fsub <4 x float> %107, %115
  %117 = fmul <4 x float> %92, %107
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %115, %111
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %112, %115
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %116, %111
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %116, %112
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %92, %108
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %99, %107
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %117 to <4 x i32>
  %134 = bitcast <4 x float> %132 to <4 x i32>
  %135 = fadd <4 x float> %117, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> %135, %117
  %137 = fsub <4 x float> %135, %136
  %138 = fsub <4 x float> %117, %137
  %139 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %136
  %140 = fadd <4 x float> %139, %138
  %141 = fadd <4 x float> %140, %132
  %142 = bitcast <4 x float> %135 to <4 x i32>
  %143 = and <4 x i32> %142, %9
  %144 = and <4 x i32> %133, %29
  %145 = or <4 x i32> %143, %144
  %146 = bitcast <4 x float> %141 to <4 x i32>
  %147 = and <4 x i32> %146, %9
  %148 = and <4 x i32> %134, %29
  %149 = or <4 x i32> %147, %148
  %150 = shl <4 x i32> %10, <i32 29, i32 29, i32 29, i32 29>
  %151 = add <4 x i32> %150, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %152 = and <4 x i32> %151, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %153 = xor <4 x i32> %145, %152
  %154 = xor <4 x i32> %149, %152
  %155 = bitcast <4 x i32> %153 to <4 x float>
  %156 = bitcast <4 x i32> %154 to <4 x float>
  %157 = fadd <4 x float> %155, %156
  %158 = bitcast <4 x float> %0 to <2 x i64>
  %159 = and <2 x i64> %158, <i64 9223372034707292159, i64 9223372034707292159>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fcmp ogt <4 x float> %160, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %162 = select <4 x i1> %161, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %157
  %163 = fcmp oeq <4 x float> %160, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <4 x float> %162 to <2 x i64>
  %167 = or <2 x i64> %166, %165
  %168 = bitcast <2 x i64> %167 to <4 x float>
  ret <4 x float> %168
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_tgammaf4_u10sse2(<4 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 16
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <4 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x float>, <4 x float>* %6, align 16
  %8 = fadd <4 x float> %5, %7
  %9 = fmul <4 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %9) #6
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fmul <4 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <4 x float> %5, %12
  %14 = fsub <4 x float> %13, %5
  %15 = fsub <4 x float> %13, %14
  %16 = fsub <4 x float> %5, %15
  %17 = fsub <4 x float> %12, %14
  %18 = fadd <4 x float> %17, %16
  %19 = fadd <4 x float> %7, %18
  %20 = fmul <4 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <4 x float> %20, %13
  %22 = fsub <4 x float> %21, %13
  %23 = fsub <4 x float> %21, %22
  %24 = fsub <4 x float> %13, %23
  %25 = fsub <4 x float> %20, %22
  %26 = fadd <4 x float> %25, %24
  %27 = fadd <4 x float> %26, %19
  %28 = fmul <4 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <4 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <4 x float> %21, %29
  %31 = fadd <4 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <4 x float> %21, %31
  %33 = fadd <4 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <4 x float> %21 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fsub <4 x float> %21, %36
  %38 = bitcast <4 x float> %33 to <2 x i64>
  %39 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fsub <4 x float> %33, %40
  %42 = fmul <4 x float> %21, %33
  %43 = bitcast <4 x float> %42 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fmul <4 x float> %36, %40
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %37, %40
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %41, %36
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %37, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %27, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %42, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %57 = fsub <4 x float> %56, %42
  %58 = fsub <4 x float> %56, %57
  %59 = fsub <4 x float> %42, %58
  %60 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %57
  %61 = fadd <4 x float> %60, %59
  %62 = fadd <4 x float> %61, %55
  %63 = bitcast <4 x float> %56 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %56, %65
  %67 = fmul <4 x float> %21, %56
  %68 = bitcast <4 x float> %67 to <2 x i64>
  %69 = xor <2 x i64> %68, <i64 -9223372034707292160, i64 -9223372034707292160>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = fmul <4 x float> %36, %65
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %37, %65
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %66, %36
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %37, %66
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %21, %62
  %80 = fadd <4 x float> %78, %79
  %81 = fmul <4 x float> %27, %56
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %84 = fsub <4 x float> %83, %67
  %85 = fsub <4 x float> %83, %84
  %86 = fsub <4 x float> %67, %85
  %87 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %84
  %88 = fadd <4 x float> %87, %86
  %89 = fadd <4 x float> %88, %82
  %90 = fmul <4 x float> %21, %21
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %36, %36
  %95 = fadd <4 x float> %94, %93
  %96 = fadd <4 x float> %36, %36
  %97 = fmul <4 x float> %96, %37
  %98 = fadd <4 x float> %97, %95
  %99 = fmul <4 x float> %37, %37
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %27, %27
  %102 = fmul <4 x float> %21, %101
  %103 = fadd <4 x float> %102, %100
  %104 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <2 x i64> %104 to <4 x float>
  %106 = fsub <4 x float> %90, %105
  %107 = bitcast <4 x float> %83 to <2 x i64>
  %108 = and <2 x i64> %107, <i64 -17587891081216, i64 -17587891081216>
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = fsub <4 x float> %83, %109
  %111 = fmul <4 x float> %90, %83
  %112 = bitcast <4 x float> %111 to <2 x i64>
  %113 = xor <2 x i64> %112, <i64 -9223372034707292160, i64 -9223372034707292160>
  %114 = bitcast <2 x i64> %113 to <4 x float>
  %115 = fmul <4 x float> %105, %109
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %106, %109
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %110, %105
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %106, %110
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %90, %89
  %124 = fadd <4 x float> %122, %123
  %125 = fmul <4 x float> %103, %83
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %111
  %128 = fsub <4 x float> %127, %21
  %129 = fsub <4 x float> %127, %128
  %130 = fsub <4 x float> %21, %129
  %131 = fsub <4 x float> %111, %128
  %132 = fadd <4 x float> %131, %130
  %133 = fadd <4 x float> %27, %126
  %134 = fadd <4 x float> %132, %133
  %135 = fadd <4 x float> %127, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %135
  %137 = fadd <4 x float> %127, %136
  %138 = fadd <4 x float> %137, %134
  %139 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %140 = shl <4 x i32> %139, <i32 23, i32 23, i32 23, i32 23>
  %141 = add <4 x i32> %140, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %142 = bitcast <4 x i32> %141 to <4 x float>
  %143 = fmul <4 x float> %135, %142
  %144 = sub <4 x i32> %10, %139
  %145 = shl <4 x i32> %144, <i32 23, i32 23, i32 23, i32 23>
  %146 = add <4 x i32> %145, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %147 = bitcast <4 x i32> %146 to <4 x float>
  %148 = fmul <4 x float> %143, %147
  %149 = fmul <4 x float> %138, %142
  %150 = fmul <4 x float> %149, %147
  %151 = fcmp olt <4 x float> %5, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %152 = sext <4 x i1> %151 to <4 x i32>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = bitcast <4 x float> %148 to <2 x i64>
  %155 = xor <2 x i64> %153, <i64 -1, i64 -1>
  %156 = and <2 x i64> %154, %155
  %157 = bitcast <4 x float> %150 to <2 x i64>
  %158 = and <2 x i64> %157, %155
  %159 = bitcast <2 x i64> %156 to <4 x float>
  %160 = bitcast <2 x i64> %158 to <4 x float>
  %161 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %162 = load <4 x float>, <4 x float>* %161, align 16
  %163 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %164 = load <4 x float>, <4 x float>* %163, align 16
  %165 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fsub <4 x float> %159, %166
  %168 = bitcast <4 x float> %162 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -17587891081216, i64 -17587891081216>
  %170 = bitcast <2 x i64> %169 to <4 x float>
  %171 = fsub <4 x float> %162, %170
  %172 = fmul <4 x float> %162, %159
  %173 = bitcast <4 x float> %172 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <2 x i64> %174 to <4 x float>
  %176 = fmul <4 x float> %170, %166
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %167, %170
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %171, %166
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %171, %167
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %164, %159
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %162, %160
  %187 = fadd <4 x float> %185, %186
  %188 = fadd <4 x float> %172, %187
  %189 = fcmp oeq <4 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %190 = fcmp olt <4 x float> %0, zeroinitializer
  %191 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %192 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %191) #6
  %193 = fcmp oeq <4 x float> %192, %0
  %194 = and <4 x i1> %193, %190
  %195 = or <4 x i1> %194, %189
  %196 = bitcast <4 x float> %0 to <2 x i64>
  %197 = and <2 x i64> %196, <i64 9223372034707292159, i64 9223372034707292159>
  %198 = bitcast <2 x i64> %197 to <4 x float>
  %199 = fcmp une <4 x float> %198, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %200 = fcmp ord <4 x float> %0, zeroinitializer
  %201 = fcmp uno <4 x float> %188, zeroinitializer
  %202 = and <4 x i1> %200, %199
  %203 = and <4 x i1> %201, %190
  %204 = and <4 x i1> %203, %202
  %205 = or <4 x i1> %195, %204
  %206 = bitcast <4 x float> %188 to <4 x i32>
  %207 = select <4 x i1> %205, <4 x i32> <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>, <4 x i32> %206
  %208 = bitcast <4 x i32> %207 to <4 x float>
  %209 = fcmp oeq <4 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %210 = fcmp oge <4 x float> %0, <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>
  %211 = fcmp oeq <4 x float> %0, zeroinitializer
  %212 = fcmp ogt <4 x float> %0, <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>
  %213 = or <4 x i1> %212, %211
  %214 = fcmp uno <4 x float> %208, zeroinitializer
  %215 = or <4 x i1> %213, %214
  %216 = or <4 x i1> %209, %202
  %217 = and <4 x i1> %215, %210
  %218 = and <4 x i1> %217, %216
  %219 = bitcast <4 x float> %0 to <4 x i32>
  %220 = and <4 x i32> %219, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %221 = or <4 x i32> %220, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %222 = select <4 x i1> %218, <4 x i32> %221, <4 x i32> %207
  %223 = bitcast <4 x i32> %222 to <4 x float>
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <4 x float> %223
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <4 x float>) unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fcmp olt <4 x float> %1, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = xor <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = fadd <4 x float> %11, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = fadd <4 x float> %12, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fsub <4 x float> %12, %13
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %16 = fsub <4 x float> %11, %13
  %17 = fadd <4 x float> %16, %15
  %18 = bitcast <4 x float> %12 to <4 x i32>
  %19 = and <4 x i32> %18, %9
  %20 = xor <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  %21 = bitcast <4 x float> %1 to <4 x i32>
  %22 = and <4 x i32> %20, %21
  %23 = or <4 x i32> %19, %22
  %24 = bitcast <4 x float> %17 to <4 x i32>
  %25 = xor <4 x i32> %7, <i32 -1, i32 -1, i32 -1, i32 -1>
  %26 = and <4 x i32> %23, %25
  %27 = and <4 x i32> %25, %9
  %28 = and <4 x i32> %27, %24
  %29 = bitcast <4 x i32> %26 to <4 x float>
  %30 = fcmp oge <4 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fcmp ole <4 x float> %29, <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>
  %32 = and <4 x i1> %31, %30
  %33 = sext <4 x i1> %32 to <4 x i32>
  %34 = fcmp oge <4 x float> %29, <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %28 to <4 x float>
  %37 = fadd <4 x float> %29, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %38 = fsub <4 x float> %37, %29
  %39 = fsub <4 x float> %37, %38
  %40 = fsub <4 x float> %29, %39
  %41 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %42 = fadd <4 x float> %41, %40
  %43 = fadd <4 x float> %42, %36
  %44 = bitcast <4 x float> %37 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -17587891081216, i64 -17587891081216>
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = fsub <4 x float> %37, %46
  %48 = bitcast <4 x i32> %26 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %29, %50
  %52 = fmul <4 x float> %37, %29
  %53 = bitcast <4 x float> %52 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = fmul <4 x float> %50, %46
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %47, %50
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %51, %46
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %51, %47
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %37, %36
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %43, %29
  %67 = fadd <4 x float> %66, %65
  %68 = fadd <4 x float> %52, %67
  %69 = fsub <4 x float> %52, %68
  %70 = fadd <4 x float> %67, %69
  %71 = fadd <4 x float> %29, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %72 = fsub <4 x float> %71, %29
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %29, %73
  %75 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %76, %36
  %78 = bitcast <4 x float> %71 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fsub <4 x float> %71, %80
  %82 = bitcast <4 x float> %68 to <2 x i64>
  %83 = and <2 x i64> %82, <i64 -17587891081216, i64 -17587891081216>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fsub <4 x float> %68, %84
  %86 = fmul <4 x float> %71, %68
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = xor <2 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fmul <4 x float> %80, %84
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %81, %84
  %93 = fadd <4 x float> %92, %91
  %94 = fmul <4 x float> %85, %80
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %81, %85
  %97 = fadd <4 x float> %96, %95
  %98 = fmul <4 x float> %71, %70
  %99 = fadd <4 x float> %98, %97
  %100 = fmul <4 x float> %77, %68
  %101 = fadd <4 x float> %100, %99
  %102 = fadd <4 x float> %86, %101
  %103 = fsub <4 x float> %86, %102
  %104 = fadd <4 x float> %101, %103
  %105 = fcmp ole <4 x float> %29, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %106 = and <4 x i1> %105, %34
  %107 = sext <4 x i1> %106 to <4 x i32>
  %108 = bitcast <4 x float> %102 to <4 x i32>
  %109 = and <4 x i32> %108, %107
  %110 = xor <4 x i32> %107, <i32 -1, i32 -1, i32 -1, i32 -1>
  %111 = and <4 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = or <4 x i32> %109, %111
  %113 = bitcast <4 x float> %104 to <4 x i32>
  %114 = and <4 x i32> %113, %107
  %115 = fadd <4 x float> %29, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %116 = fsub <4 x float> %115, %29
  %117 = fsub <4 x float> %115, %116
  %118 = fsub <4 x float> %29, %117
  %119 = fsub <4 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %116
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %120, %36
  %122 = bitcast <4 x float> %115 to <4 x i32>
  %123 = and <4 x i32> %107, %122
  %124 = and <4 x i32> %26, %110
  %125 = or <4 x i32> %124, %123
  %126 = bitcast <4 x float> %121 to <4 x i32>
  %127 = and <4 x i32> %126, %107
  %128 = and <4 x i32> %28, %110
  %129 = or <4 x i32> %127, %128
  %130 = bitcast <4 x i32> %125 to <4 x float>
  %131 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %130
  %132 = and <4 x i32> %33, <i32 -1082130432, i32 -1082130432, i32 -1082130432, i32 -1082130432>
  %133 = xor <4 x i32> %33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %134 = and <4 x i32> %133, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %135 = or <4 x i32> %134, %132
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = bitcast <4 x i32> %129 to <4 x float>
  %138 = fadd <4 x float> %130, %136
  %139 = fsub <4 x float> %138, %130
  %140 = fsub <4 x float> %138, %139
  %141 = fsub <4 x float> %130, %140
  %142 = fsub <4 x float> %136, %139
  %143 = fadd <4 x float> %142, %141
  %144 = fadd <4 x float> %143, %137
  %145 = fadd <4 x float> %138, %144
  %146 = bitcast <4 x float> %131 to <4 x i32>
  %147 = and <4 x i32> %146, %35
  %148 = xor <4 x i32> %35, <i32 -1, i32 -1, i32 -1, i32 -1>
  %149 = bitcast <4 x float> %145 to <4 x i32>
  %150 = and <4 x i32> %149, %148
  %151 = or <4 x i32> %150, %147
  %152 = bitcast <4 x i32> %151 to <4 x float>
  %153 = and <4 x i32> %33, <i32 1064405568, i32 1064405568, i32 1064405568, i32 1064405568>
  %154 = and <4 x i32> %133, <i32 954676597, i32 954676597, i32 954676597, i32 954676597>
  %155 = or <4 x i32> %154, %153
  %156 = and <4 x i32> %35, <i32 979112398, i32 979112398, i32 979112398, i32 979112398>
  %157 = and <4 x i32> %155, %148
  %158 = or <4 x i32> %157, %156
  %159 = bitcast <4 x i32> %158 to <4 x float>
  %160 = and <4 x i32> %33, <i32 1063121953, i32 1063121953, i32 1063121953, i32 1063121953>
  %161 = and <4 x i32> %133, <i32 950739142, i32 950739142, i32 950739142, i32 950739142>
  %162 = or <4 x i32> %161, %160
  %163 = and <4 x i32> %35, <i32 -1202132049, i32 -1202132049, i32 -1202132049, i32 -1202132049>
  %164 = and <4 x i32> %162, %148
  %165 = or <4 x i32> %164, %163
  %166 = bitcast <4 x i32> %165 to <4 x float>
  %167 = fmul <4 x float> %159, %152
  %168 = fadd <4 x float> %167, %166
  %169 = and <4 x i32> %33, <i32 1056383118, i32 1056383118, i32 1056383118, i32 1056383118>
  %170 = and <4 x i32> %133, <i32 958416262, i32 958416262, i32 958416262, i32 958416262>
  %171 = or <4 x i32> %170, %169
  %172 = and <4 x i32> %35, <i32 -1172620386, i32 -1172620386, i32 -1172620386, i32 -1172620386>
  %173 = and <4 x i32> %171, %148
  %174 = or <4 x i32> %173, %172
  %175 = bitcast <4 x i32> %174 to <4 x float>
  %176 = fmul <4 x float> %168, %152
  %177 = fadd <4 x float> %176, %175
  %178 = and <4 x i32> %33, <i32 -1112188318, i32 -1112188318, i32 -1112188318, i32 -1112188318>
  %179 = and <4 x i32> %133, <i32 -1183387035, i32 -1183387035, i32 -1183387035, i32 -1183387035>
  %180 = or <4 x i32> %179, %178
  %181 = and <4 x i32> %35, <i32 949107458, i32 949107458, i32 949107458, i32 949107458>
  %182 = and <4 x i32> %180, %148
  %183 = or <4 x i32> %182, %181
  %184 = bitcast <4 x i32> %183 to <4 x float>
  %185 = fmul <4 x float> %177, %152
  %186 = fadd <4 x float> %185, %184
  %187 = and <4 x i32> %33, <i32 1037017508, i32 1037017508, i32 1037017508, i32 1037017508>
  %188 = and <4 x i32> %133, <i32 973214987, i32 973214987, i32 973214987, i32 973214987>
  %189 = or <4 x i32> %188, %187
  %190 = and <4 x i32> %35, <i32 978159611, i32 978159611, i32 978159611, i32 978159611>
  %191 = and <4 x i32> %189, %148
  %192 = or <4 x i32> %191, %190
  %193 = bitcast <4 x i32> %192 to <4 x float>
  %194 = fmul <4 x float> %186, %152
  %195 = fadd <4 x float> %194, %193
  %196 = and <4 x i32> %33, <i32 -1105662766, i32 -1105662766, i32 -1105662766, i32 -1105662766>
  %197 = and <4 x i32> %133, <i32 -1164153136, i32 -1164153136, i32 -1164153136, i32 -1164153136>
  %198 = or <4 x i32> %197, %196
  %199 = and <4 x i32> %35, <i32 -1183801742, i32 -1183801742, i32 -1183801742, i32 -1183801742>
  %200 = and <4 x i32> %198, %148
  %201 = or <4 x i32> %200, %199
  %202 = bitcast <4 x i32> %201 to <4 x float>
  %203 = fmul <4 x float> %195, %152
  %204 = fadd <4 x float> %203, %202
  %205 = and <4 x i32> %33, <i32 1043190575, i32 1043190575, i32 1043190575, i32 1043190575>
  %206 = and <4 x i32> %133, <i32 993886461, i32 993886461, i32 993886461, i32 993886461>
  %207 = or <4 x i32> %206, %205
  %208 = and <4 x i32> %35, <i32 -1154500300, i32 -1154500300, i32 -1154500300, i32 -1154500300>
  %209 = and <4 x i32> %207, %148
  %210 = or <4 x i32> %209, %208
  %211 = bitcast <4 x i32> %210 to <4 x float>
  %212 = fmul <4 x float> %204, %152
  %213 = fadd <4 x float> %212, %211
  %214 = and <4 x i32> %33, <i32 -1101776857, i32 -1101776857, i32 -1101776857, i32 -1101776857>
  %215 = and <4 x i32> %133, <i32 -1141767767, i32 -1141767767, i32 -1141767767, i32 -1141767767>
  %216 = or <4 x i32> %215, %214
  %217 = and <4 x i32> %35, <i32 996380217, i32 996380217, i32 996380217, i32 996380217>
  %218 = and <4 x i32> %216, %148
  %219 = or <4 x i32> %218, %217
  %220 = bitcast <4 x i32> %219 to <4 x float>
  %221 = fmul <4 x float> %213, %152
  %222 = fadd <4 x float> %221, %220
  %223 = and <4 x i32> %33, <i32 1049266793, i32 1049266793, i32 1049266793, i32 1049266793>
  %224 = and <4 x i32> %133, <i32 1017682177, i32 1017682177, i32 1017682177, i32 1017682177>
  %225 = or <4 x i32> %224, %223
  %226 = and <4 x i32> %35, <i32 1034594987, i32 1034594987, i32 1034594987, i32 1034594987>
  %227 = and <4 x i32> %225, %148
  %228 = or <4 x i32> %227, %226
  %229 = bitcast <4 x i32> %228 to <4 x float>
  %230 = fmul <4 x float> %222, %152
  %231 = fadd <4 x float> %230, %229
  %232 = fadd <4 x float> %130, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %233 = fsub <4 x float> %232, %130
  %234 = fsub <4 x float> %232, %233
  %235 = fsub <4 x float> %130, %234
  %236 = fsub <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %233
  %237 = fadd <4 x float> %236, %235
  %238 = fadd <4 x float> %237, %137
  %239 = fmul <4 x float> %130, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %240 = fcmp olt <4 x float> %239, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %241 = sext <4 x i1> %240 to <4 x i32>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = fmul <4 x float> %239, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %244 = select <4 x i1> %240, <4 x float> %243, <4 x float> %239
  %245 = bitcast <4 x float> %244 to <4 x i32>
  %246 = lshr <4 x i32> %245, <i32 23, i32 23, i32 23, i32 23>
  %247 = and <2 x i64> %242, <i64 820338753727, i64 820338753727>
  %248 = and <2 x i64> %242, <i64 545460846719, i64 545460846719>
  %249 = xor <2 x i64> %248, <i64 545460846719, i64 545460846719>
  %250 = or <2 x i64> %249, %247
  %251 = and <4 x i32> %246, <i32 255, i32 255, i32 255, i32 255>
  %252 = bitcast <2 x i64> %250 to <4 x i32>
  %253 = sub <4 x i32> %251, %252
  %254 = shl <4 x i32> %253, <i32 23, i32 23, i32 23, i32 23>
  %255 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %254
  %256 = bitcast <4 x i32> %255 to <4 x float>
  %257 = fmul <4 x float> %130, %256
  %258 = fmul <4 x float> %137, %256
  %259 = fadd <4 x float> %257, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %260 = fsub <4 x float> %259, %257
  %261 = fsub <4 x float> %259, %260
  %262 = fsub <4 x float> %257, %261
  %263 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %260
  %264 = fadd <4 x float> %263, %262
  %265 = fadd <4 x float> %258, %264
  %266 = fadd <4 x float> %257, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %267 = fsub <4 x float> %266, %257
  %268 = fsub <4 x float> %266, %267
  %269 = fsub <4 x float> %257, %268
  %270 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %267
  %271 = fadd <4 x float> %270, %269
  %272 = fadd <4 x float> %258, %271
  %273 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %266
  %274 = bitcast <4 x float> %266 to <2 x i64>
  %275 = and <2 x i64> %274, <i64 -17587891081216, i64 -17587891081216>
  %276 = bitcast <2 x i64> %275 to <4 x float>
  %277 = fsub <4 x float> %266, %276
  %278 = bitcast <4 x float> %273 to <2 x i64>
  %279 = and <2 x i64> %278, <i64 -17587891081216, i64 -17587891081216>
  %280 = bitcast <2 x i64> %279 to <4 x float>
  %281 = fsub <4 x float> %273, %280
  %282 = bitcast <4 x float> %259 to <2 x i64>
  %283 = and <2 x i64> %282, <i64 -17587891081216, i64 -17587891081216>
  %284 = bitcast <2 x i64> %283 to <4 x float>
  %285 = fsub <4 x float> %259, %284
  %286 = fmul <4 x float> %259, %273
  %287 = fmul <4 x float> %276, %280
  %288 = fadd <4 x float> %287, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %289 = fmul <4 x float> %281, %276
  %290 = fadd <4 x float> %289, %288
  %291 = fmul <4 x float> %277, %280
  %292 = fadd <4 x float> %291, %290
  %293 = fmul <4 x float> %277, %281
  %294 = fadd <4 x float> %293, %292
  %295 = bitcast <4 x float> %294 to <2 x i64>
  %296 = xor <2 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <2 x i64> %296 to <4 x float>
  %298 = bitcast <4 x float> %286 to <2 x i64>
  %299 = xor <2 x i64> %298, <i64 -9223372034707292160, i64 -9223372034707292160>
  %300 = bitcast <2 x i64> %299 to <4 x float>
  %301 = fmul <4 x float> %284, %280
  %302 = fadd <4 x float> %301, %300
  %303 = fmul <4 x float> %281, %284
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %285, %280
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %285, %281
  %308 = fadd <4 x float> %307, %306
  %309 = fmul <4 x float> %286, %297
  %310 = fadd <4 x float> %308, %309
  %311 = fmul <4 x float> %286, %272
  %312 = fsub <4 x float> %265, %311
  %313 = fmul <4 x float> %273, %312
  %314 = fadd <4 x float> %313, %310
  %315 = and <2 x i64> %298, <i64 -17587891081216, i64 -17587891081216>
  %316 = bitcast <2 x i64> %315 to <4 x float>
  %317 = fsub <4 x float> %286, %316
  %318 = fmul <4 x float> %286, %286
  %319 = bitcast <4 x float> %318 to <2 x i64>
  %320 = xor <2 x i64> %319, <i64 -9223372034707292160, i64 -9223372034707292160>
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fmul <4 x float> %316, %316
  %323 = fadd <4 x float> %322, %321
  %324 = fadd <4 x float> %316, %316
  %325 = fmul <4 x float> %324, %317
  %326 = fadd <4 x float> %325, %323
  %327 = fmul <4 x float> %317, %317
  %328 = fadd <4 x float> %327, %326
  %329 = fadd <4 x float> %314, %314
  %330 = fmul <4 x float> %286, %329
  %331 = fadd <4 x float> %328, %330
  %332 = fmul <4 x float> %318, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %333 = fadd <4 x float> %332, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %334 = fmul <4 x float> %318, %333
  %335 = fadd <4 x float> %334, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %336 = fmul <4 x float> %318, %335
  %337 = fadd <4 x float> %336, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %338 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %253) #6
  %339 = bitcast <4 x float> %338 to <2 x i64>
  %340 = and <2 x i64> %339, <i64 -17587891081216, i64 -17587891081216>
  %341 = bitcast <2 x i64> %340 to <4 x float>
  %342 = fsub <4 x float> %338, %341
  %343 = fmul <4 x float> %338, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %344 = bitcast <4 x float> %343 to <2 x i64>
  %345 = xor <2 x i64> %344, <i64 -9223372034707292160, i64 -9223372034707292160>
  %346 = bitcast <2 x i64> %345 to <4 x float>
  %347 = fmul <4 x float> %341, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %348 = fadd <4 x float> %347, %346
  %349 = fmul <4 x float> %341, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %350 = fadd <4 x float> %349, %348
  %351 = fmul <4 x float> %342, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %352 = fadd <4 x float> %351, %350
  %353 = fmul <4 x float> %342, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %354 = fadd <4 x float> %353, %352
  %355 = fmul <4 x float> %338, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %356 = fadd <4 x float> %355, %354
  %357 = fmul <4 x float> %286, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %358 = fmul <4 x float> %314, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %359 = fadd <4 x float> %357, %343
  %360 = fsub <4 x float> %343, %359
  %361 = fadd <4 x float> %357, %360
  %362 = fadd <4 x float> %361, %356
  %363 = fadd <4 x float> %358, %362
  %364 = and <2 x i64> %319, <i64 -17587891081216, i64 -17587891081216>
  %365 = bitcast <2 x i64> %364 to <4 x float>
  %366 = fsub <4 x float> %318, %365
  %367 = fmul <4 x float> %286, %318
  %368 = bitcast <4 x float> %367 to <2 x i64>
  %369 = xor <2 x i64> %368, <i64 -9223372034707292160, i64 -9223372034707292160>
  %370 = bitcast <2 x i64> %369 to <4 x float>
  %371 = fmul <4 x float> %316, %365
  %372 = fadd <4 x float> %371, %370
  %373 = fmul <4 x float> %366, %316
  %374 = fadd <4 x float> %373, %372
  %375 = fmul <4 x float> %317, %365
  %376 = fadd <4 x float> %375, %374
  %377 = fmul <4 x float> %317, %366
  %378 = fadd <4 x float> %377, %376
  %379 = fmul <4 x float> %318, %314
  %380 = fadd <4 x float> %378, %379
  %381 = fmul <4 x float> %286, %331
  %382 = fadd <4 x float> %380, %381
  %383 = and <2 x i64> %368, <i64 -17587891081216, i64 -17587891081216>
  %384 = bitcast <2 x i64> %383 to <4 x float>
  %385 = fsub <4 x float> %367, %384
  %386 = bitcast <4 x float> %337 to <2 x i64>
  %387 = and <2 x i64> %386, <i64 -17587891081216, i64 -17587891081216>
  %388 = bitcast <2 x i64> %387 to <4 x float>
  %389 = fsub <4 x float> %337, %388
  %390 = fmul <4 x float> %367, %337
  %391 = bitcast <4 x float> %390 to <2 x i64>
  %392 = xor <2 x i64> %391, <i64 -9223372034707292160, i64 -9223372034707292160>
  %393 = bitcast <2 x i64> %392 to <4 x float>
  %394 = fmul <4 x float> %384, %388
  %395 = fadd <4 x float> %394, %393
  %396 = fmul <4 x float> %385, %388
  %397 = fadd <4 x float> %396, %395
  %398 = fmul <4 x float> %389, %384
  %399 = fadd <4 x float> %398, %397
  %400 = fmul <4 x float> %385, %389
  %401 = fadd <4 x float> %400, %399
  %402 = fmul <4 x float> %337, %382
  %403 = fadd <4 x float> %401, %402
  %404 = fadd <4 x float> %390, %359
  %405 = fsub <4 x float> %359, %404
  %406 = fadd <4 x float> %390, %405
  %407 = fadd <4 x float> %406, %363
  %408 = fadd <4 x float> %403, %407
  %409 = bitcast <4 x float> %232 to <2 x i64>
  %410 = and <2 x i64> %409, <i64 -17587891081216, i64 -17587891081216>
  %411 = bitcast <2 x i64> %410 to <4 x float>
  %412 = fsub <4 x float> %232, %411
  %413 = bitcast <4 x float> %404 to <2 x i64>
  %414 = and <2 x i64> %413, <i64 -17587891081216, i64 -17587891081216>
  %415 = bitcast <2 x i64> %414 to <4 x float>
  %416 = fsub <4 x float> %404, %415
  %417 = fmul <4 x float> %232, %404
  %418 = bitcast <4 x float> %417 to <2 x i64>
  %419 = xor <2 x i64> %418, <i64 -9223372034707292160, i64 -9223372034707292160>
  %420 = bitcast <2 x i64> %419 to <4 x float>
  %421 = fmul <4 x float> %411, %415
  %422 = fadd <4 x float> %421, %420
  %423 = fmul <4 x float> %412, %415
  %424 = fadd <4 x float> %423, %422
  %425 = fmul <4 x float> %416, %411
  %426 = fadd <4 x float> %425, %424
  %427 = fmul <4 x float> %412, %416
  %428 = fadd <4 x float> %427, %426
  %429 = fmul <4 x float> %232, %408
  %430 = fadd <4 x float> %428, %429
  %431 = fmul <4 x float> %238, %404
  %432 = fadd <4 x float> %431, %430
  %433 = bitcast <4 x i32> %125 to <2 x i64>
  %434 = xor <2 x i64> %433, <i64 -9223372034707292160, i64 -9223372034707292160>
  %435 = bitcast <4 x i32> %129 to <2 x i64>
  %436 = xor <2 x i64> %435, <i64 -9223372034707292160, i64 -9223372034707292160>
  %437 = bitcast <2 x i64> %434 to <4 x float>
  %438 = bitcast <2 x i64> %436 to <4 x float>
  %439 = fadd <4 x float> %417, %437
  %440 = fsub <4 x float> %439, %417
  %441 = fsub <4 x float> %439, %440
  %442 = fsub <4 x float> %417, %441
  %443 = fsub <4 x float> %437, %440
  %444 = fadd <4 x float> %443, %442
  %445 = fadd <4 x float> %432, %438
  %446 = fadd <4 x float> %444, %445
  %447 = fadd <4 x float> %439, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %448 = fsub <4 x float> %447, %439
  %449 = fsub <4 x float> %447, %448
  %450 = fsub <4 x float> %439, %449
  %451 = fsub <4 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %448
  %452 = fadd <4 x float> %451, %450
  %453 = fadd <4 x float> %446, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %454 = fadd <4 x float> %452, %453
  %455 = bitcast <4 x float> %231 to <2 x i64>
  %456 = and <2 x i64> %455, <i64 -17587891081216, i64 -17587891081216>
  %457 = bitcast <2 x i64> %456 to <4 x float>
  %458 = fsub <4 x float> %231, %457
  %459 = bitcast <4 x i32> %151 to <2 x i64>
  %460 = and <2 x i64> %459, <i64 -17587891081216, i64 -17587891081216>
  %461 = bitcast <2 x i64> %460 to <4 x float>
  %462 = fsub <4 x float> %152, %461
  %463 = fmul <4 x float> %231, %152
  %464 = bitcast <4 x float> %463 to <2 x i64>
  %465 = xor <2 x i64> %464, <i64 -9223372034707292160, i64 -9223372034707292160>
  %466 = bitcast <2 x i64> %465 to <4 x float>
  %467 = fmul <4 x float> %461, %457
  %468 = fadd <4 x float> %467, %466
  %469 = fmul <4 x float> %458, %461
  %470 = fadd <4 x float> %469, %468
  %471 = fmul <4 x float> %462, %457
  %472 = fadd <4 x float> %471, %470
  %473 = fmul <4 x float> %462, %458
  %474 = fadd <4 x float> %473, %472
  %475 = and <4 x i32> %33, <i32 -1093851447, i32 -1093851447, i32 -1093851447, i32 -1093851447>
  %476 = and <4 x i32> %133, <i32 -1115033599, i32 -1115033599, i32 -1115033599, i32 -1115033599>
  %477 = or <4 x i32> %476, %475
  %478 = bitcast <4 x i32> %477 to <4 x float>
  %479 = fadd <4 x float> %463, %478
  %480 = fsub <4 x float> %479, %463
  %481 = fsub <4 x float> %479, %480
  %482 = fsub <4 x float> %463, %481
  %483 = fsub <4 x float> %478, %480
  %484 = fadd <4 x float> %483, %482
  %485 = fadd <4 x float> %484, %474
  %486 = bitcast <4 x float> %479 to <2 x i64>
  %487 = and <2 x i64> %486, <i64 -17587891081216, i64 -17587891081216>
  %488 = bitcast <2 x i64> %487 to <4 x float>
  %489 = fsub <4 x float> %479, %488
  %490 = fmul <4 x float> %479, %152
  %491 = bitcast <4 x float> %490 to <2 x i64>
  %492 = xor <2 x i64> %491, <i64 -9223372034707292160, i64 -9223372034707292160>
  %493 = bitcast <2 x i64> %492 to <4 x float>
  %494 = fmul <4 x float> %461, %488
  %495 = fadd <4 x float> %494, %493
  %496 = fmul <4 x float> %489, %461
  %497 = fadd <4 x float> %496, %495
  %498 = fmul <4 x float> %462, %488
  %499 = fadd <4 x float> %498, %497
  %500 = fmul <4 x float> %462, %489
  %501 = fadd <4 x float> %500, %499
  %502 = fmul <4 x float> %485, %152
  %503 = fadd <4 x float> %502, %501
  %504 = and <4 x i32> %33, <i32 1062374706, i32 1062374706, i32 1062374706, i32 1062374706>
  %505 = and <4 x i32> %133, <i32 1051007590, i32 1051007590, i32 1051007590, i32 1051007590>
  %506 = or <4 x i32> %505, %504
  %507 = bitcast <4 x i32> %506 to <4 x float>
  %508 = fadd <4 x float> %490, %507
  %509 = fsub <4 x float> %508, %490
  %510 = fsub <4 x float> %508, %509
  %511 = fsub <4 x float> %490, %510
  %512 = fsub <4 x float> %507, %509
  %513 = fadd <4 x float> %512, %511
  %514 = fadd <4 x float> %513, %503
  %515 = bitcast <4 x float> %508 to <2 x i64>
  %516 = and <2 x i64> %515, <i64 -17587891081216, i64 -17587891081216>
  %517 = bitcast <2 x i64> %516 to <4 x float>
  %518 = fsub <4 x float> %508, %517
  %519 = fmul <4 x float> %508, %152
  %520 = bitcast <4 x float> %519 to <2 x i64>
  %521 = xor <2 x i64> %520, <i64 -9223372034707292160, i64 -9223372034707292160>
  %522 = bitcast <2 x i64> %521 to <4 x float>
  %523 = fmul <4 x float> %461, %517
  %524 = fadd <4 x float> %523, %522
  %525 = fmul <4 x float> %518, %461
  %526 = fadd <4 x float> %525, %524
  %527 = fmul <4 x float> %462, %517
  %528 = fadd <4 x float> %527, %526
  %529 = fmul <4 x float> %462, %518
  %530 = fadd <4 x float> %529, %528
  %531 = fmul <4 x float> %514, %152
  %532 = fadd <4 x float> %530, %531
  %533 = and <4 x i32> %33, <i32 -1089223576, i32 -1089223576, i32 -1089223576, i32 -1089223576>
  %534 = and <4 x i32> %133, <i32 1054373680, i32 1054373680, i32 1054373680, i32 1054373680>
  %535 = or <4 x i32> %534, %533
  %536 = bitcast <4 x i32> %535 to <4 x float>
  %537 = fadd <4 x float> %519, %536
  %538 = fsub <4 x float> %537, %519
  %539 = fsub <4 x float> %537, %538
  %540 = fsub <4 x float> %519, %539
  %541 = fsub <4 x float> %536, %538
  %542 = fadd <4 x float> %541, %540
  %543 = fadd <4 x float> %542, %532
  %544 = bitcast <4 x float> %537 to <2 x i64>
  %545 = and <2 x i64> %544, <i64 -17587891081216, i64 -17587891081216>
  %546 = bitcast <2 x i64> %545 to <4 x float>
  %547 = fsub <4 x float> %537, %546
  %548 = fmul <4 x float> %537, %152
  %549 = bitcast <4 x float> %548 to <2 x i64>
  %550 = xor <2 x i64> %549, <i64 -9223372034707292160, i64 -9223372034707292160>
  %551 = bitcast <2 x i64> %550 to <4 x float>
  %552 = fmul <4 x float> %461, %546
  %553 = fadd <4 x float> %552, %551
  %554 = fmul <4 x float> %547, %461
  %555 = fadd <4 x float> %554, %553
  %556 = fmul <4 x float> %462, %546
  %557 = fadd <4 x float> %556, %555
  %558 = fmul <4 x float> %462, %547
  %559 = fadd <4 x float> %558, %557
  %560 = fmul <4 x float> %543, %152
  %561 = fadd <4 x float> %559, %560
  %562 = bitcast <4 x float> %447 to <4 x i32>
  %563 = and <4 x i32> %562, %35
  %564 = bitcast <4 x float> %548 to <4 x i32>
  %565 = and <4 x i32> %564, %148
  %566 = or <4 x i32> %563, %565
  %567 = bitcast <4 x float> %454 to <4 x i32>
  %568 = and <4 x i32> %567, %35
  %569 = bitcast <4 x float> %561 to <4 x i32>
  %570 = and <4 x i32> %569, %148
  %571 = or <4 x i32> %568, %570
  %572 = fadd <4 x float> %463, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %573 = fsub <4 x float> %572, %463
  %574 = fsub <4 x float> %572, %573
  %575 = fsub <4 x float> %463, %574
  %576 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %573
  %577 = fadd <4 x float> %576, %575
  %578 = fadd <4 x float> %577, %474
  %579 = bitcast <4 x float> %572 to <4 x i32>
  %580 = and <4 x i32> %579, %35
  %581 = and <4 x i32> %148, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %582 = or <4 x i32> %580, %581
  %583 = bitcast <4 x float> %578 to <4 x i32>
  %584 = and <4 x i32> %583, %35
  %585 = bitcast <4 x i32> %566 to <2 x i64>
  %586 = xor <2 x i64> %585, <i64 -9223372034707292160, i64 -9223372034707292160>
  %587 = bitcast <4 x i32> %571 to <2 x i64>
  %588 = xor <2 x i64> %587, <i64 -9223372034707292160, i64 -9223372034707292160>
  %589 = bitcast <2 x i64> %586 to <4 x float>
  %590 = bitcast <2 x i64> %588 to <4 x float>
  %591 = fadd <4 x float> %589, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %592 = fadd <4 x float> %591, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %593 = fsub <4 x float> %591, %592
  %594 = fsub <4 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %593
  %595 = fsub <4 x float> %589, %592
  %596 = fadd <4 x float> %595, %594
  %597 = fadd <4 x float> %590, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %598 = fadd <4 x float> %596, %597
  %599 = bitcast <4 x float> %591 to <4 x i32>
  %600 = and <4 x i32> %599, %9
  %601 = and <4 x i32> %566, %20
  %602 = or <4 x i32> %600, %601
  %603 = bitcast <4 x float> %598 to <4 x i32>
  %604 = and <4 x i32> %603, %9
  %605 = and <4 x i32> %571, %20
  %606 = or <4 x i32> %604, %605
  %607 = and <4 x i32> %7, <i32 1109809910, i32 1109809910, i32 1109809910, i32 1109809910>
  %608 = and <4 x i32> %602, %25
  %609 = or <4 x i32> %608, %607
  %610 = and <4 x i32> %7, <i32 904964453, i32 904964453, i32 904964453, i32 904964453>
  %611 = and <4 x i32> %606, %25
  %612 = or <4 x i32> %611, %610
  %613 = bitcast <4 x i32> %582 to <4 x float>
  %614 = and <4 x i32> %112, %9
  %615 = and <4 x i32> %582, %20
  %616 = or <4 x i32> %615, %614
  %617 = and <4 x i32> %114, %9
  %618 = and <4 x i32> %584, %20
  %619 = or <4 x i32> %618, %617
  %620 = and <4 x i32> %7, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %621 = and <4 x i32> %616, %25
  %622 = or <4 x i32> %621, %620
  %623 = and <4 x i32> %619, %25
  %624 = bitcast <4 x i32> %9 to <16 x i8>
  %625 = xor <16 x i8> %624, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %626 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %625) #6
  %627 = icmp eq i32 %626, 65535
  br i1 %627, label %815, label %628

; <label>:628:                                    ; preds = %2
  %629 = bitcast <4 x i32> %584 to <4 x float>
  %630 = fmul <4 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %631 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %630) #6
  %632 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %631) #6
  %633 = fmul <4 x float> %632, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %634 = fsub <4 x float> %1, %633
  %635 = fmul <4 x float> %634, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %636 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %635) #6
  %637 = lshr <4 x i32> %636, <i32 31, i32 31, i32 31, i32 31>
  %638 = xor <4 x i32> %637, <i32 1, i32 1, i32 1, i32 1>
  %639 = add <4 x i32> %638, %636
  %640 = and <4 x i32> %639, <i32 2, i32 2, i32 2, i32 2>
  %641 = icmp ne <4 x i32> %640, zeroinitializer
  %642 = sext <4 x i1> %641 to <4 x i32>
  %643 = and <4 x i32> %639, <i32 -2, i32 -2, i32 -2, i32 -2>
  %644 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %643) #6
  %645 = fsub <4 x float> %635, %644
  %646 = fmul <4 x float> %645, %645
  %647 = bitcast <4 x float> %645 to <2 x i64>
  %648 = and <2 x i64> %647, <i64 -17587891081216, i64 -17587891081216>
  %649 = bitcast <2 x i64> %648 to <4 x float>
  %650 = fsub <4 x float> %645, %649
  %651 = bitcast <4 x float> %646 to <2 x i64>
  %652 = xor <2 x i64> %651, <i64 -9223372034707292160, i64 -9223372034707292160>
  %653 = bitcast <2 x i64> %652 to <4 x float>
  %654 = fmul <4 x float> %649, %649
  %655 = fadd <4 x float> %654, %653
  %656 = fmul <4 x float> %650, %649
  %657 = fadd <4 x float> %656, %655
  %658 = fadd <4 x float> %656, %657
  %659 = fmul <4 x float> %650, %650
  %660 = fadd <4 x float> %659, %658
  %661 = and <4 x i32> %642, <i32 -1294939720, i32 -1294939720, i32 -1294939720, i32 -1294939720>
  %662 = xor <4 x i32> %642, <i32 -1, i32 -1, i32 -1, i32 -1>
  %663 = and <4 x i32> %662, <i32 883300721, i32 883300721, i32 883300721, i32 883300721>
  %664 = or <4 x i32> %663, %661
  %665 = bitcast <4 x i32> %664 to <4 x float>
  %666 = and <4 x i32> %642, <i32 913372581, i32 913372581, i32 913372581, i32 913372581>
  %667 = and <4 x i32> %662, <i32 -1206295030, i32 -1206295030, i32 -1206295030, i32 -1206295030>
  %668 = or <4 x i32> %667, %666
  %669 = bitcast <4 x i32> %668 to <4 x float>
  %670 = fmul <4 x float> %646, %665
  %671 = fadd <4 x float> %670, %669
  %672 = and <4 x i32> %642, <i32 -1179981344, i32 -1179981344, i32 -1179981344, i32 -1179981344>
  %673 = and <4 x i32> %662, <i32 992163295, i32 992163295, i32 992163295, i32 992163295>
  %674 = or <4 x i32> %673, %672
  %675 = bitcast <4 x i32> %674 to <4 x float>
  %676 = fmul <4 x float> %646, %671
  %677 = fadd <4 x float> %676, %675
  %678 = fmul <4 x float> %646, %677
  %679 = and <4 x i32> %642, <i32 1015144696, i32 1015144696, i32 1015144696, i32 1015144696>
  %680 = and <4 x i32> %662, <i32 -1113235993, i32 -1113235993, i32 -1113235993, i32 -1113235993>
  %681 = or <4 x i32> %680, %679
  %682 = and <4 x i32> %642, <i32 804720512, i32 804720512, i32 804720512, i32 804720512>
  %683 = and <4 x i32> %662, <i32 -1330131353, i32 -1330131353, i32 -1330131353, i32 -1330131353>
  %684 = or <4 x i32> %683, %682
  %685 = bitcast <4 x i32> %681 to <4 x float>
  %686 = bitcast <4 x i32> %684 to <4 x float>
  %687 = fadd <4 x float> %678, %685
  %688 = fsub <4 x float> %687, %678
  %689 = fsub <4 x float> %687, %688
  %690 = fsub <4 x float> %678, %689
  %691 = fsub <4 x float> %685, %688
  %692 = fadd <4 x float> %691, %690
  %693 = fadd <4 x float> %692, %686
  %694 = and <2 x i64> %651, <i64 -17587891081216, i64 -17587891081216>
  %695 = bitcast <2 x i64> %694 to <4 x float>
  %696 = fsub <4 x float> %646, %695
  %697 = bitcast <4 x float> %687 to <2 x i64>
  %698 = and <2 x i64> %697, <i64 -17587891081216, i64 -17587891081216>
  %699 = bitcast <2 x i64> %698 to <4 x float>
  %700 = fsub <4 x float> %687, %699
  %701 = fmul <4 x float> %646, %687
  %702 = bitcast <4 x float> %701 to <2 x i64>
  %703 = xor <2 x i64> %702, <i64 -9223372034707292160, i64 -9223372034707292160>
  %704 = bitcast <2 x i64> %703 to <4 x float>
  %705 = fmul <4 x float> %695, %699
  %706 = fadd <4 x float> %705, %704
  %707 = fmul <4 x float> %696, %699
  %708 = fadd <4 x float> %707, %706
  %709 = fmul <4 x float> %700, %695
  %710 = fadd <4 x float> %709, %708
  %711 = fmul <4 x float> %696, %700
  %712 = fadd <4 x float> %711, %710
  %713 = fmul <4 x float> %646, %693
  %714 = fadd <4 x float> %713, %712
  %715 = fmul <4 x float> %660, %687
  %716 = fadd <4 x float> %715, %714
  %717 = and <4 x i32> %642, <i32 -1096947226, i32 -1096947226, i32 -1096947226, i32 -1096947226>
  %718 = and <4 x i32> %662, <i32 1061752795, i32 1061752795, i32 1061752795, i32 1061752795>
  %719 = or <4 x i32> %718, %717
  %720 = and <4 x i32> %642, <i32 -1306796353, i32 -1306796353, i32 -1306796353, i32 -1306796353>
  %721 = and <4 x i32> %662, <i32 -1296318260, i32 -1296318260, i32 -1296318260, i32 -1296318260>
  %722 = or <4 x i32> %721, %720
  %723 = bitcast <4 x i32> %719 to <4 x float>
  %724 = bitcast <4 x i32> %722 to <4 x float>
  %725 = fadd <4 x float> %701, %723
  %726 = fsub <4 x float> %725, %701
  %727 = fsub <4 x float> %725, %726
  %728 = fsub <4 x float> %701, %727
  %729 = fsub <4 x float> %723, %726
  %730 = fadd <4 x float> %729, %728
  %731 = fadd <4 x float> %716, %724
  %732 = fadd <4 x float> %730, %731
  %733 = bitcast <4 x float> %646 to <4 x i32>
  %734 = and <4 x i32> %642, %733
  %735 = bitcast <4 x float> %645 to <4 x i32>
  %736 = and <4 x i32> %662, %735
  %737 = or <4 x i32> %736, %734
  %738 = bitcast <4 x float> %660 to <4 x i32>
  %739 = and <4 x i32> %738, %642
  %740 = bitcast <4 x i32> %737 to <4 x float>
  %741 = bitcast <4 x i32> %739 to <4 x float>
  %742 = bitcast <4 x float> %725 to <2 x i64>
  %743 = and <2 x i64> %742, <i64 -17587891081216, i64 -17587891081216>
  %744 = bitcast <2 x i64> %743 to <4 x float>
  %745 = fsub <4 x float> %725, %744
  %746 = bitcast <4 x i32> %737 to <2 x i64>
  %747 = and <2 x i64> %746, <i64 -17587891081216, i64 -17587891081216>
  %748 = bitcast <2 x i64> %747 to <4 x float>
  %749 = fsub <4 x float> %740, %748
  %750 = fmul <4 x float> %725, %740
  %751 = bitcast <4 x float> %750 to <2 x i64>
  %752 = xor <2 x i64> %751, <i64 -9223372034707292160, i64 -9223372034707292160>
  %753 = bitcast <2 x i64> %752 to <4 x float>
  %754 = fmul <4 x float> %748, %744
  %755 = fadd <4 x float> %754, %753
  %756 = fmul <4 x float> %745, %748
  %757 = fadd <4 x float> %756, %755
  %758 = fmul <4 x float> %749, %744
  %759 = fadd <4 x float> %758, %757
  %760 = fmul <4 x float> %749, %745
  %761 = fadd <4 x float> %760, %759
  %762 = fmul <4 x float> %725, %741
  %763 = fadd <4 x float> %762, %761
  %764 = fmul <4 x float> %732, %740
  %765 = fadd <4 x float> %763, %764
  %766 = bitcast <4 x float> %750 to <4 x i32>
  %767 = bitcast <4 x float> %765 to <4 x i32>
  %768 = fadd <4 x float> %750, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %769 = fsub <4 x float> %768, %750
  %770 = fsub <4 x float> %768, %769
  %771 = fsub <4 x float> %750, %770
  %772 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %769
  %773 = fadd <4 x float> %772, %771
  %774 = fadd <4 x float> %773, %765
  %775 = bitcast <4 x float> %768 to <4 x i32>
  %776 = and <4 x i32> %775, %642
  %777 = and <4 x i32> %766, %662
  %778 = or <4 x i32> %776, %777
  %779 = bitcast <4 x float> %774 to <4 x i32>
  %780 = and <4 x i32> %779, %642
  %781 = and <4 x i32> %767, %662
  %782 = or <4 x i32> %780, %781
  %783 = shl <4 x i32> %639, <i32 29, i32 29, i32 29, i32 29>
  %784 = and <4 x i32> %783, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %785 = xor <4 x i32> %778, %784
  %786 = xor <4 x i32> %782, %784
  %787 = bitcast <4 x i32> %785 to <4 x float>
  %788 = bitcast <4 x i32> %786 to <4 x float>
  %789 = bitcast <4 x i32> %582 to <2 x i64>
  %790 = and <2 x i64> %789, <i64 -17587891081216, i64 -17587891081216>
  %791 = bitcast <2 x i64> %790 to <4 x float>
  %792 = fsub <4 x float> %613, %791
  %793 = bitcast <4 x i32> %785 to <2 x i64>
  %794 = and <2 x i64> %793, <i64 -17587891081216, i64 -17587891081216>
  %795 = bitcast <2 x i64> %794 to <4 x float>
  %796 = fsub <4 x float> %787, %795
  %797 = fmul <4 x float> %613, %787
  %798 = bitcast <4 x float> %797 to <2 x i64>
  %799 = xor <2 x i64> %798, <i64 -9223372034707292160, i64 -9223372034707292160>
  %800 = bitcast <2 x i64> %799 to <4 x float>
  %801 = fmul <4 x float> %791, %795
  %802 = fadd <4 x float> %801, %800
  %803 = fmul <4 x float> %792, %795
  %804 = fadd <4 x float> %803, %802
  %805 = fmul <4 x float> %796, %791
  %806 = fadd <4 x float> %805, %804
  %807 = fmul <4 x float> %792, %796
  %808 = fadd <4 x float> %807, %806
  %809 = fmul <4 x float> %613, %788
  %810 = fadd <4 x float> %808, %809
  %811 = fmul <4 x float> %629, %787
  %812 = fadd <4 x float> %811, %810
  %813 = bitcast <4 x float> %797 to <4 x i32>
  %814 = bitcast <4 x float> %812 to <4 x i32>
  br label %815

; <label>:815:                                    ; preds = %2, %628
  %816 = phi <4 x i32> [ %813, %628 ], [ %125, %2 ]
  %817 = phi <4 x i32> [ %814, %628 ], [ %129, %2 ]
  %818 = fmul <4 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %819 = and <4 x i32> %816, %9
  %820 = and <4 x i32> %112, %20
  %821 = or <4 x i32> %819, %820
  %822 = and <4 x i32> %817, %9
  %823 = and <4 x i32> %114, %20
  %824 = or <4 x i32> %822, %823
  %825 = bitcast <4 x float> %818 to <4 x i32>
  %826 = and <4 x i32> %7, %825
  %827 = and <4 x i32> %821, %25
  %828 = or <4 x i32> %827, %826
  %829 = and <4 x i32> %824, %25
  %830 = bitcast <4 x i32> %622 to <4 x float>
  %831 = bitcast <4 x i32> %623 to <4 x float>
  %832 = bitcast <4 x i32> %828 to <4 x float>
  %833 = bitcast <4 x i32> %829 to <4 x float>
  %834 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %832
  %835 = bitcast <4 x i32> %828 to <2 x i64>
  %836 = and <2 x i64> %835, <i64 -17587891081216, i64 -17587891081216>
  %837 = bitcast <2 x i64> %836 to <4 x float>
  %838 = fsub <4 x float> %832, %837
  %839 = bitcast <4 x float> %834 to <2 x i64>
  %840 = and <2 x i64> %839, <i64 -17587891081216, i64 -17587891081216>
  %841 = bitcast <2 x i64> %840 to <4 x float>
  %842 = fsub <4 x float> %834, %841
  %843 = bitcast <4 x i32> %622 to <2 x i64>
  %844 = and <2 x i64> %843, <i64 -17587891081216, i64 -17587891081216>
  %845 = bitcast <2 x i64> %844 to <4 x float>
  %846 = fsub <4 x float> %830, %845
  %847 = fmul <4 x float> %834, %830
  %848 = fmul <4 x float> %837, %841
  %849 = fadd <4 x float> %848, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %850 = fmul <4 x float> %842, %837
  %851 = fadd <4 x float> %850, %849
  %852 = fmul <4 x float> %838, %841
  %853 = fadd <4 x float> %852, %851
  %854 = fmul <4 x float> %838, %842
  %855 = fadd <4 x float> %854, %853
  %856 = bitcast <4 x float> %855 to <2 x i64>
  %857 = xor <2 x i64> %856, <i64 -9223372034707292160, i64 -9223372034707292160>
  %858 = bitcast <2 x i64> %857 to <4 x float>
  %859 = bitcast <4 x float> %847 to <2 x i64>
  %860 = xor <2 x i64> %859, <i64 -9223372034707292160, i64 -9223372034707292160>
  %861 = bitcast <2 x i64> %860 to <4 x float>
  %862 = fmul <4 x float> %845, %841
  %863 = fadd <4 x float> %862, %861
  %864 = fmul <4 x float> %842, %845
  %865 = fadd <4 x float> %864, %863
  %866 = fmul <4 x float> %846, %841
  %867 = fadd <4 x float> %866, %865
  %868 = fmul <4 x float> %846, %842
  %869 = fadd <4 x float> %868, %867
  %870 = fmul <4 x float> %847, %858
  %871 = fadd <4 x float> %869, %870
  %872 = fmul <4 x float> %847, %833
  %873 = fsub <4 x float> %831, %872
  %874 = fmul <4 x float> %834, %873
  %875 = fadd <4 x float> %874, %871
  %876 = bitcast %struct.df2* %0 to <4 x i32>*
  store <4 x i32> %609, <4 x i32>* %876, align 16
  %877 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  %878 = bitcast <4 x float>* %877 to <4 x i32>*
  store <4 x i32> %612, <4 x i32>* %878, align 16
  %879 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <4 x float> %847, <4 x float>* %879, align 16
  %880 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <4 x float> %875, <4 x float>* %880, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_lgammaf4_u10sse2(<4 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 16
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <4 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x float>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <4 x float>
  %14 = bitcast <2 x i64> %12 to <4 x float>
  %15 = fmul <4 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = fcmp olt <4 x float> %15, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = fmul <4 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %20 = select <4 x i1> %16, <4 x float> %19, <4 x float> %15
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = and <2 x i64> %18, <i64 820338753727, i64 820338753727>
  %24 = and <2 x i64> %18, <i64 545460846719, i64 545460846719>
  %25 = xor <2 x i64> %24, <i64 545460846719, i64 545460846719>
  %26 = or <2 x i64> %25, %23
  %27 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %28 = bitcast <2 x i64> %26 to <4 x i32>
  %29 = sub <4 x i32> %27, %28
  %30 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %31 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %30
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %13, %32
  %34 = fmul <4 x float> %14, %32
  %35 = fadd <4 x float> %33, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fsub <4 x float> %35, %33
  %37 = fsub <4 x float> %35, %36
  %38 = fsub <4 x float> %33, %37
  %39 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %36
  %40 = fadd <4 x float> %39, %38
  %41 = fadd <4 x float> %34, %40
  %42 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %43 = fsub <4 x float> %42, %33
  %44 = fsub <4 x float> %42, %43
  %45 = fsub <4 x float> %33, %44
  %46 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %43
  %47 = fadd <4 x float> %46, %45
  %48 = fadd <4 x float> %34, %47
  %49 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %42
  %50 = bitcast <4 x float> %42 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = fsub <4 x float> %42, %52
  %54 = bitcast <4 x float> %49 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fsub <4 x float> %49, %56
  %58 = bitcast <4 x float> %35 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -17587891081216, i64 -17587891081216>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fsub <4 x float> %35, %60
  %62 = fmul <4 x float> %35, %49
  %63 = fmul <4 x float> %52, %56
  %64 = fadd <4 x float> %63, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %65 = fmul <4 x float> %57, %52
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %53, %56
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %53, %57
  %70 = fadd <4 x float> %69, %68
  %71 = bitcast <4 x float> %70 to <2 x i64>
  %72 = xor <2 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = bitcast <4 x float> %62 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %60, %56
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %57, %60
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %61, %56
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %61, %57
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %62, %73
  %86 = fadd <4 x float> %84, %85
  %87 = fmul <4 x float> %62, %48
  %88 = fsub <4 x float> %41, %87
  %89 = fmul <4 x float> %49, %88
  %90 = fadd <4 x float> %89, %86
  %91 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fsub <4 x float> %62, %92
  %94 = fmul <4 x float> %62, %62
  %95 = bitcast <4 x float> %94 to <2 x i64>
  %96 = xor <2 x i64> %95, <i64 -9223372034707292160, i64 -9223372034707292160>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fmul <4 x float> %92, %92
  %99 = fadd <4 x float> %98, %97
  %100 = fadd <4 x float> %92, %92
  %101 = fmul <4 x float> %100, %93
  %102 = fadd <4 x float> %101, %99
  %103 = fmul <4 x float> %93, %93
  %104 = fadd <4 x float> %103, %102
  %105 = fadd <4 x float> %90, %90
  %106 = fmul <4 x float> %62, %105
  %107 = fadd <4 x float> %104, %106
  %108 = fmul <4 x float> %94, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %109 = fadd <4 x float> %108, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %110 = fmul <4 x float> %94, %109
  %111 = fadd <4 x float> %110, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %112 = fmul <4 x float> %94, %111
  %113 = fadd <4 x float> %112, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %114 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %29) #6
  %115 = bitcast <4 x float> %114 to <2 x i64>
  %116 = and <2 x i64> %115, <i64 -17587891081216, i64 -17587891081216>
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fsub <4 x float> %114, %117
  %119 = fmul <4 x float> %114, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %120 = bitcast <4 x float> %119 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fmul <4 x float> %117, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %117, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %118, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %118, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %114, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %132 = fadd <4 x float> %131, %130
  %133 = fmul <4 x float> %62, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %134 = fmul <4 x float> %90, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %135 = fadd <4 x float> %119, %133
  %136 = fsub <4 x float> %119, %135
  %137 = fadd <4 x float> %133, %136
  %138 = fadd <4 x float> %132, %137
  %139 = fadd <4 x float> %138, %134
  %140 = and <2 x i64> %95, <i64 -17587891081216, i64 -17587891081216>
  %141 = bitcast <2 x i64> %140 to <4 x float>
  %142 = fsub <4 x float> %94, %141
  %143 = fmul <4 x float> %62, %94
  %144 = bitcast <4 x float> %143 to <2 x i64>
  %145 = xor <2 x i64> %144, <i64 -9223372034707292160, i64 -9223372034707292160>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fmul <4 x float> %92, %141
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %142, %92
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %93, %141
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %93, %142
  %154 = fadd <4 x float> %153, %152
  %155 = fmul <4 x float> %94, %90
  %156 = fadd <4 x float> %154, %155
  %157 = fmul <4 x float> %62, %107
  %158 = fadd <4 x float> %156, %157
  %159 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %143, %160
  %162 = bitcast <4 x float> %113 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %113, %164
  %166 = fmul <4 x float> %143, %113
  %167 = bitcast <4 x float> %166 to <2 x i64>
  %168 = xor <2 x i64> %167, <i64 -9223372034707292160, i64 -9223372034707292160>
  %169 = bitcast <2 x i64> %168 to <4 x float>
  %170 = fmul <4 x float> %160, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %164
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %165, %160
  %175 = fadd <4 x float> %174, %173
  %176 = fmul <4 x float> %161, %165
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %113, %158
  %179 = fadd <4 x float> %177, %178
  %180 = fadd <4 x float> %135, %166
  %181 = fsub <4 x float> %135, %180
  %182 = fadd <4 x float> %166, %181
  %183 = fadd <4 x float> %182, %139
  %184 = fadd <4 x float> %183, %179
  %185 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %186 = load <4 x float>, <4 x float>* %185, align 16
  %187 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %188 = load <4 x float>, <4 x float>* %187, align 16
  %189 = fadd <4 x float> %186, %180
  %190 = fsub <4 x float> %189, %186
  %191 = fsub <4 x float> %189, %190
  %192 = fsub <4 x float> %186, %191
  %193 = fsub <4 x float> %180, %190
  %194 = fadd <4 x float> %193, %192
  %195 = fadd <4 x float> %188, %184
  %196 = fadd <4 x float> %194, %195
  %197 = fadd <4 x float> %189, %196
  %198 = bitcast <4 x float> %0 to <2 x i64>
  %199 = and <2 x i64> %198, <i64 9223372034707292159, i64 9223372034707292159>
  %200 = bitcast <2 x i64> %199 to <4 x float>
  %201 = fcmp oeq <4 x float> %200, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %202 = fcmp ole <4 x float> %0, zeroinitializer
  %203 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %204 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %203) #6
  %205 = fcmp oeq <4 x float> %204, %0
  %206 = and <4 x i1> %205, %202
  %207 = fcmp uno <4 x float> %0, zeroinitializer
  %208 = or <4 x i1> %201, %207
  %209 = fcmp uno <4 x float> %197, zeroinitializer
  %210 = xor <4 x i1> %208, <i1 true, i1 true, i1 true, i1 true>
  %211 = and <4 x i1> %209, %210
  %212 = or <4 x i1> %206, %201
  %213 = or <4 x i1> %212, %211
  %214 = select <4 x i1> %213, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %197
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <4 x float> %214
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_erff4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fcmp olt <4 x float> %4, <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>
  %8 = sext <4 x i1> %7 to <4 x i32>
  %9 = fcmp olt <4 x float> %4, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %4, %4
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %12, %6
  %14 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <2 x i64> %3 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = and <4 x i32> %8, <i32 -1214881472, i32 -1214881472, i32 -1214881472, i32 -1214881472>
  %20 = xor <4 x i32> %8, <i32 -1, i32 -1, i32 -1, i32 -1>
  %21 = and <4 x i32> %20, <i32 -1222684680, i32 -1222684680, i32 -1222684680, i32 -1222684680>
  %22 = or <4 x i32> %21, %19
  %23 = and <4 x i32> %6, <i32 949267545, i32 949267545, i32 949267545, i32 949267545>
  %24 = and <4 x i32> %22, %14
  %25 = or <4 x i32> %24, %23
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = and <4 x i32> %8, <i32 969830916, i32 969830916, i32 969830916, i32 969830916>
  %28 = and <4 x i32> %20, <i32 964827564, i32 964827564, i32 964827564, i32 964827564>
  %29 = or <4 x i32> %28, %27
  %30 = and <4 x i32> %6, <i32 -1169447871, i32 -1169447871, i32 -1169447871, i32 -1169447871>
  %31 = and <4 x i32> %29, %14
  %32 = or <4 x i32> %31, %30
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = fmul <4 x float> %18, %26
  %35 = fadd <4 x float> %34, %33
  %36 = and <4 x i32> %8, <i32 -1149147102, i32 -1149147102, i32 -1149147102, i32 -1149147102>
  %37 = and <4 x i32> %20, <i32 -1153483038, i32 -1153483038, i32 -1153483038, i32 -1153483038>
  %38 = or <4 x i32> %37, %36
  %39 = and <4 x i32> %6, <i32 1000935608, i32 1000935608, i32 1000935608, i32 1000935608>
  %40 = and <4 x i32> %38, %14
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %35, %18
  %44 = fadd <4 x float> %43, %42
  %45 = and <4 x i32> %8, <i32 1019762002, i32 1019762002, i32 1019762002, i32 1019762002>
  %46 = and <4 x i32> %20, <i32 1017690926, i32 1017690926, i32 1017690926, i32 1017690926>
  %47 = or <4 x i32> %46, %45
  %48 = and <4 x i32> %6, <i32 -1126442247, i32 -1126442247, i32 -1126442247, i32 -1126442247>
  %49 = and <4 x i32> %47, %14
  %50 = or <4 x i32> %49, %48
  %51 = bitcast <4 x i32> %50 to <4 x float>
  %52 = fmul <4 x float> %44, %18
  %53 = fadd <4 x float> %52, %51
  %54 = and <4 x i32> %8, <i32 -1109698805, i32 -1109698805, i32 -1109698805, i32 -1109698805>
  %55 = and <4 x i32> %20, <i32 -1110783367, i32 -1110783367, i32 -1110783367, i32 -1110783367>
  %56 = or <4 x i32> %55, %54
  %57 = and <4 x i32> %6, <i32 1038554204, i32 1038554204, i32 1038554204, i32 1038554204>
  %58 = and <4 x i32> %56, %14
  %59 = or <4 x i32> %58, %57
  %60 = bitcast <4 x i32> %59 to <4 x float>
  %61 = fmul <4 x float> %53, %18
  %62 = fadd <4 x float> %61, %60
  %63 = bitcast <4 x float> %62 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %62, %65
  %67 = bitcast <4 x i32> %17 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> %18, %69
  %71 = fmul <4 x float> %62, %18
  %72 = bitcast <4 x float> %71 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %69, %65
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %66, %69
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %70, %65
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %70, %66
  %82 = fadd <4 x float> %81, %80
  %83 = and <4 x i32> %8, <i32 -1088261013, i32 -1088261013, i32 -1088261013, i32 -1088261013>
  %84 = and <4 x i32> %20, <i32 -1088109864, i32 -1088109864, i32 -1088109864, i32 -1088109864>
  %85 = or <4 x i32> %84, %83
  %86 = and <4 x i32> %8, <i32 -1307238454, i32 -1307238454, i32 -1307238454, i32 -1307238454>
  %87 = and <4 x i32> %20, <i32 855261505, i32 855261505, i32 855261505, i32 855261505>
  %88 = or <4 x i32> %87, %86
  %89 = and <4 x i32> %6, <i32 -1094675566, i32 -1094675566, i32 -1094675566, i32 -1094675566>
  %90 = and <4 x i32> %85, %14
  %91 = or <4 x i32> %90, %89
  %92 = and <4 x i32> %6, <i32 -1316695743, i32 -1316695743, i32 -1316695743, i32 -1316695743>
  %93 = and <4 x i32> %88, %14
  %94 = or <4 x i32> %93, %92
  %95 = bitcast <4 x i32> %91 to <4 x float>
  %96 = bitcast <4 x i32> %94 to <4 x float>
  %97 = fadd <4 x float> %71, %95
  %98 = fsub <4 x float> %97, %71
  %99 = fsub <4 x float> %97, %98
  %100 = fsub <4 x float> %71, %99
  %101 = fsub <4 x float> %95, %98
  %102 = fadd <4 x float> %101, %100
  %103 = fadd <4 x float> %82, %96
  %104 = fadd <4 x float> %102, %103
  %105 = bitcast <4 x float> %97 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fsub <4 x float> %97, %107
  %109 = fmul <4 x float> %97, %18
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fmul <4 x float> %69, %107
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %108, %69
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %70, %107
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %70, %108
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %104, %18
  %122 = fadd <4 x float> %120, %121
  %123 = and <4 x i32> %8, <i32 -1081049991, i32 -1081049991, i32 -1081049991, i32 -1081049991>
  %124 = and <4 x i32> %20, <i32 -1081085087, i32 -1081085087, i32 -1081085087, i32 -1081085087>
  %125 = or <4 x i32> %124, %123
  %126 = and <4 x i32> %8, <i32 860125366, i32 860125366, i32 860125366, i32 860125366>
  %127 = and <4 x i32> %20, <i32 -1288231304, i32 -1288231304, i32 -1288231304, i32 -1288231304>
  %128 = or <4 x i32> %127, %126
  %129 = and <4 x i32> %6, <i32 1066430138, i32 1066430138, i32 1066430138, i32 1066430138>
  %130 = and <4 x i32> %125, %14
  %131 = or <4 x i32> %130, %129
  %132 = and <4 x i32> %6, <i32 862361514, i32 862361514, i32 862361514, i32 862361514>
  %133 = and <4 x i32> %128, %14
  %134 = or <4 x i32> %133, %132
  %135 = bitcast <4 x i32> %131 to <4 x float>
  %136 = bitcast <4 x i32> %134 to <4 x float>
  %137 = fadd <4 x float> %109, %135
  %138 = fsub <4 x float> %137, %109
  %139 = fsub <4 x float> %137, %138
  %140 = fsub <4 x float> %109, %139
  %141 = fsub <4 x float> %135, %138
  %142 = fadd <4 x float> %141, %140
  %143 = fadd <4 x float> %122, %136
  %144 = fadd <4 x float> %142, %143
  %145 = bitcast <4 x float> %137 to <2 x i64>
  %146 = and <2 x i64> %145, <i64 -17587891081216, i64 -17587891081216>
  %147 = bitcast <2 x i64> %146 to <4 x float>
  %148 = fsub <4 x float> %137, %147
  %149 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %150 = bitcast <2 x i64> %149 to <4 x float>
  %151 = fsub <4 x float> %4, %150
  %152 = fmul <4 x float> %137, %4
  %153 = bitcast <4 x float> %152 to <2 x i64>
  %154 = xor <2 x i64> %153, <i64 -9223372034707292160, i64 -9223372034707292160>
  %155 = bitcast <2 x i64> %154 to <4 x float>
  %156 = fmul <4 x float> %150, %147
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %148, %150
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %151, %147
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %151, %148
  %163 = fadd <4 x float> %162, %161
  %164 = fmul <4 x float> %144, %4
  %165 = fadd <4 x float> %163, %164
  %166 = bitcast <4 x float> %152 to <4 x i32>
  %167 = bitcast <4 x float> %165 to <4 x i32>
  %168 = fadd <4 x float> %152, %165
  %169 = fmul <4 x float> %168, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %170 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %169) #6
  %171 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %170) #6
  %172 = fmul <4 x float> %171, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %173 = fadd <4 x float> %152, %172
  %174 = fsub <4 x float> %173, %152
  %175 = fsub <4 x float> %173, %174
  %176 = fsub <4 x float> %152, %175
  %177 = fsub <4 x float> %172, %174
  %178 = fadd <4 x float> %177, %176
  %179 = fadd <4 x float> %165, %178
  %180 = fmul <4 x float> %171, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %181 = fadd <4 x float> %180, %173
  %182 = fsub <4 x float> %181, %173
  %183 = fsub <4 x float> %181, %182
  %184 = fsub <4 x float> %173, %183
  %185 = fsub <4 x float> %180, %182
  %186 = fadd <4 x float> %185, %184
  %187 = fadd <4 x float> %186, %179
  %188 = fmul <4 x float> %181, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %189 = fadd <4 x float> %188, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %190 = fmul <4 x float> %181, %189
  %191 = fadd <4 x float> %190, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %192 = fmul <4 x float> %181, %191
  %193 = fadd <4 x float> %192, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %194 = bitcast <4 x float> %181 to <2 x i64>
  %195 = and <2 x i64> %194, <i64 -17587891081216, i64 -17587891081216>
  %196 = bitcast <2 x i64> %195 to <4 x float>
  %197 = fsub <4 x float> %181, %196
  %198 = bitcast <4 x float> %193 to <2 x i64>
  %199 = and <2 x i64> %198, <i64 -17587891081216, i64 -17587891081216>
  %200 = bitcast <2 x i64> %199 to <4 x float>
  %201 = fsub <4 x float> %193, %200
  %202 = fmul <4 x float> %181, %193
  %203 = bitcast <4 x float> %202 to <2 x i64>
  %204 = xor <2 x i64> %203, <i64 -9223372034707292160, i64 -9223372034707292160>
  %205 = bitcast <2 x i64> %204 to <4 x float>
  %206 = fmul <4 x float> %196, %200
  %207 = fadd <4 x float> %206, %205
  %208 = fmul <4 x float> %197, %200
  %209 = fadd <4 x float> %208, %207
  %210 = fmul <4 x float> %201, %196
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %197, %201
  %213 = fadd <4 x float> %212, %211
  %214 = fmul <4 x float> %187, %193
  %215 = fadd <4 x float> %214, %213
  %216 = fadd <4 x float> %202, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %217 = fsub <4 x float> %216, %202
  %218 = fsub <4 x float> %216, %217
  %219 = fsub <4 x float> %202, %218
  %220 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %217
  %221 = fadd <4 x float> %220, %219
  %222 = fadd <4 x float> %221, %215
  %223 = bitcast <4 x float> %216 to <2 x i64>
  %224 = and <2 x i64> %223, <i64 -17587891081216, i64 -17587891081216>
  %225 = bitcast <2 x i64> %224 to <4 x float>
  %226 = fsub <4 x float> %216, %225
  %227 = fmul <4 x float> %181, %216
  %228 = bitcast <4 x float> %227 to <2 x i64>
  %229 = xor <2 x i64> %228, <i64 -9223372034707292160, i64 -9223372034707292160>
  %230 = bitcast <2 x i64> %229 to <4 x float>
  %231 = fmul <4 x float> %196, %225
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %197, %225
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %226, %196
  %236 = fadd <4 x float> %235, %234
  %237 = fmul <4 x float> %197, %226
  %238 = fadd <4 x float> %237, %236
  %239 = fmul <4 x float> %181, %222
  %240 = fadd <4 x float> %238, %239
  %241 = fmul <4 x float> %187, %216
  %242 = fadd <4 x float> %241, %240
  %243 = fadd <4 x float> %227, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %244 = fsub <4 x float> %243, %227
  %245 = fsub <4 x float> %243, %244
  %246 = fsub <4 x float> %227, %245
  %247 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %244
  %248 = fadd <4 x float> %247, %246
  %249 = fadd <4 x float> %248, %242
  %250 = fmul <4 x float> %181, %181
  %251 = bitcast <4 x float> %250 to <2 x i64>
  %252 = xor <2 x i64> %251, <i64 -9223372034707292160, i64 -9223372034707292160>
  %253 = bitcast <2 x i64> %252 to <4 x float>
  %254 = fmul <4 x float> %196, %196
  %255 = fadd <4 x float> %254, %253
  %256 = fadd <4 x float> %196, %196
  %257 = fmul <4 x float> %256, %197
  %258 = fadd <4 x float> %257, %255
  %259 = fmul <4 x float> %197, %197
  %260 = fadd <4 x float> %259, %258
  %261 = fadd <4 x float> %187, %187
  %262 = fmul <4 x float> %181, %261
  %263 = fadd <4 x float> %262, %260
  %264 = and <2 x i64> %251, <i64 -17587891081216, i64 -17587891081216>
  %265 = bitcast <2 x i64> %264 to <4 x float>
  %266 = fsub <4 x float> %250, %265
  %267 = bitcast <4 x float> %243 to <2 x i64>
  %268 = and <2 x i64> %267, <i64 -17587891081216, i64 -17587891081216>
  %269 = bitcast <2 x i64> %268 to <4 x float>
  %270 = fsub <4 x float> %243, %269
  %271 = fmul <4 x float> %250, %243
  %272 = bitcast <4 x float> %271 to <2 x i64>
  %273 = xor <2 x i64> %272, <i64 -9223372034707292160, i64 -9223372034707292160>
  %274 = bitcast <2 x i64> %273 to <4 x float>
  %275 = fmul <4 x float> %265, %269
  %276 = fadd <4 x float> %275, %274
  %277 = fmul <4 x float> %266, %269
  %278 = fadd <4 x float> %277, %276
  %279 = fmul <4 x float> %270, %265
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %266, %270
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %250, %249
  %284 = fadd <4 x float> %282, %283
  %285 = fmul <4 x float> %263, %243
  %286 = fadd <4 x float> %285, %284
  %287 = fadd <4 x float> %181, %271
  %288 = fsub <4 x float> %287, %181
  %289 = fsub <4 x float> %287, %288
  %290 = fsub <4 x float> %181, %289
  %291 = fsub <4 x float> %271, %288
  %292 = fadd <4 x float> %291, %290
  %293 = fadd <4 x float> %187, %286
  %294 = fadd <4 x float> %292, %293
  %295 = fadd <4 x float> %287, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %296 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %295
  %297 = fadd <4 x float> %287, %296
  %298 = fadd <4 x float> %297, %294
  %299 = ashr <4 x i32> %170, <i32 1, i32 1, i32 1, i32 1>
  %300 = shl <4 x i32> %299, <i32 23, i32 23, i32 23, i32 23>
  %301 = add <4 x i32> %300, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %302 = bitcast <4 x i32> %301 to <4 x float>
  %303 = fmul <4 x float> %295, %302
  %304 = sub <4 x i32> %170, %299
  %305 = shl <4 x i32> %304, <i32 23, i32 23, i32 23, i32 23>
  %306 = add <4 x i32> %305, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %307 = bitcast <4 x i32> %306 to <4 x float>
  %308 = fmul <4 x float> %303, %307
  %309 = fmul <4 x float> %298, %302
  %310 = fmul <4 x float> %309, %307
  %311 = fcmp olt <4 x float> %152, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %312 = sext <4 x i1> %311 to <4 x i32>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = bitcast <4 x float> %308 to <2 x i64>
  %315 = xor <2 x i64> %313, <i64 -1, i64 -1>
  %316 = and <2 x i64> %314, %315
  %317 = bitcast <4 x float> %310 to <2 x i64>
  %318 = and <2 x i64> %317, %315
  %319 = xor <2 x i64> %316, <i64 -9223372034707292160, i64 -9223372034707292160>
  %320 = xor <2 x i64> %318, <i64 -9223372034707292160, i64 -9223372034707292160>
  %321 = bitcast <2 x i64> %319 to <4 x float>
  %322 = bitcast <2 x i64> %320 to <4 x float>
  %323 = fadd <4 x float> %321, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %324 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %323
  %325 = fadd <4 x float> %324, %321
  %326 = fadd <4 x float> %325, %322
  %327 = and <4 x i32> %166, %6
  %328 = bitcast <4 x float> %323 to <4 x i32>
  %329 = and <4 x i32> %328, %14
  %330 = or <4 x i32> %329, %327
  %331 = and <4 x i32> %167, %6
  %332 = bitcast <4 x float> %326 to <4 x i32>
  %333 = and <4 x i32> %332, %14
  %334 = or <4 x i32> %333, %331
  %335 = bitcast <4 x i32> %330 to <4 x float>
  %336 = bitcast <4 x i32> %334 to <4 x float>
  %337 = fadd <4 x float> %335, %336
  %338 = bitcast <4 x float> %337 to <4 x i32>
  %339 = and <4 x i32> %338, %10
  %340 = and <4 x i32> %10, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %341 = xor <4 x i32> %340, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %342 = or <4 x i32> %339, %341
  %343 = fcmp uno <4 x float> %4, zeroinitializer
  %344 = bitcast <4 x float> %0 to <4 x i32>
  %345 = and <4 x i32> %344, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %346 = xor <4 x i32> %342, %345
  %347 = bitcast <4 x i32> %346 to <4 x float>
  %348 = select <4 x i1> %343, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %347
  ret <4 x float> %348
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_erfcf4_u15sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fcmp olt <4 x float> %4, <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
  %8 = sext <4 x i1> %7 to <4 x i32>
  %9 = fcmp olt <4 x float> %4, <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fcmp olt <4 x float> %4, <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>
  %12 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %13 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = fsub <4 x float> %4, %14
  %16 = bitcast <4 x float> %12 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fsub <4 x float> %12, %18
  %20 = fmul <4 x float> %14, %18
  %21 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %22 = fmul <4 x float> %19, %14
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %15, %18
  %25 = fadd <4 x float> %24, %23
  %26 = fmul <4 x float> %15, %19
  %27 = fadd <4 x float> %26, %25
  %28 = bitcast <4 x float> %27 to <2 x i64>
  %29 = xor <2 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = xor <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %32 = bitcast <2 x i64> %31 to <4 x float>
  %33 = fadd <4 x float> %18, %32
  %34 = fadd <4 x float> %19, %33
  %35 = fmul <4 x float> %18, zeroinitializer
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %19, zeroinitializer
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %12, %30
  %40 = fadd <4 x float> %38, %39
  %41 = fmul <4 x float> %12, zeroinitializer
  %42 = fsub <4 x float> zeroinitializer, %41
  %43 = fmul <4 x float> %12, %42
  %44 = fadd <4 x float> %43, %40
  %45 = bitcast <2 x i64> %3 to <4 x i32>
  %46 = and <4 x i32> %8, %45
  %47 = xor <4 x i32> %8, <i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <4 x float> %12 to <4 x i32>
  %49 = and <4 x i32> %48, %47
  %50 = or <4 x i32> %49, %46
  %51 = bitcast <4 x float> %44 to <4 x i32>
  %52 = and <4 x i32> %51, %47
  %53 = and <4 x i32> %10, <i32 -1094312355, i32 -1094312355, i32 -1094312355, i32 -1094312355>
  %54 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = and <4 x i32> %54, <i32 1066320793, i32 1066320793, i32 1066320793, i32 1066320793>
  %56 = or <4 x i32> %55, %53
  %57 = and <4 x i32> %8, <i32 -1227798726, i32 -1227798726, i32 -1227798726, i32 -1227798726>
  %58 = and <4 x i32> %56, %47
  %59 = or <4 x i32> %58, %57
  %60 = and <4 x i32> %6, <i32 -1196087518, i32 -1196087518, i32 -1196087518, i32 -1196087518>
  %61 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %62 = and <4 x i32> %59, %61
  %63 = or <4 x i32> %62, %60
  %64 = bitcast <4 x i32> %63 to <4 x float>
  %65 = bitcast <4 x i32> %50 to <4 x float>
  %66 = and <4 x i32> %10, <i32 1067769783, i32 1067769783, i32 1067769783, i32 1067769783>
  %67 = and <4 x i32> %54, <i32 -1083044951, i32 -1083044951, i32 -1083044951, i32 -1083044951>
  %68 = or <4 x i32> %67, %66
  %69 = and <4 x i32> %8, <i32 946940477, i32 946940477, i32 946940477, i32 946940477>
  %70 = and <4 x i32> %68, %47
  %71 = or <4 x i32> %70, %69
  %72 = and <4 x i32> %6, <i32 974998127, i32 974998127, i32 974998127, i32 974998127>
  %73 = and <4 x i32> %71, %61
  %74 = or <4 x i32> %73, %72
  %75 = bitcast <4 x i32> %74 to <4 x float>
  %76 = fmul <4 x float> %65, %64
  %77 = fadd <4 x float> %76, %75
  %78 = and <4 x i32> %10, <i32 -1075278590, i32 -1075278590, i32 -1075278590, i32 -1075278590>
  %79 = and <4 x i32> %54, <i32 -1094990975, i32 -1094990975, i32 -1094990975, i32 -1094990975>
  %80 = or <4 x i32> %79, %78
  %81 = and <4 x i32> %8, <i32 919170074, i32 919170074, i32 919170074, i32 919170074>
  %82 = and <4 x i32> %80, %47
  %83 = or <4 x i32> %82, %81
  %84 = and <4 x i32> %6, <i32 -1160096835, i32 -1160096835, i32 -1160096835, i32 -1160096835>
  %85 = and <4 x i32> %83, %61
  %86 = or <4 x i32> %85, %84
  %87 = bitcast <4 x i32> %86 to <4 x float>
  %88 = fmul <4 x float> %77, %65
  %89 = fadd <4 x float> %88, %87
  %90 = and <4 x i32> %10, <i32 1067443245, i32 1067443245, i32 1067443245, i32 1067443245>
  %91 = and <4 x i32> %54, <i32 1060581211, i32 1060581211, i32 1060581211, i32 1060581211>
  %92 = or <4 x i32> %91, %90
  %93 = and <4 x i32> %8, <i32 -1153771404, i32 -1153771404, i32 -1153771404, i32 -1153771404>
  %94 = and <4 x i32> %92, %47
  %95 = or <4 x i32> %94, %93
  %96 = and <4 x i32> %6, <i32 960248924, i32 960248924, i32 960248924, i32 960248924>
  %97 = and <4 x i32> %95, %61
  %98 = or <4 x i32> %97, %96
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = fmul <4 x float> %89, %65
  %101 = fadd <4 x float> %100, %99
  %102 = and <4 x i32> %10, <i32 -1106767049, i32 -1106767049, i32 -1106767049, i32 -1106767049>
  %103 = and <4 x i32> %54, <i32 -1135678503, i32 -1135678503, i32 -1135678503, i32 -1135678503>
  %104 = or <4 x i32> %103, %102
  %105 = and <4 x i32> %8, <i32 1018769024, i32 1018769024, i32 1018769024, i32 1018769024>
  %106 = and <4 x i32> %104, %47
  %107 = or <4 x i32> %106, %105
  %108 = and <4 x i32> %6, <i32 1016909239, i32 1016909239, i32 1016909239, i32 1016909239>
  %109 = and <4 x i32> %107, %61
  %110 = or <4 x i32> %109, %108
  %111 = bitcast <4 x i32> %110 to <4 x float>
  %112 = fmul <4 x float> %101, %65
  %113 = fadd <4 x float> %112, %111
  %114 = bitcast <4 x i32> %52 to <4 x float>
  %115 = bitcast <4 x i32> %50 to <2 x i64>
  %116 = and <2 x i64> %115, <i64 -17587891081216, i64 -17587891081216>
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fsub <4 x float> %65, %117
  %119 = bitcast <4 x float> %113 to <2 x i64>
  %120 = and <2 x i64> %119, <i64 -17587891081216, i64 -17587891081216>
  %121 = bitcast <2 x i64> %120 to <4 x float>
  %122 = fsub <4 x float> %113, %121
  %123 = fmul <4 x float> %113, %65
  %124 = bitcast <4 x float> %123 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372034707292160, i64 -9223372034707292160>
  %126 = bitcast <2 x i64> %125 to <4 x float>
  %127 = fmul <4 x float> %117, %121
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %118, %121
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %122, %117
  %132 = fadd <4 x float> %131, %130
  %133 = fmul <4 x float> %118, %122
  %134 = fadd <4 x float> %133, %132
  %135 = fmul <4 x float> %113, %114
  %136 = fadd <4 x float> %135, %134
  %137 = and <4 x i32> %10, <i32 -1091110762, i32 -1091110762, i32 -1091110762, i32 -1091110762>
  %138 = and <4 x i32> %54, <i32 -1090553885, i32 -1090553885, i32 -1090553885, i32 -1090553885>
  %139 = or <4 x i32> %138, %137
  %140 = and <4 x i32> %10, <i32 -1357187512, i32 -1357187512, i32 -1357187512, i32 -1357187512>
  %141 = and <4 x i32> %54, <i32 -1307803692, i32 -1307803692, i32 -1307803692, i32 -1307803692>
  %142 = or <4 x i32> %141, %140
  %143 = and <4 x i32> %8, <i32 -1109947380, i32 -1109947380, i32 -1109947380, i32 -1109947380>
  %144 = and <4 x i32> %139, %47
  %145 = or <4 x i32> %144, %143
  %146 = and <4 x i32> %8, <i32 829485597, i32 829485597, i32 829485597, i32 829485597>
  %147 = and <4 x i32> %142, %47
  %148 = or <4 x i32> %147, %146
  %149 = and <4 x i32> %6, <i32 -1110279197, i32 -1110279197, i32 -1110279197, i32 -1110279197>
  %150 = and <4 x i32> %145, %61
  %151 = or <4 x i32> %150, %149
  %152 = and <4 x i32> %6, <i32 -1327042494, i32 -1327042494, i32 -1327042494, i32 -1327042494>
  %153 = and <4 x i32> %148, %61
  %154 = or <4 x i32> %153, %152
  %155 = bitcast <4 x i32> %151 to <4 x float>
  %156 = bitcast <4 x i32> %154 to <4 x float>
  %157 = fadd <4 x float> %123, %155
  %158 = fsub <4 x float> %157, %123
  %159 = fsub <4 x float> %157, %158
  %160 = fsub <4 x float> %123, %159
  %161 = fsub <4 x float> %155, %158
  %162 = fadd <4 x float> %161, %160
  %163 = fadd <4 x float> %136, %156
  %164 = fadd <4 x float> %162, %163
  %165 = bitcast <4 x float> %157 to <2 x i64>
  %166 = and <2 x i64> %165, <i64 -17587891081216, i64 -17587891081216>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fsub <4 x float> %157, %167
  %169 = fmul <4 x float> %157, %65
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = xor <2 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = fmul <4 x float> %117, %167
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %168, %117
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %118, %167
  %178 = fadd <4 x float> %177, %176
  %179 = fmul <4 x float> %118, %168
  %180 = fadd <4 x float> %179, %178
  %181 = fmul <4 x float> %157, %114
  %182 = fadd <4 x float> %181, %180
  %183 = fmul <4 x float> %164, %65
  %184 = fadd <4 x float> %182, %183
  %185 = and <4 x i32> %10, <i32 -1162855935, i32 -1162855935, i32 -1162855935, i32 -1162855935>
  %186 = and <4 x i32> %54, <i32 -1203395926, i32 -1203395926, i32 -1203395926, i32 -1203395926>
  %187 = or <4 x i32> %186, %185
  %188 = and <4 x i32> %10, <i32 779610433, i32 779610433, i32 779610433, i32 779610433>
  %189 = and <4 x i32> %54, <i32 -1411805944, i32 -1411805944, i32 -1411805944, i32 -1411805944>
  %190 = or <4 x i32> %189, %188
  %191 = and <4 x i32> %8, <i32 -1088243891, i32 -1088243891, i32 -1088243891, i32 -1088243891>
  %192 = and <4 x i32> %187, %47
  %193 = or <4 x i32> %192, %191
  %194 = and <4 x i32> %8, <i32 -1299830412, i32 -1299830412, i32 -1299830412, i32 -1299830412>
  %195 = and <4 x i32> %190, %47
  %196 = or <4 x i32> %195, %194
  %197 = and <4 x i32> %6, <i32 -1088226945, i32 -1088226945, i32 -1088226945, i32 -1088226945>
  %198 = and <4 x i32> %193, %61
  %199 = or <4 x i32> %198, %197
  %200 = and <4 x i32> %6, <i32 852967181, i32 852967181, i32 852967181, i32 852967181>
  %201 = and <4 x i32> %196, %61
  %202 = or <4 x i32> %201, %200
  %203 = bitcast <4 x i32> %199 to <4 x float>
  %204 = bitcast <4 x i32> %202 to <4 x float>
  %205 = fadd <4 x float> %169, %203
  %206 = fsub <4 x float> %205, %169
  %207 = fsub <4 x float> %205, %206
  %208 = fsub <4 x float> %169, %207
  %209 = fsub <4 x float> %203, %206
  %210 = fadd <4 x float> %209, %208
  %211 = fadd <4 x float> %184, %204
  %212 = fadd <4 x float> %210, %211
  %213 = bitcast <4 x float> %205 to <2 x i64>
  %214 = and <2 x i64> %213, <i64 -17587891081216, i64 -17587891081216>
  %215 = bitcast <2 x i64> %214 to <4 x float>
  %216 = fsub <4 x float> %205, %215
  %217 = fmul <4 x float> %205, %65
  %218 = bitcast <4 x float> %217 to <2 x i64>
  %219 = xor <2 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160>
  %220 = bitcast <2 x i64> %219 to <4 x float>
  %221 = fmul <4 x float> %117, %215
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %216, %117
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %118, %215
  %226 = fadd <4 x float> %225, %224
  %227 = fmul <4 x float> %118, %216
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %205, %114
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %212, %65
  %232 = fadd <4 x float> %230, %231
  %233 = and <4 x i32> %10, <i32 -1089305715, i32 -1089305715, i32 -1089305715, i32 -1089305715>
  %234 = and <4 x i32> %54, <i32 -1089304973, i32 -1089304973, i32 -1089304973, i32 -1089304973>
  %235 = or <4 x i32> %234, %233
  %236 = and <4 x i32> %10, <i32 852637102, i32 852637102, i32 852637102, i32 852637102>
  %237 = and <4 x i32> %54, <i32 822434473, i32 822434473, i32 822434473, i32 822434473>
  %238 = or <4 x i32> %237, %236
  %239 = and <4 x i32> %8, <i32 -1081051994, i32 -1081051994, i32 -1081051994, i32 -1081051994>
  %240 = and <4 x i32> %235, %47
  %241 = or <4 x i32> %240, %239
  %242 = and <4 x i32> %8, <i32 -1287297053, i32 -1287297053, i32 -1287297053, i32 -1287297053>
  %243 = and <4 x i32> %238, %47
  %244 = or <4 x i32> %243, %242
  %245 = and <4 x i32> %6, <i32 -1081053509, i32 -1081053509, i32 -1081053509, i32 -1081053509>
  %246 = and <4 x i32> %241, %61
  %247 = or <4 x i32> %246, %245
  %248 = and <4 x i32> %6, <i32 860711096, i32 860711096, i32 860711096, i32 860711096>
  %249 = and <4 x i32> %244, %61
  %250 = or <4 x i32> %249, %248
  %251 = bitcast <4 x i32> %247 to <4 x float>
  %252 = bitcast <4 x i32> %250 to <4 x float>
  %253 = fadd <4 x float> %217, %251
  %254 = fsub <4 x float> %253, %217
  %255 = fsub <4 x float> %253, %254
  %256 = fsub <4 x float> %217, %255
  %257 = fsub <4 x float> %251, %254
  %258 = fadd <4 x float> %257, %256
  %259 = fadd <4 x float> %232, %252
  %260 = fadd <4 x float> %258, %259
  %261 = bitcast <4 x float> %253 to <4 x i32>
  %262 = and <4 x i32> %261, %8
  %263 = bitcast <4 x float> %0 to <4 x i32>
  %264 = or <4 x i32> %263, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %265 = and <4 x i32> %264, %47
  %266 = or <4 x i32> %262, %265
  %267 = bitcast <4 x float> %260 to <4 x i32>
  %268 = and <4 x i32> %267, %8
  %269 = bitcast <4 x i32> %266 to <4 x float>
  %270 = bitcast <4 x i32> %268 to <4 x float>
  %271 = bitcast <4 x i32> %266 to <2 x i64>
  %272 = and <2 x i64> %271, <i64 -17587891081216, i64 -17587891081216>
  %273 = bitcast <2 x i64> %272 to <4 x float>
  %274 = fsub <4 x float> %269, %273
  %275 = fmul <4 x float> %4, %269
  %276 = bitcast <4 x float> %275 to <2 x i64>
  %277 = xor <2 x i64> %276, <i64 -9223372034707292160, i64 -9223372034707292160>
  %278 = bitcast <2 x i64> %277 to <4 x float>
  %279 = fmul <4 x float> %14, %273
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %274, %14
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %15, %273
  %284 = fadd <4 x float> %283, %282
  %285 = fmul <4 x float> %15, %274
  %286 = fadd <4 x float> %285, %284
  %287 = fmul <4 x float> %4, %270
  %288 = fadd <4 x float> %286, %287
  %289 = fadd <4 x float> %253, %275
  %290 = fsub <4 x float> %289, %275
  %291 = fsub <4 x float> %289, %290
  %292 = fsub <4 x float> %275, %291
  %293 = fsub <4 x float> %253, %290
  %294 = fadd <4 x float> %293, %292
  %295 = fadd <4 x float> %260, %288
  %296 = fadd <4 x float> %294, %295
  %297 = bitcast <4 x float> %275 to <4 x i32>
  %298 = and <4 x i32> %297, %8
  %299 = bitcast <4 x float> %289 to <4 x i32>
  %300 = and <4 x i32> %299, %47
  %301 = or <4 x i32> %300, %298
  %302 = bitcast <4 x float> %288 to <4 x i32>
  %303 = and <4 x i32> %302, %8
  %304 = bitcast <4 x float> %296 to <4 x i32>
  %305 = and <4 x i32> %304, %47
  %306 = or <4 x i32> %305, %303
  %307 = bitcast <4 x i32> %301 to <4 x float>
  %308 = bitcast <4 x i32> %306 to <4 x float>
  %309 = fadd <4 x float> %307, %308
  %310 = fmul <4 x float> %309, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %311 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %310) #6
  %312 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %311) #6
  %313 = fmul <4 x float> %312, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %314 = fadd <4 x float> %313, %307
  %315 = fsub <4 x float> %314, %307
  %316 = fsub <4 x float> %314, %315
  %317 = fsub <4 x float> %307, %316
  %318 = fsub <4 x float> %313, %315
  %319 = fadd <4 x float> %318, %317
  %320 = fadd <4 x float> %319, %308
  %321 = fmul <4 x float> %312, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %322 = fadd <4 x float> %321, %314
  %323 = fsub <4 x float> %322, %314
  %324 = fsub <4 x float> %322, %323
  %325 = fsub <4 x float> %314, %324
  %326 = fsub <4 x float> %321, %323
  %327 = fadd <4 x float> %326, %325
  %328 = fadd <4 x float> %327, %320
  %329 = fmul <4 x float> %322, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %330 = fadd <4 x float> %329, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %331 = fmul <4 x float> %322, %330
  %332 = fadd <4 x float> %331, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %333 = fmul <4 x float> %322, %332
  %334 = fadd <4 x float> %333, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %335 = bitcast <4 x float> %322 to <2 x i64>
  %336 = and <2 x i64> %335, <i64 -17587891081216, i64 -17587891081216>
  %337 = bitcast <2 x i64> %336 to <4 x float>
  %338 = fsub <4 x float> %322, %337
  %339 = bitcast <4 x float> %334 to <2 x i64>
  %340 = and <2 x i64> %339, <i64 -17587891081216, i64 -17587891081216>
  %341 = bitcast <2 x i64> %340 to <4 x float>
  %342 = fsub <4 x float> %334, %341
  %343 = fmul <4 x float> %322, %334
  %344 = bitcast <4 x float> %343 to <2 x i64>
  %345 = xor <2 x i64> %344, <i64 -9223372034707292160, i64 -9223372034707292160>
  %346 = bitcast <2 x i64> %345 to <4 x float>
  %347 = fmul <4 x float> %337, %341
  %348 = fadd <4 x float> %347, %346
  %349 = fmul <4 x float> %338, %341
  %350 = fadd <4 x float> %349, %348
  %351 = fmul <4 x float> %342, %337
  %352 = fadd <4 x float> %351, %350
  %353 = fmul <4 x float> %338, %342
  %354 = fadd <4 x float> %353, %352
  %355 = fmul <4 x float> %328, %334
  %356 = fadd <4 x float> %355, %354
  %357 = fadd <4 x float> %343, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %358 = fsub <4 x float> %357, %343
  %359 = fsub <4 x float> %357, %358
  %360 = fsub <4 x float> %343, %359
  %361 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %358
  %362 = fadd <4 x float> %361, %360
  %363 = fadd <4 x float> %362, %356
  %364 = bitcast <4 x float> %357 to <2 x i64>
  %365 = and <2 x i64> %364, <i64 -17587891081216, i64 -17587891081216>
  %366 = bitcast <2 x i64> %365 to <4 x float>
  %367 = fsub <4 x float> %357, %366
  %368 = fmul <4 x float> %322, %357
  %369 = bitcast <4 x float> %368 to <2 x i64>
  %370 = xor <2 x i64> %369, <i64 -9223372034707292160, i64 -9223372034707292160>
  %371 = bitcast <2 x i64> %370 to <4 x float>
  %372 = fmul <4 x float> %337, %366
  %373 = fadd <4 x float> %372, %371
  %374 = fmul <4 x float> %338, %366
  %375 = fadd <4 x float> %374, %373
  %376 = fmul <4 x float> %367, %337
  %377 = fadd <4 x float> %376, %375
  %378 = fmul <4 x float> %338, %367
  %379 = fadd <4 x float> %378, %377
  %380 = fmul <4 x float> %322, %363
  %381 = fadd <4 x float> %379, %380
  %382 = fmul <4 x float> %328, %357
  %383 = fadd <4 x float> %382, %381
  %384 = fadd <4 x float> %368, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %385 = fsub <4 x float> %384, %368
  %386 = fsub <4 x float> %384, %385
  %387 = fsub <4 x float> %368, %386
  %388 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %385
  %389 = fadd <4 x float> %388, %387
  %390 = fadd <4 x float> %389, %383
  %391 = fmul <4 x float> %322, %322
  %392 = bitcast <4 x float> %391 to <2 x i64>
  %393 = xor <2 x i64> %392, <i64 -9223372034707292160, i64 -9223372034707292160>
  %394 = bitcast <2 x i64> %393 to <4 x float>
  %395 = fmul <4 x float> %337, %337
  %396 = fadd <4 x float> %395, %394
  %397 = fadd <4 x float> %337, %337
  %398 = fmul <4 x float> %397, %338
  %399 = fadd <4 x float> %398, %396
  %400 = fmul <4 x float> %338, %338
  %401 = fadd <4 x float> %400, %399
  %402 = fadd <4 x float> %328, %328
  %403 = fmul <4 x float> %322, %402
  %404 = fadd <4 x float> %403, %401
  %405 = and <2 x i64> %392, <i64 -17587891081216, i64 -17587891081216>
  %406 = bitcast <2 x i64> %405 to <4 x float>
  %407 = fsub <4 x float> %391, %406
  %408 = bitcast <4 x float> %384 to <2 x i64>
  %409 = and <2 x i64> %408, <i64 -17587891081216, i64 -17587891081216>
  %410 = bitcast <2 x i64> %409 to <4 x float>
  %411 = fsub <4 x float> %384, %410
  %412 = fmul <4 x float> %391, %384
  %413 = bitcast <4 x float> %412 to <2 x i64>
  %414 = xor <2 x i64> %413, <i64 -9223372034707292160, i64 -9223372034707292160>
  %415 = bitcast <2 x i64> %414 to <4 x float>
  %416 = fmul <4 x float> %406, %410
  %417 = fadd <4 x float> %416, %415
  %418 = fmul <4 x float> %407, %410
  %419 = fadd <4 x float> %418, %417
  %420 = fmul <4 x float> %411, %406
  %421 = fadd <4 x float> %420, %419
  %422 = fmul <4 x float> %407, %411
  %423 = fadd <4 x float> %422, %421
  %424 = fmul <4 x float> %391, %390
  %425 = fadd <4 x float> %423, %424
  %426 = fmul <4 x float> %404, %384
  %427 = fadd <4 x float> %426, %425
  %428 = fadd <4 x float> %322, %412
  %429 = fsub <4 x float> %428, %322
  %430 = fsub <4 x float> %428, %429
  %431 = fsub <4 x float> %322, %430
  %432 = fsub <4 x float> %412, %429
  %433 = fadd <4 x float> %432, %431
  %434 = fadd <4 x float> %328, %427
  %435 = fadd <4 x float> %433, %434
  %436 = fadd <4 x float> %428, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %437 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %436
  %438 = fadd <4 x float> %428, %437
  %439 = fadd <4 x float> %438, %435
  %440 = ashr <4 x i32> %311, <i32 1, i32 1, i32 1, i32 1>
  %441 = shl <4 x i32> %440, <i32 23, i32 23, i32 23, i32 23>
  %442 = add <4 x i32> %441, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %443 = bitcast <4 x i32> %442 to <4 x float>
  %444 = fmul <4 x float> %436, %443
  %445 = sub <4 x i32> %311, %440
  %446 = shl <4 x i32> %445, <i32 23, i32 23, i32 23, i32 23>
  %447 = add <4 x i32> %446, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %448 = bitcast <4 x i32> %447 to <4 x float>
  %449 = fmul <4 x float> %444, %448
  %450 = fmul <4 x float> %439, %443
  %451 = fmul <4 x float> %450, %448
  %452 = fcmp olt <4 x float> %307, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %453 = sext <4 x i1> %452 to <4 x i32>
  %454 = bitcast <4 x i32> %453 to <2 x i64>
  %455 = bitcast <4 x float> %449 to <2 x i64>
  %456 = xor <2 x i64> %454, <i64 -1, i64 -1>
  %457 = and <2 x i64> %455, %456
  %458 = bitcast <4 x float> %451 to <2 x i64>
  %459 = and <2 x i64> %458, %456
  %460 = bitcast <2 x i64> %457 to <4 x float>
  %461 = bitcast <2 x i64> %459 to <4 x float>
  %462 = and <2 x i64> %457, <i64 -17587891081216, i64 -17587891081216>
  %463 = bitcast <2 x i64> %462 to <4 x float>
  %464 = fsub <4 x float> %460, %463
  %465 = fmul <4 x float> %65, %460
  %466 = bitcast <4 x float> %465 to <2 x i64>
  %467 = xor <2 x i64> %466, <i64 -9223372034707292160, i64 -9223372034707292160>
  %468 = bitcast <2 x i64> %467 to <4 x float>
  %469 = fmul <4 x float> %117, %463
  %470 = fadd <4 x float> %469, %468
  %471 = fmul <4 x float> %464, %117
  %472 = fadd <4 x float> %471, %470
  %473 = fmul <4 x float> %118, %463
  %474 = fadd <4 x float> %473, %472
  %475 = fmul <4 x float> %118, %464
  %476 = fadd <4 x float> %475, %474
  %477 = fmul <4 x float> %114, %460
  %478 = fadd <4 x float> %477, %476
  %479 = fmul <4 x float> %65, %461
  %480 = fadd <4 x float> %478, %479
  %481 = bitcast <2 x i64> %457 to <4 x i32>
  %482 = and <4 x i32> %481, %8
  %483 = bitcast <4 x float> %465 to <4 x i32>
  %484 = and <4 x i32> %483, %47
  %485 = or <4 x i32> %484, %482
  %486 = bitcast <2 x i64> %459 to <4 x i32>
  %487 = and <4 x i32> %486, %8
  %488 = bitcast <4 x float> %480 to <4 x i32>
  %489 = and <4 x i32> %488, %47
  %490 = or <4 x i32> %489, %487
  %491 = bitcast <4 x i32> %485 to <4 x float>
  %492 = bitcast <4 x i32> %490 to <4 x float>
  %493 = fadd <4 x float> %491, %492
  %494 = bitcast <4 x float> %493 to <4 x i32>
  %495 = select <4 x i1> %11, <4 x i32> %494, <4 x i32> zeroinitializer
  %496 = bitcast <4 x i32> %495 to <4 x float>
  %497 = ashr <4 x i32> %263, <i32 31, i32 31, i32 31, i32 31>
  %498 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %496
  %499 = bitcast <4 x float> %498 to <4 x i32>
  %500 = and <4 x i32> %497, %499
  %501 = xor <4 x i32> %497, <i32 -1, i32 -1, i32 -1, i32 -1>
  %502 = and <4 x i32> %495, %501
  %503 = or <4 x i32> %500, %502
  %504 = fcmp uno <4 x float> %0, zeroinitializer
  %505 = bitcast <4 x i32> %503 to <4 x float>
  %506 = select <4 x i1> %504, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %505
  ret <4 x float> %506
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif4_u05sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  tail call void @Sleef_sincospif4_u05sse2(%struct.vfloat2* sret %0, <4 x float> %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif4_u35sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <4 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <4 x float> %10, %17
  %19 = fmul <4 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <4 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <4 x float> %11, %20
  %22 = fadd <4 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <4 x float> %11, %22
  %24 = fadd <4 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <4 x float> %11, %24
  %26 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x float> %18 to <4 x i32>
  %31 = and <4 x i32> %30, %29
  %32 = xor <4 x i32> %29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x float> %26 to <4 x i32>
  %34 = and <4 x i32> %33, %32
  %35 = or <4 x i32> %34, %31
  %36 = and <4 x i32> %33, %29
  %37 = and <4 x i32> %30, %32
  %38 = or <4 x i32> %36, %37
  %39 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %40 = icmp ne <4 x i32> %39, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = and <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <4 x i32> %35 to <2 x i64>
  %45 = xor <2 x i64> %43, %44
  %46 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %47 = and <4 x i32> %46, <i32 4, i32 4, i32 4, i32 4>
  %48 = icmp ne <4 x i32> %47, zeroinitializer
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <4 x i32> %38 to <2 x i64>
  %53 = xor <2 x i64> %51, %52
  %54 = bitcast <4 x float> %1 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 9223372034707292159, i64 9223372034707292159>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fcmp ogt <4 x float> %56, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %61 = and <2 x i64> %45, %60
  %62 = and <2 x i64> %53, %60
  %63 = fcmp oeq <4 x float> %56, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = or <2 x i64> %61, %65
  %67 = or <2 x i64> %62, %65
  %68 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %66, <2 x i64>* %68, align 16, !alias.scope !31
  %69 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %70 = bitcast <4 x float>* %69 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %70, align 16, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modff4_sse2(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %1, %4
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp ule <4 x float> %8, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = select <4 x i1> %9, <4 x float> %5, <4 x float> zeroinitializer
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <2 x i64> %12, %13
  %15 = fsub <4 x float> %1, %10
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <2 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %19, align 16, !alias.scope !34
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <4 x float>* %20 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %21, align 16, !alias.scope !34
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanf4_u35sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <4 x i32>
  %3 = ashr <4 x i32> %2, <i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <4 x float> %0 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 9223372034707292159, i64 9223372034707292159>
  %6 = bitcast <2 x i64> %5 to <4 x float>
  %7 = fcmp ogt <4 x float> %6, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %6
  %9 = select <4 x i1> %7, <4 x float> %8, <4 x float> %6
  %10 = fmul <4 x float> %9, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %10, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %14 = fadd <4 x float> %13, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %15 = fmul <4 x float> %10, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %16 = fadd <4 x float> %15, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %17 = fmul <4 x float> %11, %14
  %18 = fadd <4 x float> %16, %17
  %19 = fmul <4 x float> %10, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %20 = fadd <4 x float> %19, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %21 = fmul <4 x float> %10, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %22 = fadd <4 x float> %21, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %23 = fmul <4 x float> %11, %20
  %24 = fadd <4 x float> %22, %23
  %25 = fmul <4 x float> %12, %18
  %26 = fadd <4 x float> %24, %25
  %27 = fmul <4 x float> %10, %26
  %28 = fmul <4 x float> %9, %27
  %29 = fadd <4 x float> %9, %28
  %30 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %29
  %31 = select <4 x i1> %7, <4 x float> %30, <4 x float> %29
  %32 = and <4 x i32> %3, <i32 2, i32 2, i32 2, i32 2>
  %33 = icmp ne <4 x i32> %32, zeroinitializer
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <4 x float> %31 to <2 x i64>
  %38 = xor <2 x i64> %36, %37
  %39 = bitcast <2 x i64> %38 to <4 x float>
  ret <4 x float> %39
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atan2f4_u35sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <4 x i32>
  %7 = ashr <4 x i32> %6, <i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <4 x i32> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -4294967298, i64 -4294967298>
  %10 = bitcast <4 x float> %1 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = fcmp olt <4 x float> %12, %5
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = and <4 x i32> %14, %16
  %19 = xor <2 x i64> %17, <i64 -1, i64 -1>
  %20 = and <2 x i64> %9, %19
  %21 = or <4 x i32> %6, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = select <4 x i1> %15, <4 x float> %22, <4 x float> %5
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %12, <4 x float> %5) #6
  %25 = fdiv <4 x float> %23, %24
  %26 = fmul <4 x float> %25, %25
  %27 = fmul <4 x float> %26, %26
  %28 = fmul <4 x float> %27, %27
  %29 = fmul <4 x float> %26, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %30 = fadd <4 x float> %29, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %31 = fmul <4 x float> %26, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %32 = fadd <4 x float> %31, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %33 = fmul <4 x float> %27, %30
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %26, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %36 = fadd <4 x float> %35, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %37 = fmul <4 x float> %26, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %38 = fadd <4 x float> %37, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %39 = fmul <4 x float> %27, %36
  %40 = fadd <4 x float> %38, %39
  %41 = fmul <4 x float> %28, %34
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %26, %42
  %44 = fmul <4 x float> %25, %43
  %45 = fadd <4 x float> %25, %44
  %46 = bitcast <2 x i64> %20 to <4 x i32>
  %47 = or <4 x i32> %18, %46
  %48 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %47) #6
  %49 = fmul <4 x float> %48, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %50 = fadd <4 x float> %49, %45
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = fcmp oeq <4 x float> %1, zeroinitializer
  %58 = or <4 x i1> %54, %57
  %59 = or <2 x i64> %52, <i64 4596222329050697691, i64 4596222329050697691>
  %60 = and <2 x i64> %59, %56
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %61
  %63 = bitcast <4 x float> %62 to <4 x i32>
  %64 = bitcast <2 x i64> %53 to <4 x i32>
  %65 = select <4 x i1> %58, <4 x i32> %63, <4 x i32> %64
  %66 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %67 = or <2 x i64> %52, <i64 4560193532023345115, i64 4560193532023345115>
  %68 = and <2 x i64> %67, %56
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %69
  %71 = bitcast <4 x float> %70 to <4 x i32>
  %72 = select <4 x i1> %66, <4 x i32> %71, <4 x i32> %65
  %73 = fcmp oeq <4 x float> %0, zeroinitializer
  %74 = and <4 x i32> %7, <i32 1078530011, i32 1078530011, i32 1078530011, i32 1078530011>
  %75 = select <4 x i1> %73, <4 x i32> %74, <4 x i32> %72
  %76 = fcmp uno <4 x float> %0, %1
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = bitcast <4 x i32> %75 to <2 x i64>
  %80 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = xor <2 x i64> %80, %79
  %82 = or <2 x i64> %81, %78
  %83 = bitcast <2 x i64> %82 to <4 x float>
  ret <4 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <2 x i64> %3 to <4 x i32>
  %19 = and <4 x i32> %6, %18
  %20 = bitcast <4 x float> %17 to <4 x i32>
  %21 = and <4 x i32> %20, %12
  %22 = or <4 x i32> %21, %19
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %25 = fadd <4 x float> %24, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %26 = fmul <4 x float> %25, %16
  %27 = fadd <4 x float> %26, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %28 = fmul <4 x float> %27, %16
  %29 = fadd <4 x float> %28, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %30 = fmul <4 x float> %29, %16
  %31 = fadd <4 x float> %30, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %32 = fmul <4 x float> %16, %23
  %33 = fmul <4 x float> %31, %32
  %34 = fadd <4 x float> %33, %23
  %35 = fmul <4 x float> %34, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %36 = fadd <4 x float> %35, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %37 = bitcast <4 x float> %34 to <4 x i32>
  %38 = and <4 x i32> %37, %6
  %39 = bitcast <4 x float> %36 to <4 x i32>
  %40 = and <4 x i32> %39, %12
  %41 = or <4 x i32> %40, %38
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = xor <2 x i64> %43, %42
  %45 = bitcast <2 x i64> %44 to <4 x float>
  ret <4 x float> %45
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acosf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <2 x i64> %3 to <4 x i32>
  %19 = and <4 x i32> %6, %18
  %20 = bitcast <4 x float> %17 to <4 x i32>
  %21 = and <4 x i32> %20, %12
  %22 = or <4 x i32> %21, %19
  %23 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = bitcast <4 x i32> %22 to <4 x float>
  %25 = select <4 x i1> %23, <4 x float> %24, <4 x float> zeroinitializer
  %26 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %27 = fadd <4 x float> %26, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %28 = fmul <4 x float> %27, %16
  %29 = fadd <4 x float> %28, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %30 = fmul <4 x float> %29, %16
  %31 = fadd <4 x float> %30, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %32 = fmul <4 x float> %31, %16
  %33 = fadd <4 x float> %32, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %34 = fmul <4 x float> %25, %16
  %35 = fmul <4 x float> %33, %34
  %36 = bitcast <4 x float> %25 to <2 x i64>
  %37 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = xor <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = bitcast <4 x float> %35 to <2 x i64>
  %41 = xor <2 x i64> %37, %40
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fadd <4 x float> %39, %42
  %44 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %43
  %45 = fadd <4 x float> %25, %35
  %46 = fmul <4 x float> %45, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %47 = bitcast <4 x float> %44 to <4 x i32>
  %48 = and <4 x i32> %47, %6
  %49 = bitcast <4 x float> %46 to <4 x i32>
  %50 = and <4 x i32> %49, %12
  %51 = or <4 x i32> %48, %50
  %52 = fcmp olt <4 x float> %0, zeroinitializer
  %53 = bitcast <4 x i32> %51 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = fadd <4 x float> %55, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %57 = select <4 x i1> %52, <4 x i32> %12, <4 x i32> zeroinitializer
  %58 = bitcast <4 x float> %56 to <4 x i32>
  %59 = and <4 x i32> %57, %58
  %60 = xor <4 x i32> %57, <i32 -1, i32 -1, i32 -1, i32 -1>
  %61 = and <4 x i32> %51, %60
  %62 = or <4 x i32> %59, %61
  %63 = bitcast <4 x i32> %62 to <4 x float>
  ret <4 x float> %63
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atan2f4_u10sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = tail call <4 x float> @Sleef_atan2f4_u10sse2(<4 x float> %0, <4 x float> %1)
  ret <4 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %17, %20
  %22 = fmul <4 x float> %17, %17
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = xor <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fmul <4 x float> %20, %20
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %21, %20
  %29 = fadd <4 x float> %28, %27
  %30 = fadd <4 x float> %28, %29
  %31 = fmul <4 x float> %21, %21
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %22, %16
  %34 = fsub <4 x float> %33, %16
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %16, %35
  %37 = fsub <4 x float> %22, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %38, %32
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %40, %43
  %45 = fmul <4 x float> %20, %43
  %46 = fadd <4 x float> %45, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %47 = fmul <4 x float> %44, %20
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %21, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %21, %44
  %52 = fadd <4 x float> %51, %50
  %53 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %52, %54
  %56 = bitcast <4 x float> %33 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %33, %58
  %60 = fmul <4 x float> %40, %33
  %61 = bitcast <4 x float> %60 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fmul <4 x float> %43, %58
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %59, %43
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %44, %58
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %44, %59
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %33, %55
  %73 = fadd <4 x float> %71, %72
  %74 = fmul <4 x float> %40, %39
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %60, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fmul <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = bitcast <2 x i64> %3 to <4 x i32>
  %79 = and <4 x i32> %6, %78
  %80 = bitcast <4 x float> %76 to <4 x i32>
  %81 = and <4 x i32> %80, %12
  %82 = or <4 x i32> %81, %79
  %83 = bitcast <4 x float> %77 to <4 x i32>
  %84 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = and <4 x i32> %82, %85
  %87 = and <4 x i32> %85, %12
  %88 = and <4 x i32> %87, %83
  %89 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %90 = fadd <4 x float> %89, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %91 = fmul <4 x float> %90, %16
  %92 = fadd <4 x float> %91, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %93 = fmul <4 x float> %92, %16
  %94 = fadd <4 x float> %93, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %95 = fmul <4 x float> %94, %16
  %96 = fadd <4 x float> %95, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %97 = bitcast <4 x i32> %86 to <4 x float>
  %98 = fmul <4 x float> %16, %97
  %99 = fmul <4 x float> %96, %98
  %100 = bitcast <4 x i32> %88 to <4 x float>
  %101 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %97
  %102 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %101
  %103 = fsub <4 x float> %102, %97
  %104 = fadd <4 x float> %103, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %105 = fsub <4 x float> %104, %100
  %106 = fsub <4 x float> %101, %99
  %107 = fsub <4 x float> %101, %106
  %108 = fsub <4 x float> %107, %99
  %109 = fadd <4 x float> %108, %105
  %110 = fadd <4 x float> %99, %97
  %111 = fadd <4 x float> %106, %109
  %112 = fmul <4 x float> %111, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %113 = bitcast <4 x float> %110 to <4 x i32>
  %114 = and <4 x i32> %113, %6
  %115 = bitcast <4 x float> %112 to <4 x i32>
  %116 = and <4 x i32> %115, %12
  %117 = or <4 x i32> %116, %114
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = xor <2 x i64> %119, %118
  %121 = bitcast <2 x i64> %120 to <4 x float>
  ret <4 x float> %121
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acosf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x float> %7 to <4 x i32>
  %11 = and <4 x i32> %6, %10
  %12 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = bitcast <4 x float> %9 to <4 x i32>
  %14 = and <4 x i32> %13, %12
  %15 = or <4 x i32> %14, %11
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %16) #6
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %17, %20
  %22 = fmul <4 x float> %17, %17
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = xor <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fmul <4 x float> %20, %20
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %21, %20
  %29 = fadd <4 x float> %28, %27
  %30 = fadd <4 x float> %28, %29
  %31 = fmul <4 x float> %21, %21
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %22, %16
  %34 = fsub <4 x float> %33, %16
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %16, %35
  %37 = fsub <4 x float> %22, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %38, %32
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %40, %43
  %45 = fmul <4 x float> %20, %43
  %46 = fadd <4 x float> %45, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %47 = fmul <4 x float> %44, %20
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %21, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %21, %44
  %52 = fadd <4 x float> %51, %50
  %53 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %52, %54
  %56 = bitcast <4 x float> %33 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %33, %58
  %60 = fmul <4 x float> %40, %33
  %61 = bitcast <4 x float> %60 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fmul <4 x float> %43, %58
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %59, %43
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %44, %58
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %44, %59
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %33, %55
  %73 = fadd <4 x float> %71, %72
  %74 = fmul <4 x float> %40, %39
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %60, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fmul <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = bitcast <2 x i64> %3 to <4 x i32>
  %79 = and <4 x i32> %6, %78
  %80 = bitcast <4 x float> %76 to <4 x i32>
  %81 = and <4 x i32> %80, %12
  %82 = or <4 x i32> %81, %79
  %83 = bitcast <4 x float> %77 to <4 x i32>
  %84 = fcmp une <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = and <4 x i32> %82, %85
  %87 = and <4 x i32> %85, %12
  %88 = and <4 x i32> %87, %83
  %89 = fmul <4 x float> %16, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %90 = fadd <4 x float> %89, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %91 = fmul <4 x float> %90, %16
  %92 = fadd <4 x float> %91, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %93 = fmul <4 x float> %92, %16
  %94 = fadd <4 x float> %93, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %95 = fmul <4 x float> %94, %16
  %96 = fadd <4 x float> %95, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %97 = bitcast <4 x i32> %86 to <4 x float>
  %98 = fmul <4 x float> %16, %97
  %99 = fmul <4 x float> %96, %98
  %100 = bitcast <4 x i32> %86 to <2 x i64>
  %101 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = xor <2 x i64> %101, %100
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = bitcast <4 x float> %99 to <2 x i64>
  %105 = xor <2 x i64> %101, %104
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fadd <4 x float> %103, %106
  %108 = fsub <4 x float> %103, %107
  %109 = fadd <4 x float> %108, %106
  %110 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %107
  %111 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %110
  %112 = fsub <4 x float> %111, %107
  %113 = fadd <4 x float> %112, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %114 = fsub <4 x float> %113, %109
  %115 = bitcast <4 x float> %110 to <4 x i32>
  %116 = bitcast <4 x float> %114 to <4 x i32>
  %117 = bitcast <4 x i32> %88 to <4 x float>
  %118 = fadd <4 x float> %99, %97
  %119 = fsub <4 x float> %97, %118
  %120 = fadd <4 x float> %99, %119
  %121 = fadd <4 x float> %120, %117
  %122 = fmul <4 x float> %118, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %123 = fmul <4 x float> %121, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %124 = and <4 x i32> %115, %6
  %125 = bitcast <4 x float> %122 to <4 x i32>
  %126 = and <4 x i32> %125, %12
  %127 = or <4 x i32> %124, %126
  %128 = and <4 x i32> %116, %6
  %129 = bitcast <4 x float> %123 to <4 x i32>
  %130 = and <4 x i32> %129, %12
  %131 = or <4 x i32> %128, %130
  %132 = fcmp olt <4 x float> %0, zeroinitializer
  %133 = bitcast <4 x i32> %127 to <4 x float>
  %134 = bitcast <4 x i32> %131 to <4 x float>
  %135 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %133
  %136 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %135
  %137 = fsub <4 x float> %136, %133
  %138 = fadd <4 x float> %137, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %139 = fsub <4 x float> %138, %134
  %140 = select <4 x i1> %132, <4 x i32> %12, <4 x i32> zeroinitializer
  %141 = bitcast <4 x float> %135 to <4 x i32>
  %142 = and <4 x i32> %140, %141
  %143 = xor <4 x i32> %140, <i32 -1, i32 -1, i32 -1, i32 -1>
  %144 = and <4 x i32> %127, %143
  %145 = or <4 x i32> %142, %144
  %146 = bitcast <4 x float> %139 to <4 x i32>
  %147 = and <4 x i32> %140, %146
  %148 = and <4 x i32> %131, %143
  %149 = or <4 x i32> %147, %148
  %150 = bitcast <4 x i32> %145 to <4 x float>
  %151 = bitcast <4 x i32> %149 to <4 x float>
  %152 = fadd <4 x float> %150, %151
  ret <4 x float> %152
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = and <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %8 = and <4 x i32> %6, <i32 -1082130432, i32 -1082130432, i32 -1082130432, i32 -1082130432>
  %9 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  %10 = bitcast <2 x i64> %3 to <4 x i32>
  %11 = and <4 x i32> %9, %10
  %12 = or <4 x i32> %11, %8
  %13 = and <4 x i32> %6, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %14 = and <4 x i32> %6, %10
  %15 = and <4 x i32> %9, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = or <4 x i32> %15, %14
  %17 = bitcast <4 x i32> %12 to <4 x float>
  %18 = bitcast <4 x i32> %13 to <4 x float>
  %19 = bitcast <4 x i32> %16 to <4 x float>
  %20 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %19
  %21 = bitcast <4 x i32> %16 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <2 x i64> %22 to <4 x float>
  %24 = fsub <4 x float> %19, %23
  %25 = bitcast <4 x float> %20 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fsub <4 x float> %20, %27
  %29 = bitcast <4 x i32> %12 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %17, %31
  %33 = fmul <4 x float> %20, %17
  %34 = fmul <4 x float> %23, %27
  %35 = fadd <4 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <4 x float> %28, %23
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %24, %27
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %24, %28
  %41 = fadd <4 x float> %40, %39
  %42 = bitcast <4 x float> %41 to <2 x i64>
  %43 = xor <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = bitcast <4 x float> %33 to <2 x i64>
  %46 = xor <2 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fmul <4 x float> %31, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %28, %31
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %32, %27
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %32, %28
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %33, %44
  %57 = fadd <4 x float> %55, %56
  %58 = fmul <4 x float> %33, zeroinitializer
  %59 = fsub <4 x float> %18, %58
  %60 = fmul <4 x float> %20, %59
  %61 = fadd <4 x float> %60, %57
  %62 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> %33, %63
  %65 = fmul <4 x float> %33, %33
  %66 = bitcast <4 x float> %65 to <2 x i64>
  %67 = xor <2 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <2 x i64> %67 to <4 x float>
  %69 = fmul <4 x float> %63, %63
  %70 = fadd <4 x float> %69, %68
  %71 = fadd <4 x float> %63, %63
  %72 = fmul <4 x float> %71, %64
  %73 = fadd <4 x float> %72, %70
  %74 = fmul <4 x float> %64, %64
  %75 = fadd <4 x float> %74, %73
  %76 = fadd <4 x float> %61, %61
  %77 = fmul <4 x float> %33, %76
  %78 = fadd <4 x float> %75, %77
  %79 = fadd <4 x float> %65, %78
  %80 = fsub <4 x float> %65, %79
  %81 = fadd <4 x float> %78, %80
  %82 = fmul <4 x float> %79, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %83 = fadd <4 x float> %82, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %84 = fmul <4 x float> %79, %83
  %85 = fadd <4 x float> %84, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %86 = fmul <4 x float> %79, %85
  %87 = fadd <4 x float> %86, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %88 = fmul <4 x float> %79, %87
  %89 = fadd <4 x float> %88, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %90 = fmul <4 x float> %79, %89
  %91 = fadd <4 x float> %90, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %92 = fmul <4 x float> %79, %91
  %93 = fadd <4 x float> %92, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %94 = fmul <4 x float> %79, %93
  %95 = fadd <4 x float> %94, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %96 = fmul <4 x float> %79, %95
  %97 = fadd <4 x float> %96, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %98 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %97
  %99 = fadd <4 x float> %96, %98
  %100 = bitcast <4 x float> %79 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %79, %102
  %104 = bitcast <4 x float> %97 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %97, %106
  %108 = fmul <4 x float> %79, %97
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %79, %99
  %121 = fadd <4 x float> %120, %119
  %122 = fmul <4 x float> %81, %97
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %108, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %125 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %124
  %126 = fadd <4 x float> %108, %125
  %127 = fadd <4 x float> %126, %123
  %128 = bitcast <4 x float> %124 to <2 x i64>
  %129 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %130 = bitcast <2 x i64> %129 to <4 x float>
  %131 = fsub <4 x float> %124, %130
  %132 = fmul <4 x float> %33, %124
  %133 = bitcast <4 x float> %132 to <2 x i64>
  %134 = xor <2 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fmul <4 x float> %63, %130
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %64, %130
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %131, %63
  %141 = fadd <4 x float> %140, %139
  %142 = fmul <4 x float> %64, %131
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %33, %127
  %145 = fadd <4 x float> %143, %144
  %146 = fmul <4 x float> %61, %124
  %147 = fadd <4 x float> %146, %145
  %148 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = and <2 x i64> %149, <i64 -17587891081216, i64 -17587891081216>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fsub <4 x float> %148, %151
  %153 = fmul <4 x float> %148, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %154 = bitcast <4 x float> %153 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372034707292160, i64 -9223372034707292160>
  %156 = bitcast <2 x i64> %155 to <4 x float>
  %157 = fmul <4 x float> %151, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %158 = fadd <4 x float> %157, %156
  %159 = fmul <4 x float> %151, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %160 = fadd <4 x float> %159, %158
  %161 = fmul <4 x float> %152, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %162 = fadd <4 x float> %161, %160
  %163 = fmul <4 x float> %152, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %148, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %166 = fadd <4 x float> %165, %164
  %167 = fadd <4 x float> %132, %153
  %168 = fsub <4 x float> %153, %167
  %169 = fadd <4 x float> %132, %168
  %170 = fadd <4 x float> %169, %166
  %171 = fadd <4 x float> %147, %170
  %172 = fadd <4 x float> %167, %171
  %173 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %174 = select <4 x i1> %173, <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <4 x float> %172
  %175 = bitcast <4 x float> %174 to <2 x i64>
  %176 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = xor <2 x i64> %176, %175
  %178 = bitcast <2 x i64> %177 to <4 x float>
  ret <4 x float> %178
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_logf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <4 x float> %14, %15
  %17 = fmul <4 x float> %16, %16
  %18 = fmul <4 x float> %17, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %19 = fadd <4 x float> %18, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %20 = fmul <4 x float> %17, %19
  %21 = fadd <4 x float> %20, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %22 = fmul <4 x float> %17, %21
  %23 = fadd <4 x float> %22, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %24 = fmul <4 x float> %17, %23
  %25 = fadd <4 x float> %24, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %26 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %27 = add nsw <4 x i32> %9, %26
  %28 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %27) #6
  %29 = fmul <4 x float> %28, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %30 = fmul <4 x float> %16, %25
  %31 = fadd <4 x float> %30, %29
  %32 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %33 = fcmp ult <4 x float> %4, zeroinitializer
  %34 = fcmp oeq <4 x float> %4, zeroinitializer
  %35 = select <4 x i1> %32, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %31
  %36 = select <4 x i1> %33, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %35
  %37 = select <4 x i1> %34, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %36
  ret <4 x float> %37
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_expf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fmul <4 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <4 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <4 x float> %8, %8
  %20 = fmul <4 x float> %19, %18
  %21 = fadd <4 x float> %8, %20
  %22 = fadd <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = sub <4 x i32> %3, %23
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = bitcast <4 x float> %32 to <2 x i64>
  %37 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %38 = and <2 x i64> %36, %37
  %39 = fcmp ogt <4 x float> %0, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = select <4 x i1> %39, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %40
  ret <4 x float> %41
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cbrtf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = select <4 x i1> %5, <4 x float> %8, <4 x float> %4
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = and <2 x i64> %7, <i64 820338753727, i64 820338753727>
  %13 = and <2 x i64> %7, <i64 545460846719, i64 545460846719>
  %14 = xor <2 x i64> %13, <i64 545460846719, i64 545460846719>
  %15 = or <2 x i64> %14, %12
  %16 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = sub <4 x i32> %16, %17
  %19 = add <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = xor <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %24, %0
  %26 = sub <4 x i32> %20, %21
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %19) #6
  %32 = fadd <4 x float> %31, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %33 = fmul <4 x float> %32, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %33) #6
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %37 = fsub <4 x float> %32, %36
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %37) #6
  %39 = icmp eq <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 1067533592, i32 1067533592, i32 1067533592, i32 1067533592>
  %42 = and <4 x i32> %40, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = xor <4 x i32> %42, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %44 = or <4 x i32> %43, %41
  %45 = icmp eq <4 x i32> %38, <i32 2, i32 2, i32 2, i32 2>
  %46 = bitcast <4 x i32> %44 to <4 x float>
  %47 = select <4 x i1> %45, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %46
  %48 = add <4 x i32> %34, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %49 = ashr <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %50 = shl <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %51 = add <4 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = fmul <4 x float> %47, %52
  %54 = sub <4 x i32> %48, %49
  %55 = shl <4 x i32> %54, <i32 23, i32 23, i32 23, i32 23>
  %56 = add <4 x i32> %55, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %57 = bitcast <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %53, %57
  %59 = bitcast <4 x float> %58 to <2 x i64>
  %60 = bitcast <4 x float> %30 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = xor <2 x i64> %61, %59
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = and <2 x i64> %60, <i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fmul <4 x float> %65, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %67 = fadd <4 x float> %66, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %68 = fmul <4 x float> %67, %65
  %69 = fadd <4 x float> %68, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %70 = fmul <4 x float> %69, %65
  %71 = fadd <4 x float> %70, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %72 = fmul <4 x float> %71, %65
  %73 = fadd <4 x float> %72, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %74 = fmul <4 x float> %73, %65
  %75 = fadd <4 x float> %74, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %76 = fmul <4 x float> %75, %65
  %77 = fmul <4 x float> %75, %76
  %78 = fmul <4 x float> %77, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %79 = fmul <4 x float> %75, %77
  %80 = fadd <4 x float> %79, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %81 = fmul <4 x float> %78, %80
  %82 = fsub <4 x float> %77, %81
  %83 = fmul <4 x float> %82, %63
  ret <4 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cbrtf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_cbrtf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_logf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %15 = add nsw <4 x i32> %9, %14
  %16 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %15) #6
  %17 = bitcast <4 x float> %16 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 -17587891081216, i64 -17587891081216>
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = fsub <4 x float> %16, %19
  %21 = fmul <4 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %22 = bitcast <4 x float> %21 to <2 x i64>
  %23 = xor <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fmul <4 x float> %19, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %26 = fadd <4 x float> %25, %24
  %27 = fmul <4 x float> %19, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %20, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %20, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %16, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fadd <4 x float> %35, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %37 = fsub <4 x float> %35, %36
  %38 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %37
  %39 = fsub <4 x float> %13, %36
  %40 = fadd <4 x float> %39, %38
  %41 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fadd <4 x float> %41, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fsub <4 x float> %41, %42
  %44 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %43
  %45 = fsub <4 x float> %13, %42
  %46 = fadd <4 x float> %45, %44
  %47 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %48 = bitcast <4 x float> %41 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %41, %50
  %52 = bitcast <4 x float> %47 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %47, %54
  %56 = bitcast <4 x float> %35 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %35, %58
  %60 = fmul <4 x float> %35, %47
  %61 = fmul <4 x float> %50, %54
  %62 = fadd <4 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <4 x float> %55, %50
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %51, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %51, %55
  %68 = fadd <4 x float> %67, %66
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = bitcast <4 x float> %60 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %58, %54
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %55, %58
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %59, %54
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %59, %55
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %60, %71
  %84 = fadd <4 x float> %82, %83
  %85 = fmul <4 x float> %60, %46
  %86 = fsub <4 x float> %40, %85
  %87 = fmul <4 x float> %47, %86
  %88 = fadd <4 x float> %87, %84
  %89 = fmul <4 x float> %60, %60
  %90 = fmul <4 x float> %89, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %91 = fadd <4 x float> %90, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %92 = fmul <4 x float> %89, %91
  %93 = fadd <4 x float> %92, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %94 = fmul <4 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <4 x float> %88, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <4 x float> %94, %21
  %97 = fsub <4 x float> %21, %96
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %98, %34
  %100 = fadd <4 x float> %95, %99
  %101 = fmul <4 x float> %60, %89
  %102 = fmul <4 x float> %101, %93
  %103 = fadd <4 x float> %102, %96
  %104 = fsub <4 x float> %96, %103
  %105 = fadd <4 x float> %102, %104
  %106 = fadd <4 x float> %105, %100
  %107 = fadd <4 x float> %103, %106
  %108 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %109 = fcmp ult <4 x float> %4, zeroinitializer
  %110 = fcmp oeq <4 x float> %4, zeroinitializer
  %111 = select <4 x i1> %108, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %107
  %112 = select <4 x i1> %109, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %111
  %113 = select <4 x i1> %110, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %112
  ret <4 x float> %113
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_powf4_u10sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = tail call <4 x float> @Sleef_powf4_u10sse2(<4 x float> %0, <4 x float> %1)
  ret <4 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_sinhf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_coshf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_coshf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_tanhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_tanhf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinhf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <4 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <4 x float> %12, %17
  %21 = fadd <4 x float> %19, %20
  %22 = fmul <4 x float> %13, %15
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %12, %23
  %25 = fadd <4 x float> %11, %24
  %26 = icmp eq <4 x i32> %6, zeroinitializer
  %27 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = sub <4 x i32> %6, %28
  %34 = shl <4 x i32> %33, <i32 23, i32 23, i32 23, i32 23>
  %35 = add <4 x i32> %34, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %32, %36
  %38 = fadd <4 x float> %37, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %39 = select <4 x i1> %26, <4 x float> %25, <4 x float> %38
  %40 = fadd <4 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %41 = fadd <4 x float> %39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fdiv <4 x float> %40, %41
  %43 = fmul <4 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fmul <4 x float> %43, %42
  %45 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %46 = fcmp uno <4 x float> %44, zeroinitializer
  %47 = or <4 x i1> %46, %45
  %48 = select <4 x i1> %47, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %44
  %49 = bitcast <4 x float> %48 to <2 x i64>
  %50 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %51 = xor <2 x i64> %50, %49
  %52 = fcmp uno <4 x float> %0, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = or <2 x i64> %51, %54
  %56 = bitcast <2 x i64> %55 to <4 x float>
  ret <4 x float> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_coshf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <4 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <4 x float> %11, %11
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %11, %23
  %25 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = sub <4 x i32> %6, %26
  %32 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = fmul <4 x float> %30, %34
  %36 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = bitcast <4 x float> %35 to <2 x i64>
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %39, %40
  %42 = fcmp ogt <4 x float> %4, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %43 = bitcast <2 x i64> %41 to <4 x float>
  %44 = select <4 x i1> %42, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %43
  %45 = fdiv <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %44
  %46 = fmul <4 x float> %44, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = fadd <4 x float> %46, %45
  %48 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %49 = fcmp uno <4 x float> %47, zeroinitializer
  %50 = or <4 x i1> %49, %48
  %51 = select <4 x i1> %50, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %47
  %52 = fcmp uno <4 x float> %0, zeroinitializer
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = bitcast <4 x float> %51 to <2 x i64>
  %56 = or <2 x i64> %55, %54
  %57 = bitcast <2 x i64> %56 to <4 x float>
  ret <4 x float> %57
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_tanhf4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %5, %9
  %11 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <4 x float> %11, %10
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %13, %13
  %15 = fmul <4 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <4 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <4 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <4 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <4 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <4 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <4 x float> %13, %18
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %14, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %13, %24
  %26 = fadd <4 x float> %12, %25
  %27 = icmp eq <4 x i32> %7, zeroinitializer
  %28 = fadd <4 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %28, %32
  %34 = sub <4 x i32> %7, %29
  %35 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = fmul <4 x float> %33, %37
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = select <4 x i1> %27, <4 x float> %26, <4 x float> %39
  %41 = fadd <4 x float> %40, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %42 = fdiv <4 x float> %40, %41
  %43 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %44 = fcmp uno <4 x float> %42, zeroinitializer
  %45 = or <4 x i1> %44, %43
  %46 = select <4 x i1> %45, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %42
  %47 = bitcast <4 x float> %46 to <2 x i64>
  %48 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = xor <2 x i64> %48, %47
  %50 = fcmp uno <4 x float> %0, zeroinitializer
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = or <2 x i64> %49, %52
  %54 = bitcast <2 x i64> %53 to <4 x float>
  ret <4 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_asinhf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acoshf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_acoshf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanhf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_atanhf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp2f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fsub <4 x float> %0, %3
  %6 = fmul <4 x float> %5, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %7 = fadd <4 x float> %6, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %8 = fmul <4 x float> %5, %7
  %9 = fadd <4 x float> %8, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %10 = fmul <4 x float> %5, %9
  %11 = fadd <4 x float> %10, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %12 = fmul <4 x float> %5, %11
  %13 = fadd <4 x float> %12, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %14 = fmul <4 x float> %5, %13
  %15 = fadd <4 x float> %14, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fsub <4 x float> %15, %18
  %20 = bitcast <4 x float> %5 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = fsub <4 x float> %5, %22
  %24 = fmul <4 x float> %5, %15
  %25 = bitcast <4 x float> %24 to <2 x i64>
  %26 = xor <2 x i64> %25, <i64 -9223372034707292160, i64 -9223372034707292160>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fmul <4 x float> %22, %18
  %29 = fadd <4 x float> %28, %27
  %30 = fmul <4 x float> %19, %22
  %31 = fadd <4 x float> %30, %29
  %32 = fmul <4 x float> %23, %18
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %23, %19
  %35 = fadd <4 x float> %34, %33
  %36 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %37 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %36
  %38 = fadd <4 x float> %24, %37
  %39 = fadd <4 x float> %38, %35
  %40 = fadd <4 x float> %36, %39
  %41 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %42 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = add <4 x i32> %42, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fmul <4 x float> %40, %44
  %46 = sub <4 x i32> %4, %41
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = add <4 x i32> %47, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %45, %49
  %51 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %52 = select <4 x i1> %51, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %50
  %53 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %54 = sext <4 x i1> %53 to <4 x i32>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = bitcast <4 x float> %52 to <2 x i64>
  %57 = xor <2 x i64> %55, <i64 -1, i64 -1>
  %58 = and <2 x i64> %56, %57
  %59 = bitcast <2 x i64> %58 to <4 x float>
  ret <4 x float> %59
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp2f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fsub <4 x float> %0, %3
  %6 = fmul <4 x float> %5, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %7 = fadd <4 x float> %6, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %8 = fmul <4 x float> %5, %7
  %9 = fadd <4 x float> %8, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %10 = fmul <4 x float> %5, %9
  %11 = fadd <4 x float> %10, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %12 = fmul <4 x float> %5, %11
  %13 = fadd <4 x float> %12, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %14 = fmul <4 x float> %5, %13
  %15 = fadd <4 x float> %14, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %16 = fmul <4 x float> %5, %15
  %17 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %19 = shl <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %20 = add <4 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = fmul <4 x float> %17, %21
  %23 = sub <4 x i32> %4, %18
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %29 = select <4 x i1> %28, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %27
  %30 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = bitcast <4 x float> %29 to <2 x i64>
  %34 = xor <2 x i64> %32, <i64 -1, i64 -1>
  %35 = and <2 x i64> %33, %34
  %36 = bitcast <2 x i64> %35 to <4 x float>
  ret <4 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp10f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %4) #6
  %6 = fmul <4 x float> %4, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fmul <4 x float> %4, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %9 = fadd <4 x float> %8, %7
  %10 = fmul <4 x float> %9, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %11 = fadd <4 x float> %10, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %14 = fmul <4 x float> %9, %13
  %15 = fadd <4 x float> %14, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %16 = fmul <4 x float> %9, %15
  %17 = fadd <4 x float> %16, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %18 = fmul <4 x float> %9, %17
  %19 = fadd <4 x float> %18, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %20 = fmul <4 x float> %9, %19
  %21 = fadd <4 x float> %20, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %22 = fsub <4 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %21
  %23 = fadd <4 x float> %20, %22
  %24 = fadd <4 x float> %23, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %25 = bitcast <4 x float> %21 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fsub <4 x float> %21, %27
  %29 = bitcast <4 x float> %9 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %9, %31
  %33 = fmul <4 x float> %9, %21
  %34 = bitcast <4 x float> %33 to <2 x i64>
  %35 = xor <2 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fmul <4 x float> %31, %27
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %28, %31
  %40 = fadd <4 x float> %39, %38
  %41 = fmul <4 x float> %32, %27
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %32, %28
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %9, %24
  %46 = fadd <4 x float> %45, %44
  %47 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %48 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %49 = fadd <4 x float> %33, %48
  %50 = fadd <4 x float> %49, %46
  %51 = fadd <4 x float> %47, %50
  %52 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %53 = shl <4 x i32> %52, <i32 23, i32 23, i32 23, i32 23>
  %54 = add <4 x i32> %53, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %55 = bitcast <4 x i32> %54 to <4 x float>
  %56 = fmul <4 x float> %51, %55
  %57 = sub <4 x i32> %5, %52
  %58 = shl <4 x i32> %57, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = bitcast <4 x i32> %59 to <4 x float>
  %61 = fmul <4 x float> %56, %60
  %62 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %63 = select <4 x i1> %62, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %61
  %64 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %65 = sext <4 x i1> %64 to <4 x i32>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = bitcast <4 x float> %63 to <2 x i64>
  %68 = xor <2 x i64> %66, <i64 -1, i64 -1>
  %69 = and <2 x i64> %67, %68
  %70 = bitcast <2 x i64> %69 to <4 x float>
  ret <4 x float> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp10f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %4) #6
  %6 = fmul <4 x float> %4, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fmul <4 x float> %4, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %9 = fadd <4 x float> %8, %7
  %10 = fmul <4 x float> %9, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %11 = fadd <4 x float> %10, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %14 = fmul <4 x float> %9, %13
  %15 = fadd <4 x float> %14, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %16 = fmul <4 x float> %9, %15
  %17 = fadd <4 x float> %16, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %18 = fmul <4 x float> %9, %17
  %19 = fadd <4 x float> %18, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %20 = fmul <4 x float> %9, %19
  %21 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %21, %25
  %27 = sub <4 x i32> %5, %22
  %28 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %29 = add <4 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = fmul <4 x float> %26, %30
  %32 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %33 = select <4 x i1> %32, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %31
  %34 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = bitcast <4 x float> %33 to <2 x i64>
  %38 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %39 = and <2 x i64> %37, %38
  %40 = bitcast <2 x i64> %39 to <4 x float>
  ret <4 x float> %40
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_expm1f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, zeroinitializer
  %3 = fmul <4 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %4) #6
  %6 = fmul <4 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fsub <4 x float> %7, %0
  %9 = fsub <4 x float> %7, %8
  %10 = fsub <4 x float> %0, %9
  %11 = fsub <4 x float> %6, %8
  %12 = fadd <4 x float> %11, %10
  %13 = fadd <4 x float> %12, zeroinitializer
  %14 = fmul <4 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <4 x float> %14, %7
  %16 = fsub <4 x float> %15, %7
  %17 = fsub <4 x float> %15, %16
  %18 = fsub <4 x float> %7, %17
  %19 = fsub <4 x float> %14, %16
  %20 = fadd <4 x float> %19, %18
  %21 = fadd <4 x float> %20, %13
  %22 = fmul <4 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <4 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <4 x float> %15, %23
  %25 = fadd <4 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <4 x float> %15, %25
  %27 = fadd <4 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <4 x float> %15 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %15, %30
  %32 = bitcast <4 x float> %27 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = fsub <4 x float> %27, %34
  %36 = fmul <4 x float> %15, %27
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fmul <4 x float> %30, %34
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %34
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %35, %30
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %31, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %21, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fadd <4 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <4 x float> %50, %36
  %52 = fsub <4 x float> %50, %51
  %53 = fsub <4 x float> %36, %52
  %54 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %55, %49
  %57 = bitcast <4 x float> %50 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %50, %59
  %61 = fmul <4 x float> %15, %50
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %31, %59
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %60, %30
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %15, %56
  %74 = fadd <4 x float> %72, %73
  %75 = fmul <4 x float> %21, %50
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <4 x float> %77, %61
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %61, %79
  %81 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fmul <4 x float> %15, %15
  %85 = bitcast <4 x float> %84 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %30, %30
  %89 = fadd <4 x float> %88, %87
  %90 = fadd <4 x float> %30, %30
  %91 = fmul <4 x float> %90, %31
  %92 = fadd <4 x float> %91, %89
  %93 = fmul <4 x float> %31, %31
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %21, %21
  %96 = fmul <4 x float> %15, %95
  %97 = fadd <4 x float> %96, %94
  %98 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %84, %99
  %101 = bitcast <4 x float> %77 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fsub <4 x float> %77, %103
  %105 = fmul <4 x float> %84, %77
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fmul <4 x float> %99, %103
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %100, %103
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %104, %99
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %100, %104
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %84, %83
  %118 = fadd <4 x float> %116, %117
  %119 = fmul <4 x float> %97, %77
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %15, %105
  %122 = fsub <4 x float> %121, %15
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %15, %123
  %125 = fsub <4 x float> %105, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <4 x float> %121, %130
  %132 = fadd <4 x float> %131, %128
  %133 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %134 = shl <4 x i32> %133, <i32 23, i32 23, i32 23, i32 23>
  %135 = add <4 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = fmul <4 x float> %129, %136
  %138 = sub <4 x i32> %4, %133
  %139 = shl <4 x i32> %138, <i32 23, i32 23, i32 23, i32 23>
  %140 = add <4 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <4 x i32> %140 to <4 x float>
  %142 = fmul <4 x float> %137, %141
  %143 = fmul <4 x float> %132, %136
  %144 = fmul <4 x float> %143, %141
  %145 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %146 = sext <4 x i1> %145 to <4 x i32>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = bitcast <4 x float> %142 to <2 x i64>
  %149 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %150 = and <2 x i64> %148, %149
  %151 = bitcast <4 x float> %144 to <2 x i64>
  %152 = and <2 x i64> %151, %149
  %153 = bitcast <2 x i64> %150 to <4 x float>
  %154 = bitcast <2 x i64> %152 to <4 x float>
  %155 = fadd <4 x float> %153, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %156 = fsub <4 x float> %155, %153
  %157 = fsub <4 x float> %155, %156
  %158 = fsub <4 x float> %153, %157
  %159 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %156
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %160, %154
  %162 = fadd <4 x float> %155, %161
  %163 = fcmp ogt <4 x float> %0, <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>
  %164 = fcmp olt <4 x float> %0, <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>
  %165 = bitcast <4 x float> %0 to <4 x i32>
  %166 = icmp eq <4 x i32> %165, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %167 = select <4 x i1> %163, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %162
  %168 = select <4 x i1> %164, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %167
  %169 = select <4 x i1> %166, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %168
  ret <4 x float> %169
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log10f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fsub <4 x float> %14, %15
  %17 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %16
  %18 = fsub <4 x float> %13, %15
  %19 = fadd <4 x float> %18, %17
  %20 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %22 = fsub <4 x float> %20, %21
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fsub <4 x float> %13, %21
  %25 = fadd <4 x float> %24, %23
  %26 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %20
  %27 = bitcast <4 x float> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %20, %29
  %31 = bitcast <4 x float> %26 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %26, %33
  %35 = bitcast <4 x float> %14 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %14, %37
  %39 = fmul <4 x float> %14, %26
  %40 = fmul <4 x float> %29, %33
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %34, %29
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %30, %33
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %30, %34
  %47 = fadd <4 x float> %46, %45
  %48 = bitcast <4 x float> %47 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = bitcast <4 x float> %39 to <2 x i64>
  %52 = xor <2 x i64> %51, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fmul <4 x float> %37, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %34, %37
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %38, %33
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %38, %34
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %39, %50
  %63 = fadd <4 x float> %61, %62
  %64 = fmul <4 x float> %39, %25
  %65 = fsub <4 x float> %19, %64
  %66 = fmul <4 x float> %26, %65
  %67 = fadd <4 x float> %66, %63
  %68 = fmul <4 x float> %39, %39
  %69 = fmul <4 x float> %68, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %70 = fadd <4 x float> %69, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %71, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %73 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %74 = add nsw <4 x i32> %9, %73
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = fsub <4 x float> %75, %78
  %80 = fmul <4 x float> %75, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %81 = bitcast <4 x float> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fmul <4 x float> %78, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %78, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %79, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %79, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %75, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %93 = fadd <4 x float> %92, %91
  %94 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fsub <4 x float> %39, %95
  %97 = fmul <4 x float> %39, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %98 = bitcast <4 x float> %97 to <2 x i64>
  %99 = xor <2 x i64> %98, <i64 -9223372034707292160, i64 -9223372034707292160>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fmul <4 x float> %95, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %96, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %104 = fadd <4 x float> %103, %102
  %105 = fmul <4 x float> %95, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %96, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %39, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %67, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %112 = fadd <4 x float> %110, %111
  %113 = fadd <4 x float> %97, %80
  %114 = fsub <4 x float> %80, %113
  %115 = fadd <4 x float> %97, %114
  %116 = fadd <4 x float> %115, %93
  %117 = fadd <4 x float> %112, %116
  %118 = fmul <4 x float> %39, %68
  %119 = fmul <4 x float> %118, %72
  %120 = fadd <4 x float> %119, %113
  %121 = fsub <4 x float> %113, %120
  %122 = fadd <4 x float> %119, %121
  %123 = fadd <4 x float> %122, %117
  %124 = fadd <4 x float> %120, %123
  %125 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %126 = fcmp ult <4 x float> %4, zeroinitializer
  %127 = fcmp oeq <4 x float> %4, zeroinitializer
  %128 = select <4 x i1> %125, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %124
  %129 = select <4 x i1> %126, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %128
  %130 = select <4 x i1> %127, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %129
  ret <4 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log2f4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fsub <4 x float> %14, %15
  %17 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %16
  %18 = fsub <4 x float> %13, %15
  %19 = fadd <4 x float> %18, %17
  %20 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %22 = fsub <4 x float> %20, %21
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fsub <4 x float> %13, %21
  %25 = fadd <4 x float> %24, %23
  %26 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %20
  %27 = bitcast <4 x float> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %20, %29
  %31 = bitcast <4 x float> %26 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %26, %33
  %35 = bitcast <4 x float> %14 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %14, %37
  %39 = fmul <4 x float> %14, %26
  %40 = fmul <4 x float> %29, %33
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %34, %29
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %30, %33
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %30, %34
  %47 = fadd <4 x float> %46, %45
  %48 = bitcast <4 x float> %47 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = bitcast <4 x float> %39 to <2 x i64>
  %52 = xor <2 x i64> %51, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fmul <4 x float> %37, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fmul <4 x float> %34, %37
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %38, %33
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %38, %34
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %39, %50
  %63 = fadd <4 x float> %61, %62
  %64 = fmul <4 x float> %39, %25
  %65 = fsub <4 x float> %19, %64
  %66 = fmul <4 x float> %26, %65
  %67 = fadd <4 x float> %66, %63
  %68 = fmul <4 x float> %39, %39
  %69 = fmul <4 x float> %68, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %70 = fadd <4 x float> %69, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %71, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %73 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %74 = add nsw <4 x i32> %9, %73
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %39, %77
  %79 = fmul <4 x float> %39, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %77, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %78, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %77, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %78, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %39, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %67, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %94 = fadd <4 x float> %92, %93
  %95 = fadd <4 x float> %79, %75
  %96 = fsub <4 x float> %95, %75
  %97 = fsub <4 x float> %95, %96
  %98 = fsub <4 x float> %75, %97
  %99 = fsub <4 x float> %79, %96
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %94, %100
  %102 = fmul <4 x float> %39, %68
  %103 = fmul <4 x float> %102, %72
  %104 = fadd <4 x float> %103, %95
  %105 = fsub <4 x float> %104, %95
  %106 = fsub <4 x float> %104, %105
  %107 = fsub <4 x float> %95, %106
  %108 = fsub <4 x float> %103, %105
  %109 = fadd <4 x float> %108, %107
  %110 = fadd <4 x float> %109, %101
  %111 = fadd <4 x float> %104, %110
  %112 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %113 = fcmp ult <4 x float> %4, zeroinitializer
  %114 = fcmp oeq <4 x float> %4, zeroinitializer
  %115 = select <4 x i1> %112, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %111
  %116 = select <4 x i1> %113, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %115
  %117 = select <4 x i1> %114, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %116
  ret <4 x float> %117
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log2f4_u35sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = select <4 x i1> %2, <4 x float> %3, <4 x float> %0
  %5 = bitcast <4 x float> %4 to <4 x i32>
  %6 = fmul <4 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = add <4 x i32> %5, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = sub <4 x i32> %11, %10
  %13 = bitcast <4 x i32> %12 to <4 x float>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fadd <4 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <4 x float> %14, %15
  %17 = fmul <4 x float> %16, %16
  %18 = fmul <4 x float> %17, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %19 = fadd <4 x float> %18, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %20 = fmul <4 x float> %17, %19
  %21 = fadd <4 x float> %20, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %22 = fmul <4 x float> %16, %17
  %23 = select <4 x i1> %2, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %24 = add nsw <4 x i32> %9, %23
  %25 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %24) #6
  %26 = fmul <4 x float> %16, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %22, %21
  %29 = fadd <4 x float> %28, %27
  %30 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %31 = fcmp ult <4 x float> %4, zeroinitializer
  %32 = fcmp oeq <4 x float> %4, zeroinitializer
  %33 = select <4 x i1> %30, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %29
  %34 = select <4 x i1> %31, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %33
  %35 = select <4 x i1> %32, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %34
  ret <4 x float> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log1pf4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fcmp olt <4 x float> %2, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %4 = fmul <4 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = select <4 x i1> %3, <4 x float> %4, <4 x float> %2
  %6 = fmul <4 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <4 x float> %6 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 23, i32 23, i32 23, i32 23>
  %9 = and <4 x i32> %8, <i32 255, i32 255, i32 255, i32 255>
  %10 = shl nuw nsw <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %10
  %12 = bitcast <4 x i32> %11 to <4 x float>
  %13 = fadd <4 x float> %12, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fmul <4 x float> %12, %0
  %15 = fadd <4 x float> %14, %13
  %16 = select <4 x i1> %3, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = add nsw <4 x i32> %9, %16
  %18 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %17) #6
  %19 = bitcast <4 x float> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %18, %21
  %23 = fmul <4 x float> %18, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fmul <4 x float> %21, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %21, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %22, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %22, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fmul <4 x float> %18, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %36 = fadd <4 x float> %35, %34
  %37 = fadd <4 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %37
  %39 = fadd <4 x float> %15, %38
  %40 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %37
  %41 = bitcast <4 x float> %37 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %37, %43
  %45 = bitcast <4 x float> %40 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %40, %47
  %49 = bitcast <4 x float> %15 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %15, %51
  %53 = fmul <4 x float> %15, %40
  %54 = fmul <4 x float> %43, %47
  %55 = fadd <4 x float> %54, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %56 = fmul <4 x float> %48, %43
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %44, %47
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %44, %48
  %61 = fadd <4 x float> %60, %59
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = bitcast <4 x float> %53 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %51, %47
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %48, %51
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %52, %47
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %52, %48
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %53, %64
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %53, %39
  %79 = fsub <4 x float> zeroinitializer, %78
  %80 = fmul <4 x float> %40, %79
  %81 = fadd <4 x float> %80, %77
  %82 = fmul <4 x float> %53, %53
  %83 = fmul <4 x float> %82, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %84 = fadd <4 x float> %83, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %85 = fmul <4 x float> %82, %84
  %86 = fadd <4 x float> %85, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %87 = fmul <4 x float> %53, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %88 = fmul <4 x float> %81, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %89 = fadd <4 x float> %87, %23
  %90 = fsub <4 x float> %23, %89
  %91 = fadd <4 x float> %87, %90
  %92 = fadd <4 x float> %91, %36
  %93 = fadd <4 x float> %88, %92
  %94 = fmul <4 x float> %53, %82
  %95 = fmul <4 x float> %94, %86
  %96 = fadd <4 x float> %95, %89
  %97 = fsub <4 x float> %89, %96
  %98 = fadd <4 x float> %95, %97
  %99 = fadd <4 x float> %98, %93
  %100 = fadd <4 x float> %96, %99
  %101 = fcmp ogt <4 x float> %0, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %102 = fcmp olt <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %103 = fcmp oeq <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %104 = bitcast <4 x float> %0 to <4 x i32>
  %105 = icmp eq <4 x i32> %104, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %106 = select <4 x i1> %101, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %100
  %107 = select <4 x i1> %102, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <4 x float> %106
  %108 = select <4 x i1> %103, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %107
  %109 = select <4 x i1> %105, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %108
  ret <4 x float> %109
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fabsf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  ret <4 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_copysignf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <4 x float>
  ret <4 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmaxf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %0, <4 x float> %1) #6
  %5 = select <4 x i1> %3, <4 x float> %0, <4 x float> %4
  ret <4 x float> %5
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fminf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %0, <4 x float> %1) #6
  %5 = select <4 x i1> %3, <4 x float> %0, <4 x float> %4
  ret <4 x float> %5
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fdimf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fsub <4 x float> %0, %1
  %4 = fcmp uge <4 x float> %3, zeroinitializer
  %5 = fcmp une <4 x float> %0, %1
  %6 = and <4 x i1> %4, %5
  %7 = select <4 x i1> %6, <4 x float> %3, <4 x float> zeroinitializer
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_truncf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = bitcast <4 x float> %0 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = fcmp oeq <4 x float> %7, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %9 = fcmp oge <4 x float> %7, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = or <4 x i1> %9, %8
  %11 = fsub <4 x float> %0, %4
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 9223372034707292159, i64 9223372034707292159>
  %14 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = or <2 x i64> %13, %14
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = select <4 x i1> %10, <4 x float> %0, <4 x float> %16
  ret <4 x float> %17
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_floorf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp olt <4 x float> %4, zeroinitializer
  %6 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = select <4 x i1> %5, <4 x float> %6, <4 x float> %4
  %8 = bitcast <4 x float> %0 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = fcmp oge <4 x float> %10, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %13 = or <4 x i1> %12, %11
  %14 = fsub <4 x float> %0, %7
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372034707292159, i64 9223372034707292159>
  %17 = and <2 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = or <2 x i64> %16, %17
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = select <4 x i1> %13, <4 x float> %0, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_ceilf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp ole <4 x float> %4, zeroinitializer
  %6 = fadd <4 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = select <4 x i1> %5, <4 x float> %4, <4 x float> %6
  %8 = bitcast <4 x float> %0 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = fcmp oge <4 x float> %10, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %13 = or <4 x i1> %12, %11
  %14 = fsub <4 x float> %0, %7
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372034707292159, i64 9223372034707292159>
  %17 = and <2 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = or <2 x i64> %16, %17
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = select <4 x i1> %13, <4 x float> %0, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_roundf4_sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fadd <4 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %2, %4
  %6 = fcmp ole <4 x float> %2, zeroinitializer
  %7 = fcmp oeq <4 x float> %5, zeroinitializer
  %8 = and <4 x i1> %7, %6
  %9 = fadd <4 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %10 = select <4 x i1> %8, <4 x float> %9, <4 x float> %2
  %11 = fcmp olt <4 x float> %5, zeroinitializer
  %12 = fadd <4 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = select <4 x i1> %11, <4 x float> %12, <4 x float> %5
  %14 = fcmp une <4 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %15 = select <4 x i1> %14, <4 x float> %10, <4 x float> zeroinitializer
  %16 = bitcast <4 x float> %0 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fcmp oeq <4 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %20 = fcmp oge <4 x float> %18, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %21 = or <4 x i1> %20, %19
  %22 = fsub <4 x float> %15, %13
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159>
  %25 = and <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = or <2 x i64> %24, %25
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = select <4 x i1> %21, <4 x float> %0, <4 x float> %27
  ret <4 x float> %28
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_rintf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %4 = or <2 x i64> %3, <i64 5404319554102886400, i64 5404319554102886400>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = fcmp ogt <4 x float> %7, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %9 = fadd <4 x float> %5, %0
  %10 = fsub <4 x float> %9, %5
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = or <2 x i64> %3, %11
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = select <4 x i1> %8, <4 x float> %0, <4 x float> %13
  ret <4 x float> %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmaf4_sse2(<4 x float>, <4 x float>, <4 x float>) local_unnamed_addr #0 {
  %4 = fmul <4 x float> %0, %1
  %5 = fadd <4 x float> %4, %2
  %6 = bitcast <4 x float> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <4 x float> %0 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %10, %20
  %22 = bitcast <4 x float> %1 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %27 = bitcast <4 x float> %26 to <4 x i32>
  %28 = and <4 x i32> %10, %27
  %29 = bitcast <4 x float> %2 to <4 x i32>
  %30 = and <4 x i32> %14, %29
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %10, <i32 226492416, i32 226492416, i32 226492416, i32 226492416>
  %34 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = or <4 x i32> %34, %33
  %36 = fcmp ogt <4 x float> %8, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = fmul <4 x float> %18, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %39 = bitcast <4 x float> %38 to <4 x i32>
  %40 = and <4 x i32> %39, %37
  %41 = xor <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %42 = and <4 x i32> %17, %41
  %43 = or <4 x i32> %40, %42
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fmul <4 x float> %25, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %46 = bitcast <4 x float> %45 to <4 x i32>
  %47 = and <4 x i32> %46, %37
  %48 = and <4 x i32> %24, %41
  %49 = or <4 x i32> %47, %48
  %50 = bitcast <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %32, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %52 = bitcast <4 x float> %51 to <4 x i32>
  %53 = and <4 x i32> %52, %37
  %54 = and <4 x i32> %31, %41
  %55 = or <4 x i32> %53, %54
  %56 = bitcast <4 x i32> %55 to <4 x float>
  %57 = and <4 x i32> %37, <i32 1904214016, i32 1904214016, i32 1904214016, i32 1904214016>
  %58 = and <4 x i32> %35, %41
  %59 = or <4 x i32> %58, %57
  %60 = bitcast <4 x i32> %59 to <4 x float>
  %61 = bitcast <4 x i32> %43 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 -17587891081216, i64 -17587891081216>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> %44, %63
  %65 = bitcast <4 x i32> %49 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fsub <4 x float> %50, %67
  %69 = fmul <4 x float> %44, %50
  %70 = bitcast <4 x float> %69 to <2 x i64>
  %71 = xor <2 x i64> %70, <i64 -9223372034707292160, i64 -9223372034707292160>
  %72 = bitcast <2 x i64> %71 to <4 x float>
  %73 = fmul <4 x float> %63, %67
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %64, %67
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %68, %63
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %64, %68
  %80 = fadd <4 x float> %79, %78
  %81 = fadd <4 x float> %69, %56
  %82 = fsub <4 x float> %81, %69
  %83 = fsub <4 x float> %81, %82
  %84 = fsub <4 x float> %69, %83
  %85 = fsub <4 x float> %56, %82
  %86 = fadd <4 x float> %85, %84
  %87 = fadd <4 x float> %86, %80
  %88 = fcmp oeq <4 x float> %44, zeroinitializer
  %89 = fcmp oeq <4 x float> %50, zeroinitializer
  %90 = or <4 x i1> %89, %88
  %91 = fadd <4 x float> %81, %87
  %92 = select <4 x i1> %90, <4 x float> %56, <4 x float> %91
  %93 = bitcast <4 x i32> %55 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 9223372034707292159, i64 9223372034707292159>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fcmp oeq <4 x float> %95, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %97 = sext <4 x i1> %96 to <4 x i32>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = and <2 x i64> %61, <i64 9223372034707292159, i64 9223372034707292159>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fcmp oeq <4 x float> %100, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <4 x i1> %101 to <4 x i32>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -1, i64 -1>
  %105 = and <2 x i64> %65, <i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fcmp oeq <4 x float> %106, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %108 = sext <4 x i1> %107 to <4 x i32>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -1, i64 -1>
  %111 = fcmp uno <4 x float> %50, %44
  %112 = sext <4 x i1> %111 to <4 x i32>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = xor <2 x i64> %113, <i64 -1, i64 -1>
  %115 = and <2 x i64> %98, %114
  %116 = and <2 x i64> %115, %104
  %117 = and <2 x i64> %116, %110
  %118 = bitcast <2 x i64> %117 to <4 x i32>
  %119 = and <4 x i32> %55, %118
  %120 = xor <4 x i32> %118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = bitcast <4 x float> %5 to <4 x i32>
  %122 = and <4 x i32> %120, %121
  %123 = or <4 x i32> %122, %119
  %124 = bitcast <4 x i32> %123 to <4 x float>
  %125 = bitcast <4 x i32> %123 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 9223372034707292159, i64 9223372034707292159>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fcmp oeq <4 x float> %127, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %129 = fcmp uno <4 x float> %124, zeroinitializer
  %130 = or <4 x i1> %128, %129
  %131 = fmul <4 x float> %92, %60
  %132 = select <4 x i1> %130, <4 x float> %124, <4 x float> %131
  ret <4 x float> %132
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_hypotf4_u05sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fcmp olt <4 x float> %10, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = fmul <4 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %14 = bitcast <4 x float> %13 to <4 x i32>
  %15 = and <4 x i32> %12, %14
  %16 = xor <4 x i32> %12, <i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = bitcast <4 x float> %9 to <4 x i32>
  %18 = and <4 x i32> %16, %17
  %19 = or <4 x i32> %18, %15
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = fmul <4 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %22 = bitcast <4 x float> %21 to <4 x i32>
  %23 = and <4 x i32> %22, %12
  %24 = bitcast <4 x float> %10 to <4 x i32>
  %25 = and <4 x i32> %16, %24
  %26 = or <4 x i32> %25, %23
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %29 = bitcast <4 x i32> %26 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %27, %31
  %33 = bitcast <4 x float> %28 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fsub <4 x float> %28, %35
  %37 = bitcast <4 x i32> %19 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %20, %39
  %41 = fmul <4 x float> %28, %20
  %42 = fmul <4 x float> %31, %35
  %43 = fadd <4 x float> %42, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %44 = fmul <4 x float> %36, %31
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %32, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %32, %36
  %49 = fadd <4 x float> %48, %47
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = bitcast <4 x float> %41 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <2 x i64> %54 to <4 x float>
  %56 = fmul <4 x float> %39, %35
  %57 = fadd <4 x float> %56, %55
  %58 = fmul <4 x float> %36, %39
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %40, %35
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %40, %36
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %41, %52
  %65 = fadd <4 x float> %63, %64
  %66 = fmul <4 x float> %41, zeroinitializer
  %67 = fsub <4 x float> zeroinitializer, %66
  %68 = fmul <4 x float> %28, %67
  %69 = fadd <4 x float> %68, %65
  %70 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %41, %71
  %73 = fmul <4 x float> %41, %41
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %71, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fadd <4 x float> %71, %71
  %80 = fmul <4 x float> %79, %72
  %81 = fadd <4 x float> %80, %78
  %82 = fmul <4 x float> %72, %72
  %83 = fadd <4 x float> %82, %81
  %84 = fadd <4 x float> %69, %69
  %85 = fmul <4 x float> %41, %84
  %86 = fadd <4 x float> %83, %85
  %87 = fadd <4 x float> %73, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = fsub <4 x float> %87, %73
  %89 = fsub <4 x float> %87, %88
  %90 = fsub <4 x float> %73, %89
  %91 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %88
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %92, %86
  %94 = fadd <4 x float> %87, %93
  %95 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %94) #6
  %96 = bitcast <4 x float> %95 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -17587891081216, i64 -17587891081216>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = fsub <4 x float> %95, %98
  %100 = fmul <4 x float> %95, %95
  %101 = bitcast <4 x float> %100 to <2 x i64>
  %102 = xor <2 x i64> %101, <i64 -9223372034707292160, i64 -9223372034707292160>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fmul <4 x float> %98, %98
  %105 = fadd <4 x float> %104, %103
  %106 = fmul <4 x float> %99, %98
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %106, %107
  %109 = fmul <4 x float> %99, %99
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %100, %87
  %112 = fsub <4 x float> %111, %87
  %113 = fsub <4 x float> %111, %112
  %114 = fsub <4 x float> %87, %113
  %115 = fsub <4 x float> %100, %112
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %110, %93
  %118 = fadd <4 x float> %116, %117
  %119 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %95
  %120 = bitcast <4 x float> %119 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fsub <4 x float> %119, %122
  %124 = fmul <4 x float> %98, %122
  %125 = fadd <4 x float> %124, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %126 = fmul <4 x float> %123, %98
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %99, %122
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %99, %123
  %131 = fadd <4 x float> %130, %129
  %132 = xor <2 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fmul <4 x float> %131, %133
  %135 = bitcast <4 x float> %111 to <2 x i64>
  %136 = and <2 x i64> %135, <i64 -17587891081216, i64 -17587891081216>
  %137 = bitcast <2 x i64> %136 to <4 x float>
  %138 = fsub <4 x float> %111, %137
  %139 = fmul <4 x float> %119, %111
  %140 = bitcast <4 x float> %139 to <2 x i64>
  %141 = xor <2 x i64> %140, <i64 -9223372034707292160, i64 -9223372034707292160>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fmul <4 x float> %122, %137
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %138, %122
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %123, %137
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %123, %138
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %111, %134
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %119, %118
  %154 = fadd <4 x float> %152, %153
  %155 = fmul <4 x float> %139, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %156 = fmul <4 x float> %154, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %157 = bitcast <4 x float> %155 to <2 x i64>
  %158 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %159 = bitcast <2 x i64> %158 to <4 x float>
  %160 = fsub <4 x float> %155, %159
  %161 = bitcast <4 x float> %10 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -17587891081216, i64 -17587891081216>
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = fsub <4 x float> %10, %163
  %165 = fmul <4 x float> %10, %155
  %166 = bitcast <4 x float> %165 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fmul <4 x float> %163, %159
  %170 = fadd <4 x float> %169, %168
  %171 = fmul <4 x float> %160, %163
  %172 = fadd <4 x float> %171, %170
  %173 = fmul <4 x float> %164, %159
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %164, %160
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %10, %156
  %178 = fadd <4 x float> %176, %177
  %179 = fadd <4 x float> %165, %178
  %180 = fcmp uno <4 x float> %179, zeroinitializer
  %181 = bitcast <4 x float> %179 to <4 x i32>
  %182 = select <4 x i1> %180, <4 x i32> <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>, <4 x i32> %181
  %183 = fcmp oeq <4 x float> %9, zeroinitializer
  %184 = select <4 x i1> %183, <4 x i32> %24, <4 x i32> %182
  %185 = fcmp uno <4 x float> %8, %5
  %186 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %187 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %188 = or <4 x i1> %187, %186
  %189 = bitcast <4 x i32> %184 to <4 x float>
  %190 = select <4 x i1> %185, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %189
  %191 = select <4 x i1> %188, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %190
  ret <4 x float> %191
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_hypotf4_u35sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fdiv <4 x float> %9, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %13) #6
  %15 = fmul <4 x float> %10, %14
  %16 = fcmp oeq <4 x float> %9, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> %10, <4 x float> %15
  %18 = fcmp uno <4 x float> %8, %5
  %19 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %20 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %21 = or <4 x i1> %20, %19
  %22 = select <4 x i1> %18, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %17
  %23 = select <4 x i1> %21, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %22
  ret <4 x float> %23
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_nextafterf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x float> %0, zeroinitializer
  %4 = bitcast <4 x float> %1 to <4 x i32>
  %5 = and <4 x i32> %4, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %6 = bitcast <4 x float> %0 to <4 x i32>
  %7 = select <4 x i1> %3, <4 x i32> %5, <4 x i32> %6
  %8 = bitcast <4 x i32> %7 to <4 x float>
  %9 = bitcast <4 x i32> %7 to <2 x i64>
  %10 = ashr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %11 = fcmp ole <4 x float> %8, %1
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = xor <4 x i32> %10, %12
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = xor <4 x i32> %7, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %16 = sub <4 x i32> zeroinitializer, %15
  %17 = and <4 x i32> %13, %16
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %20 = and <2 x i64> %19, %9
  %21 = or <2 x i64> %20, %18
  %22 = fcmp une <4 x float> %8, %1
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %21 to <4 x i32>
  %26 = add <4 x i32> %25, <i32 -1, i32 -1, i32 -1, i32 -1>
  %27 = and <4 x i32> %26, %23
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = xor <2 x i64> %24, <i64 -1, i64 -1>
  %30 = and <2 x i64> %21, %29
  %31 = or <2 x i64> %30, %28
  %32 = bitcast <2 x i64> %31 to <4 x i32>
  %33 = xor <4 x i32> %32, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %34 = sub <4 x i32> zeroinitializer, %33
  %35 = and <4 x i32> %13, %34
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = and <2 x i64> %31, %19
  %38 = or <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fcmp oeq <4 x float> %39, zeroinitializer
  %41 = fcmp une <4 x float> %8, zeroinitializer
  %42 = and <4 x i1> %40, %41
  %43 = and <4 x i32> %7, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = bitcast <2 x i64> %38 to <4 x i32>
  %45 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %44
  %46 = fcmp oeq <4 x float> %8, zeroinitializer
  %47 = fcmp oeq <4 x float> %1, zeroinitializer
  %48 = and <4 x i1> %46, %47
  %49 = fcmp uno <4 x float> %8, %1
  %50 = bitcast <4 x i32> %45 to <4 x float>
  %51 = select <4 x i1> %48, <4 x float> %1, <4 x float> %50
  %52 = select <4 x i1> %49, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %51
  ret <4 x float> %52
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_frfrexpf4_sse2(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %6 = fmul <4 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = select <4 x i1> %5, <4 x float> %6, <4 x float> %0
  %8 = bitcast <4 x float> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = fcmp oeq <4 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = bitcast <4 x float> %7 to <4 x i32>
  %13 = and <4 x i32> %12, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %14 = or <4 x i32> %13, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %15 = and <4 x i32> %12, <i32 -2139095041, i32 -2139095041, i32 -2139095041, i32 -2139095041>
  %16 = or <4 x i32> %15, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %17 = select <4 x i1> %11, <4 x i32> %14, <4 x i32> %16
  %18 = fcmp oeq <4 x float> %7, zeroinitializer
  %19 = bitcast <4 x i32> %17 to <4 x float>
  %20 = select <4 x i1> %18, <4 x float> %7, <4 x float> %19
  ret <4 x float> %20
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmodf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <2 x i64> %4 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %20, %10
  %22 = bitcast <2 x i64> %7 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %28 = bitcast <4 x float> %27 to <4 x i32>
  %29 = add <4 x i32> %28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = fcmp une <4 x float> %27, zeroinitializer
  %31 = bitcast <4 x i32> %29 to <4 x float>
  %32 = select <4 x i1> %30, <4 x float> %31, <4 x float> zeroinitializer
  %33 = fmul <4 x float> %25, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %34 = fmul <4 x float> %25, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %35 = bitcast <4 x i32> %24 to <2 x i64>
  %36 = xor <2 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %37, %39
  br label %41

; <label>:41:                                     ; preds = %41, %2
  %42 = phi i32 [ 0, %2 ], [ %108, %41 ]
  %43 = phi <4 x float> [ zeroinitializer, %2 ], [ %102, %41 ]
  %44 = phi <4 x float> [ %18, %2 ], [ %100, %41 ]
  %45 = bitcast <4 x float> %44 to <4 x i32>
  %46 = add <4 x i32> %45, <i32 -1, i32 -1, i32 -1, i32 -1>
  %47 = fcmp une <4 x float> %44, zeroinitializer
  %48 = bitcast <4 x i32> %46 to <4 x float>
  %49 = select <4 x i1> %47, <4 x float> %48, <4 x float> zeroinitializer
  %50 = fmul <4 x float> %32, %49
  %51 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %50) #6
  %52 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %51) #6
  %53 = fsub <4 x float> %50, %52
  %54 = bitcast <4 x float> %50 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 9223372034707292159, i64 9223372034707292159>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fcmp oge <4 x float> %56, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %58 = fsub <4 x float> %50, %53
  %59 = select <4 x i1> %57, <4 x float> %50, <4 x float> %58
  %60 = fcmp olt <4 x float> %44, %33
  %61 = fcmp oge <4 x float> %44, %25
  %62 = and <4 x i1> %61, %60
  %63 = fcmp olt <4 x float> %44, %34
  %64 = and <4 x i1> %61, %63
  %65 = select <4 x i1> %62, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %59
  %66 = select <4 x i1> %64, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %65
  %67 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %66) #6
  %68 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %67) #6
  %69 = fsub <4 x float> %66, %68
  %70 = bitcast <4 x float> %66 to <2 x i64>
  %71 = and <2 x i64> %70, <i64 9223372034707292159, i64 9223372034707292159>
  %72 = bitcast <2 x i64> %71 to <4 x float>
  %73 = fcmp oge <4 x float> %72, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %74 = fsub <4 x float> %66, %69
  %75 = select <4 x i1> %73, <4 x float> %66, <4 x float> %74
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = fsub <4 x float> %75, %78
  %80 = fmul <4 x float> %75, %37
  %81 = bitcast <4 x float> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fmul <4 x float> %39, %78
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %79, %39
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %40, %78
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %40, %79
  %91 = fadd <4 x float> %90, %89
  %92 = fadd <4 x float> %44, %80
  %93 = fsub <4 x float> %92, %44
  %94 = fsub <4 x float> %92, %93
  %95 = fsub <4 x float> %44, %94
  %96 = fsub <4 x float> %80, %93
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %43, %91
  %99 = fadd <4 x float> %97, %98
  %100 = fadd <4 x float> %92, %99
  %101 = fsub <4 x float> %92, %100
  %102 = fadd <4 x float> %99, %101
  %103 = fcmp olt <4 x float> %100, %25
  %104 = sext <4 x i1> %103 to <4 x i32>
  %105 = bitcast <4 x i32> %104 to <16 x i8>
  %106 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %105) #6
  %107 = icmp ne i32 %106, 65535
  %108 = add nuw nsw i32 %42, 1
  %109 = icmp ult i32 %108, 8
  %110 = and i1 %109, %107
  br i1 %110, label %41, label %111

; <label>:111:                                    ; preds = %41
  %112 = and <4 x i32> %10, <i32 855638016, i32 855638016, i32 855638016, i32 855638016>
  %113 = or <4 x i32> %26, %112
  %114 = bitcast <4 x i32> %113 to <4 x float>
  %115 = fadd <4 x float> %100, %102
  %116 = fmul <4 x float> %115, %114
  %117 = fcmp une <4 x float> %115, %25
  %118 = select <4 x i1> %117, <4 x float> %116, <4 x float> zeroinitializer
  %119 = bitcast <4 x float> %118 to <2 x i64>
  %120 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <2 x i64> %120, %119
  %122 = fcmp olt <4 x float> %18, %25
  %123 = fcmp oeq <4 x float> %25, zeroinitializer
  %124 = bitcast <2 x i64> %121 to <4 x float>
  %125 = select <4 x i1> %122, <4 x float> %0, <4 x float> %124
  %126 = select <4 x i1> %123, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %125
  ret <4 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_remainderf4_sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = and <4 x i32> %10, %12
  %14 = xor <4 x i32> %10, <i32 -1, i32 -1, i32 -1, i32 -1>
  %15 = bitcast <2 x i64> %4 to <4 x i32>
  %16 = and <4 x i32> %14, %15
  %17 = or <4 x i32> %16, %13
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %20 = bitcast <4 x float> %19 to <4 x i32>
  %21 = and <4 x i32> %20, %10
  %22 = bitcast <2 x i64> %7 to <4 x i32>
  %23 = and <4 x i32> %14, %22
  %24 = or <4 x i32> %23, %21
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = and <4 x i32> %10, <i32 855638016, i32 855638016, i32 855638016, i32 855638016>
  %27 = and <4 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = or <4 x i32> %27, %26
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %31 = fmul <4 x float> %25, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %32 = fmul <4 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = bitcast <4 x i32> %24 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %35, %37
  br label %39

; <label>:39:                                     ; preds = %76, %2
  %40 = phi i32 [ 0, %2 ], [ %124, %76 ]
  %41 = phi <2 x i64> [ zeroinitializer, %2 ], [ %97, %76 ]
  %42 = phi <4 x float> [ zeroinitializer, %2 ], [ %123, %76 ]
  %43 = phi <4 x float> [ %18, %2 ], [ %121, %76 ]
  %44 = fmul <4 x float> %30, %43
  %45 = bitcast <4 x float> %44 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = or <2 x i64> %46, <i64 5404319554102886400, i64 5404319554102886400>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = and <2 x i64> %45, <i64 9223372034707292159, i64 9223372034707292159>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fcmp ogt <4 x float> %50, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %52 = fadd <4 x float> %44, %48
  %53 = fsub <4 x float> %52, %48
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = or <2 x i64> %46, %54
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = select <4 x i1> %51, <4 x float> %44, <4 x float> %56
  %58 = bitcast <4 x float> %43 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fcmp ogt <4 x float> %31, %60
  %62 = bitcast <4 x float> %57 to <4 x i32>
  %63 = select <4 x i1> %61, <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, <4 x i32> %62
  %64 = fcmp ogt <4 x float> %32, %60
  %65 = fcmp oeq <4 x float> %32, %60
  %66 = bitcast <2 x i64> %41 to <4 x i32>
  %67 = select <4 x i1> %65, <4 x i32> %66, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>
  %68 = select <4 x i1> %64, <4 x i32> zeroinitializer, <4 x i32> %67
  %69 = and <4 x i32> %63, %68
  %70 = bitcast <4 x i32> %69 to <4 x float>
  %71 = fcmp oeq <4 x float> %70, zeroinitializer
  %72 = sext <4 x i1> %71 to <4 x i32>
  %73 = bitcast <4 x i32> %72 to <16 x i8>
  %74 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %73) #6
  %75 = icmp eq i32 %74, 65535
  br i1 %75, label %126, label %76

; <label>:76:                                     ; preds = %39
  %77 = fmul <4 x float> %35, %70
  %78 = bitcast <4 x float> %77 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 9223372034707292159, i64 9223372034707292159>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fcmp oeq <4 x float> %80, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %82 = and <2 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = xor <2 x i64> %82, <i64 -4647714812233515008, i64 -4647714812233515008>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fadd <4 x float> %84, %70
  %86 = select <4 x i1> %81, <4 x float> %85, <4 x float> %70
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %86) #6
  %88 = and <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = icmp ne <4 x i32> %88, zeroinitializer
  %90 = bitcast <4 x float> %86 to <2 x i64>
  %91 = and <2 x i64> %90, <i64 9223372034707292159, i64 9223372034707292159>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fcmp olt <4 x float> %92, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %94 = and <4 x i1> %89, %93
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = xor <2 x i64> %41, %96
  %98 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %86, %99
  %101 = fmul <4 x float> %86, %35
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fmul <4 x float> %37, %99
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %100, %37
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %38, %99
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %38, %100
  %112 = fadd <4 x float> %111, %110
  %113 = fadd <4 x float> %43, %101
  %114 = fsub <4 x float> %113, %43
  %115 = fsub <4 x float> %113, %114
  %116 = fsub <4 x float> %43, %115
  %117 = fsub <4 x float> %101, %114
  %118 = fadd <4 x float> %117, %116
  %119 = fadd <4 x float> %42, %112
  %120 = fadd <4 x float> %118, %119
  %121 = fadd <4 x float> %113, %120
  %122 = fsub <4 x float> %113, %121
  %123 = fadd <4 x float> %120, %122
  %124 = add nuw nsw i32 %40, 1
  %125 = icmp ult i32 %124, 8
  br i1 %125, label %39, label %126

; <label>:126:                                    ; preds = %39, %76
  %127 = phi <4 x float> [ %43, %39 ], [ %121, %76 ]
  %128 = phi <4 x float> [ %42, %39 ], [ %123, %76 ]
  %129 = fadd <4 x float> %127, %128
  %130 = fmul <4 x float> %129, %29
  %131 = bitcast <4 x float> %130 to <2 x i64>
  %132 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = xor <2 x i64> %132, %131
  %134 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %135 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %136 = bitcast <4 x float> %0 to <4 x i32>
  %137 = select <4 x i1> %135, <4 x i32> <i32 2143289344, i32 2143289344, i32 2143289344, i32 2143289344>, <4 x i32> %136
  %138 = bitcast <2 x i64> %133 to <4 x i32>
  %139 = select <4 x i1> %134, <4 x i32> %137, <4 x i32> %138
  %140 = fcmp oeq <4 x float> %25, zeroinitializer
  %141 = bitcast <4 x i32> %139 to <4 x float>
  %142 = select <4 x i1> %140, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %141
  ret <4 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinpif4_u05sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = and <4 x i32> %9, <i32 -1294939720, i32 -1294939720, i32 -1294939720, i32 -1294939720>
  %29 = xor <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = and <4 x i32> %29, <i32 883300721, i32 883300721, i32 883300721, i32 883300721>
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %9, <i32 913372581, i32 913372581, i32 913372581, i32 913372581>
  %34 = and <4 x i32> %29, <i32 -1206295030, i32 -1206295030, i32 -1206295030, i32 -1206295030>
  %35 = or <4 x i32> %34, %33
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %13, %32
  %38 = fadd <4 x float> %37, %36
  %39 = and <4 x i32> %9, <i32 -1179981344, i32 -1179981344, i32 -1179981344, i32 -1179981344>
  %40 = and <4 x i32> %29, <i32 992163295, i32 992163295, i32 992163295, i32 992163295>
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %13, %38
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %13, %44
  %46 = and <4 x i32> %9, <i32 1015144696, i32 1015144696, i32 1015144696, i32 1015144696>
  %47 = and <4 x i32> %29, <i32 -1113235993, i32 -1113235993, i32 -1113235993, i32 -1113235993>
  %48 = or <4 x i32> %47, %46
  %49 = and <4 x i32> %9, <i32 804720512, i32 804720512, i32 804720512, i32 804720512>
  %50 = and <4 x i32> %29, <i32 -1330131353, i32 -1330131353, i32 -1330131353, i32 -1330131353>
  %51 = or <4 x i32> %50, %49
  %52 = bitcast <4 x i32> %48 to <4 x float>
  %53 = bitcast <4 x i32> %51 to <4 x float>
  %54 = fadd <4 x float> %45, %52
  %55 = fsub <4 x float> %54, %45
  %56 = fsub <4 x float> %54, %55
  %57 = fsub <4 x float> %45, %56
  %58 = fsub <4 x float> %52, %55
  %59 = fadd <4 x float> %58, %57
  %60 = fadd <4 x float> %59, %53
  %61 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %13, %62
  %64 = bitcast <4 x float> %54 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fsub <4 x float> %54, %66
  %68 = fmul <4 x float> %13, %54
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fmul <4 x float> %62, %66
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %63, %66
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %67, %62
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %63, %67
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %13, %60
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %27, %54
  %83 = fadd <4 x float> %82, %81
  %84 = and <4 x i32> %9, <i32 -1096947226, i32 -1096947226, i32 -1096947226, i32 -1096947226>
  %85 = and <4 x i32> %29, <i32 1061752795, i32 1061752795, i32 1061752795, i32 1061752795>
  %86 = or <4 x i32> %85, %84
  %87 = and <4 x i32> %9, <i32 -1306796353, i32 -1306796353, i32 -1306796353, i32 -1306796353>
  %88 = and <4 x i32> %29, <i32 -1296318260, i32 -1296318260, i32 -1296318260, i32 -1296318260>
  %89 = or <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %86 to <4 x float>
  %91 = bitcast <4 x i32> %89 to <4 x float>
  %92 = fadd <4 x float> %68, %90
  %93 = fsub <4 x float> %92, %68
  %94 = fsub <4 x float> %92, %93
  %95 = fsub <4 x float> %68, %94
  %96 = fsub <4 x float> %90, %93
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %83, %91
  %99 = fadd <4 x float> %97, %98
  %100 = bitcast <4 x float> %13 to <4 x i32>
  %101 = and <4 x i32> %9, %100
  %102 = bitcast <4 x float> %12 to <4 x i32>
  %103 = and <4 x i32> %29, %102
  %104 = or <4 x i32> %103, %101
  %105 = bitcast <4 x float> %27 to <4 x i32>
  %106 = and <4 x i32> %105, %9
  %107 = bitcast <4 x i32> %104 to <4 x float>
  %108 = bitcast <4 x i32> %106 to <4 x float>
  %109 = bitcast <4 x float> %92 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fsub <4 x float> %92, %111
  %113 = bitcast <4 x i32> %104 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = fsub <4 x float> %107, %115
  %117 = fmul <4 x float> %92, %107
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %115, %111
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %112, %115
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %116, %111
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %116, %112
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %92, %108
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %99, %107
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %117 to <4 x i32>
  %134 = bitcast <4 x float> %132 to <4 x i32>
  %135 = fadd <4 x float> %117, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> %135, %117
  %137 = fsub <4 x float> %135, %136
  %138 = fsub <4 x float> %117, %137
  %139 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %136
  %140 = fadd <4 x float> %139, %138
  %141 = fadd <4 x float> %140, %132
  %142 = bitcast <4 x float> %135 to <4 x i32>
  %143 = and <4 x i32> %142, %9
  %144 = and <4 x i32> %133, %29
  %145 = or <4 x i32> %143, %144
  %146 = bitcast <4 x float> %141 to <4 x i32>
  %147 = and <4 x i32> %146, %9
  %148 = and <4 x i32> %134, %29
  %149 = or <4 x i32> %147, %148
  %150 = shl <4 x i32> %6, <i32 29, i32 29, i32 29, i32 29>
  %151 = and <4 x i32> %150, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %152 = xor <4 x i32> %145, %151
  %153 = xor <4 x i32> %149, %151
  %154 = bitcast <4 x i32> %152 to <4 x float>
  %155 = bitcast <4 x i32> %153 to <4 x float>
  %156 = fadd <4 x float> %154, %155
  %157 = bitcast <4 x float> %0 to <4 x i32>
  %158 = icmp eq <4 x i32> %157, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %159 = select <4 x i1> %158, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %156
  %160 = bitcast <4 x float> %0 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 9223372034707292159, i64 9223372034707292159>
  %162 = bitcast <2 x i64> %161 to <4 x float>
  %163 = fcmp ogt <4 x float> %162, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <4 x float> %159 to <2 x i64>
  %167 = xor <2 x i64> %165, <i64 -1, i64 -1>
  %168 = and <2 x i64> %166, %167
  %169 = fcmp oeq <4 x float> %162, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %170 = sext <4 x i1> %169 to <4 x i32>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = or <2 x i64> %168, %171
  %173 = bitcast <2 x i64> %172 to <4 x float>
  ret <4 x float> %173
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cospif4_u05sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = and <4 x i32> %9, <i32 -1294939720, i32 -1294939720, i32 -1294939720, i32 -1294939720>
  %29 = xor <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = and <4 x i32> %29, <i32 883300721, i32 883300721, i32 883300721, i32 883300721>
  %31 = or <4 x i32> %30, %28
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = and <4 x i32> %9, <i32 913372581, i32 913372581, i32 913372581, i32 913372581>
  %34 = and <4 x i32> %29, <i32 -1206295030, i32 -1206295030, i32 -1206295030, i32 -1206295030>
  %35 = or <4 x i32> %34, %33
  %36 = bitcast <4 x i32> %35 to <4 x float>
  %37 = fmul <4 x float> %13, %32
  %38 = fadd <4 x float> %37, %36
  %39 = and <4 x i32> %9, <i32 -1179981344, i32 -1179981344, i32 -1179981344, i32 -1179981344>
  %40 = and <4 x i32> %29, <i32 992163295, i32 992163295, i32 992163295, i32 992163295>
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %13, %38
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %13, %44
  %46 = and <4 x i32> %9, <i32 1015144696, i32 1015144696, i32 1015144696, i32 1015144696>
  %47 = and <4 x i32> %29, <i32 -1113235993, i32 -1113235993, i32 -1113235993, i32 -1113235993>
  %48 = or <4 x i32> %47, %46
  %49 = and <4 x i32> %9, <i32 804720512, i32 804720512, i32 804720512, i32 804720512>
  %50 = and <4 x i32> %29, <i32 -1330131353, i32 -1330131353, i32 -1330131353, i32 -1330131353>
  %51 = or <4 x i32> %50, %49
  %52 = bitcast <4 x i32> %48 to <4 x float>
  %53 = bitcast <4 x i32> %51 to <4 x float>
  %54 = fadd <4 x float> %45, %52
  %55 = fsub <4 x float> %54, %45
  %56 = fsub <4 x float> %54, %55
  %57 = fsub <4 x float> %45, %56
  %58 = fsub <4 x float> %52, %55
  %59 = fadd <4 x float> %58, %57
  %60 = fadd <4 x float> %59, %53
  %61 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %13, %62
  %64 = bitcast <4 x float> %54 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fsub <4 x float> %54, %66
  %68 = fmul <4 x float> %13, %54
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fmul <4 x float> %62, %66
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %63, %66
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %67, %62
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %63, %67
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %13, %60
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %27, %54
  %83 = fadd <4 x float> %82, %81
  %84 = and <4 x i32> %9, <i32 -1096947226, i32 -1096947226, i32 -1096947226, i32 -1096947226>
  %85 = and <4 x i32> %29, <i32 1061752795, i32 1061752795, i32 1061752795, i32 1061752795>
  %86 = or <4 x i32> %85, %84
  %87 = and <4 x i32> %9, <i32 -1306796353, i32 -1306796353, i32 -1306796353, i32 -1306796353>
  %88 = and <4 x i32> %29, <i32 -1296318260, i32 -1296318260, i32 -1296318260, i32 -1296318260>
  %89 = or <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %86 to <4 x float>
  %91 = bitcast <4 x i32> %89 to <4 x float>
  %92 = fadd <4 x float> %68, %90
  %93 = fsub <4 x float> %92, %68
  %94 = fsub <4 x float> %92, %93
  %95 = fsub <4 x float> %68, %94
  %96 = fsub <4 x float> %90, %93
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %83, %91
  %99 = fadd <4 x float> %97, %98
  %100 = bitcast <4 x float> %13 to <4 x i32>
  %101 = and <4 x i32> %9, %100
  %102 = bitcast <4 x float> %12 to <4 x i32>
  %103 = and <4 x i32> %29, %102
  %104 = or <4 x i32> %103, %101
  %105 = bitcast <4 x float> %27 to <4 x i32>
  %106 = and <4 x i32> %105, %9
  %107 = bitcast <4 x i32> %104 to <4 x float>
  %108 = bitcast <4 x i32> %106 to <4 x float>
  %109 = bitcast <4 x float> %92 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fsub <4 x float> %92, %111
  %113 = bitcast <4 x i32> %104 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = fsub <4 x float> %107, %115
  %117 = fmul <4 x float> %92, %107
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %115, %111
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %112, %115
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %116, %111
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %116, %112
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %92, %108
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %99, %107
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %117 to <4 x i32>
  %134 = bitcast <4 x float> %132 to <4 x i32>
  %135 = fadd <4 x float> %117, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> %135, %117
  %137 = fsub <4 x float> %135, %136
  %138 = fsub <4 x float> %117, %137
  %139 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %136
  %140 = fadd <4 x float> %139, %138
  %141 = fadd <4 x float> %140, %132
  %142 = bitcast <4 x float> %135 to <4 x i32>
  %143 = and <4 x i32> %142, %9
  %144 = and <4 x i32> %133, %29
  %145 = or <4 x i32> %143, %144
  %146 = bitcast <4 x float> %141 to <4 x i32>
  %147 = and <4 x i32> %146, %9
  %148 = and <4 x i32> %134, %29
  %149 = or <4 x i32> %147, %148
  %150 = shl <4 x i32> %10, <i32 29, i32 29, i32 29, i32 29>
  %151 = add <4 x i32> %150, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %152 = and <4 x i32> %151, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %153 = xor <4 x i32> %145, %152
  %154 = xor <4 x i32> %149, %152
  %155 = bitcast <4 x i32> %153 to <4 x float>
  %156 = bitcast <4 x i32> %154 to <4 x float>
  %157 = fadd <4 x float> %155, %156
  %158 = bitcast <4 x float> %0 to <2 x i64>
  %159 = and <2 x i64> %158, <i64 9223372034707292159, i64 9223372034707292159>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fcmp ogt <4 x float> %160, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %162 = select <4 x i1> %161, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %157
  %163 = fcmp oeq <4 x float> %160, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <4 x float> %162 to <2 x i64>
  %167 = or <2 x i64> %166, %165
  %168 = bitcast <2 x i64> %167 to <4 x float>
  ret <4 x float> %168
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_cinz_tgammaf4_u10sse2(<4 x float>) local_unnamed_addr #3 {
  %2 = tail call <4 x float> @Sleef_tgammaf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_cinz_lgammaf4_u10sse2(<4 x float>) local_unnamed_addr #3 {
  %2 = tail call <4 x float> @Sleef_lgammaf4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_erff4_u10sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_erff4_u10sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_erfcf4_u15sse2(<4 x float>) local_unnamed_addr #2 {
  %2 = tail call <4 x float> @Sleef_erfcf4_u15sse2(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fastpowf4_u3500sse2(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %7 = fmul <4 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = select <4 x i1> %6, <4 x float> %7, <4 x float> %5
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = fmul <4 x float> %8, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <4 x float> %10 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %14 = shl nuw nsw <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = add <4 x i32> %9, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = sub <4 x i32> %15, %14
  %17 = bitcast <4 x i32> %16 to <4 x float>
  %18 = fadd <4 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %20 = fdiv <4 x float> %18, %19
  %21 = fmul <4 x float> %20, %20
  %22 = fmul <4 x float> %21, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %23 = fadd <4 x float> %22, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %24 = fmul <4 x float> %21, %23
  %25 = fadd <4 x float> %24, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %26 = fmul <4 x float> %21, %25
  %27 = fadd <4 x float> %26, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %28 = fmul <4 x float> %21, %27
  %29 = fadd <4 x float> %28, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %30 = select <4 x i1> %6, <4 x i32> <i32 -191, i32 -191, i32 -191, i32 -191>, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %31 = add nsw <4 x i32> %13, %30
  %32 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %31) #6
  %33 = fmul <4 x float> %32, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %34 = fmul <4 x float> %20, %29
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %35, %1
  %37 = fmul <4 x float> %36, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %37) #6
  %39 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %38) #6
  %40 = fmul <4 x float> %39, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %41 = fadd <4 x float> %40, %36
  %42 = fmul <4 x float> %39, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %43, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %45 = fadd <4 x float> %44, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %46 = fmul <4 x float> %43, %45
  %47 = fadd <4 x float> %46, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %48 = fmul <4 x float> %43, %47
  %49 = fadd <4 x float> %48, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %50 = fmul <4 x float> %43, %49
  %51 = fadd <4 x float> %50, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %52 = fmul <4 x float> %43, %51
  %53 = fadd <4 x float> %52, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %54 = fmul <4 x float> %43, %43
  %55 = fadd <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fmul <4 x float> %54, %53
  %57 = fadd <4 x float> %55, %56
  %58 = ashr <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %59 = shl <4 x i32> %58, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = fmul <4 x float> %57, %61
  %63 = sub <4 x i32> %38, %58
  %64 = shl <4 x i32> %63, <i32 23, i32 23, i32 23, i32 23>
  %65 = add <4 x i32> %64, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %66 = bitcast <4 x i32> %65 to <4 x float>
  %67 = fmul <4 x float> %62, %66
  %68 = fcmp olt <4 x float> %36, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %69 = sext <4 x i1> %68 to <4 x i32>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = bitcast <4 x float> %67 to <2 x i64>
  %72 = xor <2 x i64> %70, <i64 -1, i64 -1>
  %73 = and <2 x i64> %71, %72
  %74 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %75 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %74) #6
  %76 = fcmp oeq <4 x float> %75, %1
  %77 = bitcast <4 x float> %1 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 9223372034707292159, i64 9223372034707292159>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fcmp ogt <4 x float> %79, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %81 = or <4 x i1> %76, %80
  %82 = and <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  %83 = icmp ne <4 x i32> %82, zeroinitializer
  %84 = fcmp olt <4 x float> %79, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %85 = and <4 x i1> %83, %84
  %86 = and <4 x i1> %85, %81
  %87 = bitcast <4 x float> %0 to <4 x i32>
  %88 = ashr <4 x i32> %87, <i32 31, i32 31, i32 31, i32 31>
  %89 = select <4 x i1> %86, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = bitcast <2 x i64> %73 to <4 x i32>
  %91 = xor <4 x i32> %90, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %92 = and <4 x i32> %91, %89
  %93 = xor <4 x i32> %89, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = and <4 x i32> %90, %93
  %95 = or <4 x i32> %92, %94
  %96 = fcmp une <4 x float> %0, zeroinitializer
  %97 = fcmp oeq <4 x float> %1, zeroinitializer
  %98 = bitcast <4 x i32> %95 to <4 x float>
  %99 = select <4 x i1> %96, <4 x float> %98, <4 x float> zeroinitializer
  %100 = select <4 x i1> %97, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %99
  ret <4 x float> %100
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf4_sse2(i32) local_unnamed_addr #3 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %9 = load i32, i32* %8, align 4, !tbaa !37
  %10 = and i32 %9, 67108864
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 0, i32 3
  br label %13

; <label>:13:                                     ; preds = %1, %5
  %14 = phi i32 [ %12, %5 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf4_sse2(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempif: argument 0"}
!9 = distinct !{!9, !"rempif"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempif: argument 0"}
!12 = distinct !{!12, !"rempif"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempif: argument 0"}
!15 = distinct !{!15, !"rempif"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempif: argument 0"}
!18 = distinct !{!18, !"rempif"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempif: argument 0"}
!21 = distinct !{!21, !"rempif"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempif: argument 0"}
!24 = distinct !{!24, !"rempif"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempif: argument 0"}
!27 = distinct !{!27, !"rempif"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempif: argument 0"}
!30 = distinct !{!30, !"rempif"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospif4_u35sse2: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospif4_u35sse2"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_modff4_sse2: argument 0"}
!36 = distinct !{!36, !"Sleef_modff4_sse2"}
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !5, i64 0}
