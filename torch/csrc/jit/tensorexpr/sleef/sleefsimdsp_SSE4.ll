; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vfloat2 = type { <4 x float>, <4 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [7 x i8] c"SSE4.1\00", align 1
@rempitabsp = external local_unnamed_addr constant [0 x float], align 4

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <4 x i32> %6 to <16 x i8>
  %13 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %12) #6
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = bitcast <16 x i8> %13 to <4 x i32>
  %16 = sub <4 x i32> %14, %15
  %17 = fcmp oeq <4 x float> %0, zeroinitializer
  %18 = sext <4 x i1> %17 to <4 x i32>
  %19 = bitcast <4 x i32> %16 to <16 x i8>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <16 x i8> %20) #6
  %22 = fcmp uno <4 x float> %0, zeroinitializer
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %24) #6
  %26 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %25, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %28) #6
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  ret <2 x i64> %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_ldexpf4_sse4(<4 x float>, <2 x i64>) local_unnamed_addr #2 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 6, i32 6, i32 6, i32 6>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %9 = shl <4 x i32> %7, <i32 6, i32 6, i32 6, i32 6>
  %10 = sub <4 x i32> %3, %9
  %11 = add nsw <4 x i32> %8, <i32 127, i32 127, i32 127, i32 127>
  %12 = icmp sgt <4 x i32> %7, <i32 -8, i32 -8, i32 -8, i32 -8>
  %13 = select <4 x i1> %12, <4 x i32> %11, <4 x i32> zeroinitializer
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = icmp sgt <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = xor <2 x i64> %17, <i64 -1, i64 -1>
  %19 = and <2 x i64> %18, %14
  %20 = and <2 x i64> %17, <i64 1095216660735, i64 1095216660735>
  %21 = or <2 x i64> %20, %19
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %24, %0
  %26 = fmul <4 x float> %25, %24
  %27 = fmul <4 x float> %26, %24
  %28 = fmul <4 x float> %27, %24
  %29 = shl <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %28, %31
  ret <4 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = fmul <4 x float> %13, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %13, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fmul <4 x float> %13, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %19 = fadd <4 x float> %18, %17
  br label %268

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %38, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #6
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %28) #6
  %30 = fmul <4 x float> %29, <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>
  %31 = fadd <4 x float> %30, %0
  %32 = fmul <4 x float> %29, <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %29, <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %29, <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>
  %37 = fadd <4 x float> %36, %35
  br label %268

; <label>:38:                                     ; preds = %20
  %39 = bitcast <4 x float> %0 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %42 = add nsw <4 x i32> %41, <i32 -152, i32 -152, i32 -152, i32 -152>
  %43 = icmp ugt <4 x i32> %41, <i32 217, i32 217, i32 217, i32 217>
  %44 = select <4 x i1> %43, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %45 = add <4 x i32> %44, %39
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = ashr <4 x i32> %42, <i32 31, i32 31, i32 31, i32 31>
  %48 = xor <4 x i32> %47, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %49 = and <4 x i32> %48, %42
  %50 = shl <4 x i32> %49, <i32 2, i32 2, i32 2, i32 2>
  %51 = extractelement <4 x i32> %50, i32 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !7
  %55 = extractelement <4 x i32> %50, i32 2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !7
  %59 = extractelement <4 x i32> %50, i32 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !3, !noalias !7
  %63 = extractelement <4 x i32> %50, i32 0
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !3, !noalias !7
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = insertelement <4 x float> %67, float %62, i32 1
  %69 = insertelement <4 x float> %68, float %58, i32 2
  %70 = insertelement <4 x float> %69, float %54, i32 3
  %71 = bitcast <4 x i32> %45 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fsub <4 x float> %46, %73
  %75 = bitcast <4 x float> %70 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %70, %77
  %79 = fmul <4 x float> %70, %46
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %73, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %74, %77
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %78, %73
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %74, %78
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %79, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %92 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %91, i32 8) #6
  %93 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %79, i32 8) #6
  %94 = fmul <4 x float> %93, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %95 = fsub <4 x float> %92, %94
  %96 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %95) #6
  %97 = fmul <4 x float> %92, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %98 = fsub <4 x float> %79, %97
  %99 = fadd <4 x float> %98, %90
  %100 = fsub <4 x float> %98, %99
  %101 = fadd <4 x float> %90, %100
  %102 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !7
  %104 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %105 = load float, float* %104, align 4, !tbaa !3, !noalias !7
  %106 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %60
  %107 = load float, float* %106, align 4, !tbaa !3, !noalias !7
  %108 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %64
  %109 = load float, float* %108, align 4, !tbaa !3, !noalias !7
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = insertelement <4 x float> %110, float %107, i32 1
  %112 = insertelement <4 x float> %111, float %105, i32 2
  %113 = insertelement <4 x float> %112, float %103, i32 3
  %114 = bitcast <4 x float> %113 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 -17587891081216, i64 -17587891081216>
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fsub <4 x float> %113, %116
  %118 = fmul <4 x float> %113, %46
  %119 = bitcast <4 x float> %118 to <2 x i64>
  %120 = xor <2 x i64> %119, <i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <2 x i64> %120 to <4 x float>
  %122 = fmul <4 x float> %73, %116
  %123 = fadd <4 x float> %122, %121
  %124 = fmul <4 x float> %74, %116
  %125 = fadd <4 x float> %124, %123
  %126 = fmul <4 x float> %117, %73
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %74, %117
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %118, %99
  %131 = fsub <4 x float> %130, %99
  %132 = fsub <4 x float> %130, %131
  %133 = fsub <4 x float> %99, %132
  %134 = fsub <4 x float> %118, %131
  %135 = fadd <4 x float> %134, %133
  %136 = fadd <4 x float> %101, %129
  %137 = fadd <4 x float> %135, %136
  %138 = fmul <4 x float> %130, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %139 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %138, i32 8) #6
  %140 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %130, i32 8) #6
  %141 = fmul <4 x float> %140, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %142 = fsub <4 x float> %139, %141
  %143 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %142) #6
  %144 = fmul <4 x float> %139, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %145 = fsub <4 x float> %130, %144
  %146 = add <4 x i32> %143, %96
  %147 = fadd <4 x float> %145, %137
  %148 = fsub <4 x float> %145, %147
  %149 = fadd <4 x float> %137, %148
  %150 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %151 = load float, float* %150, align 4, !tbaa !3, !noalias !7
  %152 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %153 = load float, float* %152, align 4, !tbaa !3, !noalias !7
  %154 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %60
  %155 = load float, float* %154, align 4, !tbaa !3, !noalias !7
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %64
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !7
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = insertelement <4 x float> %158, float %155, i32 1
  %160 = insertelement <4 x float> %159, float %153, i32 2
  %161 = insertelement <4 x float> %160, float %151, i32 3
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !7
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !7
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %60
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !7
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %64
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !7
  %170 = insertelement <4 x float> undef, float %169, i32 0
  %171 = insertelement <4 x float> %170, float %167, i32 1
  %172 = insertelement <4 x float> %171, float %165, i32 2
  %173 = insertelement <4 x float> %172, float %163, i32 3
  %174 = bitcast <4 x float> %161 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -17587891081216, i64 -17587891081216>
  %176 = bitcast <2 x i64> %175 to <4 x float>
  %177 = fsub <4 x float> %161, %176
  %178 = fmul <4 x float> %161, %46
  %179 = bitcast <4 x float> %178 to <2 x i64>
  %180 = xor <2 x i64> %179, <i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = bitcast <2 x i64> %180 to <4 x float>
  %182 = fmul <4 x float> %73, %176
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %177, %73
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %74, %176
  %187 = fadd <4 x float> %186, %185
  %188 = fmul <4 x float> %74, %177
  %189 = fadd <4 x float> %188, %187
  %190 = fmul <4 x float> %173, %46
  %191 = fadd <4 x float> %190, %189
  %192 = fadd <4 x float> %178, %147
  %193 = fsub <4 x float> %192, %147
  %194 = fsub <4 x float> %192, %193
  %195 = fsub <4 x float> %147, %194
  %196 = fsub <4 x float> %178, %193
  %197 = fadd <4 x float> %196, %195
  %198 = fadd <4 x float> %149, %191
  %199 = fadd <4 x float> %197, %198
  %200 = fadd <4 x float> %192, %199
  %201 = fsub <4 x float> %192, %200
  %202 = fadd <4 x float> %199, %201
  %203 = bitcast <4 x float> %200 to <2 x i64>
  %204 = and <2 x i64> %203, <i64 -17587891081216, i64 -17587891081216>
  %205 = bitcast <2 x i64> %204 to <4 x float>
  %206 = fsub <4 x float> %200, %205
  %207 = fmul <4 x float> %200, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %208 = bitcast <4 x float> %207 to <2 x i64>
  %209 = xor <2 x i64> %208, <i64 -9223372034707292160, i64 -9223372034707292160>
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fmul <4 x float> %205, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %212 = fadd <4 x float> %211, %210
  %213 = fmul <4 x float> %206, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %214 = fadd <4 x float> %213, %212
  %215 = fmul <4 x float> %205, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %206, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %200, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %202, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %222 = fadd <4 x float> %221, %220
  %223 = and <2 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159>
  %224 = bitcast <2 x i64> %223 to <4 x float>
  %225 = fcmp olt <4 x float> %224, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %226 = sext <4 x i1> %225 to <4 x i32>
  %227 = bitcast <4 x i32> %226 to <4 x float>
  %228 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %207, <4 x float> %46, <4 x float> %227) #6
  %229 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %227) #6
  %230 = shl <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %231 = and <4 x i32> %230, <i32 6, i32 6, i32 6, i32 6>
  %232 = fcmp ogt <4 x float> %228, zeroinitializer
  %233 = sext <4 x i1> %232 to <4 x i32>
  %234 = bitcast <4 x i32> %233 to <16 x i8>
  %235 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %234) #6
  %236 = bitcast <16 x i8> %235 to <4 x i32>
  %237 = add <4 x i32> %231, %236
  %238 = ashr <4 x i32> %237, <i32 2, i32 2, i32 2, i32 2>
  %239 = and <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %240 = icmp ne <4 x i32> %239, zeroinitializer
  %241 = sext <4 x i1> %240 to <4 x i32>
  %242 = bitcast <4 x float> %228 to <2 x i64>
  %243 = and <2 x i64> %242, <i64 -9223372034707292160, i64 -9223372034707292160>
  %244 = xor <2 x i64> %243, <i64 -4627149705656594469, i64 -4627149705656594469>
  %245 = bitcast <2 x i64> %244 to <4 x float>
  %246 = or <2 x i64> %243, <i64 3691752325685951790, i64 3691752325685951790>
  %247 = bitcast <2 x i64> %246 to <4 x float>
  %248 = fadd <4 x float> %228, %245
  %249 = fsub <4 x float> %248, %228
  %250 = fsub <4 x float> %248, %249
  %251 = fsub <4 x float> %228, %250
  %252 = fsub <4 x float> %245, %249
  %253 = fadd <4 x float> %252, %251
  %254 = fadd <4 x float> %229, %247
  %255 = fadd <4 x float> %254, %253
  %256 = bitcast <4 x i32> %241 to <4 x float>
  %257 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %228, <4 x float> %248, <4 x float> %256) #6
  %258 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %229, <4 x float> %255, <4 x float> %256) #6
  %259 = fadd <4 x float> %257, %258
  %260 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %261 = fcmp uno <4 x float> %0, zeroinitializer
  %262 = or <4 x i1> %260, %261
  %263 = sext <4 x i1> %262 to <4 x i32>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = bitcast <4 x float> %259 to <2 x i64>
  %266 = or <2 x i64> %265, %264
  %267 = bitcast <2 x i64> %266 to <4 x float>
  br label %268

; <label>:268:                                    ; preds = %26, %38, %10
  %269 = phi <4 x i32> [ %12, %10 ], [ %28, %26 ], [ %238, %38 ]
  %270 = phi <4 x float> [ %19, %10 ], [ %37, %26 ], [ %267, %38 ]
  %271 = fmul <4 x float> %270, %270
  %272 = and <4 x i32> %269, <i32 1, i32 1, i32 1, i32 1>
  %273 = icmp ne <4 x i32> %272, zeroinitializer
  %274 = sext <4 x i1> %273 to <4 x i32>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = and <2 x i64> %275, <i64 -9223372034707292160, i64 -9223372034707292160>
  %277 = bitcast <4 x float> %270 to <2 x i64>
  %278 = xor <2 x i64> %276, %277
  %279 = bitcast <2 x i64> %278 to <4 x float>
  %280 = fmul <4 x float> %271, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %281 = fadd <4 x float> %280, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %282 = fmul <4 x float> %271, %281
  %283 = fadd <4 x float> %282, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %284 = fmul <4 x float> %271, %283
  %285 = fadd <4 x float> %284, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %286 = fmul <4 x float> %285, %279
  %287 = fmul <4 x float> %271, %286
  %288 = fadd <4 x float> %287, %279
  %289 = bitcast <4 x float> %0 to <4 x i32>
  %290 = icmp eq <4 x i32> %289, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %291 = sext <4 x i1> %290 to <4 x i32>
  %292 = bitcast <4 x i32> %291 to <4 x float>
  %293 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %288, <4 x float> %0, <4 x float> %292) #6
  ret <4 x float> %293
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cosf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %23, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = fadd <4 x float> %11, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = shl <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = or <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %15) #6
  %17 = fmul <4 x float> %16, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %18 = fadd <4 x float> %17, %0
  %19 = fmul <4 x float> %16, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %16, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %22 = fadd <4 x float> %21, %20
  br label %276

; <label>:23:                                     ; preds = %1
  %24 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %26) #6
  %28 = icmp eq i32 %27, 65535
  br i1 %28, label %29, label %44, !prof !2

; <label>:29:                                     ; preds = %23
  %30 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %31 = fadd <4 x float> %30, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #6
  %33 = shl <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = or <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %37 = fadd <4 x float> %36, %0
  %38 = fmul <4 x float> %35, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %35, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %35, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %43 = fadd <4 x float> %42, %41
  br label %276

; <label>:44:                                     ; preds = %23
  %45 = bitcast <4 x float> %0 to <4 x i32>
  %46 = lshr <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %48 = add nsw <4 x i32> %47, <i32 -152, i32 -152, i32 -152, i32 -152>
  %49 = icmp ugt <4 x i32> %47, <i32 217, i32 217, i32 217, i32 217>
  %50 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = add <4 x i32> %50, %45
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = ashr <4 x i32> %48, <i32 31, i32 31, i32 31, i32 31>
  %54 = xor <4 x i32> %53, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %55 = and <4 x i32> %54, %48
  %56 = shl <4 x i32> %55, <i32 2, i32 2, i32 2, i32 2>
  %57 = extractelement <4 x i32> %56, i32 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !3, !noalias !10
  %61 = extractelement <4 x i32> %56, i32 2
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !3, !noalias !10
  %65 = extractelement <4 x i32> %56, i32 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !3, !noalias !10
  %69 = extractelement <4 x i32> %56, i32 0
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !3, !noalias !10
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = insertelement <4 x float> %73, float %68, i32 1
  %75 = insertelement <4 x float> %74, float %64, i32 2
  %76 = insertelement <4 x float> %75, float %60, i32 3
  %77 = bitcast <4 x i32> %51 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fsub <4 x float> %52, %79
  %81 = bitcast <4 x float> %76 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %76, %83
  %85 = fmul <4 x float> %76, %52
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = xor <2 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = fmul <4 x float> %79, %83
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %80, %83
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %84, %79
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %80, %84
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %85, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %98 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %97, i32 8) #6
  %99 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %85, i32 8) #6
  %100 = fmul <4 x float> %99, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %101 = fsub <4 x float> %98, %100
  %102 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %101) #6
  %103 = fmul <4 x float> %98, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %104 = fsub <4 x float> %85, %103
  %105 = fadd <4 x float> %104, %96
  %106 = fsub <4 x float> %104, %105
  %107 = fadd <4 x float> %96, %106
  %108 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %58
  %109 = load float, float* %108, align 4, !tbaa !3, !noalias !10
  %110 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %62
  %111 = load float, float* %110, align 4, !tbaa !3, !noalias !10
  %112 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %66
  %113 = load float, float* %112, align 4, !tbaa !3, !noalias !10
  %114 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %70
  %115 = load float, float* %114, align 4, !tbaa !3, !noalias !10
  %116 = insertelement <4 x float> undef, float %115, i32 0
  %117 = insertelement <4 x float> %116, float %113, i32 1
  %118 = insertelement <4 x float> %117, float %111, i32 2
  %119 = insertelement <4 x float> %118, float %109, i32 3
  %120 = bitcast <4 x float> %119 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fsub <4 x float> %119, %122
  %124 = fmul <4 x float> %119, %52
  %125 = bitcast <4 x float> %124 to <2 x i64>
  %126 = xor <2 x i64> %125, <i64 -9223372034707292160, i64 -9223372034707292160>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fmul <4 x float> %79, %122
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %80, %122
  %131 = fadd <4 x float> %130, %129
  %132 = fmul <4 x float> %123, %79
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %80, %123
  %135 = fadd <4 x float> %134, %133
  %136 = fadd <4 x float> %124, %105
  %137 = fsub <4 x float> %136, %105
  %138 = fsub <4 x float> %136, %137
  %139 = fsub <4 x float> %105, %138
  %140 = fsub <4 x float> %124, %137
  %141 = fadd <4 x float> %140, %139
  %142 = fadd <4 x float> %107, %135
  %143 = fadd <4 x float> %141, %142
  %144 = fmul <4 x float> %136, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %145 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %144, i32 8) #6
  %146 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %136, i32 8) #6
  %147 = fmul <4 x float> %146, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %148 = fsub <4 x float> %145, %147
  %149 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %148) #6
  %150 = fmul <4 x float> %145, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %151 = fsub <4 x float> %136, %150
  %152 = add <4 x i32> %149, %102
  %153 = fadd <4 x float> %151, %143
  %154 = fsub <4 x float> %151, %153
  %155 = fadd <4 x float> %143, %154
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %58
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !10
  %158 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %62
  %159 = load float, float* %158, align 4, !tbaa !3, !noalias !10
  %160 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %66
  %161 = load float, float* %160, align 4, !tbaa !3, !noalias !10
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %70
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !10
  %164 = insertelement <4 x float> undef, float %163, i32 0
  %165 = insertelement <4 x float> %164, float %161, i32 1
  %166 = insertelement <4 x float> %165, float %159, i32 2
  %167 = insertelement <4 x float> %166, float %157, i32 3
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %58
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !10
  %170 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %62
  %171 = load float, float* %170, align 4, !tbaa !3, !noalias !10
  %172 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %66
  %173 = load float, float* %172, align 4, !tbaa !3, !noalias !10
  %174 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %70
  %175 = load float, float* %174, align 4, !tbaa !3, !noalias !10
  %176 = insertelement <4 x float> undef, float %175, i32 0
  %177 = insertelement <4 x float> %176, float %173, i32 1
  %178 = insertelement <4 x float> %177, float %171, i32 2
  %179 = insertelement <4 x float> %178, float %169, i32 3
  %180 = bitcast <4 x float> %167 to <2 x i64>
  %181 = and <2 x i64> %180, <i64 -17587891081216, i64 -17587891081216>
  %182 = bitcast <2 x i64> %181 to <4 x float>
  %183 = fsub <4 x float> %167, %182
  %184 = fmul <4 x float> %167, %52
  %185 = bitcast <4 x float> %184 to <2 x i64>
  %186 = xor <2 x i64> %185, <i64 -9223372034707292160, i64 -9223372034707292160>
  %187 = bitcast <2 x i64> %186 to <4 x float>
  %188 = fmul <4 x float> %79, %182
  %189 = fadd <4 x float> %188, %187
  %190 = fmul <4 x float> %183, %79
  %191 = fadd <4 x float> %190, %189
  %192 = fmul <4 x float> %80, %182
  %193 = fadd <4 x float> %192, %191
  %194 = fmul <4 x float> %80, %183
  %195 = fadd <4 x float> %194, %193
  %196 = fmul <4 x float> %179, %52
  %197 = fadd <4 x float> %196, %195
  %198 = fadd <4 x float> %184, %153
  %199 = fsub <4 x float> %198, %153
  %200 = fsub <4 x float> %198, %199
  %201 = fsub <4 x float> %153, %200
  %202 = fsub <4 x float> %184, %199
  %203 = fadd <4 x float> %202, %201
  %204 = fadd <4 x float> %155, %197
  %205 = fadd <4 x float> %203, %204
  %206 = fadd <4 x float> %198, %205
  %207 = fsub <4 x float> %198, %206
  %208 = fadd <4 x float> %205, %207
  %209 = bitcast <4 x float> %206 to <2 x i64>
  %210 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %211 = bitcast <2 x i64> %210 to <4 x float>
  %212 = fsub <4 x float> %206, %211
  %213 = fmul <4 x float> %206, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %214 = bitcast <4 x float> %213 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372034707292160, i64 -9223372034707292160>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = fmul <4 x float> %211, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %212, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %211, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %212, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %206, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %226 = fadd <4 x float> %225, %224
  %227 = fmul <4 x float> %208, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %228 = fadd <4 x float> %227, %226
  %229 = and <2 x i64> %77, <i64 9223372034707292159, i64 9223372034707292159>
  %230 = bitcast <2 x i64> %229 to <4 x float>
  %231 = fcmp olt <4 x float> %230, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %232 = sext <4 x i1> %231 to <4 x i32>
  %233 = bitcast <4 x i32> %232 to <4 x float>
  %234 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %213, <4 x float> %52, <4 x float> %233) #6
  %235 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %228, <4 x float> zeroinitializer, <4 x float> %233) #6
  %236 = shl <4 x i32> %152, <i32 1, i32 1, i32 1, i32 1>
  %237 = and <4 x i32> %236, <i32 6, i32 6, i32 6, i32 6>
  %238 = fcmp ogt <4 x float> %234, zeroinitializer
  %239 = sext <4 x i1> %238 to <4 x i32>
  %240 = bitcast <4 x i32> %239 to <16 x i8>
  %241 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %240) #6
  %242 = bitcast <16 x i8> %241 to <4 x i32>
  %243 = add <4 x i32> %237, %242
  %244 = ashr <4 x i32> %243, <i32 1, i32 1, i32 1, i32 1>
  %245 = and <4 x i32> %152, <i32 1, i32 1, i32 1, i32 1>
  %246 = icmp eq <4 x i32> %245, zeroinitializer
  %247 = sext <4 x i1> %246 to <4 x i32>
  %248 = bitcast <4 x i32> %239 to <4 x float>
  %249 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> zeroinitializer, <4 x float> %248) #6
  %250 = bitcast <4 x float> %249 to <2 x i64>
  %251 = and <2 x i64> %250, <i64 -9223372034707292160, i64 -9223372034707292160>
  %252 = xor <2 x i64> %251, <i64 -4627149705656594469, i64 -4627149705656594469>
  %253 = bitcast <2 x i64> %252 to <4 x float>
  %254 = or <2 x i64> %251, <i64 3691752325685951790, i64 3691752325685951790>
  %255 = bitcast <2 x i64> %254 to <4 x float>
  %256 = fadd <4 x float> %234, %253
  %257 = fsub <4 x float> %256, %234
  %258 = fsub <4 x float> %256, %257
  %259 = fsub <4 x float> %234, %258
  %260 = fsub <4 x float> %253, %257
  %261 = fadd <4 x float> %260, %259
  %262 = fadd <4 x float> %235, %255
  %263 = fadd <4 x float> %262, %261
  %264 = bitcast <4 x i32> %247 to <4 x float>
  %265 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %234, <4 x float> %256, <4 x float> %264) #6
  %266 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %235, <4 x float> %263, <4 x float> %264) #6
  %267 = fadd <4 x float> %265, %266
  %268 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %269 = fcmp uno <4 x float> %0, zeroinitializer
  %270 = or <4 x i1> %268, %269
  %271 = sext <4 x i1> %270 to <4 x i32>
  %272 = bitcast <4 x i32> %271 to <2 x i64>
  %273 = bitcast <4 x float> %267 to <2 x i64>
  %274 = or <2 x i64> %273, %272
  %275 = bitcast <2 x i64> %274 to <4 x float>
  br label %276

; <label>:276:                                    ; preds = %29, %44, %10
  %277 = phi <4 x i32> [ %15, %10 ], [ %34, %29 ], [ %244, %44 ]
  %278 = phi <4 x float> [ %22, %10 ], [ %43, %29 ], [ %275, %44 ]
  %279 = fmul <4 x float> %278, %278
  %280 = and <4 x i32> %277, <i32 2, i32 2, i32 2, i32 2>
  %281 = icmp eq <4 x i32> %280, zeroinitializer
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = and <2 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = bitcast <4 x float> %278 to <2 x i64>
  %286 = xor <2 x i64> %284, %285
  %287 = bitcast <2 x i64> %286 to <4 x float>
  %288 = fmul <4 x float> %279, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %289 = fadd <4 x float> %288, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %290 = fmul <4 x float> %279, %289
  %291 = fadd <4 x float> %290, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %292 = fmul <4 x float> %279, %291
  %293 = fadd <4 x float> %292, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %294 = fmul <4 x float> %293, %287
  %295 = fmul <4 x float> %279, %294
  %296 = fadd <4 x float> %295, %287
  ret <4 x float> %296
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %12) #6
  %14 = fmul <4 x float> %13, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %13, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fmul <4 x float> %13, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %19 = fadd <4 x float> %18, %17
  br label %243

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <4 x float> %4, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %38, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #6
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %28) #6
  %30 = fmul <4 x float> %29, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %31 = fadd <4 x float> %30, %0
  %32 = fmul <4 x float> %29, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %29, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %29, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %37 = fadd <4 x float> %36, %35
  br label %243

; <label>:38:                                     ; preds = %20
  %39 = bitcast <4 x float> %0 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %41 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %42 = add nsw <4 x i32> %41, <i32 -152, i32 -152, i32 -152, i32 -152>
  %43 = icmp ugt <4 x i32> %41, <i32 217, i32 217, i32 217, i32 217>
  %44 = select <4 x i1> %43, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %45 = add <4 x i32> %44, %39
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = ashr <4 x i32> %42, <i32 31, i32 31, i32 31, i32 31>
  %48 = xor <4 x i32> %47, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %49 = and <4 x i32> %48, %42
  %50 = shl <4 x i32> %49, <i32 2, i32 2, i32 2, i32 2>
  %51 = extractelement <4 x i32> %50, i32 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !13
  %55 = extractelement <4 x i32> %50, i32 2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !13
  %59 = extractelement <4 x i32> %50, i32 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !3, !noalias !13
  %63 = extractelement <4 x i32> %50, i32 0
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !3, !noalias !13
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = insertelement <4 x float> %67, float %62, i32 1
  %69 = insertelement <4 x float> %68, float %58, i32 2
  %70 = insertelement <4 x float> %69, float %54, i32 3
  %71 = bitcast <4 x i32> %45 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fsub <4 x float> %46, %73
  %75 = bitcast <4 x float> %70 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %70, %77
  %79 = fmul <4 x float> %70, %46
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %73, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %74, %77
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %78, %73
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %74, %78
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %79, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %92 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %91, i32 8) #6
  %93 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %79, i32 8) #6
  %94 = fmul <4 x float> %93, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %95 = fsub <4 x float> %92, %94
  %96 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %95) #6
  %97 = fmul <4 x float> %92, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %98 = fsub <4 x float> %79, %97
  %99 = fadd <4 x float> %98, %90
  %100 = fsub <4 x float> %98, %99
  %101 = fadd <4 x float> %90, %100
  %102 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !13
  %104 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %105 = load float, float* %104, align 4, !tbaa !3, !noalias !13
  %106 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %60
  %107 = load float, float* %106, align 4, !tbaa !3, !noalias !13
  %108 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %64
  %109 = load float, float* %108, align 4, !tbaa !3, !noalias !13
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = insertelement <4 x float> %110, float %107, i32 1
  %112 = insertelement <4 x float> %111, float %105, i32 2
  %113 = insertelement <4 x float> %112, float %103, i32 3
  %114 = bitcast <4 x float> %113 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 -17587891081216, i64 -17587891081216>
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fsub <4 x float> %113, %116
  %118 = fmul <4 x float> %113, %46
  %119 = bitcast <4 x float> %118 to <2 x i64>
  %120 = xor <2 x i64> %119, <i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <2 x i64> %120 to <4 x float>
  %122 = fmul <4 x float> %73, %116
  %123 = fadd <4 x float> %122, %121
  %124 = fmul <4 x float> %74, %116
  %125 = fadd <4 x float> %124, %123
  %126 = fmul <4 x float> %117, %73
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %74, %117
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %118, %99
  %131 = fsub <4 x float> %130, %99
  %132 = fsub <4 x float> %130, %131
  %133 = fsub <4 x float> %99, %132
  %134 = fsub <4 x float> %118, %131
  %135 = fadd <4 x float> %134, %133
  %136 = fadd <4 x float> %101, %129
  %137 = fadd <4 x float> %135, %136
  %138 = fmul <4 x float> %130, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %139 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %138, i32 8) #6
  %140 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %130, i32 8) #6
  %141 = fmul <4 x float> %140, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %142 = fsub <4 x float> %139, %141
  %143 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %142) #6
  %144 = fmul <4 x float> %139, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %145 = fsub <4 x float> %130, %144
  %146 = add <4 x i32> %143, %96
  %147 = fadd <4 x float> %145, %137
  %148 = fsub <4 x float> %145, %147
  %149 = fadd <4 x float> %137, %148
  %150 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %151 = load float, float* %150, align 4, !tbaa !3, !noalias !13
  %152 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %153 = load float, float* %152, align 4, !tbaa !3, !noalias !13
  %154 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %60
  %155 = load float, float* %154, align 4, !tbaa !3, !noalias !13
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %64
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !13
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = insertelement <4 x float> %158, float %155, i32 1
  %160 = insertelement <4 x float> %159, float %153, i32 2
  %161 = insertelement <4 x float> %160, float %151, i32 3
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !13
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !13
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %60
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !13
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %64
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !13
  %170 = insertelement <4 x float> undef, float %169, i32 0
  %171 = insertelement <4 x float> %170, float %167, i32 1
  %172 = insertelement <4 x float> %171, float %165, i32 2
  %173 = insertelement <4 x float> %172, float %163, i32 3
  %174 = bitcast <4 x float> %161 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -17587891081216, i64 -17587891081216>
  %176 = bitcast <2 x i64> %175 to <4 x float>
  %177 = fsub <4 x float> %161, %176
  %178 = fmul <4 x float> %161, %46
  %179 = bitcast <4 x float> %178 to <2 x i64>
  %180 = xor <2 x i64> %179, <i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = bitcast <2 x i64> %180 to <4 x float>
  %182 = fmul <4 x float> %73, %176
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %177, %73
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %74, %176
  %187 = fadd <4 x float> %186, %185
  %188 = fmul <4 x float> %74, %177
  %189 = fadd <4 x float> %188, %187
  %190 = fmul <4 x float> %173, %46
  %191 = fadd <4 x float> %190, %189
  %192 = fadd <4 x float> %178, %147
  %193 = fsub <4 x float> %192, %147
  %194 = fsub <4 x float> %192, %193
  %195 = fsub <4 x float> %147, %194
  %196 = fsub <4 x float> %178, %193
  %197 = fadd <4 x float> %196, %195
  %198 = fadd <4 x float> %149, %191
  %199 = fadd <4 x float> %197, %198
  %200 = fadd <4 x float> %192, %199
  %201 = fsub <4 x float> %192, %200
  %202 = fadd <4 x float> %199, %201
  %203 = bitcast <4 x float> %200 to <2 x i64>
  %204 = and <2 x i64> %203, <i64 -17587891081216, i64 -17587891081216>
  %205 = bitcast <2 x i64> %204 to <4 x float>
  %206 = fsub <4 x float> %200, %205
  %207 = fmul <4 x float> %200, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %208 = bitcast <4 x float> %207 to <2 x i64>
  %209 = xor <2 x i64> %208, <i64 -9223372034707292160, i64 -9223372034707292160>
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fmul <4 x float> %205, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %212 = fadd <4 x float> %211, %210
  %213 = fmul <4 x float> %206, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %214 = fadd <4 x float> %213, %212
  %215 = fmul <4 x float> %205, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %206, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %200, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %202, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %222 = fadd <4 x float> %221, %220
  %223 = and <2 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159>
  %224 = bitcast <2 x i64> %223 to <4 x float>
  %225 = fcmp olt <4 x float> %224, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %226 = sext <4 x i1> %225 to <4 x i32>
  %227 = bitcast <4 x i32> %226 to <4 x float>
  %228 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %207, <4 x float> %46, <4 x float> %227) #6
  %229 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %227) #6
  %230 = fadd <4 x float> %228, %229
  %231 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %232 = fcmp uno <4 x float> %0, zeroinitializer
  %233 = or <4 x i1> %231, %232
  %234 = sext <4 x i1> %233 to <4 x i32>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = bitcast <4 x float> %230 to <2 x i64>
  %237 = or <2 x i64> %236, %235
  %238 = bitcast <2 x i64> %237 to <4 x float>
  %239 = icmp eq <4 x i32> %39, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %240 = sext <4 x i1> %239 to <4 x i32>
  %241 = bitcast <4 x i32> %240 to <4 x float>
  %242 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %238, <4 x float> %0, <4 x float> %241) #6
  br label %243

; <label>:243:                                    ; preds = %26, %38, %10
  %244 = phi <4 x float> [ %19, %10 ], [ %37, %26 ], [ %242, %38 ]
  %245 = phi <4 x i32> [ %12, %10 ], [ %28, %26 ], [ %146, %38 ]
  %246 = fmul <4 x float> %244, %244
  %247 = and <4 x i32> %245, <i32 1, i32 1, i32 1, i32 1>
  %248 = icmp ne <4 x i32> %247, zeroinitializer
  %249 = sext <4 x i1> %248 to <4 x i32>
  %250 = bitcast <4 x i32> %249 to <2 x i64>
  %251 = and <2 x i64> %250, <i64 -9223372034707292160, i64 -9223372034707292160>
  %252 = bitcast <4 x float> %244 to <2 x i64>
  %253 = xor <2 x i64> %251, %252
  %254 = bitcast <2 x i64> %253 to <4 x float>
  %255 = fmul <4 x float> %246, %246
  %256 = fmul <4 x float> %255, %255
  %257 = fmul <4 x float> %246, <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>
  %258 = fadd <4 x float> %257, <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>
  %259 = fmul <4 x float> %246, <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>
  %260 = fadd <4 x float> %259, <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>
  %261 = fmul <4 x float> %246, <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>
  %262 = fadd <4 x float> %261, <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>
  %263 = fmul <4 x float> %255, %260
  %264 = fadd <4 x float> %262, %263
  %265 = fmul <4 x float> %256, %258
  %266 = fadd <4 x float> %265, %264
  %267 = fmul <4 x float> %266, %254
  %268 = fmul <4 x float> %246, %267
  %269 = fadd <4 x float> %268, %254
  %270 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %269
  %271 = bitcast <4 x i32> %249 to <4 x float>
  %272 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %269, <4 x float> %270, <4 x float> %271) #6
  ret <4 x float> %272
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %29, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = fmul <4 x float> %12, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %12, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fsub <4 x float> %17, %15
  %19 = fsub <4 x float> %17, %18
  %20 = fsub <4 x float> %15, %19
  %21 = fsub <4 x float> %16, %18
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %12, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %24 = fadd <4 x float> %23, %17
  %25 = fsub <4 x float> %17, %24
  %26 = fadd <4 x float> %23, %25
  %27 = fadd <4 x float> %26, %22
  %28 = bitcast <4 x float> %0 to <4 x i32>
  br label %261

; <label>:29:                                     ; preds = %1
  %30 = bitcast <4 x float> %0 to <4 x i32>
  %31 = lshr <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %32 = and <4 x i32> %31, <i32 255, i32 255, i32 255, i32 255>
  %33 = add nsw <4 x i32> %32, <i32 -152, i32 -152, i32 -152, i32 -152>
  %34 = icmp ugt <4 x i32> %32, <i32 217, i32 217, i32 217, i32 217>
  %35 = select <4 x i1> %34, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %36 = add <4 x i32> %35, %30
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = ashr <4 x i32> %33, <i32 31, i32 31, i32 31, i32 31>
  %39 = xor <4 x i32> %38, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %40 = and <4 x i32> %39, %33
  %41 = shl <4 x i32> %40, <i32 2, i32 2, i32 2, i32 2>
  %42 = extractelement <4 x i32> %41, i32 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %43
  %45 = load float, float* %44, align 4, !tbaa !3, !noalias !16
  %46 = extractelement <4 x i32> %41, i32 2
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %47
  %49 = load float, float* %48, align 4, !tbaa !3, !noalias !16
  %50 = extractelement <4 x i32> %41, i32 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !3, !noalias !16
  %54 = extractelement <4 x i32> %41, i32 0
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !3, !noalias !16
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = insertelement <4 x float> %58, float %53, i32 1
  %60 = insertelement <4 x float> %59, float %49, i32 2
  %61 = insertelement <4 x float> %60, float %45, i32 3
  %62 = bitcast <4 x i32> %36 to <2 x i64>
  %63 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fsub <4 x float> %37, %64
  %66 = bitcast <4 x float> %61 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <2 x i64> %67 to <4 x float>
  %69 = fsub <4 x float> %61, %68
  %70 = fmul <4 x float> %61, %37
  %71 = bitcast <4 x float> %70 to <2 x i64>
  %72 = xor <2 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fmul <4 x float> %64, %68
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %65, %68
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %69, %64
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %65, %69
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %70, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %83 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %82, i32 8) #6
  %84 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %70, i32 8) #6
  %85 = fmul <4 x float> %84, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %86 = fsub <4 x float> %83, %85
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %86) #6
  %88 = fmul <4 x float> %83, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %89 = fsub <4 x float> %70, %88
  %90 = fadd <4 x float> %89, %81
  %91 = fsub <4 x float> %89, %90
  %92 = fadd <4 x float> %81, %91
  %93 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %43
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !16
  %95 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %47
  %96 = load float, float* %95, align 4, !tbaa !3, !noalias !16
  %97 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %51
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !16
  %99 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %55
  %100 = load float, float* %99, align 4, !tbaa !3, !noalias !16
  %101 = insertelement <4 x float> undef, float %100, i32 0
  %102 = insertelement <4 x float> %101, float %98, i32 1
  %103 = insertelement <4 x float> %102, float %96, i32 2
  %104 = insertelement <4 x float> %103, float %94, i32 3
  %105 = bitcast <4 x float> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fsub <4 x float> %104, %107
  %109 = fmul <4 x float> %104, %37
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fmul <4 x float> %64, %107
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %65, %107
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %108, %64
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %65, %108
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %109, %90
  %122 = fsub <4 x float> %121, %90
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %90, %123
  %125 = fsub <4 x float> %109, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %92, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fmul <4 x float> %121, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %130 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %129, i32 8) #6
  %131 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %121, i32 8) #6
  %132 = fmul <4 x float> %131, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %133 = fsub <4 x float> %130, %132
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %133) #6
  %135 = fmul <4 x float> %130, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %136 = fsub <4 x float> %121, %135
  %137 = add <4 x i32> %134, %87
  %138 = fadd <4 x float> %136, %128
  %139 = fsub <4 x float> %136, %138
  %140 = fadd <4 x float> %128, %139
  %141 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %43
  %142 = load float, float* %141, align 4, !tbaa !3, !noalias !16
  %143 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %47
  %144 = load float, float* %143, align 4, !tbaa !3, !noalias !16
  %145 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %51
  %146 = load float, float* %145, align 4, !tbaa !3, !noalias !16
  %147 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %55
  %148 = load float, float* %147, align 4, !tbaa !3, !noalias !16
  %149 = insertelement <4 x float> undef, float %148, i32 0
  %150 = insertelement <4 x float> %149, float %146, i32 1
  %151 = insertelement <4 x float> %150, float %144, i32 2
  %152 = insertelement <4 x float> %151, float %142, i32 3
  %153 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %43
  %154 = load float, float* %153, align 4, !tbaa !3, !noalias !16
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %47
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !16
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %51
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !16
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %55
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !16
  %161 = insertelement <4 x float> undef, float %160, i32 0
  %162 = insertelement <4 x float> %161, float %158, i32 1
  %163 = insertelement <4 x float> %162, float %156, i32 2
  %164 = insertelement <4 x float> %163, float %154, i32 3
  %165 = bitcast <4 x float> %152 to <2 x i64>
  %166 = and <2 x i64> %165, <i64 -17587891081216, i64 -17587891081216>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fsub <4 x float> %152, %167
  %169 = fmul <4 x float> %152, %37
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = xor <2 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = fmul <4 x float> %64, %167
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %168, %64
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %65, %167
  %178 = fadd <4 x float> %177, %176
  %179 = fmul <4 x float> %65, %168
  %180 = fadd <4 x float> %179, %178
  %181 = fmul <4 x float> %164, %37
  %182 = fadd <4 x float> %181, %180
  %183 = fadd <4 x float> %169, %138
  %184 = fsub <4 x float> %183, %138
  %185 = fsub <4 x float> %183, %184
  %186 = fsub <4 x float> %138, %185
  %187 = fsub <4 x float> %169, %184
  %188 = fadd <4 x float> %187, %186
  %189 = fadd <4 x float> %140, %182
  %190 = fadd <4 x float> %188, %189
  %191 = fadd <4 x float> %183, %190
  %192 = fsub <4 x float> %183, %191
  %193 = fadd <4 x float> %190, %192
  %194 = bitcast <4 x float> %191 to <2 x i64>
  %195 = and <2 x i64> %194, <i64 -17587891081216, i64 -17587891081216>
  %196 = bitcast <2 x i64> %195 to <4 x float>
  %197 = fsub <4 x float> %191, %196
  %198 = fmul <4 x float> %191, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %199 = bitcast <4 x float> %198 to <2 x i64>
  %200 = xor <2 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160>
  %201 = bitcast <2 x i64> %200 to <4 x float>
  %202 = fmul <4 x float> %196, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %203 = fadd <4 x float> %202, %201
  %204 = fmul <4 x float> %197, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %205 = fadd <4 x float> %204, %203
  %206 = fmul <4 x float> %196, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %207 = fadd <4 x float> %206, %205
  %208 = fmul <4 x float> %197, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %209 = fadd <4 x float> %208, %207
  %210 = fmul <4 x float> %191, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %193, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %213 = fadd <4 x float> %212, %211
  %214 = and <2 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159>
  %215 = bitcast <2 x i64> %214 to <4 x float>
  %216 = fcmp olt <4 x float> %215, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %217 = sext <4 x i1> %216 to <4 x i32>
  %218 = bitcast <4 x i32> %217 to <4 x float>
  %219 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %198, <4 x float> %37, <4 x float> %218) #6
  %220 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %213, <4 x float> zeroinitializer, <4 x float> %218) #6
  %221 = shl <4 x i32> %137, <i32 1, i32 1, i32 1, i32 1>
  %222 = and <4 x i32> %221, <i32 6, i32 6, i32 6, i32 6>
  %223 = fcmp ogt <4 x float> %219, zeroinitializer
  %224 = sext <4 x i1> %223 to <4 x i32>
  %225 = bitcast <4 x i32> %224 to <16 x i8>
  %226 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %225) #6
  %227 = bitcast <16 x i8> %226 to <4 x i32>
  %228 = add <4 x i32> %222, %227
  %229 = ashr <4 x i32> %228, <i32 2, i32 2, i32 2, i32 2>
  %230 = and <4 x i32> %137, <i32 1, i32 1, i32 1, i32 1>
  %231 = icmp ne <4 x i32> %230, zeroinitializer
  %232 = sext <4 x i1> %231 to <4 x i32>
  %233 = bitcast <4 x float> %219 to <2 x i64>
  %234 = and <2 x i64> %233, <i64 -9223372034707292160, i64 -9223372034707292160>
  %235 = xor <2 x i64> %234, <i64 -4627149705656594469, i64 -4627149705656594469>
  %236 = bitcast <2 x i64> %235 to <4 x float>
  %237 = or <2 x i64> %234, <i64 3691752325685951790, i64 3691752325685951790>
  %238 = bitcast <2 x i64> %237 to <4 x float>
  %239 = fadd <4 x float> %219, %236
  %240 = fsub <4 x float> %239, %219
  %241 = fsub <4 x float> %239, %240
  %242 = fsub <4 x float> %219, %241
  %243 = fsub <4 x float> %236, %240
  %244 = fadd <4 x float> %243, %242
  %245 = fadd <4 x float> %220, %238
  %246 = fadd <4 x float> %245, %244
  %247 = bitcast <4 x i32> %232 to <4 x float>
  %248 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %219, <4 x float> %239, <4 x float> %247) #6
  %249 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %220, <4 x float> %246, <4 x float> %247) #6
  %250 = fadd <4 x float> %248, %249
  %251 = fsub <4 x float> %248, %250
  %252 = fadd <4 x float> %249, %251
  %253 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %254 = fcmp uno <4 x float> %0, zeroinitializer
  %255 = or <4 x i1> %253, %254
  %256 = sext <4 x i1> %255 to <4 x i32>
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = bitcast <4 x float> %250 to <2 x i64>
  %259 = or <2 x i64> %258, %257
  %260 = bitcast <2 x i64> %259 to <4 x float>
  br label %261

; <label>:261:                                    ; preds = %29, %10
  %262 = phi <4 x i32> [ %30, %29 ], [ %28, %10 ]
  %263 = phi <4 x float> [ %260, %29 ], [ %24, %10 ]
  %264 = phi <4 x float> [ %252, %29 ], [ %27, %10 ]
  %265 = phi <4 x i32> [ %229, %29 ], [ %13, %10 ]
  %266 = bitcast <4 x float> %263 to <2 x i64>
  %267 = and <2 x i64> %266, <i64 -17587891081216, i64 -17587891081216>
  %268 = bitcast <2 x i64> %267 to <4 x float>
  %269 = fsub <4 x float> %263, %268
  %270 = fmul <4 x float> %263, %263
  %271 = bitcast <4 x float> %270 to <2 x i64>
  %272 = xor <2 x i64> %271, <i64 -9223372034707292160, i64 -9223372034707292160>
  %273 = bitcast <2 x i64> %272 to <4 x float>
  %274 = fmul <4 x float> %268, %268
  %275 = fadd <4 x float> %274, %273
  %276 = fadd <4 x float> %268, %268
  %277 = fmul <4 x float> %276, %269
  %278 = fadd <4 x float> %277, %275
  %279 = fmul <4 x float> %269, %269
  %280 = fadd <4 x float> %279, %278
  %281 = fadd <4 x float> %264, %264
  %282 = fmul <4 x float> %263, %281
  %283 = fadd <4 x float> %282, %280
  %284 = fmul <4 x float> %270, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %285 = fadd <4 x float> %284, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %286 = fmul <4 x float> %270, %285
  %287 = fadd <4 x float> %286, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %288 = fmul <4 x float> %270, %287
  %289 = fadd <4 x float> %288, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %290 = fsub <4 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %289
  %291 = fadd <4 x float> %288, %290
  %292 = bitcast <4 x float> %289 to <2 x i64>
  %293 = and <2 x i64> %292, <i64 -17587891081216, i64 -17587891081216>
  %294 = bitcast <2 x i64> %293 to <4 x float>
  %295 = fsub <4 x float> %289, %294
  %296 = and <2 x i64> %271, <i64 -17587891081216, i64 -17587891081216>
  %297 = bitcast <2 x i64> %296 to <4 x float>
  %298 = fsub <4 x float> %270, %297
  %299 = fmul <4 x float> %270, %289
  %300 = bitcast <4 x float> %299 to <2 x i64>
  %301 = xor <2 x i64> %300, <i64 -9223372034707292160, i64 -9223372034707292160>
  %302 = bitcast <2 x i64> %301 to <4 x float>
  %303 = fmul <4 x float> %297, %294
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %295, %297
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %298, %294
  %308 = fadd <4 x float> %307, %306
  %309 = fmul <4 x float> %298, %295
  %310 = fadd <4 x float> %309, %308
  %311 = fmul <4 x float> %289, %283
  %312 = fadd <4 x float> %311, %310
  %313 = fmul <4 x float> %270, %291
  %314 = fadd <4 x float> %313, %312
  %315 = fadd <4 x float> %299, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %316 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %315
  %317 = fadd <4 x float> %299, %316
  %318 = fadd <4 x float> %317, %314
  %319 = bitcast <4 x float> %315 to <2 x i64>
  %320 = and <2 x i64> %319, <i64 -17587891081216, i64 -17587891081216>
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fsub <4 x float> %315, %321
  %323 = fmul <4 x float> %264, %321
  %324 = fmul <4 x float> %318, %268
  %325 = fmul <4 x float> %269, %322
  %326 = fmul <4 x float> %322, %268
  %327 = fmul <4 x float> %269, %321
  %328 = fmul <4 x float> %268, %321
  %329 = fadd <4 x float> %323, %324
  %330 = fadd <4 x float> %325, %329
  %331 = fadd <4 x float> %326, %330
  %332 = fadd <4 x float> %327, %331
  %333 = fadd <4 x float> %328, %332
  %334 = and <4 x i32> %265, <i32 1, i32 1, i32 1, i32 1>
  %335 = icmp ne <4 x i32> %334, zeroinitializer
  %336 = sext <4 x i1> %335 to <4 x i32>
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = and <2 x i64> %337, <i64 -9223372034707292160, i64 -9223372034707292160>
  %339 = bitcast <4 x float> %333 to <2 x i64>
  %340 = xor <2 x i64> %338, %339
  %341 = bitcast <2 x i64> %340 to <4 x float>
  %342 = icmp eq <4 x i32> %262, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %343 = sext <4 x i1> %342 to <4 x i32>
  %344 = bitcast <4 x i32> %343 to <4 x float>
  %345 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %341, <4 x float> %0, <4 x float> %344) #6
  ret <4 x float> %345
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cosf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %40, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %12 = fadd <4 x float> %11, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %13 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %12, i32 8) #6
  %14 = fmul <4 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %15 = fadd <4 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %15) #6
  %17 = fmul <4 x float> %15, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %18 = fadd <4 x float> %17, %0
  %19 = fsub <4 x float> %18, %0
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %0, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %25 = fadd <4 x float> %24, %18
  %26 = fsub <4 x float> %25, %18
  %27 = fsub <4 x float> %25, %26
  %28 = fsub <4 x float> %18, %27
  %29 = fsub <4 x float> %24, %26
  %30 = fadd <4 x float> %29, %28
  %31 = fadd <4 x float> %23, %30
  %32 = fmul <4 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %33 = fadd <4 x float> %32, %25
  %34 = fsub <4 x float> %33, %25
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %25, %35
  %37 = fsub <4 x float> %32, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %38, %31
  br label %274

; <label>:40:                                     ; preds = %1
  %41 = bitcast <4 x float> %0 to <4 x i32>
  %42 = lshr <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = and <4 x i32> %42, <i32 255, i32 255, i32 255, i32 255>
  %44 = add nsw <4 x i32> %43, <i32 -152, i32 -152, i32 -152, i32 -152>
  %45 = icmp ugt <4 x i32> %43, <i32 217, i32 217, i32 217, i32 217>
  %46 = select <4 x i1> %45, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %47 = add <4 x i32> %46, %41
  %48 = bitcast <4 x i32> %47 to <4 x float>
  %49 = ashr <4 x i32> %44, <i32 31, i32 31, i32 31, i32 31>
  %50 = xor <4 x i32> %49, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %51 = and <4 x i32> %50, %44
  %52 = shl <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = extractelement <4 x i32> %52, i32 3
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !3, !noalias !19
  %57 = extractelement <4 x i32> %52, i32 2
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !3, !noalias !19
  %61 = extractelement <4 x i32> %52, i32 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !3, !noalias !19
  %65 = extractelement <4 x i32> %52, i32 0
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !3, !noalias !19
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = insertelement <4 x float> %69, float %64, i32 1
  %71 = insertelement <4 x float> %70, float %60, i32 2
  %72 = insertelement <4 x float> %71, float %56, i32 3
  %73 = bitcast <4 x i32> %47 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %75 = bitcast <2 x i64> %74 to <4 x float>
  %76 = fsub <4 x float> %48, %75
  %77 = bitcast <4 x float> %72 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <2 x i64> %78 to <4 x float>
  %80 = fsub <4 x float> %72, %79
  %81 = fmul <4 x float> %72, %48
  %82 = bitcast <4 x float> %81 to <2 x i64>
  %83 = xor <2 x i64> %82, <i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fmul <4 x float> %75, %79
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %76, %79
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %80, %75
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %76, %80
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %81, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %94 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %93, i32 8) #6
  %95 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %81, i32 8) #6
  %96 = fmul <4 x float> %95, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %97 = fsub <4 x float> %94, %96
  %98 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %97) #6
  %99 = fmul <4 x float> %94, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %100 = fsub <4 x float> %81, %99
  %101 = fadd <4 x float> %100, %92
  %102 = fsub <4 x float> %100, %101
  %103 = fadd <4 x float> %92, %102
  %104 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %54
  %105 = load float, float* %104, align 4, !tbaa !3, !noalias !19
  %106 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %58
  %107 = load float, float* %106, align 4, !tbaa !3, !noalias !19
  %108 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %62
  %109 = load float, float* %108, align 4, !tbaa !3, !noalias !19
  %110 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %66
  %111 = load float, float* %110, align 4, !tbaa !3, !noalias !19
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = insertelement <4 x float> %112, float %109, i32 1
  %114 = insertelement <4 x float> %113, float %107, i32 2
  %115 = insertelement <4 x float> %114, float %105, i32 3
  %116 = bitcast <4 x float> %115 to <2 x i64>
  %117 = and <2 x i64> %116, <i64 -17587891081216, i64 -17587891081216>
  %118 = bitcast <2 x i64> %117 to <4 x float>
  %119 = fsub <4 x float> %115, %118
  %120 = fmul <4 x float> %115, %48
  %121 = bitcast <4 x float> %120 to <2 x i64>
  %122 = xor <2 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <2 x i64> %122 to <4 x float>
  %124 = fmul <4 x float> %75, %118
  %125 = fadd <4 x float> %124, %123
  %126 = fmul <4 x float> %76, %118
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %119, %75
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %76, %119
  %131 = fadd <4 x float> %130, %129
  %132 = fadd <4 x float> %120, %101
  %133 = fsub <4 x float> %132, %101
  %134 = fsub <4 x float> %132, %133
  %135 = fsub <4 x float> %101, %134
  %136 = fsub <4 x float> %120, %133
  %137 = fadd <4 x float> %136, %135
  %138 = fadd <4 x float> %103, %131
  %139 = fadd <4 x float> %137, %138
  %140 = fmul <4 x float> %132, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %141 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %140, i32 8) #6
  %142 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %132, i32 8) #6
  %143 = fmul <4 x float> %142, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %144 = fsub <4 x float> %141, %143
  %145 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %144) #6
  %146 = fmul <4 x float> %141, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %147 = fsub <4 x float> %132, %146
  %148 = add <4 x i32> %145, %98
  %149 = fadd <4 x float> %147, %139
  %150 = fsub <4 x float> %147, %149
  %151 = fadd <4 x float> %139, %150
  %152 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %54
  %153 = load float, float* %152, align 4, !tbaa !3, !noalias !19
  %154 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %58
  %155 = load float, float* %154, align 4, !tbaa !3, !noalias !19
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %62
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !19
  %158 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %66
  %159 = load float, float* %158, align 4, !tbaa !3, !noalias !19
  %160 = insertelement <4 x float> undef, float %159, i32 0
  %161 = insertelement <4 x float> %160, float %157, i32 1
  %162 = insertelement <4 x float> %161, float %155, i32 2
  %163 = insertelement <4 x float> %162, float %153, i32 3
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %54
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !19
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %58
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !19
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %62
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !19
  %170 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %66
  %171 = load float, float* %170, align 4, !tbaa !3, !noalias !19
  %172 = insertelement <4 x float> undef, float %171, i32 0
  %173 = insertelement <4 x float> %172, float %169, i32 1
  %174 = insertelement <4 x float> %173, float %167, i32 2
  %175 = insertelement <4 x float> %174, float %165, i32 3
  %176 = bitcast <4 x float> %163 to <2 x i64>
  %177 = and <2 x i64> %176, <i64 -17587891081216, i64 -17587891081216>
  %178 = bitcast <2 x i64> %177 to <4 x float>
  %179 = fsub <4 x float> %163, %178
  %180 = fmul <4 x float> %163, %48
  %181 = bitcast <4 x float> %180 to <2 x i64>
  %182 = xor <2 x i64> %181, <i64 -9223372034707292160, i64 -9223372034707292160>
  %183 = bitcast <2 x i64> %182 to <4 x float>
  %184 = fmul <4 x float> %75, %178
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %179, %75
  %187 = fadd <4 x float> %186, %185
  %188 = fmul <4 x float> %76, %178
  %189 = fadd <4 x float> %188, %187
  %190 = fmul <4 x float> %76, %179
  %191 = fadd <4 x float> %190, %189
  %192 = fmul <4 x float> %175, %48
  %193 = fadd <4 x float> %192, %191
  %194 = fadd <4 x float> %180, %149
  %195 = fsub <4 x float> %194, %149
  %196 = fsub <4 x float> %194, %195
  %197 = fsub <4 x float> %149, %196
  %198 = fsub <4 x float> %180, %195
  %199 = fadd <4 x float> %198, %197
  %200 = fadd <4 x float> %151, %193
  %201 = fadd <4 x float> %199, %200
  %202 = fadd <4 x float> %194, %201
  %203 = fsub <4 x float> %194, %202
  %204 = fadd <4 x float> %201, %203
  %205 = bitcast <4 x float> %202 to <2 x i64>
  %206 = and <2 x i64> %205, <i64 -17587891081216, i64 -17587891081216>
  %207 = bitcast <2 x i64> %206 to <4 x float>
  %208 = fsub <4 x float> %202, %207
  %209 = fmul <4 x float> %202, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %210 = bitcast <4 x float> %209 to <2 x i64>
  %211 = xor <2 x i64> %210, <i64 -9223372034707292160, i64 -9223372034707292160>
  %212 = bitcast <2 x i64> %211 to <4 x float>
  %213 = fmul <4 x float> %207, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %214 = fadd <4 x float> %213, %212
  %215 = fmul <4 x float> %208, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %207, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %208, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %202, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %204, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %224 = fadd <4 x float> %223, %222
  %225 = and <2 x i64> %73, <i64 9223372034707292159, i64 9223372034707292159>
  %226 = bitcast <2 x i64> %225 to <4 x float>
  %227 = fcmp olt <4 x float> %226, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %228 = sext <4 x i1> %227 to <4 x i32>
  %229 = bitcast <4 x i32> %228 to <4 x float>
  %230 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %209, <4 x float> %48, <4 x float> %229) #6
  %231 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %224, <4 x float> zeroinitializer, <4 x float> %229) #6
  %232 = shl <4 x i32> %148, <i32 1, i32 1, i32 1, i32 1>
  %233 = and <4 x i32> %232, <i32 6, i32 6, i32 6, i32 6>
  %234 = fcmp ogt <4 x float> %230, zeroinitializer
  %235 = sext <4 x i1> %234 to <4 x i32>
  %236 = bitcast <4 x i32> %235 to <16 x i8>
  %237 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %236) #6
  %238 = bitcast <16 x i8> %237 to <4 x i32>
  %239 = add <4 x i32> %233, %238
  %240 = ashr <4 x i32> %239, <i32 1, i32 1, i32 1, i32 1>
  %241 = and <4 x i32> %148, <i32 1, i32 1, i32 1, i32 1>
  %242 = icmp eq <4 x i32> %241, zeroinitializer
  %243 = sext <4 x i1> %242 to <4 x i32>
  %244 = bitcast <4 x i32> %235 to <4 x float>
  %245 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> zeroinitializer, <4 x float> %244) #6
  %246 = bitcast <4 x float> %245 to <2 x i64>
  %247 = and <2 x i64> %246, <i64 -9223372034707292160, i64 -9223372034707292160>
  %248 = xor <2 x i64> %247, <i64 -4627149705656594469, i64 -4627149705656594469>
  %249 = bitcast <2 x i64> %248 to <4 x float>
  %250 = or <2 x i64> %247, <i64 3691752325685951790, i64 3691752325685951790>
  %251 = bitcast <2 x i64> %250 to <4 x float>
  %252 = fadd <4 x float> %230, %249
  %253 = fsub <4 x float> %252, %230
  %254 = fsub <4 x float> %252, %253
  %255 = fsub <4 x float> %230, %254
  %256 = fsub <4 x float> %249, %253
  %257 = fadd <4 x float> %256, %255
  %258 = fadd <4 x float> %231, %251
  %259 = fadd <4 x float> %258, %257
  %260 = bitcast <4 x i32> %243 to <4 x float>
  %261 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %230, <4 x float> %252, <4 x float> %260) #6
  %262 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %231, <4 x float> %259, <4 x float> %260) #6
  %263 = fadd <4 x float> %261, %262
  %264 = fsub <4 x float> %261, %263
  %265 = fadd <4 x float> %262, %264
  %266 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %267 = fcmp uno <4 x float> %0, zeroinitializer
  %268 = or <4 x i1> %266, %267
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = bitcast <4 x float> %263 to <2 x i64>
  %272 = or <2 x i64> %271, %270
  %273 = bitcast <2 x i64> %272 to <4 x float>
  br label %274

; <label>:274:                                    ; preds = %40, %10
  %275 = phi <4 x float> [ %273, %40 ], [ %33, %10 ]
  %276 = phi <4 x float> [ %265, %40 ], [ %39, %10 ]
  %277 = phi <4 x i32> [ %240, %40 ], [ %16, %10 ]
  %278 = bitcast <4 x float> %275 to <2 x i64>
  %279 = and <2 x i64> %278, <i64 -17587891081216, i64 -17587891081216>
  %280 = bitcast <2 x i64> %279 to <4 x float>
  %281 = fsub <4 x float> %275, %280
  %282 = fmul <4 x float> %275, %275
  %283 = bitcast <4 x float> %282 to <2 x i64>
  %284 = xor <2 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = bitcast <2 x i64> %284 to <4 x float>
  %286 = fmul <4 x float> %280, %280
  %287 = fadd <4 x float> %286, %285
  %288 = fadd <4 x float> %280, %280
  %289 = fmul <4 x float> %288, %281
  %290 = fadd <4 x float> %289, %287
  %291 = fmul <4 x float> %281, %281
  %292 = fadd <4 x float> %291, %290
  %293 = fadd <4 x float> %276, %276
  %294 = fmul <4 x float> %275, %293
  %295 = fadd <4 x float> %294, %292
  %296 = fmul <4 x float> %282, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %297 = fadd <4 x float> %296, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %298 = fmul <4 x float> %282, %297
  %299 = fadd <4 x float> %298, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %300 = fmul <4 x float> %282, %299
  %301 = fadd <4 x float> %300, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %302 = fsub <4 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %301
  %303 = fadd <4 x float> %300, %302
  %304 = bitcast <4 x float> %301 to <2 x i64>
  %305 = and <2 x i64> %304, <i64 -17587891081216, i64 -17587891081216>
  %306 = bitcast <2 x i64> %305 to <4 x float>
  %307 = fsub <4 x float> %301, %306
  %308 = and <2 x i64> %283, <i64 -17587891081216, i64 -17587891081216>
  %309 = bitcast <2 x i64> %308 to <4 x float>
  %310 = fsub <4 x float> %282, %309
  %311 = fmul <4 x float> %282, %301
  %312 = bitcast <4 x float> %311 to <2 x i64>
  %313 = xor <2 x i64> %312, <i64 -9223372034707292160, i64 -9223372034707292160>
  %314 = bitcast <2 x i64> %313 to <4 x float>
  %315 = fmul <4 x float> %309, %306
  %316 = fadd <4 x float> %315, %314
  %317 = fmul <4 x float> %307, %309
  %318 = fadd <4 x float> %317, %316
  %319 = fmul <4 x float> %310, %306
  %320 = fadd <4 x float> %319, %318
  %321 = fmul <4 x float> %310, %307
  %322 = fadd <4 x float> %321, %320
  %323 = fmul <4 x float> %301, %295
  %324 = fadd <4 x float> %323, %322
  %325 = fmul <4 x float> %282, %303
  %326 = fadd <4 x float> %325, %324
  %327 = fadd <4 x float> %311, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %328 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %327
  %329 = fadd <4 x float> %311, %328
  %330 = fadd <4 x float> %329, %326
  %331 = bitcast <4 x float> %327 to <2 x i64>
  %332 = and <2 x i64> %331, <i64 -17587891081216, i64 -17587891081216>
  %333 = bitcast <2 x i64> %332 to <4 x float>
  %334 = fsub <4 x float> %327, %333
  %335 = fmul <4 x float> %276, %333
  %336 = fmul <4 x float> %330, %280
  %337 = fmul <4 x float> %281, %334
  %338 = fmul <4 x float> %334, %280
  %339 = fmul <4 x float> %281, %333
  %340 = fmul <4 x float> %280, %333
  %341 = fadd <4 x float> %335, %336
  %342 = fadd <4 x float> %337, %341
  %343 = fadd <4 x float> %338, %342
  %344 = fadd <4 x float> %339, %343
  %345 = fadd <4 x float> %340, %344
  %346 = and <4 x i32> %277, <i32 2, i32 2, i32 2, i32 2>
  %347 = icmp eq <4 x i32> %346, zeroinitializer
  %348 = sext <4 x i1> %347 to <4 x i32>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = and <2 x i64> %349, <i64 -9223372034707292160, i64 -9223372034707292160>
  %351 = bitcast <4 x float> %345 to <2 x i64>
  %352 = xor <2 x i64> %350, %351
  %353 = bitcast <2 x i64> %352 to <4 x float>
  ret <4 x float> %353
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastsinf4_u3500sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %5 = fmul <4 x float> %3, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %6, %6
  %8 = fmul <4 x float> %7, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %9 = fadd <4 x float> %8, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %10 = fmul <4 x float> %7, %9
  %11 = fadd <4 x float> %10, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %12 = fmul <4 x float> %6, %7
  %13 = fmul <4 x float> %12, %11
  %14 = fadd <4 x float> %6, %13
  %15 = and <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %16 = icmp ne <4 x i32> %15, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x float> %14 to <2 x i64>
  %21 = xor <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x float> %0 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %25, <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %28) #6
  %30 = icmp eq i32 %29, 65535
  br i1 %30, label %35, label %31, !prof !2

; <label>:31:                                     ; preds = %1
  %32 = tail call <4 x float> @Sleef_sinf4_u35sse4(<4 x float> %0)
  %33 = bitcast <4 x i32> %27 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %32, <4 x float> %22, <4 x float> %33) #6
  br label %35

; <label>:35:                                     ; preds = %1, %31
  %36 = phi <4 x float> [ %34, %31 ], [ %22, %1 ]
  ret <4 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastcosf4_u3500sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = fadd <4 x float> %2, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %4 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %3, i32 8) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %6 = fadd <4 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %7 = fmul <4 x float> %4, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %8 = fadd <4 x float> %6, %7
  %9 = fmul <4 x float> %8, %8
  %10 = fmul <4 x float> %9, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %11 = fadd <4 x float> %10, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %12 = fmul <4 x float> %9, %11
  %13 = fadd <4 x float> %12, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %14 = fmul <4 x float> %8, %9
  %15 = fmul <4 x float> %14, %13
  %16 = fadd <4 x float> %8, %15
  %17 = and <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %18 = icmp eq <4 x i32> %17, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <4 x float> %16 to <2 x i64>
  %23 = xor <2 x i64> %21, %22
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = bitcast <4 x float> %0 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372034707292159, i64 9223372034707292159>
  %27 = bitcast <2 x i64> %26 to <4 x float>
  %28 = fcmp olt <4 x float> %27, <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %30) #6
  %32 = icmp eq i32 %31, 65535
  br i1 %32, label %37, label %33, !prof !2

; <label>:33:                                     ; preds = %1
  %34 = tail call <4 x float> @Sleef_cosf4_u35sse4(<4 x float> %0)
  %35 = bitcast <4 x i32> %29 to <4 x float>
  %36 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %34, <4 x float> %24, <4 x float> %35) #6
  br label %37

; <label>:37:                                     ; preds = %1, %33
  %38 = phi <4 x float> [ %36, %33 ], [ %24, %1 ]
  ret <4 x float> %38
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf4_u35sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %21, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %13) #6
  %15 = fmul <4 x float> %14, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %16 = fadd <4 x float> %15, %1
  %17 = fmul <4 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %18 = fadd <4 x float> %17, %16
  %19 = fmul <4 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %20 = fadd <4 x float> %19, %18
  br label %240

; <label>:21:                                     ; preds = %2
  %22 = fcmp olt <4 x float> %5, <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %24) #6
  %26 = icmp eq i32 %25, 65535
  br i1 %26, label %27, label %39, !prof !2

; <label>:27:                                     ; preds = %21
  %28 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %29 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %29) #6
  %31 = fmul <4 x float> %30, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %32 = fadd <4 x float> %31, %1
  %33 = fmul <4 x float> %30, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %34 = fadd <4 x float> %33, %32
  %35 = fmul <4 x float> %30, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %30, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %38 = fadd <4 x float> %37, %36
  br label %240

; <label>:39:                                     ; preds = %21
  %40 = bitcast <4 x float> %1 to <4 x i32>
  %41 = lshr <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %43 = add nsw <4 x i32> %42, <i32 -152, i32 -152, i32 -152, i32 -152>
  %44 = icmp ugt <4 x i32> %42, <i32 217, i32 217, i32 217, i32 217>
  %45 = select <4 x i1> %44, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %46 = add <4 x i32> %45, %40
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = ashr <4 x i32> %43, <i32 31, i32 31, i32 31, i32 31>
  %49 = xor <4 x i32> %48, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %50 = and <4 x i32> %49, %43
  %51 = shl <4 x i32> %50, <i32 2, i32 2, i32 2, i32 2>
  %52 = extractelement <4 x i32> %51, i32 3
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !3, !noalias !22
  %56 = extractelement <4 x i32> %51, i32 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !3, !noalias !22
  %60 = extractelement <4 x i32> %51, i32 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !3, !noalias !22
  %64 = extractelement <4 x i32> %51, i32 0
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !3, !noalias !22
  %68 = insertelement <4 x float> undef, float %67, i32 0
  %69 = insertelement <4 x float> %68, float %63, i32 1
  %70 = insertelement <4 x float> %69, float %59, i32 2
  %71 = insertelement <4 x float> %70, float %55, i32 3
  %72 = bitcast <4 x i32> %46 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fsub <4 x float> %47, %74
  %76 = bitcast <4 x float> %71 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = fsub <4 x float> %71, %78
  %80 = fmul <4 x float> %71, %47
  %81 = bitcast <4 x float> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fmul <4 x float> %74, %78
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %75, %78
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %79, %74
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %75, %79
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %80, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %93 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %92, i32 8) #6
  %94 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %80, i32 8) #6
  %95 = fmul <4 x float> %94, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %96 = fsub <4 x float> %93, %95
  %97 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %96) #6
  %98 = fmul <4 x float> %93, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %99 = fsub <4 x float> %80, %98
  %100 = fadd <4 x float> %99, %91
  %101 = fsub <4 x float> %99, %100
  %102 = fadd <4 x float> %91, %101
  %103 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %53
  %104 = load float, float* %103, align 4, !tbaa !3, !noalias !22
  %105 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %57
  %106 = load float, float* %105, align 4, !tbaa !3, !noalias !22
  %107 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %61
  %108 = load float, float* %107, align 4, !tbaa !3, !noalias !22
  %109 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %65
  %110 = load float, float* %109, align 4, !tbaa !3, !noalias !22
  %111 = insertelement <4 x float> undef, float %110, i32 0
  %112 = insertelement <4 x float> %111, float %108, i32 1
  %113 = insertelement <4 x float> %112, float %106, i32 2
  %114 = insertelement <4 x float> %113, float %104, i32 3
  %115 = bitcast <4 x float> %114 to <2 x i64>
  %116 = and <2 x i64> %115, <i64 -17587891081216, i64 -17587891081216>
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fsub <4 x float> %114, %117
  %119 = fmul <4 x float> %114, %47
  %120 = bitcast <4 x float> %119 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fmul <4 x float> %74, %117
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %75, %117
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %118, %74
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %75, %118
  %130 = fadd <4 x float> %129, %128
  %131 = fadd <4 x float> %119, %100
  %132 = fsub <4 x float> %131, %100
  %133 = fsub <4 x float> %131, %132
  %134 = fsub <4 x float> %100, %133
  %135 = fsub <4 x float> %119, %132
  %136 = fadd <4 x float> %135, %134
  %137 = fadd <4 x float> %102, %130
  %138 = fadd <4 x float> %136, %137
  %139 = fmul <4 x float> %131, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %140 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %139, i32 8) #6
  %141 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %131, i32 8) #6
  %142 = fmul <4 x float> %141, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %143 = fsub <4 x float> %140, %142
  %144 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %143) #6
  %145 = fmul <4 x float> %140, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %146 = fsub <4 x float> %131, %145
  %147 = add <4 x i32> %144, %97
  %148 = fadd <4 x float> %146, %138
  %149 = fsub <4 x float> %146, %148
  %150 = fadd <4 x float> %138, %149
  %151 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %53
  %152 = load float, float* %151, align 4, !tbaa !3, !noalias !22
  %153 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %57
  %154 = load float, float* %153, align 4, !tbaa !3, !noalias !22
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %61
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !22
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %65
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !22
  %159 = insertelement <4 x float> undef, float %158, i32 0
  %160 = insertelement <4 x float> %159, float %156, i32 1
  %161 = insertelement <4 x float> %160, float %154, i32 2
  %162 = insertelement <4 x float> %161, float %152, i32 3
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %53
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !22
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %57
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !22
  %167 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %61
  %168 = load float, float* %167, align 4, !tbaa !3, !noalias !22
  %169 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %65
  %170 = load float, float* %169, align 4, !tbaa !3, !noalias !22
  %171 = insertelement <4 x float> undef, float %170, i32 0
  %172 = insertelement <4 x float> %171, float %168, i32 1
  %173 = insertelement <4 x float> %172, float %166, i32 2
  %174 = insertelement <4 x float> %173, float %164, i32 3
  %175 = bitcast <4 x float> %162 to <2 x i64>
  %176 = and <2 x i64> %175, <i64 -17587891081216, i64 -17587891081216>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fsub <4 x float> %162, %177
  %179 = fmul <4 x float> %162, %47
  %180 = bitcast <4 x float> %179 to <2 x i64>
  %181 = xor <2 x i64> %180, <i64 -9223372034707292160, i64 -9223372034707292160>
  %182 = bitcast <2 x i64> %181 to <4 x float>
  %183 = fmul <4 x float> %74, %177
  %184 = fadd <4 x float> %183, %182
  %185 = fmul <4 x float> %178, %74
  %186 = fadd <4 x float> %185, %184
  %187 = fmul <4 x float> %75, %177
  %188 = fadd <4 x float> %187, %186
  %189 = fmul <4 x float> %75, %178
  %190 = fadd <4 x float> %189, %188
  %191 = fmul <4 x float> %174, %47
  %192 = fadd <4 x float> %191, %190
  %193 = fadd <4 x float> %179, %148
  %194 = fsub <4 x float> %193, %148
  %195 = fsub <4 x float> %193, %194
  %196 = fsub <4 x float> %148, %195
  %197 = fsub <4 x float> %179, %194
  %198 = fadd <4 x float> %197, %196
  %199 = fadd <4 x float> %150, %192
  %200 = fadd <4 x float> %198, %199
  %201 = fadd <4 x float> %193, %200
  %202 = fsub <4 x float> %193, %201
  %203 = fadd <4 x float> %200, %202
  %204 = bitcast <4 x float> %201 to <2 x i64>
  %205 = and <2 x i64> %204, <i64 -17587891081216, i64 -17587891081216>
  %206 = bitcast <2 x i64> %205 to <4 x float>
  %207 = fsub <4 x float> %201, %206
  %208 = fmul <4 x float> %201, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %209 = bitcast <4 x float> %208 to <2 x i64>
  %210 = xor <2 x i64> %209, <i64 -9223372034707292160, i64 -9223372034707292160>
  %211 = bitcast <2 x i64> %210 to <4 x float>
  %212 = fmul <4 x float> %206, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %213 = fadd <4 x float> %212, %211
  %214 = fmul <4 x float> %207, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %215 = fadd <4 x float> %214, %213
  %216 = fmul <4 x float> %206, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %217 = fadd <4 x float> %216, %215
  %218 = fmul <4 x float> %207, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %219 = fadd <4 x float> %218, %217
  %220 = fmul <4 x float> %201, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %203, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %223 = fadd <4 x float> %222, %221
  %224 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %225 = bitcast <2 x i64> %224 to <4 x float>
  %226 = fcmp olt <4 x float> %225, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %227 = sext <4 x i1> %226 to <4 x i32>
  %228 = bitcast <4 x i32> %227 to <4 x float>
  %229 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %208, <4 x float> %47, <4 x float> %228) #6
  %230 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %223, <4 x float> zeroinitializer, <4 x float> %228) #6
  %231 = fadd <4 x float> %229, %230
  %232 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %233 = fcmp uno <4 x float> %1, zeroinitializer
  %234 = or <4 x i1> %232, %233
  %235 = sext <4 x i1> %234 to <4 x i32>
  %236 = bitcast <4 x i32> %235 to <2 x i64>
  %237 = bitcast <4 x float> %231 to <2 x i64>
  %238 = or <2 x i64> %237, %236
  %239 = bitcast <2 x i64> %238 to <4 x float>
  br label %240

; <label>:240:                                    ; preds = %27, %39, %11
  %241 = phi <4 x float> [ %20, %11 ], [ %38, %27 ], [ %239, %39 ]
  %242 = phi <4 x i32> [ %13, %11 ], [ %29, %27 ], [ %147, %39 ]
  %243 = fmul <4 x float> %241, %241
  %244 = fmul <4 x float> %243, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %245 = fadd <4 x float> %244, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %246 = fmul <4 x float> %243, %245
  %247 = fadd <4 x float> %246, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %248 = fmul <4 x float> %243, %247
  %249 = fmul <4 x float> %241, %248
  %250 = fadd <4 x float> %241, %249
  %251 = bitcast <4 x float> %1 to <4 x i32>
  %252 = icmp eq <4 x i32> %251, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %253 = sext <4 x i1> %252 to <4 x i32>
  %254 = bitcast <4 x i32> %253 to <4 x float>
  %255 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %250, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %254) #6
  %256 = fmul <4 x float> %243, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %257 = fadd <4 x float> %256, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %258 = fmul <4 x float> %243, %257
  %259 = fadd <4 x float> %258, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %260 = fmul <4 x float> %243, %259
  %261 = fadd <4 x float> %260, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %262 = fmul <4 x float> %243, %261
  %263 = fadd <4 x float> %262, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %264 = fmul <4 x float> %243, %263
  %265 = fadd <4 x float> %264, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %266 = and <4 x i32> %242, <i32 1, i32 1, i32 1, i32 1>
  %267 = icmp eq <4 x i32> %266, zeroinitializer
  %268 = sext <4 x i1> %267 to <4 x i32>
  %269 = bitcast <4 x i32> %268 to <4 x float>
  %270 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %265, <4 x float> %255, <4 x float> %269) #6
  %271 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %255, <4 x float> %265, <4 x float> %269) #6
  %272 = and <4 x i32> %242, <i32 2, i32 2, i32 2, i32 2>
  %273 = icmp ne <4 x i32> %272, zeroinitializer
  %274 = sext <4 x i1> %273 to <4 x i32>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = and <2 x i64> %275, <i64 -9223372034707292160, i64 -9223372034707292160>
  %277 = bitcast <4 x float> %270 to <2 x i64>
  %278 = xor <2 x i64> %276, %277
  %279 = add <4 x i32> %242, <i32 1, i32 1, i32 1, i32 1>
  %280 = and <4 x i32> %279, <i32 2, i32 2, i32 2, i32 2>
  %281 = icmp ne <4 x i32> %280, zeroinitializer
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = and <2 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = bitcast <4 x float> %271 to <2 x i64>
  %286 = xor <2 x i64> %284, %285
  %287 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %287, align 16
  %288 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %289 = bitcast <4 x float>* %288 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %289, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf4_u10sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %30, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <4 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %13 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %12, i32 8) #6
  %14 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %13) #6
  %15 = fmul <4 x float> %13, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %16 = fadd <4 x float> %15, %1
  %17 = fmul <4 x float> %13, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %18 = fadd <4 x float> %17, %16
  %19 = fsub <4 x float> %18, %16
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %16, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %13, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %25 = fadd <4 x float> %24, %18
  %26 = fsub <4 x float> %18, %25
  %27 = fadd <4 x float> %24, %26
  %28 = fadd <4 x float> %27, %23
  %29 = bitcast <4 x float> %1 to <4 x i32>
  br label %230

; <label>:30:                                     ; preds = %2
  %31 = bitcast <4 x float> %1 to <4 x i32>
  %32 = lshr <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = and <4 x i32> %32, <i32 255, i32 255, i32 255, i32 255>
  %34 = add nsw <4 x i32> %33, <i32 -152, i32 -152, i32 -152, i32 -152>
  %35 = icmp ugt <4 x i32> %33, <i32 217, i32 217, i32 217, i32 217>
  %36 = select <4 x i1> %35, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %37 = add <4 x i32> %36, %31
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = ashr <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %40 = xor <4 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <4 x i32> %40, %34
  %42 = shl <4 x i32> %41, <i32 2, i32 2, i32 2, i32 2>
  %43 = extractelement <4 x i32> %42, i32 3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !3, !noalias !25
  %47 = extractelement <4 x i32> %42, i32 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !3, !noalias !25
  %51 = extractelement <4 x i32> %42, i32 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !3, !noalias !25
  %55 = extractelement <4 x i32> %42, i32 0
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !3, !noalias !25
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = insertelement <4 x float> %59, float %54, i32 1
  %61 = insertelement <4 x float> %60, float %50, i32 2
  %62 = insertelement <4 x float> %61, float %46, i32 3
  %63 = bitcast <4 x i32> %37 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %38, %65
  %67 = bitcast <4 x float> %62 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fsub <4 x float> %62, %69
  %71 = fmul <4 x float> %62, %38
  %72 = bitcast <4 x float> %71 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %65, %69
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %66, %69
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %70, %65
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %66, %70
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %71, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %84 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %83, i32 8) #6
  %85 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %71, i32 8) #6
  %86 = fmul <4 x float> %85, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %87 = fsub <4 x float> %84, %86
  %88 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %87) #6
  %89 = fmul <4 x float> %84, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %90 = fsub <4 x float> %71, %89
  %91 = fadd <4 x float> %90, %82
  %92 = fsub <4 x float> %90, %91
  %93 = fadd <4 x float> %82, %92
  %94 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %44
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !25
  %96 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %48
  %97 = load float, float* %96, align 4, !tbaa !3, !noalias !25
  %98 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %52
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !25
  %100 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %56
  %101 = load float, float* %100, align 4, !tbaa !3, !noalias !25
  %102 = insertelement <4 x float> undef, float %101, i32 0
  %103 = insertelement <4 x float> %102, float %99, i32 1
  %104 = insertelement <4 x float> %103, float %97, i32 2
  %105 = insertelement <4 x float> %104, float %95, i32 3
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = and <2 x i64> %106, <i64 -17587891081216, i64 -17587891081216>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fsub <4 x float> %105, %108
  %110 = fmul <4 x float> %105, %38
  %111 = bitcast <4 x float> %110 to <2 x i64>
  %112 = xor <2 x i64> %111, <i64 -9223372034707292160, i64 -9223372034707292160>
  %113 = bitcast <2 x i64> %112 to <4 x float>
  %114 = fmul <4 x float> %65, %108
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %66, %108
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %109, %65
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %66, %109
  %121 = fadd <4 x float> %120, %119
  %122 = fadd <4 x float> %110, %91
  %123 = fsub <4 x float> %122, %91
  %124 = fsub <4 x float> %122, %123
  %125 = fsub <4 x float> %91, %124
  %126 = fsub <4 x float> %110, %123
  %127 = fadd <4 x float> %126, %125
  %128 = fadd <4 x float> %93, %121
  %129 = fadd <4 x float> %127, %128
  %130 = fmul <4 x float> %122, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %131 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %130, i32 8) #6
  %132 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %122, i32 8) #6
  %133 = fmul <4 x float> %132, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %134 = fsub <4 x float> %131, %133
  %135 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %134) #6
  %136 = fmul <4 x float> %131, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %137 = fsub <4 x float> %122, %136
  %138 = add <4 x i32> %135, %88
  %139 = fadd <4 x float> %137, %129
  %140 = fsub <4 x float> %137, %139
  %141 = fadd <4 x float> %129, %140
  %142 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %44
  %143 = load float, float* %142, align 4, !tbaa !3, !noalias !25
  %144 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %48
  %145 = load float, float* %144, align 4, !tbaa !3, !noalias !25
  %146 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %52
  %147 = load float, float* %146, align 4, !tbaa !3, !noalias !25
  %148 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %56
  %149 = load float, float* %148, align 4, !tbaa !3, !noalias !25
  %150 = insertelement <4 x float> undef, float %149, i32 0
  %151 = insertelement <4 x float> %150, float %147, i32 1
  %152 = insertelement <4 x float> %151, float %145, i32 2
  %153 = insertelement <4 x float> %152, float %143, i32 3
  %154 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %44
  %155 = load float, float* %154, align 4, !tbaa !3, !noalias !25
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %48
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !25
  %158 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %52
  %159 = load float, float* %158, align 4, !tbaa !3, !noalias !25
  %160 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %56
  %161 = load float, float* %160, align 4, !tbaa !3, !noalias !25
  %162 = insertelement <4 x float> undef, float %161, i32 0
  %163 = insertelement <4 x float> %162, float %159, i32 1
  %164 = insertelement <4 x float> %163, float %157, i32 2
  %165 = insertelement <4 x float> %164, float %155, i32 3
  %166 = bitcast <4 x float> %153 to <2 x i64>
  %167 = and <2 x i64> %166, <i64 -17587891081216, i64 -17587891081216>
  %168 = bitcast <2 x i64> %167 to <4 x float>
  %169 = fsub <4 x float> %153, %168
  %170 = fmul <4 x float> %153, %38
  %171 = bitcast <4 x float> %170 to <2 x i64>
  %172 = xor <2 x i64> %171, <i64 -9223372034707292160, i64 -9223372034707292160>
  %173 = bitcast <2 x i64> %172 to <4 x float>
  %174 = fmul <4 x float> %65, %168
  %175 = fadd <4 x float> %174, %173
  %176 = fmul <4 x float> %169, %65
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %66, %168
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %66, %169
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %165, %38
  %183 = fadd <4 x float> %182, %181
  %184 = fadd <4 x float> %170, %139
  %185 = fsub <4 x float> %184, %139
  %186 = fsub <4 x float> %184, %185
  %187 = fsub <4 x float> %139, %186
  %188 = fsub <4 x float> %170, %185
  %189 = fadd <4 x float> %188, %187
  %190 = fadd <4 x float> %141, %183
  %191 = fadd <4 x float> %189, %190
  %192 = fadd <4 x float> %184, %191
  %193 = fsub <4 x float> %184, %192
  %194 = fadd <4 x float> %191, %193
  %195 = bitcast <4 x float> %192 to <2 x i64>
  %196 = and <2 x i64> %195, <i64 -17587891081216, i64 -17587891081216>
  %197 = bitcast <2 x i64> %196 to <4 x float>
  %198 = fsub <4 x float> %192, %197
  %199 = fmul <4 x float> %192, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %200 = bitcast <4 x float> %199 to <2 x i64>
  %201 = xor <2 x i64> %200, <i64 -9223372034707292160, i64 -9223372034707292160>
  %202 = bitcast <2 x i64> %201 to <4 x float>
  %203 = fmul <4 x float> %197, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %204 = fadd <4 x float> %203, %202
  %205 = fmul <4 x float> %198, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %206 = fadd <4 x float> %205, %204
  %207 = fmul <4 x float> %197, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %208 = fadd <4 x float> %207, %206
  %209 = fmul <4 x float> %198, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %210 = fadd <4 x float> %209, %208
  %211 = fmul <4 x float> %192, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %212 = fadd <4 x float> %211, %210
  %213 = fmul <4 x float> %194, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %214 = fadd <4 x float> %213, %212
  %215 = and <2 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = fcmp olt <4 x float> %216, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %218 = sext <4 x i1> %217 to <4 x i32>
  %219 = bitcast <4 x i32> %218 to <4 x float>
  %220 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %199, <4 x float> %38, <4 x float> %219) #6
  %221 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %214, <4 x float> zeroinitializer, <4 x float> %219) #6
  %222 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %223 = fcmp uno <4 x float> %1, zeroinitializer
  %224 = or <4 x i1> %222, %223
  %225 = sext <4 x i1> %224 to <4 x i32>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = bitcast <4 x float> %220 to <2 x i64>
  %228 = or <2 x i64> %227, %226
  %229 = bitcast <2 x i64> %228 to <4 x float>
  br label %230

; <label>:230:                                    ; preds = %30, %11
  %231 = phi <4 x i32> [ %31, %30 ], [ %29, %11 ]
  %232 = phi <4 x float> [ %229, %30 ], [ %25, %11 ]
  %233 = phi <4 x float> [ %221, %30 ], [ %28, %11 ]
  %234 = phi <4 x i32> [ %138, %30 ], [ %14, %11 ]
  %235 = bitcast <4 x float> %232 to <2 x i64>
  %236 = and <2 x i64> %235, <i64 -17587891081216, i64 -17587891081216>
  %237 = bitcast <2 x i64> %236 to <4 x float>
  %238 = fsub <4 x float> %232, %237
  %239 = fmul <4 x float> %233, %237
  %240 = fmul <4 x float> %238, %238
  %241 = fmul <4 x float> %238, %237
  %242 = fadd <4 x float> %241, %241
  %243 = fmul <4 x float> %237, %237
  %244 = fadd <4 x float> %239, %239
  %245 = fadd <4 x float> %244, %240
  %246 = fadd <4 x float> %245, %242
  %247 = fadd <4 x float> %243, %246
  %248 = fmul <4 x float> %247, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %249 = fadd <4 x float> %248, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %250 = fmul <4 x float> %247, %249
  %251 = fadd <4 x float> %250, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %252 = fmul <4 x float> %232, %247
  %253 = fmul <4 x float> %252, %251
  %254 = fadd <4 x float> %232, %253
  %255 = fsub <4 x float> %232, %254
  %256 = fadd <4 x float> %253, %255
  %257 = fadd <4 x float> %233, %256
  %258 = fadd <4 x float> %254, %257
  %259 = icmp eq <4 x i32> %231, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %260 = sext <4 x i1> %259 to <4 x i32>
  %261 = bitcast <4 x i32> %260 to <4 x float>
  %262 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %258, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %261) #6
  %263 = fmul <4 x float> %247, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %264 = fadd <4 x float> %263, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %265 = fmul <4 x float> %247, %264
  %266 = fadd <4 x float> %265, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %267 = fmul <4 x float> %247, %266
  %268 = fadd <4 x float> %267, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %269 = fmul <4 x float> %247, %268
  %270 = fadd <4 x float> %269, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %271 = bitcast <4 x float> %247 to <2 x i64>
  %272 = and <2 x i64> %271, <i64 -17587891081216, i64 -17587891081216>
  %273 = bitcast <2 x i64> %272 to <4 x float>
  %274 = fsub <4 x float> %247, %273
  %275 = bitcast <4 x float> %270 to <2 x i64>
  %276 = and <2 x i64> %275, <i64 -17587891081216, i64 -17587891081216>
  %277 = bitcast <2 x i64> %276 to <4 x float>
  %278 = fsub <4 x float> %270, %277
  %279 = fmul <4 x float> %247, %270
  %280 = bitcast <4 x float> %279 to <2 x i64>
  %281 = xor <2 x i64> %280, <i64 -9223372034707292160, i64 -9223372034707292160>
  %282 = bitcast <2 x i64> %281 to <4 x float>
  %283 = fmul <4 x float> %273, %277
  %284 = fadd <4 x float> %283, %282
  %285 = fmul <4 x float> %274, %277
  %286 = fadd <4 x float> %285, %284
  %287 = fmul <4 x float> %278, %273
  %288 = fadd <4 x float> %287, %286
  %289 = fmul <4 x float> %274, %278
  %290 = fadd <4 x float> %289, %288
  %291 = fadd <4 x float> %279, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %292 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %291
  %293 = fadd <4 x float> %279, %292
  %294 = fadd <4 x float> %293, %290
  %295 = fadd <4 x float> %291, %294
  %296 = and <4 x i32> %234, <i32 1, i32 1, i32 1, i32 1>
  %297 = icmp eq <4 x i32> %296, zeroinitializer
  %298 = sext <4 x i1> %297 to <4 x i32>
  %299 = bitcast <4 x i32> %298 to <4 x float>
  %300 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %295, <4 x float> %262, <4 x float> %299) #6
  %301 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %262, <4 x float> %295, <4 x float> %299) #6
  %302 = and <4 x i32> %234, <i32 2, i32 2, i32 2, i32 2>
  %303 = icmp ne <4 x i32> %302, zeroinitializer
  %304 = sext <4 x i1> %303 to <4 x i32>
  %305 = bitcast <4 x i32> %304 to <2 x i64>
  %306 = and <2 x i64> %305, <i64 -9223372034707292160, i64 -9223372034707292160>
  %307 = bitcast <4 x float> %300 to <2 x i64>
  %308 = xor <2 x i64> %306, %307
  %309 = add <4 x i32> %234, <i32 1, i32 1, i32 1, i32 1>
  %310 = and <4 x i32> %309, <i32 2, i32 2, i32 2, i32 2>
  %311 = icmp ne <4 x i32> %310, zeroinitializer
  %312 = sext <4 x i1> %311 to <4 x i32>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = and <2 x i64> %313, <i64 -9223372034707292160, i64 -9223372034707292160>
  %315 = bitcast <4 x float> %301 to <2 x i64>
  %316 = xor <2 x i64> %314, %315
  %317 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %317, align 16
  %318 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %319 = bitcast <4 x float>* %318 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %319, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif4_u05sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = bitcast <4 x float> %10 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = fsub <4 x float> %10, %14
  %16 = bitcast <4 x float> %11 to <2 x i64>
  %17 = xor <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fmul <4 x float> %14, %14
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %15, %14
  %22 = fadd <4 x float> %21, %20
  %23 = fadd <4 x float> %21, %22
  %24 = fmul <4 x float> %15, %15
  %25 = fadd <4 x float> %24, %23
  %26 = fmul <4 x float> %11, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %27 = fadd <4 x float> %26, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %28 = fmul <4 x float> %11, %27
  %29 = fadd <4 x float> %28, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %30 = fmul <4 x float> %11, %29
  %31 = fadd <4 x float> %30, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %32 = fsub <4 x float> %31, %30
  %33 = fsub <4 x float> %31, %32
  %34 = fsub <4 x float> %30, %33
  %35 = fsub <4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %32
  %36 = fadd <4 x float> %35, %34
  %37 = fadd <4 x float> %36, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %38 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %11, %39
  %41 = bitcast <4 x float> %31 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %31, %43
  %45 = fmul <4 x float> %11, %31
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fmul <4 x float> %39, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %40, %43
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %44, %39
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %40, %44
  %56 = fadd <4 x float> %55, %54
  %57 = fmul <4 x float> %11, %37
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %31, %25
  %60 = fadd <4 x float> %59, %58
  %61 = fadd <4 x float> %45, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %62 = fsub <4 x float> %61, %45
  %63 = fsub <4 x float> %61, %62
  %64 = fsub <4 x float> %45, %63
  %65 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %62
  %66 = fadd <4 x float> %65, %64
  %67 = fadd <4 x float> %60, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %68 = fadd <4 x float> %66, %67
  %69 = bitcast <4 x float> %61 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %61, %71
  %73 = fmul <4 x float> %10, %61
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %14, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %72, %14
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %15, %71
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %15, %72
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %10, %68
  %86 = fadd <4 x float> %84, %85
  %87 = fadd <4 x float> %73, %86
  %88 = bitcast <4 x float> %1 to <4 x i32>
  %89 = icmp eq <4 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = sext <4 x i1> %89 to <4 x i32>
  %91 = bitcast <4 x i32> %90 to <4 x float>
  %92 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %87, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %91) #6
  %93 = fmul <4 x float> %11, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %94 = fadd <4 x float> %93, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %95 = fmul <4 x float> %11, %94
  %96 = fadd <4 x float> %95, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %97 = fmul <4 x float> %11, %96
  %98 = fadd <4 x float> %97, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %99 = fsub <4 x float> %98, %97
  %100 = fsub <4 x float> %98, %99
  %101 = fsub <4 x float> %97, %100
  %102 = fsub <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %99
  %103 = fadd <4 x float> %102, %101
  %104 = fadd <4 x float> %103, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %105 = bitcast <4 x float> %98 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fsub <4 x float> %98, %107
  %109 = fmul <4 x float> %11, %98
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fmul <4 x float> %39, %107
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %40, %107
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %108, %39
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %40, %108
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %11, %104
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %98, %25
  %124 = fadd <4 x float> %123, %122
  %125 = fadd <4 x float> %109, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %126 = fsub <4 x float> %125, %109
  %127 = fsub <4 x float> %125, %126
  %128 = fsub <4 x float> %109, %127
  %129 = fsub <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %126
  %130 = fadd <4 x float> %129, %128
  %131 = fadd <4 x float> %124, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %125 to <2 x i64>
  %134 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fsub <4 x float> %125, %135
  %137 = fmul <4 x float> %11, %125
  %138 = bitcast <4 x float> %137 to <2 x i64>
  %139 = xor <2 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <2 x i64> %139 to <4 x float>
  %141 = fmul <4 x float> %39, %135
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %136, %39
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %40, %135
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %40, %136
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %25, %125
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %11, %132
  %152 = fadd <4 x float> %150, %151
  %153 = fadd <4 x float> %137, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %154 = fsub <4 x float> %153, %137
  %155 = fsub <4 x float> %153, %154
  %156 = fsub <4 x float> %137, %155
  %157 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %154
  %158 = fadd <4 x float> %157, %156
  %159 = fadd <4 x float> %158, %152
  %160 = fadd <4 x float> %153, %159
  %161 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %162 = icmp eq <4 x i32> %161, zeroinitializer
  %163 = sext <4 x i1> %162 to <4 x i32>
  %164 = bitcast <4 x i32> %163 to <4 x float>
  %165 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %160, <4 x float> %92, <4 x float> %164) #6
  %166 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %92, <4 x float> %160, <4 x float> %164) #6
  %167 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %168 = icmp ne <4 x i32> %167, zeroinitializer
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = and <2 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <4 x float> %165 to <2 x i64>
  %173 = xor <2 x i64> %171, %172
  %174 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %175 = and <4 x i32> %174, <i32 4, i32 4, i32 4, i32 4>
  %176 = icmp ne <4 x i32> %175, zeroinitializer
  %177 = sext <4 x i1> %176 to <4 x i32>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = and <2 x i64> %178, <i64 -9223372034707292160, i64 -9223372034707292160>
  %180 = bitcast <4 x float> %166 to <2 x i64>
  %181 = xor <2 x i64> %179, %180
  %182 = bitcast <4 x float> %1 to <2 x i64>
  %183 = and <2 x i64> %182, <i64 9223372034707292159, i64 9223372034707292159>
  %184 = bitcast <2 x i64> %183 to <4 x float>
  %185 = fcmp ogt <4 x float> %184, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %186 = sext <4 x i1> %185 to <4 x i32>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 -1, i64 -1>
  %189 = and <2 x i64> %173, %188
  %190 = and <2 x i64> %181, %188
  %191 = fcmp oeq <4 x float> %184, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %192 = sext <4 x i1> %191 to <4 x i32>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  %194 = or <2 x i64> %189, %193
  %195 = or <2 x i64> %190, %193
  %196 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %196, align 16
  %197 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %198 = bitcast <4 x float>* %197 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %198, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif4_u35sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <4 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <4 x float> %10, %17
  %19 = fmul <4 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <4 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <4 x float> %11, %20
  %22 = fadd <4 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <4 x float> %11, %22
  %24 = fadd <4 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <4 x float> %11, %24
  %26 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> %18, <4 x float> %30) #6
  %32 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %18, <4 x float> %26, <4 x float> %30) #6
  %33 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %34 = icmp ne <4 x i32> %33, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x float> %31 to <2 x i64>
  %39 = xor <2 x i64> %37, %38
  %40 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %41 = and <4 x i32> %40, <i32 4, i32 4, i32 4, i32 4>
  %42 = icmp ne <4 x i32> %41, zeroinitializer
  %43 = sext <4 x i1> %42 to <4 x i32>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = bitcast <4 x float> %32 to <2 x i64>
  %47 = xor <2 x i64> %45, %46
  %48 = bitcast <4 x float> %1 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 9223372034707292159, i64 9223372034707292159>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fcmp ogt <4 x float> %50, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -1, i64 -1>
  %55 = and <2 x i64> %39, %54
  %56 = and <2 x i64> %47, %54
  %57 = fcmp oeq <4 x float> %50, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = or <2 x i64> %55, %59
  %61 = or <2 x i64> %56, %59
  %62 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 16
  %63 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %64 = bitcast <4 x float>* %63 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %64, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff4_sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %1, %4
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp ogt <4 x float> %8, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = bitcast <4 x i32> %10 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> zeroinitializer, <4 x float> %11) #6
  %13 = bitcast <4 x float> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372034707292159, i64 9223372034707292159>
  %15 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %16 = or <2 x i64> %14, %15
  %17 = fsub <4 x float> %1, %12
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = or <2 x i64> %19, %15
  %21 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %21, align 16
  %22 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %23 = bitcast <4 x float>* %22 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %23, align 16
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %29, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <4 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %12 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %12) #6
  %14 = fmul <4 x float> %12, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %15 = fadd <4 x float> %14, %0
  %16 = fmul <4 x float> %12, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %17 = fadd <4 x float> %16, %15
  %18 = fsub <4 x float> %17, %15
  %19 = fsub <4 x float> %17, %18
  %20 = fsub <4 x float> %15, %19
  %21 = fsub <4 x float> %16, %18
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %12, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %24 = fadd <4 x float> %23, %17
  %25 = fsub <4 x float> %17, %24
  %26 = fadd <4 x float> %23, %25
  %27 = fadd <4 x float> %26, %22
  %28 = bitcast <4 x float> %0 to <4 x i32>
  br label %232

; <label>:29:                                     ; preds = %1
  %30 = bitcast <4 x float> %0 to <4 x i32>
  %31 = lshr <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %32 = and <4 x i32> %31, <i32 255, i32 255, i32 255, i32 255>
  %33 = add nsw <4 x i32> %32, <i32 -152, i32 -152, i32 -152, i32 -152>
  %34 = icmp ugt <4 x i32> %32, <i32 217, i32 217, i32 217, i32 217>
  %35 = select <4 x i1> %34, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %36 = add <4 x i32> %35, %30
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = ashr <4 x i32> %33, <i32 31, i32 31, i32 31, i32 31>
  %39 = xor <4 x i32> %38, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %40 = and <4 x i32> %39, %33
  %41 = shl <4 x i32> %40, <i32 2, i32 2, i32 2, i32 2>
  %42 = extractelement <4 x i32> %41, i32 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %43
  %45 = load float, float* %44, align 4, !tbaa !3, !noalias !28
  %46 = extractelement <4 x i32> %41, i32 2
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %47
  %49 = load float, float* %48, align 4, !tbaa !3, !noalias !28
  %50 = extractelement <4 x i32> %41, i32 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !3, !noalias !28
  %54 = extractelement <4 x i32> %41, i32 0
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !3, !noalias !28
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = insertelement <4 x float> %58, float %53, i32 1
  %60 = insertelement <4 x float> %59, float %49, i32 2
  %61 = insertelement <4 x float> %60, float %45, i32 3
  %62 = bitcast <4 x i32> %36 to <2 x i64>
  %63 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fsub <4 x float> %37, %64
  %66 = bitcast <4 x float> %61 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <2 x i64> %67 to <4 x float>
  %69 = fsub <4 x float> %61, %68
  %70 = fmul <4 x float> %61, %37
  %71 = bitcast <4 x float> %70 to <2 x i64>
  %72 = xor <2 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fmul <4 x float> %64, %68
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %65, %68
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %69, %64
  %79 = fadd <4 x float> %78, %77
  %80 = fmul <4 x float> %65, %69
  %81 = fadd <4 x float> %80, %79
  %82 = fmul <4 x float> %70, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %83 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %82, i32 8) #6
  %84 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %70, i32 8) #6
  %85 = fmul <4 x float> %84, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %86 = fsub <4 x float> %83, %85
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %86) #6
  %88 = fmul <4 x float> %83, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %89 = fsub <4 x float> %70, %88
  %90 = fadd <4 x float> %89, %81
  %91 = fsub <4 x float> %89, %90
  %92 = fadd <4 x float> %81, %91
  %93 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %43
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !28
  %95 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %47
  %96 = load float, float* %95, align 4, !tbaa !3, !noalias !28
  %97 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %51
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !28
  %99 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %55
  %100 = load float, float* %99, align 4, !tbaa !3, !noalias !28
  %101 = insertelement <4 x float> undef, float %100, i32 0
  %102 = insertelement <4 x float> %101, float %98, i32 1
  %103 = insertelement <4 x float> %102, float %96, i32 2
  %104 = insertelement <4 x float> %103, float %94, i32 3
  %105 = bitcast <4 x float> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fsub <4 x float> %104, %107
  %109 = fmul <4 x float> %104, %37
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fmul <4 x float> %64, %107
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %65, %107
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %108, %64
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %65, %108
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %109, %90
  %122 = fsub <4 x float> %121, %90
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %90, %123
  %125 = fsub <4 x float> %109, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %92, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fmul <4 x float> %121, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %130 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %129, i32 8) #6
  %131 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %121, i32 8) #6
  %132 = fmul <4 x float> %131, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %133 = fsub <4 x float> %130, %132
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %133) #6
  %135 = fmul <4 x float> %130, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %136 = fsub <4 x float> %121, %135
  %137 = add <4 x i32> %134, %87
  %138 = fadd <4 x float> %136, %128
  %139 = fsub <4 x float> %136, %138
  %140 = fadd <4 x float> %128, %139
  %141 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %43
  %142 = load float, float* %141, align 4, !tbaa !3, !noalias !28
  %143 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %47
  %144 = load float, float* %143, align 4, !tbaa !3, !noalias !28
  %145 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %51
  %146 = load float, float* %145, align 4, !tbaa !3, !noalias !28
  %147 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %55
  %148 = load float, float* %147, align 4, !tbaa !3, !noalias !28
  %149 = insertelement <4 x float> undef, float %148, i32 0
  %150 = insertelement <4 x float> %149, float %146, i32 1
  %151 = insertelement <4 x float> %150, float %144, i32 2
  %152 = insertelement <4 x float> %151, float %142, i32 3
  %153 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %43
  %154 = load float, float* %153, align 4, !tbaa !3, !noalias !28
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %47
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !28
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %51
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !28
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %55
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !28
  %161 = insertelement <4 x float> undef, float %160, i32 0
  %162 = insertelement <4 x float> %161, float %158, i32 1
  %163 = insertelement <4 x float> %162, float %156, i32 2
  %164 = insertelement <4 x float> %163, float %154, i32 3
  %165 = bitcast <4 x float> %152 to <2 x i64>
  %166 = and <2 x i64> %165, <i64 -17587891081216, i64 -17587891081216>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fsub <4 x float> %152, %167
  %169 = fmul <4 x float> %152, %37
  %170 = bitcast <4 x float> %169 to <2 x i64>
  %171 = xor <2 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <2 x i64> %171 to <4 x float>
  %173 = fmul <4 x float> %64, %167
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %168, %64
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %65, %167
  %178 = fadd <4 x float> %177, %176
  %179 = fmul <4 x float> %65, %168
  %180 = fadd <4 x float> %179, %178
  %181 = fmul <4 x float> %164, %37
  %182 = fadd <4 x float> %181, %180
  %183 = fadd <4 x float> %169, %138
  %184 = fsub <4 x float> %183, %138
  %185 = fsub <4 x float> %183, %184
  %186 = fsub <4 x float> %138, %185
  %187 = fsub <4 x float> %169, %184
  %188 = fadd <4 x float> %187, %186
  %189 = fadd <4 x float> %140, %182
  %190 = fadd <4 x float> %188, %189
  %191 = fadd <4 x float> %183, %190
  %192 = fsub <4 x float> %183, %191
  %193 = fadd <4 x float> %190, %192
  %194 = bitcast <4 x float> %191 to <2 x i64>
  %195 = and <2 x i64> %194, <i64 -17587891081216, i64 -17587891081216>
  %196 = bitcast <2 x i64> %195 to <4 x float>
  %197 = fsub <4 x float> %191, %196
  %198 = fmul <4 x float> %191, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %199 = bitcast <4 x float> %198 to <2 x i64>
  %200 = xor <2 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160>
  %201 = bitcast <2 x i64> %200 to <4 x float>
  %202 = fmul <4 x float> %196, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %203 = fadd <4 x float> %202, %201
  %204 = fmul <4 x float> %197, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %205 = fadd <4 x float> %204, %203
  %206 = fmul <4 x float> %196, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %207 = fadd <4 x float> %206, %205
  %208 = fmul <4 x float> %197, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %209 = fadd <4 x float> %208, %207
  %210 = fmul <4 x float> %191, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %193, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %213 = fadd <4 x float> %212, %211
  %214 = and <2 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159>
  %215 = bitcast <2 x i64> %214 to <4 x float>
  %216 = fcmp olt <4 x float> %215, <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>
  %217 = sext <4 x i1> %216 to <4 x i32>
  %218 = bitcast <4 x i32> %217 to <4 x float>
  %219 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %198, <4 x float> %37, <4 x float> %218) #6
  %220 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %213, <4 x float> zeroinitializer, <4 x float> %218) #6
  %221 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %222 = fcmp uno <4 x float> %0, zeroinitializer
  %223 = or <4 x i1> %221, %222
  %224 = sext <4 x i1> %223 to <4 x i32>
  %225 = bitcast <4 x i32> %224 to <2 x i64>
  %226 = bitcast <4 x float> %219 to <2 x i64>
  %227 = or <2 x i64> %226, %225
  %228 = bitcast <2 x i64> %227 to <4 x float>
  %229 = bitcast <4 x float> %220 to <2 x i64>
  %230 = or <2 x i64> %229, %225
  %231 = bitcast <2 x i64> %230 to <4 x float>
  br label %232

; <label>:232:                                    ; preds = %29, %10
  %233 = phi <4 x i32> [ %30, %29 ], [ %28, %10 ]
  %234 = phi <4 x float> [ %228, %29 ], [ %24, %10 ]
  %235 = phi <4 x float> [ %231, %29 ], [ %27, %10 ]
  %236 = phi <4 x i32> [ %137, %29 ], [ %13, %10 ]
  %237 = and <4 x i32> %236, <i32 1, i32 1, i32 1, i32 1>
  %238 = icmp ne <4 x i32> %237, zeroinitializer
  %239 = sext <4 x i1> %238 to <4 x i32>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = and <2 x i64> %240, <i64 -9223372034707292160, i64 -9223372034707292160>
  %242 = bitcast <4 x float> %234 to <2 x i64>
  %243 = xor <2 x i64> %241, %242
  %244 = bitcast <2 x i64> %243 to <4 x float>
  %245 = bitcast <4 x float> %235 to <2 x i64>
  %246 = xor <2 x i64> %241, %245
  %247 = bitcast <2 x i64> %246 to <4 x float>
  %248 = and <2 x i64> %243, <i64 -17587891081216, i64 -17587891081216>
  %249 = bitcast <2 x i64> %248 to <4 x float>
  %250 = fsub <4 x float> %244, %249
  %251 = fmul <4 x float> %244, %244
  %252 = bitcast <4 x float> %251 to <2 x i64>
  %253 = xor <2 x i64> %252, <i64 -9223372034707292160, i64 -9223372034707292160>
  %254 = bitcast <2 x i64> %253 to <4 x float>
  %255 = fmul <4 x float> %249, %249
  %256 = fadd <4 x float> %255, %254
  %257 = fadd <4 x float> %249, %249
  %258 = fmul <4 x float> %257, %250
  %259 = fadd <4 x float> %258, %256
  %260 = fmul <4 x float> %250, %250
  %261 = fadd <4 x float> %260, %259
  %262 = fadd <4 x float> %247, %247
  %263 = fmul <4 x float> %262, %244
  %264 = fadd <4 x float> %263, %261
  %265 = fadd <4 x float> %251, %264
  %266 = fsub <4 x float> %251, %265
  %267 = fadd <4 x float> %264, %266
  %268 = fmul <4 x float> %265, <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>
  %269 = fadd <4 x float> %268, <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>
  %270 = fmul <4 x float> %265, %269
  %271 = fadd <4 x float> %270, <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>
  %272 = fmul <4 x float> %265, %271
  %273 = fadd <4 x float> %272, <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>
  %274 = fmul <4 x float> %265, %273
  %275 = fadd <4 x float> %274, <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>
  %276 = fmul <4 x float> %265, %275
  %277 = fadd <4 x float> %276, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %278 = fsub <4 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %277
  %279 = fadd <4 x float> %276, %278
  %280 = bitcast <4 x float> %265 to <2 x i64>
  %281 = and <2 x i64> %280, <i64 -17587891081216, i64 -17587891081216>
  %282 = bitcast <2 x i64> %281 to <4 x float>
  %283 = fsub <4 x float> %265, %282
  %284 = bitcast <4 x float> %277 to <2 x i64>
  %285 = and <2 x i64> %284, <i64 -17587891081216, i64 -17587891081216>
  %286 = bitcast <2 x i64> %285 to <4 x float>
  %287 = fsub <4 x float> %277, %286
  %288 = fmul <4 x float> %265, %277
  %289 = bitcast <4 x float> %288 to <2 x i64>
  %290 = xor <2 x i64> %289, <i64 -9223372034707292160, i64 -9223372034707292160>
  %291 = bitcast <2 x i64> %290 to <4 x float>
  %292 = fmul <4 x float> %282, %286
  %293 = fadd <4 x float> %292, %291
  %294 = fmul <4 x float> %283, %286
  %295 = fadd <4 x float> %294, %293
  %296 = fmul <4 x float> %287, %282
  %297 = fadd <4 x float> %296, %295
  %298 = fmul <4 x float> %283, %287
  %299 = fadd <4 x float> %298, %297
  %300 = fmul <4 x float> %265, %279
  %301 = fadd <4 x float> %300, %299
  %302 = fmul <4 x float> %267, %277
  %303 = fadd <4 x float> %302, %301
  %304 = fadd <4 x float> %288, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %305 = fsub <4 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %304
  %306 = fadd <4 x float> %288, %305
  %307 = fadd <4 x float> %306, %303
  %308 = bitcast <4 x float> %304 to <2 x i64>
  %309 = and <2 x i64> %308, <i64 -17587891081216, i64 -17587891081216>
  %310 = bitcast <2 x i64> %309 to <4 x float>
  %311 = fsub <4 x float> %304, %310
  %312 = fmul <4 x float> %265, %304
  %313 = bitcast <4 x float> %312 to <2 x i64>
  %314 = xor <2 x i64> %313, <i64 -9223372034707292160, i64 -9223372034707292160>
  %315 = bitcast <2 x i64> %314 to <4 x float>
  %316 = fmul <4 x float> %282, %310
  %317 = fadd <4 x float> %316, %315
  %318 = fmul <4 x float> %311, %282
  %319 = fadd <4 x float> %318, %317
  %320 = fmul <4 x float> %283, %310
  %321 = fadd <4 x float> %320, %319
  %322 = fmul <4 x float> %283, %311
  %323 = fadd <4 x float> %322, %321
  %324 = fmul <4 x float> %267, %304
  %325 = fadd <4 x float> %324, %323
  %326 = fmul <4 x float> %265, %307
  %327 = fadd <4 x float> %325, %326
  %328 = fadd <4 x float> %312, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %329 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %328
  %330 = fadd <4 x float> %312, %329
  %331 = fadd <4 x float> %330, %327
  %332 = bitcast <4 x float> %328 to <2 x i64>
  %333 = and <2 x i64> %332, <i64 -17587891081216, i64 -17587891081216>
  %334 = bitcast <2 x i64> %333 to <4 x float>
  %335 = fsub <4 x float> %328, %334
  %336 = fmul <4 x float> %328, %244
  %337 = bitcast <4 x float> %336 to <2 x i64>
  %338 = xor <2 x i64> %337, <i64 -9223372034707292160, i64 -9223372034707292160>
  %339 = bitcast <2 x i64> %338 to <4 x float>
  %340 = fmul <4 x float> %249, %334
  %341 = fadd <4 x float> %340, %339
  %342 = fmul <4 x float> %250, %334
  %343 = fadd <4 x float> %342, %341
  %344 = fmul <4 x float> %335, %249
  %345 = fadd <4 x float> %344, %343
  %346 = fmul <4 x float> %250, %335
  %347 = fadd <4 x float> %346, %345
  %348 = fmul <4 x float> %331, %244
  %349 = fadd <4 x float> %347, %348
  %350 = fmul <4 x float> %328, %247
  %351 = fadd <4 x float> %350, %349
  %352 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %336
  %353 = and <2 x i64> %337, <i64 -17587891081216, i64 -17587891081216>
  %354 = bitcast <2 x i64> %353 to <4 x float>
  %355 = fsub <4 x float> %336, %354
  %356 = bitcast <4 x float> %352 to <2 x i64>
  %357 = and <2 x i64> %356, <i64 -17587891081216, i64 -17587891081216>
  %358 = bitcast <2 x i64> %357 to <4 x float>
  %359 = fsub <4 x float> %352, %358
  %360 = fmul <4 x float> %354, %358
  %361 = fadd <4 x float> %360, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %362 = fmul <4 x float> %359, %354
  %363 = fadd <4 x float> %362, %361
  %364 = fmul <4 x float> %355, %358
  %365 = fadd <4 x float> %364, %363
  %366 = fmul <4 x float> %355, %359
  %367 = fadd <4 x float> %366, %365
  %368 = fmul <4 x float> %352, %351
  %369 = fadd <4 x float> %367, %368
  %370 = xor <2 x i64> %356, <i64 -9223372034707292160, i64 -9223372034707292160>
  %371 = bitcast <2 x i64> %370 to <4 x float>
  %372 = fmul <4 x float> %369, %371
  %373 = bitcast <4 x i32> %239 to <4 x float>
  %374 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %336, <4 x float> %352, <4 x float> %373) #6
  %375 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %351, <4 x float> %372, <4 x float> %373) #6
  %376 = fadd <4 x float> %374, %375
  %377 = icmp eq <4 x i32> %233, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %378 = sext <4 x i1> %377 to <4 x i32>
  %379 = bitcast <4 x i32> %378 to <4 x float>
  %380 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %376, <4 x float> %0, <4 x float> %379) #6
  ret <4 x float> %380
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atanf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <4 x i32>
  %3 = ashr <4 x i32> %2, <i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <4 x i32> %3 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 8589934594, i64 8589934594>
  %6 = bitcast <4 x float> %0 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = bitcast <2 x i64> %5 to <4 x i32>
  %10 = add <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %11 = fcmp ogt <4 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = bitcast <2 x i64> %5 to <16 x i8>
  %14 = bitcast <4 x i32> %10 to <16 x i8>
  %15 = bitcast <4 x i32> %12 to <16 x i8>
  %16 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %13, <16 x i8> %14, <16 x i8> %15) #6
  %17 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %8
  %18 = bitcast <4 x i32> %12 to <4 x float>
  %19 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %17, <4 x float> %18) #6
  %20 = fmul <4 x float> %19, %19
  %21 = fmul <4 x float> %20, %20
  %22 = fmul <4 x float> %21, %21
  %23 = fmul <4 x float> %20, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %24 = fadd <4 x float> %23, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %25 = fmul <4 x float> %20, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %26 = fadd <4 x float> %25, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %27 = fmul <4 x float> %21, %24
  %28 = fadd <4 x float> %26, %27
  %29 = fmul <4 x float> %20, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %30 = fadd <4 x float> %29, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %31 = fmul <4 x float> %20, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %32 = fadd <4 x float> %31, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %33 = fmul <4 x float> %21, %30
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %22, %28
  %36 = fadd <4 x float> %34, %35
  %37 = fmul <4 x float> %20, %36
  %38 = fmul <4 x float> %19, %37
  %39 = fadd <4 x float> %19, %38
  %40 = bitcast <16 x i8> %16 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 1, i32 1, i32 1, i32 1>
  %42 = icmp ne <4 x i32> %41, zeroinitializer
  %43 = sext <4 x i1> %42 to <4 x i32>
  %44 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %39
  %45 = bitcast <4 x i32> %43 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %44, <4 x float> %45) #6
  %47 = and <4 x i32> %40, <i32 2, i32 2, i32 2, i32 2>
  %48 = icmp ne <4 x i32> %47, zeroinitializer
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <4 x float> %46 to <2 x i64>
  %53 = xor <2 x i64> %51, %52
  %54 = bitcast <2 x i64> %53 to <4 x float>
  ret <4 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atan2f4_u35sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <4 x i32>
  %7 = ashr <4 x i32> %6, <i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <4 x i32> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -4294967298, i64 -4294967298>
  %10 = bitcast <4 x float> %1 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = fcmp olt <4 x float> %12, %5
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <2 x i64> %9 to <16 x i8>
  %18 = bitcast <4 x i32> %14 to <16 x i8>
  %19 = bitcast <4 x i32> %16 to <16 x i8>
  %20 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %17, <16 x i8> %18, <16 x i8> %19) #6
  %21 = or <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %22, <4 x float> %23) #6
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %12, <4 x float> %5) #6
  %26 = fdiv <4 x float> %24, %25
  %27 = fmul <4 x float> %26, %26
  %28 = fmul <4 x float> %27, %27
  %29 = fmul <4 x float> %28, %28
  %30 = fmul <4 x float> %27, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %31 = fadd <4 x float> %30, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %32 = fmul <4 x float> %27, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %33 = fadd <4 x float> %32, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %34 = fmul <4 x float> %28, %31
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %27, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %37 = fadd <4 x float> %36, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %38 = fmul <4 x float> %27, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %39 = fadd <4 x float> %38, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %40 = fmul <4 x float> %28, %37
  %41 = fadd <4 x float> %39, %40
  %42 = fmul <4 x float> %29, %35
  %43 = fadd <4 x float> %41, %42
  %44 = fmul <4 x float> %27, %43
  %45 = fmul <4 x float> %26, %44
  %46 = fadd <4 x float> %26, %45
  %47 = bitcast <16 x i8> %20 to <4 x i32>
  %48 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %47) #6
  %49 = fmul <4 x float> %48, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %50 = fadd <4 x float> %49, %46
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = fcmp oeq <4 x float> %1, zeroinitializer
  %59 = or <4 x i1> %55, %58
  %60 = sext <4 x i1> %59 to <4 x i32>
  %61 = or <2 x i64> %52, <i64 4596222329050697691, i64 4596222329050697691>
  %62 = and <2 x i64> %61, %57
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %63
  %65 = bitcast <4 x i32> %60 to <4 x float>
  %66 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %54, <4 x float> %64, <4 x float> %65) #6
  %67 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i32>
  %69 = or <2 x i64> %52, <i64 4560193532023345115, i64 4560193532023345115>
  %70 = and <2 x i64> %69, %57
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %71
  %73 = bitcast <4 x i32> %68 to <4 x float>
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %66, <4 x float> %72, <4 x float> %73) #6
  %75 = fcmp oeq <4 x float> %0, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = and <2 x i64> %8, <i64 4632251126078050267, i64 4632251126078050267>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = bitcast <4 x i32> %76 to <4 x float>
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> %78, <4 x float> %79) #6
  %81 = fcmp uno <4 x float> %0, %1
  %82 = sext <4 x i1> %81 to <4 x i32>
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = bitcast <4 x float> %80 to <2 x i64>
  %85 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = xor <2 x i64> %85, %84
  %87 = or <2 x i64> %86, %83
  %88 = bitcast <2 x i64> %87 to <4 x float>
  ret <4 x float> %88
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x i32> %6 to <4 x float>
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %7, <4 x float> %10) #6
  %12 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %4, <4 x float> %10) #6
  %14 = fmul <4 x float> %11, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %15 = fadd <4 x float> %14, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %22 = fmul <4 x float> %11, %13
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %13, %23
  %25 = fmul <4 x float> %24, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %26 = fadd <4 x float> %25, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %27 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> %24, <4 x float> %10) #6
  %28 = bitcast <4 x float> %27 to <2 x i64>
  %29 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = xor <2 x i64> %29, %28
  %31 = bitcast <2 x i64> %30 to <4 x float>
  ret <4 x float> %31
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acosf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %0, %0
  %9 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fmul <4 x float> %9, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %11 = bitcast <4 x i32> %6 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %8, <4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %4, <4 x float> %11) #6
  %15 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <4 x float>
  %18 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %14, <4 x float> zeroinitializer, <4 x float> %17) #6
  %19 = fmul <4 x float> %12, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %20 = fadd <4 x float> %19, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %21 = fmul <4 x float> %12, %20
  %22 = fadd <4 x float> %21, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %23 = fmul <4 x float> %12, %22
  %24 = fadd <4 x float> %23, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %25 = fmul <4 x float> %12, %24
  %26 = fadd <4 x float> %25, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %27 = fmul <4 x float> %12, %18
  %28 = fmul <4 x float> %27, %26
  %29 = bitcast <4 x float> %18 to <2 x i64>
  %30 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = xor <2 x i64> %30, %29
  %32 = bitcast <2 x i64> %31 to <4 x float>
  %33 = bitcast <4 x float> %28 to <2 x i64>
  %34 = xor <2 x i64> %30, %33
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fadd <4 x float> %32, %35
  %37 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %36
  %38 = fadd <4 x float> %18, %28
  %39 = fmul <4 x float> %38, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %37, <4 x float> %11) #6
  %41 = fcmp olt <4 x float> %0, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %45 = and <2 x i64> %44, %43
  %46 = bitcast <4 x float> %40 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fadd <4 x float> %48, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %50 = bitcast <2 x i64> %45 to <4 x float>
  %51 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> %49, <4 x float> %50) #6
  ret <4 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atan2f4_u10sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %9 = bitcast <4 x i32> %7 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %1, <4 x float> %8, <4 x float> %9) #6
  %11 = fmul <4 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %11, <4 x float> %9) #6
  %13 = bitcast <4 x float> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372034707292159, i64 9223372034707292159>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fcmp olt <4 x float> %10, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %18) #6
  %20 = bitcast <4 x i32> %17 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <4 x float> %10 to <2 x i64>
  %23 = xor <2 x i64> %21, %22
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = bitcast <2 x i64> %21 to <4 x float>
  %26 = bitcast <16 x i8> %19 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = fcmp olt <4 x float> %24, %15
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %27 to <16 x i8>
  %31 = bitcast <4 x i32> %29 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> %30, <16 x i8> %31) #6
  %33 = xor <2 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160>
  %34 = xor <2 x i64> %21, <i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <2 x i64> %33 to <4 x float>
  %36 = bitcast <2 x i64> %34 to <4 x float>
  %37 = bitcast <4 x i32> %29 to <4 x float>
  %38 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %35, <4 x float> %37) #6
  %39 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %36, <4 x float> %37) #6
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %24, <4 x float> %15, <4 x float> %37) #6
  %41 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %25, <4 x float> zeroinitializer, <4 x float> %37) #6
  %42 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %40
  %43 = bitcast <4 x float> %40 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fsub <4 x float> %40, %45
  %47 = bitcast <4 x float> %42 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = fsub <4 x float> %42, %49
  %51 = bitcast <4 x float> %38 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fsub <4 x float> %38, %53
  %55 = fmul <4 x float> %38, %42
  %56 = fmul <4 x float> %45, %49
  %57 = fadd <4 x float> %56, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %58 = fmul <4 x float> %50, %45
  %59 = fadd <4 x float> %58, %57
  %60 = fmul <4 x float> %46, %49
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %46, %50
  %63 = fadd <4 x float> %62, %61
  %64 = bitcast <4 x float> %63 to <2 x i64>
  %65 = xor <2 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = bitcast <4 x float> %55 to <2 x i64>
  %68 = xor <2 x i64> %67, <i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = bitcast <2 x i64> %68 to <4 x float>
  %70 = fmul <4 x float> %53, %49
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %50, %53
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %54, %49
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %54, %50
  %77 = fadd <4 x float> %76, %75
  %78 = fmul <4 x float> %55, %66
  %79 = fadd <4 x float> %77, %78
  %80 = fmul <4 x float> %41, %55
  %81 = fsub <4 x float> %39, %80
  %82 = fmul <4 x float> %42, %81
  %83 = fadd <4 x float> %82, %79
  %84 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fsub <4 x float> %55, %85
  %87 = fmul <4 x float> %55, %55
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %85, %85
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %85, %85
  %94 = fmul <4 x float> %93, %86
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %86, %86
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %83, %83
  %99 = fmul <4 x float> %55, %98
  %100 = fadd <4 x float> %97, %99
  %101 = fadd <4 x float> %87, %100
  %102 = fsub <4 x float> %87, %101
  %103 = fadd <4 x float> %100, %102
  %104 = fmul <4 x float> %101, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %105 = fadd <4 x float> %104, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %106 = fmul <4 x float> %101, %105
  %107 = fadd <4 x float> %106, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %108 = fmul <4 x float> %101, %107
  %109 = fadd <4 x float> %108, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %110 = fmul <4 x float> %101, %109
  %111 = fadd <4 x float> %110, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %112 = fmul <4 x float> %101, %111
  %113 = fadd <4 x float> %112, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %114 = fmul <4 x float> %101, %113
  %115 = fadd <4 x float> %114, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %116 = fmul <4 x float> %101, %115
  %117 = fadd <4 x float> %116, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %118 = fmul <4 x float> %101, %117
  %119 = fadd <4 x float> %118, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %120 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %119
  %121 = fadd <4 x float> %118, %120
  %122 = bitcast <4 x float> %101 to <2 x i64>
  %123 = and <2 x i64> %122, <i64 -17587891081216, i64 -17587891081216>
  %124 = bitcast <2 x i64> %123 to <4 x float>
  %125 = fsub <4 x float> %101, %124
  %126 = bitcast <4 x float> %119 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -17587891081216, i64 -17587891081216>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fsub <4 x float> %119, %128
  %130 = fmul <4 x float> %101, %119
  %131 = bitcast <4 x float> %130 to <2 x i64>
  %132 = xor <2 x i64> %131, <i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fmul <4 x float> %124, %128
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %125, %128
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %129, %124
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %125, %129
  %141 = fadd <4 x float> %140, %139
  %142 = fmul <4 x float> %101, %121
  %143 = fadd <4 x float> %142, %141
  %144 = fmul <4 x float> %103, %119
  %145 = fadd <4 x float> %144, %143
  %146 = fadd <4 x float> %130, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %147 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %146
  %148 = fadd <4 x float> %130, %147
  %149 = fadd <4 x float> %148, %145
  %150 = bitcast <4 x float> %146 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <2 x i64> %151 to <4 x float>
  %153 = fsub <4 x float> %146, %152
  %154 = fmul <4 x float> %55, %146
  %155 = bitcast <4 x float> %154 to <2 x i64>
  %156 = xor <2 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <2 x i64> %156 to <4 x float>
  %158 = fmul <4 x float> %85, %152
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %86, %152
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %153, %85
  %163 = fadd <4 x float> %162, %161
  %164 = fmul <4 x float> %86, %153
  %165 = fadd <4 x float> %164, %163
  %166 = fmul <4 x float> %55, %149
  %167 = fadd <4 x float> %165, %166
  %168 = fmul <4 x float> %83, %146
  %169 = fadd <4 x float> %168, %167
  %170 = bitcast <16 x i8> %32 to <4 x i32>
  %171 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %170) #6
  %172 = bitcast <4 x float> %171 to <2 x i64>
  %173 = and <2 x i64> %172, <i64 -17587891081216, i64 -17587891081216>
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = fsub <4 x float> %171, %174
  %176 = fmul <4 x float> %171, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %177 = bitcast <4 x float> %176 to <2 x i64>
  %178 = xor <2 x i64> %177, <i64 -9223372034707292160, i64 -9223372034707292160>
  %179 = bitcast <2 x i64> %178 to <4 x float>
  %180 = fmul <4 x float> %174, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %174, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %175, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %175, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %187 = fadd <4 x float> %186, %185
  %188 = fmul <4 x float> %171, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %189 = fadd <4 x float> %188, %187
  %190 = fadd <4 x float> %176, %154
  %191 = fsub <4 x float> %176, %190
  %192 = fadd <4 x float> %154, %191
  %193 = fadd <4 x float> %189, %192
  %194 = fadd <4 x float> %193, %169
  %195 = fadd <4 x float> %190, %194
  %196 = bitcast <4 x float> %195 to <2 x i64>
  %197 = and <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = xor <2 x i64> %197, %196
  %199 = bitcast <2 x i64> %198 to <4 x float>
  %200 = and <2 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159>
  %201 = bitcast <2 x i64> %200 to <4 x float>
  %202 = fcmp oeq <4 x float> %201, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %203 = sext <4 x i1> %202 to <4 x i32>
  %204 = bitcast <4 x i32> %203 to <2 x i64>
  %205 = fcmp oeq <4 x float> %10, zeroinitializer
  %206 = or <4 x i1> %202, %205
  %207 = sext <4 x i1> %206 to <4 x i32>
  %208 = or <2 x i64> %197, <i64 4596222329050697691, i64 4596222329050697691>
  %209 = and <2 x i64> %208, %204
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %210
  %212 = bitcast <4 x i32> %207 to <4 x float>
  %213 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %199, <4 x float> %211, <4 x float> %212) #6
  %214 = fcmp oeq <4 x float> %15, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %215 = sext <4 x i1> %214 to <4 x i32>
  %216 = or <2 x i64> %197, <i64 4560193532023345115, i64 4560193532023345115>
  %217 = and <2 x i64> %216, %204
  %218 = bitcast <2 x i64> %217 to <4 x float>
  %219 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %218
  %220 = bitcast <4 x i32> %215 to <4 x float>
  %221 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %213, <4 x float> %219, <4 x float> %220) #6
  %222 = fcmp oeq <4 x float> %12, zeroinitializer
  %223 = sext <4 x i1> %222 to <4 x i32>
  %224 = bitcast <4 x float> %10 to <4 x i32>
  %225 = ashr <4 x i32> %224, <i32 31, i32 31, i32 31, i32 31>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = and <2 x i64> %226, <i64 4632251126078050267, i64 4632251126078050267>
  %228 = bitcast <2 x i64> %227 to <4 x float>
  %229 = bitcast <4 x i32> %223 to <4 x float>
  %230 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %221, <4 x float> %228, <4 x float> %229) #6
  %231 = fcmp uno <4 x float> %12, %10
  %232 = sext <4 x i1> %231 to <4 x i32>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = bitcast <4 x float> %230 to <2 x i64>
  %235 = and <2 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160>
  %236 = xor <2 x i64> %235, %234
  %237 = or <2 x i64> %236, %233
  %238 = bitcast <2 x i64> %237 to <4 x float>
  ret <4 x float> %238
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x i32> %6 to <4 x float>
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %7, <4 x float> %10) #6
  %12 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %11) #6
  %13 = bitcast <4 x float> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fsub <4 x float> %12, %15
  %17 = fmul <4 x float> %12, %12
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %15, %15
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %16, %15
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %16, %16
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %11, %17
  %29 = fsub <4 x float> %28, %11
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> %11, %30
  %32 = fsub <4 x float> %17, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fadd <4 x float> %33, %27
  %35 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %36 = bitcast <4 x float> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %38 = bitcast <2 x i64> %37 to <4 x float>
  %39 = fsub <4 x float> %35, %38
  %40 = fmul <4 x float> %15, %38
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %39, %15
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %16, %38
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %16, %39
  %47 = fadd <4 x float> %46, %45
  %48 = xor <2 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = fmul <4 x float> %47, %49
  %51 = bitcast <4 x float> %28 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fsub <4 x float> %28, %53
  %55 = fmul <4 x float> %35, %28
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fmul <4 x float> %38, %53
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %54, %38
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %39, %53
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %39, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %28, %50
  %68 = fadd <4 x float> %66, %67
  %69 = fmul <4 x float> %35, %34
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = fmul <4 x float> %70, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %73 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %71, <4 x float> %4, <4 x float> %10) #6
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %72, <4 x float> zeroinitializer, <4 x float> %10) #6
  %75 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <4 x float>
  %78 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %73, <4 x float> zeroinitializer, <4 x float> %77) #6
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> zeroinitializer, <4 x float> %77) #6
  %80 = fmul <4 x float> %11, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %81 = fadd <4 x float> %80, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %82 = fmul <4 x float> %11, %81
  %83 = fadd <4 x float> %82, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %84 = fmul <4 x float> %11, %83
  %85 = fadd <4 x float> %84, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %86 = fmul <4 x float> %11, %85
  %87 = fadd <4 x float> %86, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %88 = fmul <4 x float> %11, %78
  %89 = fmul <4 x float> %88, %87
  %90 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %78
  %91 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %90
  %92 = fsub <4 x float> %91, %78
  %93 = fadd <4 x float> %92, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %94 = fsub <4 x float> %93, %79
  %95 = fsub <4 x float> %90, %89
  %96 = fsub <4 x float> %90, %95
  %97 = fsub <4 x float> %96, %89
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %78, %89
  %100 = fadd <4 x float> %95, %98
  %101 = fmul <4 x float> %100, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %102 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %101, <4 x float> %99, <4 x float> %10) #6
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = xor <2 x i64> %104, %103
  %106 = bitcast <2 x i64> %105 to <4 x float>
  ret <4 x float> %106
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acosf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %0, %0
  %9 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fmul <4 x float> %9, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %11 = bitcast <4 x i32> %6 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %8, <4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %12) #6
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %13, %16
  %18 = fmul <4 x float> %13, %13
  %19 = bitcast <4 x float> %18 to <2 x i64>
  %20 = xor <2 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fmul <4 x float> %16, %16
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %17, %16
  %25 = fadd <4 x float> %24, %23
  %26 = fadd <4 x float> %24, %25
  %27 = fmul <4 x float> %17, %17
  %28 = fadd <4 x float> %27, %26
  %29 = fadd <4 x float> %12, %18
  %30 = fsub <4 x float> %29, %12
  %31 = fsub <4 x float> %29, %30
  %32 = fsub <4 x float> %12, %31
  %33 = fsub <4 x float> %18, %30
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %34, %28
  %36 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %36, %39
  %41 = fmul <4 x float> %16, %39
  %42 = fadd <4 x float> %41, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fmul <4 x float> %40, %16
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %17, %39
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %17, %40
  %48 = fadd <4 x float> %47, %46
  %49 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fmul <4 x float> %48, %50
  %52 = bitcast <4 x float> %29 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %29, %54
  %56 = fmul <4 x float> %36, %29
  %57 = bitcast <4 x float> %56 to <2 x i64>
  %58 = xor <2 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fmul <4 x float> %39, %54
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %55, %39
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %40, %54
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %40, %55
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %29, %51
  %69 = fadd <4 x float> %67, %68
  %70 = fmul <4 x float> %36, %35
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %56, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %73 = fmul <4 x float> %71, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %72, <4 x float> %4, <4 x float> %11) #6
  %75 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %73, <4 x float> zeroinitializer, <4 x float> %11) #6
  %76 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <4 x float>
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> zeroinitializer, <4 x float> %78) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %75, <4 x float> zeroinitializer, <4 x float> %78) #6
  %81 = fmul <4 x float> %12, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %82 = fadd <4 x float> %81, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %83 = fmul <4 x float> %12, %82
  %84 = fadd <4 x float> %83, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %85 = fmul <4 x float> %12, %84
  %86 = fadd <4 x float> %85, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %87 = fmul <4 x float> %12, %86
  %88 = fadd <4 x float> %87, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %89 = fmul <4 x float> %12, %79
  %90 = fmul <4 x float> %89, %88
  %91 = bitcast <4 x float> %79 to <2 x i64>
  %92 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = xor <2 x i64> %92, %91
  %94 = bitcast <2 x i64> %93 to <4 x float>
  %95 = bitcast <4 x float> %90 to <2 x i64>
  %96 = xor <2 x i64> %92, %95
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fadd <4 x float> %94, %97
  %99 = fsub <4 x float> %94, %98
  %100 = fadd <4 x float> %99, %97
  %101 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %98
  %102 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %101
  %103 = fsub <4 x float> %102, %98
  %104 = fadd <4 x float> %103, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %105 = fsub <4 x float> %104, %100
  %106 = fadd <4 x float> %79, %90
  %107 = fsub <4 x float> %79, %106
  %108 = fadd <4 x float> %90, %107
  %109 = fadd <4 x float> %80, %108
  %110 = fmul <4 x float> %106, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %111 = fmul <4 x float> %109, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %110, <4 x float> %101, <4 x float> %11) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %111, <4 x float> %105, <4 x float> %11) #6
  %114 = fcmp olt <4 x float> %0, zeroinitializer
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %118 = and <2 x i64> %117, %116
  %119 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %112
  %120 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %119
  %121 = fsub <4 x float> %120, %112
  %122 = fadd <4 x float> %121, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %123 = fsub <4 x float> %122, %113
  %124 = bitcast <2 x i64> %118 to <4 x float>
  %125 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %112, <4 x float> %119, <4 x float> %124) #6
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %113, <4 x float> %123, <4 x float> %124) #6
  %127 = fadd <4 x float> %125, %126
  ret <4 x float> %127
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atanf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> %7) #6
  %9 = bitcast <4 x i32> %6 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %9) #6
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %9) #6
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %4, <4 x float> %9) #6
  %13 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %13, %20
  %22 = bitcast <4 x float> %10 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fsub <4 x float> %10, %24
  %26 = fmul <4 x float> %10, %13
  %27 = fmul <4 x float> %16, %20
  %28 = fadd <4 x float> %27, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %29 = fmul <4 x float> %21, %16
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %17, %20
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %17, %21
  %34 = fadd <4 x float> %33, %32
  %35 = bitcast <4 x float> %34 to <2 x i64>
  %36 = xor <2 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = bitcast <4 x float> %26 to <2 x i64>
  %39 = xor <2 x i64> %38, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fmul <4 x float> %24, %20
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %21, %24
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %25, %20
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %25, %21
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %26, %37
  %50 = fadd <4 x float> %48, %49
  %51 = fmul <4 x float> %26, zeroinitializer
  %52 = fsub <4 x float> %11, %51
  %53 = fmul <4 x float> %13, %52
  %54 = fadd <4 x float> %53, %50
  %55 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fsub <4 x float> %26, %56
  %58 = fmul <4 x float> %26, %26
  %59 = bitcast <4 x float> %58 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %56, %56
  %63 = fadd <4 x float> %62, %61
  %64 = fadd <4 x float> %56, %56
  %65 = fmul <4 x float> %64, %57
  %66 = fadd <4 x float> %65, %63
  %67 = fmul <4 x float> %57, %57
  %68 = fadd <4 x float> %67, %66
  %69 = fadd <4 x float> %54, %54
  %70 = fmul <4 x float> %26, %69
  %71 = fadd <4 x float> %68, %70
  %72 = fadd <4 x float> %58, %71
  %73 = fsub <4 x float> %58, %72
  %74 = fadd <4 x float> %71, %73
  %75 = fmul <4 x float> %72, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %76 = fadd <4 x float> %75, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %77 = fmul <4 x float> %72, %76
  %78 = fadd <4 x float> %77, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %79 = fmul <4 x float> %72, %78
  %80 = fadd <4 x float> %79, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %81 = fmul <4 x float> %72, %80
  %82 = fadd <4 x float> %81, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %83 = fmul <4 x float> %72, %82
  %84 = fadd <4 x float> %83, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %85 = fmul <4 x float> %72, %84
  %86 = fadd <4 x float> %85, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %87 = fmul <4 x float> %72, %86
  %88 = fadd <4 x float> %87, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %89 = fmul <4 x float> %72, %88
  %90 = fadd <4 x float> %89, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %91 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %90
  %92 = fadd <4 x float> %89, %91
  %93 = bitcast <4 x float> %72 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fsub <4 x float> %72, %95
  %97 = bitcast <4 x float> %90 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %90, %99
  %101 = fmul <4 x float> %72, %90
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fmul <4 x float> %95, %99
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %96, %99
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %100, %95
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %96, %100
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %72, %92
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %74, %90
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %101, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %118 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %117
  %119 = fadd <4 x float> %101, %118
  %120 = fadd <4 x float> %119, %116
  %121 = bitcast <4 x float> %117 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 -17587891081216, i64 -17587891081216>
  %123 = bitcast <2 x i64> %122 to <4 x float>
  %124 = fsub <4 x float> %117, %123
  %125 = fmul <4 x float> %26, %117
  %126 = bitcast <4 x float> %125 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fmul <4 x float> %56, %123
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %57, %123
  %132 = fadd <4 x float> %131, %130
  %133 = fmul <4 x float> %124, %56
  %134 = fadd <4 x float> %133, %132
  %135 = fmul <4 x float> %57, %124
  %136 = fadd <4 x float> %135, %134
  %137 = fmul <4 x float> %26, %120
  %138 = fadd <4 x float> %136, %137
  %139 = fmul <4 x float> %54, %117
  %140 = fadd <4 x float> %139, %138
  %141 = bitcast <16 x i8> %8 to <4 x i32>
  %142 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %141) #6
  %143 = bitcast <4 x float> %142 to <2 x i64>
  %144 = and <2 x i64> %143, <i64 -17587891081216, i64 -17587891081216>
  %145 = bitcast <2 x i64> %144 to <4 x float>
  %146 = fsub <4 x float> %142, %145
  %147 = fmul <4 x float> %142, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %148 = bitcast <4 x float> %147 to <2 x i64>
  %149 = xor <2 x i64> %148, <i64 -9223372034707292160, i64 -9223372034707292160>
  %150 = bitcast <2 x i64> %149 to <4 x float>
  %151 = fmul <4 x float> %145, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %145, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %154 = fadd <4 x float> %153, %152
  %155 = fmul <4 x float> %146, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %156 = fadd <4 x float> %155, %154
  %157 = fmul <4 x float> %146, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %158 = fadd <4 x float> %157, %156
  %159 = fmul <4 x float> %142, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %147, %125
  %162 = fsub <4 x float> %147, %161
  %163 = fadd <4 x float> %125, %162
  %164 = fadd <4 x float> %160, %163
  %165 = fadd <4 x float> %164, %140
  %166 = fadd <4 x float> %161, %165
  %167 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %168 = sext <4 x i1> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <4 x float>
  %170 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %166, <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <4 x float> %169) #6
  %171 = bitcast <4 x float> %170 to <2 x i64>
  %172 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %173 = xor <2 x i64> %172, %171
  %174 = bitcast <2 x i64> %173 to <4 x float>
  ret <4 x float> %174
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_logf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fdiv <4 x float> %22, %23
  %25 = fmul <4 x float> %24, %24
  %26 = fmul <4 x float> %25, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %27 = fadd <4 x float> %26, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %28 = fmul <4 x float> %25, %27
  %29 = fadd <4 x float> %28, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %30 = fmul <4 x float> %25, %29
  %31 = fadd <4 x float> %30, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %32 = fmul <4 x float> %25, %31
  %33 = fadd <4 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <16 x i8> %21 to <4 x i32>
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %37 = fmul <4 x float> %24, %33
  %38 = fadd <4 x float> %36, %37
  %39 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = bitcast <4 x i32> %40 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %38, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %41) #6
  %43 = fcmp ult <4 x float> %6, zeroinitializer
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %45) #6
  %47 = fcmp oeq <4 x float> %6, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %46, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %49) #6
  ret <4 x float> %50
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_expf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fmul <4 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <4 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <4 x float> %8, %8
  %20 = fmul <4 x float> %19, %18
  %21 = fadd <4 x float> %8, %20
  %22 = fadd <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = sub <4 x i32> %3, %23
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = bitcast <4 x float> %32 to <2 x i64>
  %37 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %38 = and <2 x i64> %36, %37
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fcmp ogt <4 x float> %0, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %42) #6
  ret <4 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %0) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cbrtf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <4 x i32> %6 to <16 x i8>
  %13 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %12) #6
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = bitcast <16 x i8> %13 to <4 x i32>
  %16 = sub <4 x i32> %14, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = xor <4 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = fmul <4 x float> %22, %0
  %24 = sub <4 x i32> %18, %19
  %25 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %26 = add <4 x i32> %25, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = fmul <4 x float> %23, %27
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %17) #6
  %30 = fadd <4 x float> %29, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %31 = fmul <4 x float> %30, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %31) #6
  %33 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %32) #6
  %34 = fmul <4 x float> %33, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %35 = fsub <4 x float> %30, %34
  %36 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %35) #6
  %37 = icmp eq <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <4 x float>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <4 x float> %39) #6
  %41 = icmp eq <4 x i32> %36, <i32 2, i32 2, i32 2, i32 2>
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %43) #6
  %45 = add <4 x i32> %32, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %46 = ashr <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = add <4 x i32> %47, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %44, %49
  %51 = sub <4 x i32> %45, %46
  %52 = shl <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = add <4 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %50, %54
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = bitcast <4 x float> %28 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <2 x i64> %58, %56
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = and <2 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fmul <4 x float> %62, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %64 = fadd <4 x float> %63, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %65 = fmul <4 x float> %64, %62
  %66 = fadd <4 x float> %65, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %67 = fmul <4 x float> %66, %62
  %68 = fadd <4 x float> %67, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %69 = fmul <4 x float> %68, %62
  %70 = fadd <4 x float> %69, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %71 = fmul <4 x float> %70, %62
  %72 = fadd <4 x float> %71, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %73 = fmul <4 x float> %72, %62
  %74 = fmul <4 x float> %72, %73
  %75 = fmul <4 x float> %74, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %76 = fmul <4 x float> %72, %74
  %77 = fadd <4 x float> %76, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %78 = fmul <4 x float> %75, %77
  %79 = fsub <4 x float> %74, %78
  %80 = fmul <4 x float> %79, %60
  ret <4 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cbrtf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <4 x i32> %6 to <16 x i8>
  %13 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %12) #6
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = bitcast <16 x i8> %13 to <4 x i32>
  %16 = sub <4 x i32> %14, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = xor <4 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = fmul <4 x float> %22, %0
  %24 = sub <4 x i32> %18, %19
  %25 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %26 = add <4 x i32> %25, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = fmul <4 x float> %23, %27
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %17) #6
  %30 = fadd <4 x float> %29, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %31 = fmul <4 x float> %30, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %31) #6
  %33 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %32) #6
  %34 = fmul <4 x float> %33, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %35 = fsub <4 x float> %30, %34
  %36 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %35) #6
  %37 = icmp eq <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <4 x float>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <4 x float> %39) #6
  %41 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <4 x float> %39) #6
  %42 = icmp eq <4 x i32> %36, <i32 2, i32 2, i32 2, i32 2>
  %43 = sext <4 x i1> %42 to <4 x i32>
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %44) #6
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %41, <4 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <4 x float> %44) #6
  %47 = bitcast <4 x float> %45 to <2 x i64>
  %48 = bitcast <4 x float> %28 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = xor <2 x i64> %49, %47
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = bitcast <4 x float> %46 to <2 x i64>
  %53 = xor <2 x i64> %49, %52
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = and <2 x i64> %48, <i64 9223372034707292159, i64 9223372034707292159>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %56, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %58 = fadd <4 x float> %57, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %59 = fmul <4 x float> %58, %56
  %60 = fadd <4 x float> %59, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %61 = fmul <4 x float> %60, %56
  %62 = fadd <4 x float> %61, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %63 = fmul <4 x float> %62, %56
  %64 = fadd <4 x float> %63, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %65 = fmul <4 x float> %64, %56
  %66 = fadd <4 x float> %65, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %67 = fmul <4 x float> %66, %66
  %68 = fmul <4 x float> %67, %67
  %69 = fmul <4 x float> %68, %56
  %70 = fsub <4 x float> %66, %69
  %71 = fmul <4 x float> %70, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %72 = fsub <4 x float> %66, %71
  %73 = bitcast <4 x float> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %75 = bitcast <2 x i64> %74 to <4 x float>
  %76 = fsub <4 x float> %72, %75
  %77 = fmul <4 x float> %72, %72
  %78 = bitcast <4 x float> %77 to <2 x i64>
  %79 = xor <2 x i64> %78, <i64 -9223372034707292160, i64 -9223372034707292160>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fmul <4 x float> %75, %75
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %76, %75
  %84 = fadd <4 x float> %83, %82
  %85 = fadd <4 x float> %83, %84
  %86 = fmul <4 x float> %76, %76
  %87 = fadd <4 x float> %86, %85
  %88 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fsub <4 x float> %77, %89
  %91 = fmul <4 x float> %77, %77
  %92 = bitcast <4 x float> %91 to <2 x i64>
  %93 = xor <2 x i64> %92, <i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = bitcast <2 x i64> %93 to <4 x float>
  %95 = fmul <4 x float> %89, %89
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %90, %89
  %98 = fadd <4 x float> %97, %96
  %99 = fadd <4 x float> %97, %98
  %100 = fmul <4 x float> %90, %90
  %101 = fadd <4 x float> %100, %99
  %102 = fmul <4 x float> %77, %87
  %103 = fadd <4 x float> %102, %101
  %104 = fadd <4 x float> %102, %103
  %105 = and <2 x i64> %92, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %91, %106
  %108 = and <2 x i64> %48, <i64 9223354446816210944, i64 9223354446816210944>
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = fsub <4 x float> %56, %109
  %111 = fmul <4 x float> %91, %56
  %112 = bitcast <4 x float> %111 to <2 x i64>
  %113 = xor <2 x i64> %112, <i64 -9223372034707292160, i64 -9223372034707292160>
  %114 = bitcast <2 x i64> %113 to <4 x float>
  %115 = fmul <4 x float> %109, %106
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %107, %109
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %110, %106
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %110, %107
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %104, %56
  %124 = fadd <4 x float> %122, %123
  %125 = xor <2 x i64> %73, <i64 -9223372034707292160, i64 -9223372034707292160>
  %126 = bitcast <2 x i64> %125 to <4 x float>
  %127 = fadd <4 x float> %111, %126
  %128 = fsub <4 x float> %127, %111
  %129 = fsub <4 x float> %127, %128
  %130 = fsub <4 x float> %111, %129
  %131 = fsub <4 x float> %126, %128
  %132 = fadd <4 x float> %131, %130
  %133 = fadd <4 x float> %132, %124
  %134 = fadd <4 x float> %127, %133
  %135 = fmul <4 x float> %134, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %136 = fmul <4 x float> %72, %135
  %137 = fadd <4 x float> %77, %136
  %138 = fsub <4 x float> %137, %77
  %139 = fsub <4 x float> %137, %138
  %140 = fsub <4 x float> %77, %139
  %141 = fsub <4 x float> %136, %138
  %142 = fadd <4 x float> %141, %140
  %143 = fadd <4 x float> %87, %142
  %144 = bitcast <4 x float> %137 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fsub <4 x float> %137, %146
  %148 = fmul <4 x float> %137, %56
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fmul <4 x float> %109, %146
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %147, %109
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %110, %146
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %110, %147
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %143, %56
  %161 = fadd <4 x float> %160, %159
  %162 = and <2 x i64> %149, <i64 -17587891081216, i64 -17587891081216>
  %163 = bitcast <2 x i64> %162 to <4 x float>
  %164 = fsub <4 x float> %148, %163
  %165 = and <2 x i64> %50, <i64 -17587891081216, i64 -17587891081216>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fsub <4 x float> %51, %166
  %168 = fmul <4 x float> %148, %51
  %169 = bitcast <4 x float> %168 to <2 x i64>
  %170 = xor <2 x i64> %169, <i64 -9223372034707292160, i64 -9223372034707292160>
  %171 = bitcast <2 x i64> %170 to <4 x float>
  %172 = fmul <4 x float> %166, %163
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %164, %166
  %175 = fadd <4 x float> %174, %173
  %176 = fmul <4 x float> %167, %163
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %167, %164
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %148, %54
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %161, %51
  %183 = fadd <4 x float> %182, %181
  %184 = fadd <4 x float> %168, %183
  %185 = add <4 x i32> %32, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %186 = ashr <4 x i32> %185, <i32 1, i32 1, i32 1, i32 1>
  %187 = shl <4 x i32> %186, <i32 23, i32 23, i32 23, i32 23>
  %188 = add <4 x i32> %187, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %189 = bitcast <4 x i32> %188 to <4 x float>
  %190 = fmul <4 x float> %184, %189
  %191 = sub <4 x i32> %185, %186
  %192 = shl <4 x i32> %191, <i32 23, i32 23, i32 23, i32 23>
  %193 = add <4 x i32> %192, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %194 = bitcast <4 x i32> %193 to <4 x float>
  %195 = fmul <4 x float> %190, %194
  %196 = fcmp oeq <4 x float> %56, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %197 = sext <4 x i1> %196 to <4 x i32>
  %198 = and <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %199 = or <2 x i64> %198, <i64 9187343241974906880, i64 9187343241974906880>
  %200 = bitcast <2 x i64> %199 to <4 x float>
  %201 = bitcast <4 x i32> %197 to <4 x float>
  %202 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %195, <4 x float> %200, <4 x float> %201) #6
  %203 = fcmp oeq <4 x float> %56, zeroinitializer
  %204 = sext <4 x i1> %203 to <4 x i32>
  %205 = bitcast <2 x i64> %198 to <4 x float>
  %206 = bitcast <4 x i32> %204 to <4 x float>
  %207 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %202, <4 x float> %205, <4 x float> %206) #6
  ret <4 x float> %207
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_logf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %22) #6
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %23, %26
  %28 = fmul <4 x float> %23, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %29 = bitcast <4 x float> %28 to <2 x i64>
  %30 = xor <2 x i64> %29, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fmul <4 x float> %26, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %26, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %27, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %27, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %23, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fadd <4 x float> %42, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %44 = fsub <4 x float> %42, %43
  %45 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %44
  %46 = fsub <4 x float> %16, %43
  %47 = fadd <4 x float> %46, %45
  %48 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fsub <4 x float> %48, %49
  %51 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %50
  %52 = fsub <4 x float> %16, %49
  %53 = fadd <4 x float> %52, %51
  %54 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %48
  %55 = bitcast <4 x float> %48 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %57 = bitcast <2 x i64> %56 to <4 x float>
  %58 = fsub <4 x float> %48, %57
  %59 = bitcast <4 x float> %54 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> %54, %61
  %63 = bitcast <4 x float> %42 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %42, %65
  %67 = fmul <4 x float> %42, %54
  %68 = fmul <4 x float> %57, %61
  %69 = fadd <4 x float> %68, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %70 = fmul <4 x float> %62, %57
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %58, %61
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %58, %62
  %75 = fadd <4 x float> %74, %73
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = xor <2 x i64> %76, <i64 -9223372034707292160, i64 -9223372034707292160>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = bitcast <4 x float> %67 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fmul <4 x float> %65, %61
  %83 = fadd <4 x float> %82, %81
  %84 = fmul <4 x float> %62, %65
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %66, %61
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %66, %62
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %67, %78
  %91 = fadd <4 x float> %89, %90
  %92 = fmul <4 x float> %67, %53
  %93 = fsub <4 x float> %47, %92
  %94 = fmul <4 x float> %54, %93
  %95 = fadd <4 x float> %94, %91
  %96 = fmul <4 x float> %67, %67
  %97 = fmul <4 x float> %96, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %98 = fadd <4 x float> %97, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %99 = fmul <4 x float> %96, %98
  %100 = fadd <4 x float> %99, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %101 = fmul <4 x float> %67, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %102 = fmul <4 x float> %95, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %103 = fadd <4 x float> %28, %101
  %104 = fsub <4 x float> %28, %103
  %105 = fadd <4 x float> %101, %104
  %106 = fadd <4 x float> %41, %105
  %107 = fadd <4 x float> %106, %102
  %108 = fmul <4 x float> %67, %96
  %109 = fmul <4 x float> %108, %100
  %110 = fadd <4 x float> %103, %109
  %111 = fsub <4 x float> %103, %110
  %112 = fadd <4 x float> %109, %111
  %113 = fadd <4 x float> %112, %107
  %114 = fadd <4 x float> %110, %113
  %115 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <4 x i1> %115 to <4 x i32>
  %117 = bitcast <4 x i32> %116 to <4 x float>
  %118 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %114, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %117) #6
  %119 = fcmp ult <4 x float> %6, zeroinitializer
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %118, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %121) #6
  %123 = fcmp oeq <4 x float> %6, zeroinitializer
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %122, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %125) #6
  ret <4 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_powf4_u10sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1, i32 11) #6
  %4 = fcmp oeq <4 x float> %3, %1
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = fcmp ogt <4 x float> %7, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %9 = or <4 x i1> %4, %8
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %12 = and <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = icmp ne <4 x i32> %12, zeroinitializer
  %14 = fcmp olt <4 x float> %7, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = and <4 x i1> %9, %14
  %16 = and <4 x i1> %15, %13
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x float> %0 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fcmp olt <4 x float> %20, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = fmul <4 x float> %20, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %24 = bitcast <4 x i32> %22 to <4 x float>
  %25 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %20, <4 x float> %23, <4 x float> %24) #6
  %26 = fmul <4 x float> %25, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %27 = bitcast <4 x float> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %29 = and <4 x i32> %28, <i32 255, i32 255, i32 255, i32 255>
  %30 = add nsw <4 x i32> %29, <i32 -127, i32 -127, i32 -127, i32 -127>
  %31 = shl nuw nsw <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %32 = bitcast <4 x float> %25 to <4 x i32>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = sub <4 x i32> %33, %31
  %35 = bitcast <4 x i32> %34 to <4 x float>
  %36 = add nsw <4 x i32> %29, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = bitcast <4 x i32> %30 to <16 x i8>
  %38 = bitcast <4 x i32> %36 to <16 x i8>
  %39 = bitcast <4 x i32> %22 to <16 x i8>
  %40 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %37, <16 x i8> %38, <16 x i8> %39) #6
  %41 = fadd <4 x float> %35, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fadd <4 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %43 = fsub <4 x float> %41, %42
  %44 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %43
  %45 = fsub <4 x float> %35, %42
  %46 = fadd <4 x float> %45, %44
  %47 = fadd <4 x float> %35, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %48 = fadd <4 x float> %47, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %49 = fsub <4 x float> %47, %48
  %50 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %51 = fsub <4 x float> %35, %48
  %52 = fadd <4 x float> %51, %50
  %53 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %54 = bitcast <4 x float> %47 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fsub <4 x float> %47, %56
  %58 = bitcast <4 x float> %53 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -17587891081216, i64 -17587891081216>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fsub <4 x float> %53, %60
  %62 = bitcast <4 x float> %41 to <2 x i64>
  %63 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fsub <4 x float> %41, %64
  %66 = fmul <4 x float> %41, %53
  %67 = fmul <4 x float> %56, %60
  %68 = fadd <4 x float> %67, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %69 = fmul <4 x float> %61, %56
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %57, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %57, %61
  %74 = fadd <4 x float> %73, %72
  %75 = bitcast <4 x float> %74 to <2 x i64>
  %76 = xor <2 x i64> %75, <i64 -9223372034707292160, i64 -9223372034707292160>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = bitcast <4 x float> %66 to <2 x i64>
  %79 = xor <2 x i64> %78, <i64 -9223372034707292160, i64 -9223372034707292160>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fmul <4 x float> %64, %60
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %61, %64
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %65, %60
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %65, %61
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %66, %77
  %90 = fadd <4 x float> %88, %89
  %91 = fmul <4 x float> %66, %52
  %92 = fsub <4 x float> %46, %91
  %93 = fmul <4 x float> %53, %92
  %94 = fadd <4 x float> %93, %90
  %95 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %96 = bitcast <2 x i64> %95 to <4 x float>
  %97 = fsub <4 x float> %66, %96
  %98 = fmul <4 x float> %66, %66
  %99 = bitcast <4 x float> %98 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372034707292160, i64 -9223372034707292160>
  %101 = bitcast <2 x i64> %100 to <4 x float>
  %102 = fmul <4 x float> %96, %96
  %103 = fadd <4 x float> %102, %101
  %104 = fadd <4 x float> %96, %96
  %105 = fmul <4 x float> %104, %97
  %106 = fadd <4 x float> %105, %103
  %107 = fmul <4 x float> %97, %97
  %108 = fadd <4 x float> %107, %106
  %109 = fadd <4 x float> %94, %94
  %110 = fmul <4 x float> %66, %109
  %111 = fadd <4 x float> %108, %110
  %112 = fmul <4 x float> %98, <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>
  %113 = fadd <4 x float> %112, <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>
  %114 = fmul <4 x float> %98, %113
  %115 = fadd <4 x float> %114, <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>
  %116 = bitcast <16 x i8> %40 to <4 x i32>
  %117 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %116) #6
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fsub <4 x float> %117, %120
  %122 = fmul <4 x float> %117, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %123 = bitcast <4 x float> %122 to <2 x i64>
  %124 = xor <2 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <2 x i64> %124 to <4 x float>
  %126 = fmul <4 x float> %120, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %120, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %121, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %131 = fadd <4 x float> %130, %129
  %132 = fmul <4 x float> %121, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %117, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %66, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %137 = fmul <4 x float> %94, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %138 = fadd <4 x float> %122, %136
  %139 = fsub <4 x float> %122, %138
  %140 = fadd <4 x float> %136, %139
  %141 = fadd <4 x float> %135, %140
  %142 = fadd <4 x float> %141, %137
  %143 = and <2 x i64> %99, <i64 -17587891081216, i64 -17587891081216>
  %144 = bitcast <2 x i64> %143 to <4 x float>
  %145 = fsub <4 x float> %98, %144
  %146 = fmul <4 x float> %66, %98
  %147 = bitcast <4 x float> %146 to <2 x i64>
  %148 = xor <2 x i64> %147, <i64 -9223372034707292160, i64 -9223372034707292160>
  %149 = bitcast <2 x i64> %148 to <4 x float>
  %150 = fmul <4 x float> %96, %144
  %151 = fadd <4 x float> %150, %149
  %152 = fmul <4 x float> %145, %96
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %97, %144
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %97, %145
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %98, %94
  %159 = fadd <4 x float> %157, %158
  %160 = fmul <4 x float> %66, %111
  %161 = fadd <4 x float> %159, %160
  %162 = bitcast <4 x float> %115 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %115, %164
  %166 = fmul <4 x float> %98, %115
  %167 = bitcast <4 x float> %166 to <2 x i64>
  %168 = xor <2 x i64> %167, <i64 -9223372034707292160, i64 -9223372034707292160>
  %169 = bitcast <2 x i64> %168 to <4 x float>
  %170 = fmul <4 x float> %144, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %145, %164
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %165, %144
  %175 = fadd <4 x float> %174, %173
  %176 = fmul <4 x float> %145, %165
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %115, %111
  %179 = fadd <4 x float> %177, %178
  %180 = fadd <4 x float> %166, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %181 = fsub <4 x float> %180, %166
  %182 = fsub <4 x float> %180, %181
  %183 = fsub <4 x float> %166, %182
  %184 = fsub <4 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %181
  %185 = fadd <4 x float> %184, %183
  %186 = fadd <4 x float> %179, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %187 = fadd <4 x float> %185, %186
  %188 = and <2 x i64> %147, <i64 -17587891081216, i64 -17587891081216>
  %189 = bitcast <2 x i64> %188 to <4 x float>
  %190 = fsub <4 x float> %146, %189
  %191 = bitcast <4 x float> %180 to <2 x i64>
  %192 = and <2 x i64> %191, <i64 -17587891081216, i64 -17587891081216>
  %193 = bitcast <2 x i64> %192 to <4 x float>
  %194 = fsub <4 x float> %180, %193
  %195 = fmul <4 x float> %146, %180
  %196 = bitcast <4 x float> %195 to <2 x i64>
  %197 = xor <2 x i64> %196, <i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = bitcast <2 x i64> %197 to <4 x float>
  %199 = fmul <4 x float> %189, %193
  %200 = fadd <4 x float> %199, %198
  %201 = fmul <4 x float> %190, %193
  %202 = fadd <4 x float> %201, %200
  %203 = fmul <4 x float> %194, %189
  %204 = fadd <4 x float> %203, %202
  %205 = fmul <4 x float> %190, %194
  %206 = fadd <4 x float> %205, %204
  %207 = fmul <4 x float> %146, %187
  %208 = fadd <4 x float> %206, %207
  %209 = fmul <4 x float> %180, %161
  %210 = fadd <4 x float> %209, %208
  %211 = fadd <4 x float> %138, %195
  %212 = fsub <4 x float> %138, %211
  %213 = fadd <4 x float> %195, %212
  %214 = fadd <4 x float> %213, %142
  %215 = fadd <4 x float> %214, %210
  %216 = bitcast <4 x float> %211 to <2 x i64>
  %217 = and <2 x i64> %216, <i64 -17587891081216, i64 -17587891081216>
  %218 = bitcast <2 x i64> %217 to <4 x float>
  %219 = fsub <4 x float> %211, %218
  %220 = and <2 x i64> %5, <i64 -17587891081216, i64 -17587891081216>
  %221 = bitcast <2 x i64> %220 to <4 x float>
  %222 = fsub <4 x float> %1, %221
  %223 = fmul <4 x float> %211, %1
  %224 = bitcast <4 x float> %223 to <2 x i64>
  %225 = xor <2 x i64> %224, <i64 -9223372034707292160, i64 -9223372034707292160>
  %226 = bitcast <2 x i64> %225 to <4 x float>
  %227 = fmul <4 x float> %221, %218
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %219, %221
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %222, %218
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %222, %219
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %215, %1
  %236 = fadd <4 x float> %234, %235
  %237 = fadd <4 x float> %223, %236
  %238 = fmul <4 x float> %237, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %239 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %238) #6
  %240 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %239) #6
  %241 = fmul <4 x float> %240, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %242 = fadd <4 x float> %241, %223
  %243 = fsub <4 x float> %242, %223
  %244 = fsub <4 x float> %242, %243
  %245 = fsub <4 x float> %223, %244
  %246 = fsub <4 x float> %241, %243
  %247 = fadd <4 x float> %246, %245
  %248 = fadd <4 x float> %247, %236
  %249 = fmul <4 x float> %240, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %250 = fadd <4 x float> %249, %242
  %251 = fsub <4 x float> %250, %242
  %252 = fsub <4 x float> %250, %251
  %253 = fsub <4 x float> %242, %252
  %254 = fsub <4 x float> %249, %251
  %255 = fadd <4 x float> %254, %253
  %256 = fadd <4 x float> %255, %248
  %257 = fadd <4 x float> %250, %256
  %258 = fsub <4 x float> %250, %257
  %259 = fadd <4 x float> %256, %258
  %260 = fmul <4 x float> %257, <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>
  %261 = fadd <4 x float> %260, <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>
  %262 = fmul <4 x float> %257, %261
  %263 = fadd <4 x float> %262, <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>
  %264 = fmul <4 x float> %257, %263
  %265 = fadd <4 x float> %264, <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>
  %266 = fmul <4 x float> %257, %265
  %267 = fadd <4 x float> %266, <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>
  %268 = bitcast <4 x float> %257 to <2 x i64>
  %269 = and <2 x i64> %268, <i64 -17587891081216, i64 -17587891081216>
  %270 = bitcast <2 x i64> %269 to <4 x float>
  %271 = fsub <4 x float> %257, %270
  %272 = fmul <4 x float> %257, %257
  %273 = bitcast <4 x float> %272 to <2 x i64>
  %274 = xor <2 x i64> %273, <i64 -9223372034707292160, i64 -9223372034707292160>
  %275 = bitcast <2 x i64> %274 to <4 x float>
  %276 = fmul <4 x float> %270, %270
  %277 = fadd <4 x float> %276, %275
  %278 = fadd <4 x float> %270, %270
  %279 = fmul <4 x float> %278, %271
  %280 = fadd <4 x float> %279, %277
  %281 = fmul <4 x float> %271, %271
  %282 = fadd <4 x float> %281, %280
  %283 = fadd <4 x float> %259, %259
  %284 = fmul <4 x float> %257, %283
  %285 = fadd <4 x float> %284, %282
  %286 = and <2 x i64> %273, <i64 -17587891081216, i64 -17587891081216>
  %287 = bitcast <2 x i64> %286 to <4 x float>
  %288 = fsub <4 x float> %272, %287
  %289 = bitcast <4 x float> %267 to <2 x i64>
  %290 = and <2 x i64> %289, <i64 -17587891081216, i64 -17587891081216>
  %291 = bitcast <2 x i64> %290 to <4 x float>
  %292 = fsub <4 x float> %267, %291
  %293 = fmul <4 x float> %272, %267
  %294 = bitcast <4 x float> %293 to <2 x i64>
  %295 = xor <2 x i64> %294, <i64 -9223372034707292160, i64 -9223372034707292160>
  %296 = bitcast <2 x i64> %295 to <4 x float>
  %297 = fmul <4 x float> %287, %291
  %298 = fadd <4 x float> %297, %296
  %299 = fmul <4 x float> %288, %291
  %300 = fadd <4 x float> %299, %298
  %301 = fmul <4 x float> %292, %287
  %302 = fadd <4 x float> %301, %300
  %303 = fmul <4 x float> %288, %292
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %285, %267
  %306 = fadd <4 x float> %305, %304
  %307 = fadd <4 x float> %257, %293
  %308 = fsub <4 x float> %257, %307
  %309 = fadd <4 x float> %293, %308
  %310 = fadd <4 x float> %259, %309
  %311 = fadd <4 x float> %310, %306
  %312 = fadd <4 x float> %307, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %313 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %312
  %314 = fadd <4 x float> %307, %313
  %315 = fadd <4 x float> %314, %311
  %316 = fadd <4 x float> %312, %315
  %317 = ashr <4 x i32> %239, <i32 31, i32 31, i32 31, i32 31>
  %318 = add <4 x i32> %317, %239
  %319 = ashr <4 x i32> %318, <i32 6, i32 6, i32 6, i32 6>
  %320 = sub nsw <4 x i32> %319, %317
  %321 = shl nsw <4 x i32> %320, <i32 4, i32 4, i32 4, i32 4>
  %322 = shl <4 x i32> %320, <i32 6, i32 6, i32 6, i32 6>
  %323 = sub <4 x i32> %239, %322
  %324 = add nsw <4 x i32> %321, <i32 127, i32 127, i32 127, i32 127>
  %325 = icmp sgt <4 x i32> %320, <i32 -8, i32 -8, i32 -8, i32 -8>
  %326 = select <4 x i1> %325, <4 x i32> %324, <4 x i32> zeroinitializer
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = icmp sgt <4 x i32> %326, <i32 255, i32 255, i32 255, i32 255>
  %329 = sext <4 x i1> %328 to <4 x i32>
  %330 = bitcast <4 x i32> %329 to <2 x i64>
  %331 = xor <2 x i64> %330, <i64 -1, i64 -1>
  %332 = and <2 x i64> %331, %327
  %333 = and <2 x i64> %330, <i64 1095216660735, i64 1095216660735>
  %334 = or <2 x i64> %333, %332
  %335 = bitcast <2 x i64> %334 to <4 x i32>
  %336 = shl <4 x i32> %335, <i32 23, i32 23, i32 23, i32 23>
  %337 = bitcast <4 x i32> %336 to <4 x float>
  %338 = fmul <4 x float> %316, %337
  %339 = fmul <4 x float> %338, %337
  %340 = fmul <4 x float> %339, %337
  %341 = fmul <4 x float> %340, %337
  %342 = shl <4 x i32> %323, <i32 23, i32 23, i32 23, i32 23>
  %343 = add <4 x i32> %342, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %344 = bitcast <4 x i32> %343 to <4 x float>
  %345 = fmul <4 x float> %341, %344
  %346 = fcmp olt <4 x float> %223, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %347 = sext <4 x i1> %346 to <4 x i32>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = bitcast <4 x float> %345 to <2 x i64>
  %350 = xor <2 x i64> %348, <i64 -1, i64 -1>
  %351 = and <2 x i64> %349, %350
  %352 = bitcast <2 x i64> %351 to <4 x float>
  %353 = fcmp uno <4 x float> %352, zeroinitializer
  %354 = sext <4 x i1> %353 to <4 x i32>
  %355 = bitcast <4 x i32> %354 to <4 x float>
  %356 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %352, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %355) #6
  %357 = fcmp ogt <4 x float> %0, zeroinitializer
  %358 = sext <4 x i1> %357 to <4 x i32>
  %359 = bitcast <4 x i32> %17 to <4 x float>
  %360 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %359) #6
  %361 = bitcast <4 x i32> %10 to <4 x float>
  %362 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %360, <4 x float> %361) #6
  %363 = bitcast <4 x i32> %358 to <4 x float>
  %364 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %362, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %363) #6
  %365 = fmul <4 x float> %356, %364
  %366 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %367 = bitcast <4 x float> %366 to <2 x i64>
  %368 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %369 = xor <2 x i64> %368, %367
  %370 = bitcast <2 x i64> %369 to <4 x float>
  %371 = fcmp oeq <4 x float> %7, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %372 = sext <4 x i1> %371 to <4 x i32>
  %373 = fcmp olt <4 x float> %370, zeroinitializer
  %374 = sext <4 x i1> %373 to <4 x i32>
  %375 = bitcast <4 x i32> %374 to <2 x i64>
  %376 = fcmp oeq <4 x float> %370, zeroinitializer
  %377 = sext <4 x i1> %376 to <4 x i32>
  %378 = bitcast <4 x i32> %377 to <4 x float>
  %379 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %378) #6
  %380 = bitcast <4 x float> %379 to <2 x i64>
  %381 = xor <2 x i64> %375, <i64 -1, i64 -1>
  %382 = and <2 x i64> %380, %381
  %383 = bitcast <2 x i64> %382 to <4 x float>
  %384 = bitcast <4 x i32> %372 to <4 x float>
  %385 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %365, <4 x float> %383, <4 x float> %384) #6
  %386 = fcmp oeq <4 x float> %20, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %387 = fcmp oeq <4 x float> %0, zeroinitializer
  %388 = sext <4 x i1> %387 to <4 x i32>
  %389 = or <4 x i1> %386, %387
  %390 = sext <4 x i1> %389 to <4 x i32>
  %391 = and <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %392 = or <2 x i64> %391, <i64 4575657222473777152, i64 4575657222473777152>
  %393 = bitcast <2 x i64> %392 to <4 x float>
  %394 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %393, <4 x float> %359) #6
  %395 = xor <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %396 = bitcast <2 x i64> %395 to <4 x float>
  %397 = bitcast <4 x i32> %388 to <4 x float>
  %398 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %1, <4 x float> %396, <4 x float> %397) #6
  %399 = fcmp olt <4 x float> %398, zeroinitializer
  %400 = sext <4 x i1> %399 to <4 x i32>
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = and <2 x i64> %401, <i64 9187343241974906880, i64 9187343241974906880>
  %403 = xor <2 x i64> %402, <i64 9187343241974906880, i64 9187343241974906880>
  %404 = bitcast <2 x i64> %403 to <4 x float>
  %405 = fmul <4 x float> %394, %404
  %406 = bitcast <4 x i32> %390 to <4 x float>
  %407 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %385, <4 x float> %405, <4 x float> %406) #6
  %408 = fcmp uno <4 x float> %1, %0
  %409 = sext <4 x i1> %408 to <4 x i32>
  %410 = bitcast <4 x i32> %409 to <2 x i64>
  %411 = bitcast <4 x float> %407 to <2 x i64>
  %412 = or <2 x i64> %411, %410
  %413 = bitcast <2 x i64> %412 to <4 x float>
  %414 = fcmp oeq <4 x float> %1, zeroinitializer
  %415 = fcmp oeq <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %416 = or <4 x i1> %414, %415
  %417 = sext <4 x i1> %416 to <4 x i32>
  %418 = bitcast <4 x i32> %417 to <4 x float>
  %419 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %413, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %418) #6
  ret <4 x float> %419
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fastpowf4_u3500sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = bitcast <4 x i32> %7 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %8, <4 x float> %9) #6
  %11 = fmul <4 x float> %10, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %17 = bitcast <4 x float> %10 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = sub <4 x i32> %18, %16
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = bitcast <4 x i32> %21 to <16 x i8>
  %24 = bitcast <4 x i32> %7 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %22, <16 x i8> %23, <16 x i8> %24) #6
  %26 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fdiv <4 x float> %26, %27
  %29 = fmul <4 x float> %28, %28
  %30 = fmul <4 x float> %29, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %31 = fadd <4 x float> %30, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %32 = fmul <4 x float> %29, %31
  %33 = fadd <4 x float> %32, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %34 = fmul <4 x float> %29, %33
  %35 = fadd <4 x float> %34, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %36 = fmul <4 x float> %29, %35
  %37 = fadd <4 x float> %36, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = bitcast <16 x i8> %25 to <4 x i32>
  %39 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %38) #6
  %40 = fmul <4 x float> %39, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %41 = fmul <4 x float> %28, %37
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %42, %1
  %44 = fmul <4 x float> %43, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %44) #6
  %46 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %45) #6
  %47 = fmul <4 x float> %46, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %48 = fadd <4 x float> %47, %43
  %49 = fmul <4 x float> %46, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %50, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %52 = fadd <4 x float> %51, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %53 = fmul <4 x float> %50, %52
  %54 = fadd <4 x float> %53, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %55 = fmul <4 x float> %50, %54
  %56 = fadd <4 x float> %55, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %57 = fmul <4 x float> %50, %56
  %58 = fadd <4 x float> %57, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %59 = fmul <4 x float> %50, %58
  %60 = fadd <4 x float> %59, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <4 x float> %50, %50
  %62 = fadd <4 x float> %50, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %63 = fmul <4 x float> %61, %60
  %64 = fadd <4 x float> %62, %63
  %65 = ashr <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %66 = shl <4 x i32> %65, <i32 23, i32 23, i32 23, i32 23>
  %67 = add <4 x i32> %66, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %68 = bitcast <4 x i32> %67 to <4 x float>
  %69 = fmul <4 x float> %64, %68
  %70 = sub <4 x i32> %45, %65
  %71 = shl <4 x i32> %70, <i32 23, i32 23, i32 23, i32 23>
  %72 = add <4 x i32> %71, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %73 = bitcast <4 x i32> %72 to <4 x float>
  %74 = fmul <4 x float> %69, %73
  %75 = fcmp olt <4 x float> %43, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = bitcast <4 x float> %74 to <2 x i64>
  %79 = xor <2 x i64> %77, <i64 -1, i64 -1>
  %80 = and <2 x i64> %78, %79
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1, i32 11) #6
  %83 = fcmp oeq <4 x float> %82, %1
  %84 = bitcast <4 x float> %1 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 9223372034707292159, i64 9223372034707292159>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fcmp ogt <4 x float> %86, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %88 = or <4 x i1> %83, %87
  %89 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %90 = and <4 x i32> %89, <i32 1, i32 1, i32 1, i32 1>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = fcmp olt <4 x float> %86, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %93 = and <4 x i1> %88, %92
  %94 = and <4 x i1> %93, %91
  %95 = bitcast <4 x float> %0 to <4 x i32>
  %96 = ashr <4 x i32> %95, <i32 31, i32 31, i32 31, i32 31>
  %97 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = bitcast <4 x i32> %96 to <4 x float>
  %100 = select <4 x i1> %94, <4 x float> %99, <4 x float> zeroinitializer
  %101 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %81, <4 x float> %98, <4 x float> %100) #6
  %102 = fcmp oeq <4 x float> %0, zeroinitializer
  %103 = sext <4 x i1> %102 to <4 x i32>
  %104 = bitcast <4 x i32> %103 to <4 x float>
  %105 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %101, <4 x float> zeroinitializer, <4 x float> %104) #6
  %106 = fcmp oeq <4 x float> %1, zeroinitializer
  %107 = sext <4 x i1> %106 to <4 x i32>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %105, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %108) #6
  ret <4 x float> %109
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = fsub <4 x float> %156, %158
  %180 = fsub <4 x float> %156, %179
  %181 = fsub <4 x float> %180, %158
  %182 = fadd <4 x float> %181, %157
  %183 = fsub <4 x float> %182, %178
  %184 = fadd <4 x float> %179, %183
  %185 = fmul <4 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fcmp ogt <4 x float> %4, <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>
  %187 = fcmp uno <4 x float> %185, zeroinitializer
  %188 = or <4 x i1> %187, %186
  %189 = sext <4 x i1> %188 to <4 x i32>
  %190 = bitcast <4 x i32> %189 to <4 x float>
  %191 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %185, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %190) #6
  %192 = bitcast <4 x float> %191 to <2 x i64>
  %193 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %194 = xor <2 x i64> %193, %192
  %195 = fcmp uno <4 x float> %0, zeroinitializer
  %196 = sext <4 x i1> %195 to <4 x i32>
  %197 = bitcast <4 x i32> %196 to <2 x i64>
  %198 = or <2 x i64> %194, %197
  %199 = bitcast <2 x i64> %198 to <4 x float>
  ret <4 x float> %199
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_coshf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = fadd <4 x float> %158, %156
  %180 = fsub <4 x float> %156, %179
  %181 = fadd <4 x float> %158, %180
  %182 = fadd <4 x float> %181, %157
  %183 = fadd <4 x float> %182, %178
  %184 = fadd <4 x float> %179, %183
  %185 = fmul <4 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fcmp ogt <4 x float> %4, <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>
  %187 = fcmp uno <4 x float> %185, zeroinitializer
  %188 = or <4 x i1> %187, %186
  %189 = sext <4 x i1> %188 to <4 x i32>
  %190 = bitcast <4 x i32> %189 to <4 x float>
  %191 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %185, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %190) #6
  %192 = fcmp uno <4 x float> %0, zeroinitializer
  %193 = sext <4 x i1> %192 to <4 x i32>
  %194 = bitcast <4 x i32> %193 to <2 x i64>
  %195 = bitcast <4 x float> %191 to <2 x i64>
  %196 = or <2 x i64> %195, %194
  %197 = bitcast <2 x i64> %196 to <4 x float>
  ret <4 x float> %197
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, zeroinitializer
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %9, %4
  %11 = fsub <4 x float> %10, %4
  %12 = fsub <4 x float> %10, %11
  %13 = fsub <4 x float> %4, %12
  %14 = fsub <4 x float> %9, %11
  %15 = fadd <4 x float> %14, %13
  %16 = fadd <4 x float> %15, zeroinitializer
  %17 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <4 x float> %17, %10
  %19 = fsub <4 x float> %18, %10
  %20 = fsub <4 x float> %18, %19
  %21 = fsub <4 x float> %10, %20
  %22 = fsub <4 x float> %17, %19
  %23 = fadd <4 x float> %22, %21
  %24 = fadd <4 x float> %23, %16
  %25 = fmul <4 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <4 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <4 x float> %18, %26
  %28 = fadd <4 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <4 x float> %18, %28
  %30 = fadd <4 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <4 x float> %18 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fsub <4 x float> %18, %33
  %35 = bitcast <4 x float> %30 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %18, %30
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fmul <4 x float> %33, %37
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %34, %37
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %38, %33
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %34, %38
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %24, %30
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <4 x float> %53, %39
  %55 = fsub <4 x float> %53, %54
  %56 = fsub <4 x float> %39, %55
  %57 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <4 x float> %57, %56
  %59 = fadd <4 x float> %58, %52
  %60 = bitcast <4 x float> %53 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %53, %62
  %64 = fmul <4 x float> %18, %53
  %65 = bitcast <4 x float> %64 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fmul <4 x float> %33, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %34, %62
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %63, %33
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %34, %63
  %75 = fadd <4 x float> %74, %73
  %76 = fmul <4 x float> %18, %59
  %77 = fadd <4 x float> %75, %76
  %78 = fmul <4 x float> %24, %53
  %79 = fadd <4 x float> %78, %77
  %80 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <4 x float> %80, %64
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> %64, %82
  %84 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <4 x float> %84, %83
  %86 = fadd <4 x float> %85, %79
  %87 = fmul <4 x float> %18, %18
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %33, %33
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %33, %33
  %94 = fmul <4 x float> %93, %34
  %95 = fadd <4 x float> %94, %92
  %96 = fmul <4 x float> %34, %34
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %24, %24
  %99 = fmul <4 x float> %18, %98
  %100 = fadd <4 x float> %99, %97
  %101 = and <2 x i64> %88, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %87, %102
  %104 = bitcast <4 x float> %80 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = fsub <4 x float> %80, %106
  %108 = fmul <4 x float> %87, %80
  %109 = bitcast <4 x float> %108 to <2 x i64>
  %110 = xor <2 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <2 x i64> %110 to <4 x float>
  %112 = fmul <4 x float> %102, %106
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, %106
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %107, %102
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %103, %107
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %87, %86
  %121 = fadd <4 x float> %119, %120
  %122 = fmul <4 x float> %100, %80
  %123 = fadd <4 x float> %122, %121
  %124 = fadd <4 x float> %18, %108
  %125 = fsub <4 x float> %124, %18
  %126 = fsub <4 x float> %124, %125
  %127 = fsub <4 x float> %18, %126
  %128 = fsub <4 x float> %108, %125
  %129 = fadd <4 x float> %128, %127
  %130 = fadd <4 x float> %24, %123
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <4 x float> %124, %133
  %135 = fadd <4 x float> %134, %131
  %136 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %137 = shl <4 x i32> %136, <i32 23, i32 23, i32 23, i32 23>
  %138 = add <4 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %132, %139
  %141 = sub <4 x i32> %7, %136
  %142 = shl <4 x i32> %141, <i32 23, i32 23, i32 23, i32 23>
  %143 = add <4 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fmul <4 x float> %140, %144
  %146 = fmul <4 x float> %135, %139
  %147 = fmul <4 x float> %146, %144
  %148 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <4 x float> %145 to <2 x i64>
  %152 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %153 = and <2 x i64> %151, %152
  %154 = bitcast <4 x float> %147 to <2 x i64>
  %155 = and <2 x i64> %154, %152
  %156 = bitcast <2 x i64> %153 to <4 x float>
  %157 = bitcast <2 x i64> %155 to <4 x float>
  %158 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %156
  %159 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %160 = bitcast <2 x i64> %159 to <4 x float>
  %161 = fsub <4 x float> %156, %160
  %162 = bitcast <4 x float> %158 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = fsub <4 x float> %158, %164
  %166 = fmul <4 x float> %160, %164
  %167 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %168 = fmul <4 x float> %165, %160
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %161, %164
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %161, %165
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %158, %157
  %175 = fadd <4 x float> %173, %174
  %176 = xor <2 x i64> %162, <i64 -9223372034707292160, i64 -9223372034707292160>
  %177 = bitcast <2 x i64> %176 to <4 x float>
  %178 = fmul <4 x float> %175, %177
  %179 = bitcast <4 x float> %178 to <2 x i64>
  %180 = xor <2 x i64> %179, <i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = bitcast <2 x i64> %180 to <4 x float>
  %182 = fadd <4 x float> %156, %177
  %183 = fsub <4 x float> %156, %182
  %184 = fadd <4 x float> %183, %177
  %185 = fadd <4 x float> %184, %157
  %186 = fadd <4 x float> %185, %181
  %187 = fadd <4 x float> %158, %156
  %188 = fsub <4 x float> %156, %187
  %189 = fadd <4 x float> %158, %188
  %190 = fadd <4 x float> %189, %157
  %191 = fadd <4 x float> %190, %178
  %192 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %187
  %193 = bitcast <4 x float> %187 to <2 x i64>
  %194 = and <2 x i64> %193, <i64 -17587891081216, i64 -17587891081216>
  %195 = bitcast <2 x i64> %194 to <4 x float>
  %196 = fsub <4 x float> %187, %195
  %197 = bitcast <4 x float> %192 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -17587891081216, i64 -17587891081216>
  %199 = bitcast <2 x i64> %198 to <4 x float>
  %200 = fsub <4 x float> %192, %199
  %201 = bitcast <4 x float> %182 to <2 x i64>
  %202 = and <2 x i64> %201, <i64 -17587891081216, i64 -17587891081216>
  %203 = bitcast <2 x i64> %202 to <4 x float>
  %204 = fsub <4 x float> %182, %203
  %205 = fmul <4 x float> %192, %182
  %206 = fmul <4 x float> %195, %199
  %207 = fadd <4 x float> %206, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %208 = fmul <4 x float> %200, %195
  %209 = fadd <4 x float> %208, %207
  %210 = fmul <4 x float> %196, %199
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %196, %200
  %213 = fadd <4 x float> %212, %211
  %214 = bitcast <4 x float> %213 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372034707292160, i64 -9223372034707292160>
  %216 = bitcast <2 x i64> %215 to <4 x float>
  %217 = bitcast <4 x float> %205 to <2 x i64>
  %218 = xor <2 x i64> %217, <i64 -9223372034707292160, i64 -9223372034707292160>
  %219 = bitcast <2 x i64> %218 to <4 x float>
  %220 = fmul <4 x float> %199, %203
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %200, %203
  %223 = fadd <4 x float> %222, %221
  %224 = fmul <4 x float> %204, %199
  %225 = fadd <4 x float> %224, %223
  %226 = fmul <4 x float> %200, %204
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %205, %216
  %229 = fadd <4 x float> %227, %228
  %230 = fmul <4 x float> %205, %191
  %231 = fsub <4 x float> %186, %230
  %232 = fmul <4 x float> %192, %231
  %233 = fadd <4 x float> %229, %232
  %234 = fadd <4 x float> %205, %233
  %235 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %236 = fcmp uno <4 x float> %234, zeroinitializer
  %237 = or <4 x i1> %236, %235
  %238 = sext <4 x i1> %237 to <4 x i32>
  %239 = bitcast <4 x i32> %238 to <4 x float>
  %240 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %234, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %239) #6
  %241 = bitcast <4 x float> %240 to <2 x i64>
  %242 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = xor <2 x i64> %242, %241
  %244 = fcmp uno <4 x float> %0, zeroinitializer
  %245 = sext <4 x i1> %244 to <4 x i32>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = or <2 x i64> %243, %246
  %248 = bitcast <2 x i64> %247 to <4 x float>
  ret <4 x float> %248
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinhf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <4 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <4 x float> %12, %17
  %21 = fadd <4 x float> %19, %20
  %22 = fmul <4 x float> %13, %15
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %12, %23
  %25 = fadd <4 x float> %11, %24
  %26 = icmp eq <4 x i32> %6, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %28, %32
  %34 = sub <4 x i32> %6, %29
  %35 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = fmul <4 x float> %33, %37
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = bitcast <4 x i32> %27 to <4 x float>
  %41 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %25, <4 x float> %40) #6
  %42 = fadd <4 x float> %41, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %43 = fadd <4 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %44 = fdiv <4 x float> %42, %43
  %45 = fmul <4 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %46 = fmul <4 x float> %45, %44
  %47 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %48 = fcmp uno <4 x float> %46, zeroinitializer
  %49 = or <4 x i1> %48, %47
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <4 x float>
  %52 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %46, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %51) #6
  %53 = bitcast <4 x float> %52 to <2 x i64>
  %54 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = xor <2 x i64> %54, %53
  %56 = fcmp uno <4 x float> %0, zeroinitializer
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = or <2 x i64> %55, %58
  %60 = bitcast <2 x i64> %59 to <4 x float>
  ret <4 x float> %60
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_coshf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <4 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <4 x float> %11, %11
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %11, %23
  %25 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = sub <4 x i32> %6, %26
  %32 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = fmul <4 x float> %30, %34
  %36 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = bitcast <4 x float> %35 to <2 x i64>
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %39, %40
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fcmp ogt <4 x float> %4, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %45) #6
  %47 = fdiv <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %46
  %48 = fmul <4 x float> %46, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %49 = fadd <4 x float> %48, %47
  %50 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %51 = fcmp uno <4 x float> %49, zeroinitializer
  %52 = or <4 x i1> %51, %50
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %49, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %54) #6
  %56 = fcmp uno <4 x float> %0, zeroinitializer
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = bitcast <4 x float> %55 to <2 x i64>
  %60 = or <2 x i64> %59, %58
  %61 = bitcast <2 x i64> %60 to <4 x float>
  ret <4 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_tanhf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %5, %9
  %11 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <4 x float> %11, %10
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %13, %13
  %15 = fmul <4 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <4 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <4 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <4 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <4 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <4 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <4 x float> %13, %18
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %14, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %13, %24
  %26 = fadd <4 x float> %12, %25
  %27 = icmp eq <4 x i32> %7, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = fadd <4 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %30 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %31 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = fmul <4 x float> %29, %33
  %35 = sub <4 x i32> %7, %30
  %36 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fmul <4 x float> %34, %38
  %40 = fadd <4 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = bitcast <4 x i32> %28 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> %26, <4 x float> %41) #6
  %43 = fadd <4 x float> %42, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fdiv <4 x float> %42, %43
  %45 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %46 = fcmp uno <4 x float> %44, zeroinitializer
  %47 = or <4 x i1> %46, %45
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %49) #6
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = fcmp uno <4 x float> %0, zeroinitializer
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = or <2 x i64> %53, %56
  %58 = bitcast <2 x i64> %57 to <4 x float>
  ret <4 x float> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_asinhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %8 = and <2 x i64> %2, <i64 -17587891081216, i64 -17587891081216>
  %9 = bitcast <2 x i64> %8 to <4 x float>
  %10 = fsub <4 x float> %0, %9
  %11 = bitcast <4 x float> %7 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 -17587891081216, i64 -17587891081216>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = fsub <4 x float> %7, %13
  %15 = fmul <4 x float> %9, %13
  %16 = fadd <4 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %17 = fmul <4 x float> %14, %9
  %18 = fadd <4 x float> %17, %16
  %19 = fmul <4 x float> %10, %13
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %10, %14
  %22 = fadd <4 x float> %21, %20
  %23 = xor <2 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fmul <4 x float> %22, %24
  %26 = bitcast <4 x i32> %6 to <4 x float>
  %27 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %26) #6
  %28 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %25, <4 x float> %26) #6
  %29 = bitcast <4 x float> %27 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %27, %31
  %33 = fmul <4 x float> %27, %27
  %34 = bitcast <4 x float> %33 to <2 x i64>
  %35 = xor <2 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fmul <4 x float> %31, %31
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %31, %31
  %40 = fmul <4 x float> %39, %32
  %41 = fadd <4 x float> %40, %38
  %42 = fmul <4 x float> %32, %32
  %43 = fadd <4 x float> %42, %41
  %44 = fadd <4 x float> %28, %28
  %45 = fmul <4 x float> %27, %44
  %46 = fadd <4 x float> %45, %43
  %47 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %48 = fsub <4 x float> %47, %33
  %49 = fsub <4 x float> %47, %48
  %50 = fsub <4 x float> %33, %49
  %51 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %48
  %52 = fadd <4 x float> %51, %50
  %53 = fadd <4 x float> %52, %46
  %54 = fadd <4 x float> %47, %53
  %55 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %54) #6
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %55, %58
  %60 = fmul <4 x float> %55, %55
  %61 = bitcast <4 x float> %60 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fmul <4 x float> %58, %58
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %59, %58
  %67 = fadd <4 x float> %66, %65
  %68 = fadd <4 x float> %66, %67
  %69 = fmul <4 x float> %59, %59
  %70 = fadd <4 x float> %69, %68
  %71 = fadd <4 x float> %47, %60
  %72 = fsub <4 x float> %71, %47
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %47, %73
  %75 = fsub <4 x float> %60, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %53, %70
  %78 = fadd <4 x float> %76, %77
  %79 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fsub <4 x float> %79, %82
  %84 = fmul <4 x float> %58, %82
  %85 = fadd <4 x float> %84, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %86 = fmul <4 x float> %83, %58
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %59, %82
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %59, %83
  %91 = fadd <4 x float> %90, %89
  %92 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %91, %93
  %95 = bitcast <4 x float> %71 to <2 x i64>
  %96 = and <2 x i64> %95, <i64 -17587891081216, i64 -17587891081216>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fsub <4 x float> %71, %97
  %99 = fmul <4 x float> %79, %71
  %100 = bitcast <4 x float> %99 to <2 x i64>
  %101 = xor <2 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fmul <4 x float> %82, %97
  %104 = fadd <4 x float> %103, %102
  %105 = fmul <4 x float> %98, %82
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %83, %97
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %83, %98
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %71, %94
  %112 = fadd <4 x float> %110, %111
  %113 = fmul <4 x float> %79, %78
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %99, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %116 = fmul <4 x float> %114, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %117 = bitcast <4 x float> %115 to <2 x i64>
  %118 = and <2 x i64> %117, <i64 -17587891081216, i64 -17587891081216>
  %119 = bitcast <2 x i64> %118 to <4 x float>
  %120 = fsub <4 x float> %115, %119
  %121 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %122 = bitcast <2 x i64> %121 to <4 x float>
  %123 = fsub <4 x float> %4, %122
  %124 = fmul <4 x float> %115, %4
  %125 = bitcast <4 x float> %124 to <2 x i64>
  %126 = xor <2 x i64> %125, <i64 -9223372034707292160, i64 -9223372034707292160>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fmul <4 x float> %122, %119
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %120, %122
  %131 = fadd <4 x float> %130, %129
  %132 = fmul <4 x float> %123, %119
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %123, %120
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %116, %4
  %137 = fadd <4 x float> %135, %136
  %138 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %115, <4 x float> %124, <4 x float> %26) #6
  %139 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %116, <4 x float> %137, <4 x float> %26) #6
  %140 = fadd <4 x float> %138, %0
  %141 = fsub <4 x float> %140, %138
  %142 = fsub <4 x float> %140, %141
  %143 = fsub <4 x float> %138, %142
  %144 = fsub <4 x float> %0, %141
  %145 = fadd <4 x float> %144, %143
  %146 = fadd <4 x float> %139, %145
  %147 = fadd <4 x float> %140, %146
  %148 = fsub <4 x float> %140, %147
  %149 = fadd <4 x float> %146, %148
  %150 = fmul <4 x float> %147, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %151 = fcmp olt <4 x float> %150, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %152 = sext <4 x i1> %151 to <4 x i32>
  %153 = fmul <4 x float> %150, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %154 = bitcast <4 x i32> %152 to <4 x float>
  %155 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %150, <4 x float> %153, <4 x float> %154) #6
  %156 = bitcast <4 x float> %155 to <4 x i32>
  %157 = lshr <4 x i32> %156, <i32 23, i32 23, i32 23, i32 23>
  %158 = bitcast <4 x i32> %152 to <16 x i8>
  %159 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %158) #6
  %160 = and <4 x i32> %157, <i32 255, i32 255, i32 255, i32 255>
  %161 = bitcast <16 x i8> %159 to <4 x i32>
  %162 = sub <4 x i32> %160, %161
  %163 = shl <4 x i32> %162, <i32 23, i32 23, i32 23, i32 23>
  %164 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %163
  %165 = bitcast <4 x i32> %164 to <4 x float>
  %166 = fmul <4 x float> %147, %165
  %167 = fmul <4 x float> %149, %165
  %168 = fadd <4 x float> %166, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %169 = fsub <4 x float> %168, %166
  %170 = fsub <4 x float> %168, %169
  %171 = fsub <4 x float> %166, %170
  %172 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %169
  %173 = fadd <4 x float> %172, %171
  %174 = fadd <4 x float> %167, %173
  %175 = fadd <4 x float> %166, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %176 = fsub <4 x float> %175, %166
  %177 = fsub <4 x float> %175, %176
  %178 = fsub <4 x float> %166, %177
  %179 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %176
  %180 = fadd <4 x float> %179, %178
  %181 = fadd <4 x float> %167, %180
  %182 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %175
  %183 = bitcast <4 x float> %175 to <2 x i64>
  %184 = and <2 x i64> %183, <i64 -17587891081216, i64 -17587891081216>
  %185 = bitcast <2 x i64> %184 to <4 x float>
  %186 = fsub <4 x float> %175, %185
  %187 = bitcast <4 x float> %182 to <2 x i64>
  %188 = and <2 x i64> %187, <i64 -17587891081216, i64 -17587891081216>
  %189 = bitcast <2 x i64> %188 to <4 x float>
  %190 = fsub <4 x float> %182, %189
  %191 = bitcast <4 x float> %168 to <2 x i64>
  %192 = and <2 x i64> %191, <i64 -17587891081216, i64 -17587891081216>
  %193 = bitcast <2 x i64> %192 to <4 x float>
  %194 = fsub <4 x float> %168, %193
  %195 = fmul <4 x float> %168, %182
  %196 = fmul <4 x float> %185, %189
  %197 = fadd <4 x float> %196, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %198 = fmul <4 x float> %190, %185
  %199 = fadd <4 x float> %198, %197
  %200 = fmul <4 x float> %186, %189
  %201 = fadd <4 x float> %200, %199
  %202 = fmul <4 x float> %186, %190
  %203 = fadd <4 x float> %202, %201
  %204 = bitcast <4 x float> %203 to <2 x i64>
  %205 = xor <2 x i64> %204, <i64 -9223372034707292160, i64 -9223372034707292160>
  %206 = bitcast <2 x i64> %205 to <4 x float>
  %207 = bitcast <4 x float> %195 to <2 x i64>
  %208 = xor <2 x i64> %207, <i64 -9223372034707292160, i64 -9223372034707292160>
  %209 = bitcast <2 x i64> %208 to <4 x float>
  %210 = fmul <4 x float> %193, %189
  %211 = fadd <4 x float> %210, %209
  %212 = fmul <4 x float> %190, %193
  %213 = fadd <4 x float> %212, %211
  %214 = fmul <4 x float> %194, %189
  %215 = fadd <4 x float> %214, %213
  %216 = fmul <4 x float> %194, %190
  %217 = fadd <4 x float> %216, %215
  %218 = fmul <4 x float> %195, %206
  %219 = fadd <4 x float> %217, %218
  %220 = fmul <4 x float> %195, %181
  %221 = fsub <4 x float> %174, %220
  %222 = fmul <4 x float> %182, %221
  %223 = fadd <4 x float> %222, %219
  %224 = and <2 x i64> %207, <i64 -17587891081216, i64 -17587891081216>
  %225 = bitcast <2 x i64> %224 to <4 x float>
  %226 = fsub <4 x float> %195, %225
  %227 = fmul <4 x float> %195, %195
  %228 = bitcast <4 x float> %227 to <2 x i64>
  %229 = xor <2 x i64> %228, <i64 -9223372034707292160, i64 -9223372034707292160>
  %230 = bitcast <2 x i64> %229 to <4 x float>
  %231 = fmul <4 x float> %225, %225
  %232 = fadd <4 x float> %231, %230
  %233 = fadd <4 x float> %225, %225
  %234 = fmul <4 x float> %233, %226
  %235 = fadd <4 x float> %234, %232
  %236 = fmul <4 x float> %226, %226
  %237 = fadd <4 x float> %236, %235
  %238 = fadd <4 x float> %223, %223
  %239 = fmul <4 x float> %195, %238
  %240 = fadd <4 x float> %237, %239
  %241 = fmul <4 x float> %227, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %242 = fadd <4 x float> %241, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %243 = fmul <4 x float> %227, %242
  %244 = fadd <4 x float> %243, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %245 = fmul <4 x float> %227, %244
  %246 = fadd <4 x float> %245, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %247 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %162) #6
  %248 = bitcast <4 x float> %247 to <2 x i64>
  %249 = and <2 x i64> %248, <i64 -17587891081216, i64 -17587891081216>
  %250 = bitcast <2 x i64> %249 to <4 x float>
  %251 = fsub <4 x float> %247, %250
  %252 = fmul <4 x float> %247, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %253 = bitcast <4 x float> %252 to <2 x i64>
  %254 = xor <2 x i64> %253, <i64 -9223372034707292160, i64 -9223372034707292160>
  %255 = bitcast <2 x i64> %254 to <4 x float>
  %256 = fmul <4 x float> %250, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %257 = fadd <4 x float> %256, %255
  %258 = fmul <4 x float> %250, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %259 = fadd <4 x float> %258, %257
  %260 = fmul <4 x float> %251, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %261 = fadd <4 x float> %260, %259
  %262 = fmul <4 x float> %251, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %263 = fadd <4 x float> %262, %261
  %264 = fmul <4 x float> %247, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %265 = fadd <4 x float> %264, %263
  %266 = fmul <4 x float> %195, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %267 = fmul <4 x float> %223, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %268 = fadd <4 x float> %252, %266
  %269 = fsub <4 x float> %252, %268
  %270 = fadd <4 x float> %266, %269
  %271 = fadd <4 x float> %265, %270
  %272 = fadd <4 x float> %271, %267
  %273 = and <2 x i64> %228, <i64 -17587891081216, i64 -17587891081216>
  %274 = bitcast <2 x i64> %273 to <4 x float>
  %275 = fsub <4 x float> %227, %274
  %276 = fmul <4 x float> %195, %227
  %277 = bitcast <4 x float> %276 to <2 x i64>
  %278 = xor <2 x i64> %277, <i64 -9223372034707292160, i64 -9223372034707292160>
  %279 = bitcast <2 x i64> %278 to <4 x float>
  %280 = fmul <4 x float> %225, %274
  %281 = fadd <4 x float> %280, %279
  %282 = fmul <4 x float> %275, %225
  %283 = fadd <4 x float> %282, %281
  %284 = fmul <4 x float> %226, %274
  %285 = fadd <4 x float> %284, %283
  %286 = fmul <4 x float> %226, %275
  %287 = fadd <4 x float> %286, %285
  %288 = fmul <4 x float> %227, %223
  %289 = fadd <4 x float> %287, %288
  %290 = fmul <4 x float> %195, %240
  %291 = fadd <4 x float> %289, %290
  %292 = and <2 x i64> %277, <i64 -17587891081216, i64 -17587891081216>
  %293 = bitcast <2 x i64> %292 to <4 x float>
  %294 = fsub <4 x float> %276, %293
  %295 = bitcast <4 x float> %246 to <2 x i64>
  %296 = and <2 x i64> %295, <i64 -17587891081216, i64 -17587891081216>
  %297 = bitcast <2 x i64> %296 to <4 x float>
  %298 = fsub <4 x float> %246, %297
  %299 = fmul <4 x float> %276, %246
  %300 = bitcast <4 x float> %299 to <2 x i64>
  %301 = xor <2 x i64> %300, <i64 -9223372034707292160, i64 -9223372034707292160>
  %302 = bitcast <2 x i64> %301 to <4 x float>
  %303 = fmul <4 x float> %293, %297
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %294, %297
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %298, %293
  %308 = fadd <4 x float> %307, %306
  %309 = fmul <4 x float> %294, %298
  %310 = fadd <4 x float> %309, %308
  %311 = fmul <4 x float> %246, %291
  %312 = fadd <4 x float> %310, %311
  %313 = fadd <4 x float> %268, %299
  %314 = fsub <4 x float> %268, %313
  %315 = fadd <4 x float> %299, %314
  %316 = fadd <4 x float> %315, %272
  %317 = fadd <4 x float> %316, %312
  %318 = fadd <4 x float> %313, %317
  %319 = fcmp ogt <4 x float> %4, <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>
  %320 = fcmp uno <4 x float> %318, zeroinitializer
  %321 = or <4 x i1> %320, %319
  %322 = sext <4 x i1> %321 to <4 x i32>
  %323 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %324 = or <2 x i64> %323, <i64 9187343241974906880, i64 9187343241974906880>
  %325 = bitcast <2 x i64> %324 to <4 x float>
  %326 = bitcast <4 x i32> %322 to <4 x float>
  %327 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %318, <4 x float> %325, <4 x float> %326) #6
  %328 = fcmp uno <4 x float> %0, zeroinitializer
  %329 = sext <4 x i1> %328 to <4 x i32>
  %330 = bitcast <4 x i32> %329 to <2 x i64>
  %331 = bitcast <4 x float> %327 to <2 x i64>
  %332 = or <2 x i64> %331, %330
  %333 = bitcast <2 x i64> %332 to <4 x float>
  %334 = bitcast <4 x float> %0 to <4 x i32>
  %335 = icmp eq <4 x i32> %334, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %336 = sext <4 x i1> %335 to <4 x i32>
  %337 = bitcast <4 x i32> %336 to <4 x float>
  %338 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %333, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %337) #6
  ret <4 x float> %338
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_acoshf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <4 x float> %2, %0
  %4 = fsub <4 x float> %2, %3
  %5 = fsub <4 x float> %0, %4
  %6 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <4 x float> %6, %5
  %8 = fadd <4 x float> %2, %7
  %9 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -17587891081216, i64 -17587891081216>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fsub <4 x float> %9, %12
  %14 = fmul <4 x float> %9, %9
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = xor <2 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <2 x i64> %16 to <4 x float>
  %18 = fmul <4 x float> %12, %12
  %19 = fadd <4 x float> %18, %17
  %20 = fmul <4 x float> %13, %12
  %21 = fadd <4 x float> %20, %19
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %13, %13
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %2, %14
  %26 = fsub <4 x float> %25, %2
  %27 = fsub <4 x float> %25, %26
  %28 = fsub <4 x float> %2, %27
  %29 = fsub <4 x float> %14, %26
  %30 = fadd <4 x float> %29, %28
  %31 = fadd <4 x float> %7, %24
  %32 = fadd <4 x float> %30, %31
  %33 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %34 = bitcast <4 x float> %33 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fsub <4 x float> %33, %36
  %38 = fmul <4 x float> %12, %36
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = fmul <4 x float> %37, %12
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %13, %36
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %13, %37
  %45 = fadd <4 x float> %44, %43
  %46 = xor <2 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fmul <4 x float> %45, %47
  %49 = bitcast <4 x float> %25 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %25, %51
  %53 = fmul <4 x float> %33, %25
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %36, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %52, %36
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %37, %51
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %37, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %25, %48
  %66 = fadd <4 x float> %64, %65
  %67 = fmul <4 x float> %33, %32
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %53, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %70 = fmul <4 x float> %68, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fadd <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %72 = fsub <4 x float> %71, %0
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %0, %73
  %75 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %71, %76
  %78 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %77) #6
  %79 = bitcast <4 x float> %78 to <2 x i64>
  %80 = and <2 x i64> %79, <i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fsub <4 x float> %78, %81
  %83 = fmul <4 x float> %78, %78
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fmul <4 x float> %81, %81
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %82, %81
  %90 = fadd <4 x float> %89, %88
  %91 = fadd <4 x float> %89, %90
  %92 = fmul <4 x float> %82, %82
  %93 = fadd <4 x float> %92, %91
  %94 = fadd <4 x float> %71, %83
  %95 = fsub <4 x float> %94, %71
  %96 = fsub <4 x float> %94, %95
  %97 = fsub <4 x float> %71, %96
  %98 = fsub <4 x float> %83, %95
  %99 = fadd <4 x float> %98, %97
  %100 = fadd <4 x float> %76, %93
  %101 = fadd <4 x float> %99, %100
  %102 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <2 x i64> %104 to <4 x float>
  %106 = fsub <4 x float> %102, %105
  %107 = fmul <4 x float> %81, %105
  %108 = fadd <4 x float> %107, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %109 = fmul <4 x float> %106, %81
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %82, %105
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %82, %106
  %114 = fadd <4 x float> %113, %112
  %115 = xor <2 x i64> %103, <i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fmul <4 x float> %114, %116
  %118 = bitcast <4 x float> %94 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fsub <4 x float> %94, %120
  %122 = fmul <4 x float> %102, %94
  %123 = bitcast <4 x float> %122 to <2 x i64>
  %124 = xor <2 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <2 x i64> %124 to <4 x float>
  %126 = fmul <4 x float> %105, %120
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %121, %105
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %106, %120
  %131 = fadd <4 x float> %130, %129
  %132 = fmul <4 x float> %106, %121
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %94, %117
  %135 = fadd <4 x float> %133, %134
  %136 = fmul <4 x float> %102, %101
  %137 = fadd <4 x float> %136, %135
  %138 = fmul <4 x float> %122, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %139 = fmul <4 x float> %137, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %140 = bitcast <4 x float> %69 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <2 x i64> %141 to <4 x float>
  %143 = fsub <4 x float> %69, %142
  %144 = bitcast <4 x float> %138 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fsub <4 x float> %138, %146
  %148 = fmul <4 x float> %69, %138
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fmul <4 x float> %142, %146
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %143, %146
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %147, %142
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %143, %147
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %69, %139
  %161 = fadd <4 x float> %159, %160
  %162 = fmul <4 x float> %138, %70
  %163 = fadd <4 x float> %162, %161
  %164 = fadd <4 x float> %148, %0
  %165 = fsub <4 x float> %164, %148
  %166 = fsub <4 x float> %164, %165
  %167 = fsub <4 x float> %148, %166
  %168 = fsub <4 x float> %0, %165
  %169 = fadd <4 x float> %168, %167
  %170 = fadd <4 x float> %169, %163
  %171 = fmul <4 x float> %164, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %172 = fcmp olt <4 x float> %171, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = fmul <4 x float> %171, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %175 = bitcast <4 x i32> %173 to <4 x float>
  %176 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %171, <4 x float> %174, <4 x float> %175) #6
  %177 = bitcast <4 x float> %176 to <4 x i32>
  %178 = lshr <4 x i32> %177, <i32 23, i32 23, i32 23, i32 23>
  %179 = bitcast <4 x i32> %173 to <16 x i8>
  %180 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %179) #6
  %181 = and <4 x i32> %178, <i32 255, i32 255, i32 255, i32 255>
  %182 = bitcast <16 x i8> %180 to <4 x i32>
  %183 = sub <4 x i32> %181, %182
  %184 = shl <4 x i32> %183, <i32 23, i32 23, i32 23, i32 23>
  %185 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %184
  %186 = bitcast <4 x i32> %185 to <4 x float>
  %187 = fmul <4 x float> %164, %186
  %188 = fmul <4 x float> %170, %186
  %189 = fadd <4 x float> %187, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %190 = fsub <4 x float> %189, %187
  %191 = fsub <4 x float> %189, %190
  %192 = fsub <4 x float> %187, %191
  %193 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %190
  %194 = fadd <4 x float> %193, %192
  %195 = fadd <4 x float> %194, %188
  %196 = fadd <4 x float> %187, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %197 = fsub <4 x float> %196, %187
  %198 = fsub <4 x float> %196, %197
  %199 = fsub <4 x float> %187, %198
  %200 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %197
  %201 = fadd <4 x float> %200, %199
  %202 = fadd <4 x float> %201, %188
  %203 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %196
  %204 = bitcast <4 x float> %196 to <2 x i64>
  %205 = and <2 x i64> %204, <i64 -17587891081216, i64 -17587891081216>
  %206 = bitcast <2 x i64> %205 to <4 x float>
  %207 = fsub <4 x float> %196, %206
  %208 = bitcast <4 x float> %203 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -17587891081216, i64 -17587891081216>
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fsub <4 x float> %203, %210
  %212 = bitcast <4 x float> %189 to <2 x i64>
  %213 = and <2 x i64> %212, <i64 -17587891081216, i64 -17587891081216>
  %214 = bitcast <2 x i64> %213 to <4 x float>
  %215 = fsub <4 x float> %189, %214
  %216 = fmul <4 x float> %189, %203
  %217 = fmul <4 x float> %206, %210
  %218 = fadd <4 x float> %217, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %219 = fmul <4 x float> %211, %206
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %207, %210
  %222 = fadd <4 x float> %221, %220
  %223 = fmul <4 x float> %207, %211
  %224 = fadd <4 x float> %223, %222
  %225 = bitcast <4 x float> %224 to <2 x i64>
  %226 = xor <2 x i64> %225, <i64 -9223372034707292160, i64 -9223372034707292160>
  %227 = bitcast <2 x i64> %226 to <4 x float>
  %228 = bitcast <4 x float> %216 to <2 x i64>
  %229 = xor <2 x i64> %228, <i64 -9223372034707292160, i64 -9223372034707292160>
  %230 = bitcast <2 x i64> %229 to <4 x float>
  %231 = fmul <4 x float> %214, %210
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %211, %214
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %215, %210
  %236 = fadd <4 x float> %235, %234
  %237 = fmul <4 x float> %215, %211
  %238 = fadd <4 x float> %237, %236
  %239 = fmul <4 x float> %216, %227
  %240 = fadd <4 x float> %238, %239
  %241 = fmul <4 x float> %216, %202
  %242 = fsub <4 x float> %195, %241
  %243 = fmul <4 x float> %203, %242
  %244 = fadd <4 x float> %243, %240
  %245 = and <2 x i64> %228, <i64 -17587891081216, i64 -17587891081216>
  %246 = bitcast <2 x i64> %245 to <4 x float>
  %247 = fsub <4 x float> %216, %246
  %248 = fmul <4 x float> %216, %216
  %249 = bitcast <4 x float> %248 to <2 x i64>
  %250 = xor <2 x i64> %249, <i64 -9223372034707292160, i64 -9223372034707292160>
  %251 = bitcast <2 x i64> %250 to <4 x float>
  %252 = fmul <4 x float> %246, %246
  %253 = fadd <4 x float> %252, %251
  %254 = fadd <4 x float> %246, %246
  %255 = fmul <4 x float> %254, %247
  %256 = fadd <4 x float> %255, %253
  %257 = fmul <4 x float> %247, %247
  %258 = fadd <4 x float> %257, %256
  %259 = fadd <4 x float> %244, %244
  %260 = fmul <4 x float> %216, %259
  %261 = fadd <4 x float> %258, %260
  %262 = fmul <4 x float> %248, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %263 = fadd <4 x float> %262, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %264 = fmul <4 x float> %248, %263
  %265 = fadd <4 x float> %264, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %266 = fmul <4 x float> %248, %265
  %267 = fadd <4 x float> %266, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %268 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %183) #6
  %269 = bitcast <4 x float> %268 to <2 x i64>
  %270 = and <2 x i64> %269, <i64 -17587891081216, i64 -17587891081216>
  %271 = bitcast <2 x i64> %270 to <4 x float>
  %272 = fsub <4 x float> %268, %271
  %273 = fmul <4 x float> %268, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %274 = bitcast <4 x float> %273 to <2 x i64>
  %275 = xor <2 x i64> %274, <i64 -9223372034707292160, i64 -9223372034707292160>
  %276 = bitcast <2 x i64> %275 to <4 x float>
  %277 = fmul <4 x float> %271, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %278 = fadd <4 x float> %277, %276
  %279 = fmul <4 x float> %271, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %272, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %272, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %284 = fadd <4 x float> %283, %282
  %285 = fmul <4 x float> %268, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %286 = fadd <4 x float> %285, %284
  %287 = fmul <4 x float> %216, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %288 = fmul <4 x float> %244, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %289 = fadd <4 x float> %273, %287
  %290 = fsub <4 x float> %273, %289
  %291 = fadd <4 x float> %287, %290
  %292 = fadd <4 x float> %286, %291
  %293 = fadd <4 x float> %292, %288
  %294 = and <2 x i64> %249, <i64 -17587891081216, i64 -17587891081216>
  %295 = bitcast <2 x i64> %294 to <4 x float>
  %296 = fsub <4 x float> %248, %295
  %297 = fmul <4 x float> %216, %248
  %298 = bitcast <4 x float> %297 to <2 x i64>
  %299 = xor <2 x i64> %298, <i64 -9223372034707292160, i64 -9223372034707292160>
  %300 = bitcast <2 x i64> %299 to <4 x float>
  %301 = fmul <4 x float> %246, %295
  %302 = fadd <4 x float> %301, %300
  %303 = fmul <4 x float> %296, %246
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %247, %295
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %247, %296
  %308 = fadd <4 x float> %307, %306
  %309 = fmul <4 x float> %248, %244
  %310 = fadd <4 x float> %308, %309
  %311 = fmul <4 x float> %216, %261
  %312 = fadd <4 x float> %310, %311
  %313 = and <2 x i64> %298, <i64 -17587891081216, i64 -17587891081216>
  %314 = bitcast <2 x i64> %313 to <4 x float>
  %315 = fsub <4 x float> %297, %314
  %316 = bitcast <4 x float> %267 to <2 x i64>
  %317 = and <2 x i64> %316, <i64 -17587891081216, i64 -17587891081216>
  %318 = bitcast <2 x i64> %317 to <4 x float>
  %319 = fsub <4 x float> %267, %318
  %320 = fmul <4 x float> %297, %267
  %321 = bitcast <4 x float> %320 to <2 x i64>
  %322 = xor <2 x i64> %321, <i64 -9223372034707292160, i64 -9223372034707292160>
  %323 = bitcast <2 x i64> %322 to <4 x float>
  %324 = fmul <4 x float> %314, %318
  %325 = fadd <4 x float> %324, %323
  %326 = fmul <4 x float> %315, %318
  %327 = fadd <4 x float> %326, %325
  %328 = fmul <4 x float> %319, %314
  %329 = fadd <4 x float> %328, %327
  %330 = fmul <4 x float> %315, %319
  %331 = fadd <4 x float> %330, %329
  %332 = fmul <4 x float> %267, %312
  %333 = fadd <4 x float> %331, %332
  %334 = fadd <4 x float> %289, %320
  %335 = fsub <4 x float> %289, %334
  %336 = fadd <4 x float> %320, %335
  %337 = fadd <4 x float> %336, %293
  %338 = fadd <4 x float> %337, %333
  %339 = fadd <4 x float> %334, %338
  %340 = bitcast <4 x float> %0 to <2 x i64>
  %341 = and <2 x i64> %340, <i64 9223372034707292159, i64 9223372034707292159>
  %342 = bitcast <2 x i64> %341 to <4 x float>
  %343 = fcmp ogt <4 x float> %342, <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>
  %344 = fcmp uno <4 x float> %339, zeroinitializer
  %345 = or <4 x i1> %344, %343
  %346 = sext <4 x i1> %345 to <4 x i32>
  %347 = bitcast <4 x i32> %346 to <4 x float>
  %348 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %339, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %347) #6
  %349 = fcmp oeq <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %350 = sext <4 x i1> %349 to <4 x i32>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = bitcast <4 x float> %348 to <2 x i64>
  %353 = xor <2 x i64> %351, <i64 -1, i64 -1>
  %354 = and <2 x i64> %352, %353
  %355 = fcmp olt <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %356 = fcmp uno <4 x float> %0, zeroinitializer
  %357 = or <4 x i1> %356, %355
  %358 = sext <4 x i1> %357 to <4 x i32>
  %359 = bitcast <4 x i32> %358 to <2 x i64>
  %360 = or <2 x i64> %354, %359
  %361 = bitcast <2 x i64> %360 to <4 x float>
  ret <4 x float> %361
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_atanhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <4 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <4 x float> %5, %6
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <4 x float> %4, %6
  %10 = fadd <4 x float> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <4 x float> %13, %14
  %16 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <4 x float> %12, %14
  %18 = fadd <4 x float> %17, %16
  %19 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = bitcast <4 x float> %13 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = fsub <4 x float> %13, %22
  %24 = bitcast <4 x float> %19 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %19, %26
  %28 = bitcast <4 x float> %5 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %5, %30
  %32 = fmul <4 x float> %5, %19
  %33 = fmul <4 x float> %22, %26
  %34 = fadd <4 x float> %33, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %35 = fmul <4 x float> %27, %22
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %23, %26
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %23, %27
  %40 = fadd <4 x float> %39, %38
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = xor <2 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = bitcast <4 x float> %32 to <2 x i64>
  %45 = xor <2 x i64> %44, <i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = fmul <4 x float> %30, %26
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %27, %30
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %31, %26
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %31, %27
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %32, %43
  %56 = fadd <4 x float> %54, %55
  %57 = fmul <4 x float> %32, %18
  %58 = fsub <4 x float> %10, %57
  %59 = fmul <4 x float> %19, %58
  %60 = fadd <4 x float> %59, %56
  %61 = fmul <4 x float> %32, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %62 = fcmp olt <4 x float> %61, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = fmul <4 x float> %61, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %65 = bitcast <4 x i32> %63 to <4 x float>
  %66 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %61, <4 x float> %64, <4 x float> %65) #6
  %67 = bitcast <4 x float> %66 to <4 x i32>
  %68 = lshr <4 x i32> %67, <i32 23, i32 23, i32 23, i32 23>
  %69 = bitcast <4 x i32> %63 to <16 x i8>
  %70 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %69) #6
  %71 = and <4 x i32> %68, <i32 255, i32 255, i32 255, i32 255>
  %72 = bitcast <16 x i8> %70 to <4 x i32>
  %73 = sub <4 x i32> %71, %72
  %74 = shl <4 x i32> %73, <i32 23, i32 23, i32 23, i32 23>
  %75 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %74
  %76 = bitcast <4 x i32> %75 to <4 x float>
  %77 = fmul <4 x float> %32, %76
  %78 = fmul <4 x float> %60, %76
  %79 = fadd <4 x float> %77, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %80 = fsub <4 x float> %79, %77
  %81 = fsub <4 x float> %79, %80
  %82 = fsub <4 x float> %77, %81
  %83 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %80
  %84 = fadd <4 x float> %83, %82
  %85 = fadd <4 x float> %78, %84
  %86 = fadd <4 x float> %77, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %87 = fsub <4 x float> %86, %77
  %88 = fsub <4 x float> %86, %87
  %89 = fsub <4 x float> %77, %88
  %90 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %87
  %91 = fadd <4 x float> %90, %89
  %92 = fadd <4 x float> %78, %91
  %93 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %86
  %94 = bitcast <4 x float> %86 to <2 x i64>
  %95 = and <2 x i64> %94, <i64 -17587891081216, i64 -17587891081216>
  %96 = bitcast <2 x i64> %95 to <4 x float>
  %97 = fsub <4 x float> %86, %96
  %98 = bitcast <4 x float> %93 to <2 x i64>
  %99 = and <2 x i64> %98, <i64 -17587891081216, i64 -17587891081216>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fsub <4 x float> %93, %100
  %102 = bitcast <4 x float> %79 to <2 x i64>
  %103 = and <2 x i64> %102, <i64 -17587891081216, i64 -17587891081216>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fsub <4 x float> %79, %104
  %106 = fmul <4 x float> %79, %93
  %107 = fmul <4 x float> %96, %100
  %108 = fadd <4 x float> %107, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %109 = fmul <4 x float> %101, %96
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %97, %100
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %97, %101
  %114 = fadd <4 x float> %113, %112
  %115 = bitcast <4 x float> %114 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372034707292160, i64 -9223372034707292160>
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = bitcast <4 x float> %106 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %104, %100
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %101, %104
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %105, %100
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %105, %101
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %106, %117
  %130 = fadd <4 x float> %128, %129
  %131 = fmul <4 x float> %106, %92
  %132 = fsub <4 x float> %85, %131
  %133 = fmul <4 x float> %93, %132
  %134 = fadd <4 x float> %133, %130
  %135 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %136 = bitcast <2 x i64> %135 to <4 x float>
  %137 = fsub <4 x float> %106, %136
  %138 = fmul <4 x float> %106, %106
  %139 = bitcast <4 x float> %138 to <2 x i64>
  %140 = xor <2 x i64> %139, <i64 -9223372034707292160, i64 -9223372034707292160>
  %141 = bitcast <2 x i64> %140 to <4 x float>
  %142 = fmul <4 x float> %136, %136
  %143 = fadd <4 x float> %142, %141
  %144 = fadd <4 x float> %136, %136
  %145 = fmul <4 x float> %144, %137
  %146 = fadd <4 x float> %145, %143
  %147 = fmul <4 x float> %137, %137
  %148 = fadd <4 x float> %147, %146
  %149 = fadd <4 x float> %134, %134
  %150 = fmul <4 x float> %106, %149
  %151 = fadd <4 x float> %148, %150
  %152 = fmul <4 x float> %138, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %153 = fadd <4 x float> %152, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %154 = fmul <4 x float> %138, %153
  %155 = fadd <4 x float> %154, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %156 = fmul <4 x float> %138, %155
  %157 = fadd <4 x float> %156, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %158 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %73) #6
  %159 = bitcast <4 x float> %158 to <2 x i64>
  %160 = and <2 x i64> %159, <i64 -17587891081216, i64 -17587891081216>
  %161 = bitcast <2 x i64> %160 to <4 x float>
  %162 = fsub <4 x float> %158, %161
  %163 = fmul <4 x float> %158, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %164 = bitcast <4 x float> %163 to <2 x i64>
  %165 = xor <2 x i64> %164, <i64 -9223372034707292160, i64 -9223372034707292160>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fmul <4 x float> %161, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %168 = fadd <4 x float> %167, %166
  %169 = fmul <4 x float> %161, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %170 = fadd <4 x float> %169, %168
  %171 = fmul <4 x float> %162, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %172 = fadd <4 x float> %171, %170
  %173 = fmul <4 x float> %162, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %174 = fadd <4 x float> %173, %172
  %175 = fmul <4 x float> %158, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %176 = fadd <4 x float> %175, %174
  %177 = fmul <4 x float> %106, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %178 = fmul <4 x float> %134, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %179 = fadd <4 x float> %163, %177
  %180 = fsub <4 x float> %163, %179
  %181 = fadd <4 x float> %177, %180
  %182 = fadd <4 x float> %176, %181
  %183 = fadd <4 x float> %182, %178
  %184 = and <2 x i64> %139, <i64 -17587891081216, i64 -17587891081216>
  %185 = bitcast <2 x i64> %184 to <4 x float>
  %186 = fsub <4 x float> %138, %185
  %187 = fmul <4 x float> %106, %138
  %188 = bitcast <4 x float> %187 to <2 x i64>
  %189 = xor <2 x i64> %188, <i64 -9223372034707292160, i64 -9223372034707292160>
  %190 = bitcast <2 x i64> %189 to <4 x float>
  %191 = fmul <4 x float> %136, %185
  %192 = fadd <4 x float> %191, %190
  %193 = fmul <4 x float> %186, %136
  %194 = fadd <4 x float> %193, %192
  %195 = fmul <4 x float> %137, %185
  %196 = fadd <4 x float> %195, %194
  %197 = fmul <4 x float> %137, %186
  %198 = fadd <4 x float> %197, %196
  %199 = fmul <4 x float> %138, %134
  %200 = fadd <4 x float> %198, %199
  %201 = fmul <4 x float> %106, %151
  %202 = fadd <4 x float> %200, %201
  %203 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %204 = bitcast <2 x i64> %203 to <4 x float>
  %205 = fsub <4 x float> %187, %204
  %206 = bitcast <4 x float> %157 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -17587891081216, i64 -17587891081216>
  %208 = bitcast <2 x i64> %207 to <4 x float>
  %209 = fsub <4 x float> %157, %208
  %210 = fmul <4 x float> %187, %157
  %211 = bitcast <4 x float> %210 to <2 x i64>
  %212 = xor <2 x i64> %211, <i64 -9223372034707292160, i64 -9223372034707292160>
  %213 = bitcast <2 x i64> %212 to <4 x float>
  %214 = fmul <4 x float> %204, %208
  %215 = fadd <4 x float> %214, %213
  %216 = fmul <4 x float> %205, %208
  %217 = fadd <4 x float> %216, %215
  %218 = fmul <4 x float> %209, %204
  %219 = fadd <4 x float> %218, %217
  %220 = fmul <4 x float> %205, %209
  %221 = fadd <4 x float> %220, %219
  %222 = fmul <4 x float> %157, %202
  %223 = fadd <4 x float> %221, %222
  %224 = fadd <4 x float> %179, %210
  %225 = fsub <4 x float> %179, %224
  %226 = fadd <4 x float> %210, %225
  %227 = fadd <4 x float> %226, %183
  %228 = fadd <4 x float> %227, %223
  %229 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %230 = sext <4 x i1> %229 to <4 x i32>
  %231 = bitcast <4 x i32> %230 to <2 x i64>
  %232 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %233 = sext <4 x i1> %232 to <4 x i32>
  %234 = fadd <4 x float> %224, %228
  %235 = fmul <4 x float> %234, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %236 = bitcast <4 x i32> %233 to <4 x float>
  %237 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %235, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %236) #6
  %238 = bitcast <4 x float> %237 to <2 x i64>
  %239 = or <2 x i64> %238, %231
  %240 = bitcast <2 x i64> %239 to <4 x float>
  %241 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %242 = fcmp uno <4 x float> %240, zeroinitializer
  %243 = or <4 x i1> %242, %241
  %244 = sext <4 x i1> %243 to <4 x i32>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = or <2 x i64> %239, %245
  %247 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %248 = xor <2 x i64> %246, %247
  %249 = fcmp uno <4 x float> %0, zeroinitializer
  %250 = sext <4 x i1> %249 to <4 x i32>
  %251 = bitcast <4 x i32> %250 to <2 x i64>
  %252 = or <2 x i64> %248, %251
  %253 = bitcast <2 x i64> %252 to <4 x float>
  ret <4 x float> %253
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp2f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = fsub <4 x float> %0, %2
  %5 = fmul <4 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <4 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <4 x float> %4, %6
  %8 = fadd <4 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <4 x float> %4, %8
  %10 = fadd <4 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <4 x float> %4, %10
  %12 = fadd <4 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <4 x float> %4, %12
  %14 = fadd <4 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <2 x i64> %16 to <4 x float>
  %18 = fsub <4 x float> %14, %17
  %19 = bitcast <4 x float> %4 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %4, %21
  %23 = fmul <4 x float> %4, %14
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fmul <4 x float> %21, %17
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %18, %21
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %22, %17
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %22, %18
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %23, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %37 = fadd <4 x float> %23, %36
  %38 = fadd <4 x float> %37, %34
  %39 = fadd <4 x float> %35, %38
  %40 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %41 = shl <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = add <4 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = fmul <4 x float> %39, %43
  %45 = sub <4 x i32> %3, %40
  %46 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <4 x i32> %47 to <4 x float>
  %49 = fmul <4 x float> %44, %48
  %50 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %49, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %52) #6
  %54 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = bitcast <4 x float> %53 to <2 x i64>
  %58 = xor <2 x i64> %56, <i64 -1, i64 -1>
  %59 = and <2 x i64> %57, %58
  %60 = bitcast <2 x i64> %59 to <4 x float>
  ret <4 x float> %60
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp2f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = fsub <4 x float> %0, %2
  %5 = fmul <4 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <4 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <4 x float> %4, %6
  %8 = fadd <4 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <4 x float> %4, %8
  %10 = fadd <4 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <4 x float> %4, %10
  %12 = fadd <4 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <4 x float> %4, %12
  %14 = fadd <4 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = fmul <4 x float> %4, %14
  %16 = fadd <4 x float> %15, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %20
  %22 = sub <4 x i32> %3, %17
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %21, %25
  %27 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %29) #6
  %31 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = bitcast <4 x float> %30 to <2 x i64>
  %35 = xor <2 x i64> %33, <i64 -1, i64 -1>
  %36 = and <2 x i64> %34, %35
  %37 = bitcast <2 x i64> %36 to <4 x float>
  ret <4 x float> %37
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp10f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fmul <4 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %10 = fadd <4 x float> %9, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %19 = fmul <4 x float> %8, %18
  %20 = fadd <4 x float> %19, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %21 = fsub <4 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %20
  %22 = fadd <4 x float> %19, %21
  %23 = fadd <4 x float> %22, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %24 = bitcast <4 x float> %20 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %20, %26
  %28 = bitcast <4 x float> %8 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %8, %30
  %32 = fmul <4 x float> %8, %20
  %33 = bitcast <4 x float> %32 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fmul <4 x float> %30, %26
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %27, %30
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %31, %26
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %27
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %8, %23
  %45 = fadd <4 x float> %44, %43
  %46 = fadd <4 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46
  %48 = fadd <4 x float> %32, %47
  %49 = fadd <4 x float> %48, %45
  %50 = fadd <4 x float> %46, %49
  %51 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %52 = shl <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = add <4 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %50, %54
  %56 = sub <4 x i32> %4, %51
  %57 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %58 = add <4 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = fmul <4 x float> %55, %59
  %61 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <4 x float>
  %64 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %60, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %63) #6
  %65 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %66 = sext <4 x i1> %65 to <4 x i32>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = bitcast <4 x float> %64 to <2 x i64>
  %69 = xor <2 x i64> %67, <i64 -1, i64 -1>
  %70 = and <2 x i64> %68, %69
  %71 = bitcast <2 x i64> %70 to <4 x float>
  ret <4 x float> %71
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_exp10f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fmul <4 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %10 = fadd <4 x float> %9, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %19 = fmul <4 x float> %8, %18
  %20 = fadd <4 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %20, %24
  %26 = sub <4 x i32> %4, %21
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %30, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %33) #6
  %35 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = bitcast <4 x float> %34 to <2 x i64>
  %39 = xor <2 x i64> %37, <i64 -1, i64 -1>
  %40 = and <2 x i64> %38, %39
  %41 = bitcast <2 x i64> %40 to <4 x float>
  ret <4 x float> %41
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_expm1f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, zeroinitializer
  %3 = fmul <4 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %4) #6
  %6 = fmul <4 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fsub <4 x float> %7, %0
  %9 = fsub <4 x float> %7, %8
  %10 = fsub <4 x float> %0, %9
  %11 = fsub <4 x float> %6, %8
  %12 = fadd <4 x float> %11, %10
  %13 = fadd <4 x float> %12, zeroinitializer
  %14 = fmul <4 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <4 x float> %14, %7
  %16 = fsub <4 x float> %15, %7
  %17 = fsub <4 x float> %15, %16
  %18 = fsub <4 x float> %7, %17
  %19 = fsub <4 x float> %14, %16
  %20 = fadd <4 x float> %19, %18
  %21 = fadd <4 x float> %20, %13
  %22 = fmul <4 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <4 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <4 x float> %15, %23
  %25 = fadd <4 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <4 x float> %15, %25
  %27 = fadd <4 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <4 x float> %15 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %15, %30
  %32 = bitcast <4 x float> %27 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = fsub <4 x float> %27, %34
  %36 = fmul <4 x float> %15, %27
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fmul <4 x float> %30, %34
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %34
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %35, %30
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %31, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %21, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fadd <4 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <4 x float> %50, %36
  %52 = fsub <4 x float> %50, %51
  %53 = fsub <4 x float> %36, %52
  %54 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %55, %49
  %57 = bitcast <4 x float> %50 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %50, %59
  %61 = fmul <4 x float> %15, %50
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %31, %59
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %60, %30
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %15, %56
  %74 = fadd <4 x float> %72, %73
  %75 = fmul <4 x float> %21, %50
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <4 x float> %77, %61
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %61, %79
  %81 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fmul <4 x float> %15, %15
  %85 = bitcast <4 x float> %84 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %30, %30
  %89 = fadd <4 x float> %88, %87
  %90 = fadd <4 x float> %30, %30
  %91 = fmul <4 x float> %90, %31
  %92 = fadd <4 x float> %91, %89
  %93 = fmul <4 x float> %31, %31
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %21, %21
  %96 = fmul <4 x float> %15, %95
  %97 = fadd <4 x float> %96, %94
  %98 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %84, %99
  %101 = bitcast <4 x float> %77 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fsub <4 x float> %77, %103
  %105 = fmul <4 x float> %84, %77
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fmul <4 x float> %99, %103
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %100, %103
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %104, %99
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %100, %104
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %84, %83
  %118 = fadd <4 x float> %116, %117
  %119 = fmul <4 x float> %97, %77
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %15, %105
  %122 = fsub <4 x float> %121, %15
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %15, %123
  %125 = fsub <4 x float> %105, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <4 x float> %121, %130
  %132 = fadd <4 x float> %131, %128
  %133 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %134 = shl <4 x i32> %133, <i32 23, i32 23, i32 23, i32 23>
  %135 = add <4 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = fmul <4 x float> %129, %136
  %138 = sub <4 x i32> %4, %133
  %139 = shl <4 x i32> %138, <i32 23, i32 23, i32 23, i32 23>
  %140 = add <4 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <4 x i32> %140 to <4 x float>
  %142 = fmul <4 x float> %137, %141
  %143 = fmul <4 x float> %132, %136
  %144 = fmul <4 x float> %143, %141
  %145 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %146 = sext <4 x i1> %145 to <4 x i32>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = bitcast <4 x float> %142 to <2 x i64>
  %149 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %150 = and <2 x i64> %148, %149
  %151 = bitcast <4 x float> %144 to <2 x i64>
  %152 = and <2 x i64> %151, %149
  %153 = bitcast <2 x i64> %150 to <4 x float>
  %154 = bitcast <2 x i64> %152 to <4 x float>
  %155 = fadd <4 x float> %153, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %156 = fsub <4 x float> %155, %153
  %157 = fsub <4 x float> %155, %156
  %158 = fsub <4 x float> %153, %157
  %159 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %156
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %160, %154
  %162 = fadd <4 x float> %155, %161
  %163 = fcmp ogt <4 x float> %0, <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <4 x float>
  %166 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %162, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %165) #6
  %167 = fcmp olt <4 x float> %0, <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>
  %168 = sext <4 x i1> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <4 x float>
  %170 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %166, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %169) #6
  %171 = bitcast <4 x float> %0 to <4 x i32>
  %172 = icmp eq <4 x i32> %171, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <4 x float>
  %175 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %170, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %174) #6
  ret <4 x float> %175
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log10f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fsub <4 x float> %22, %23
  %25 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %24
  %26 = fsub <4 x float> %16, %23
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fadd <4 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %32 = fsub <4 x float> %16, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %35 = bitcast <4 x float> %28 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %28, %37
  %39 = bitcast <4 x float> %34 to <2 x i64>
  %40 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = fsub <4 x float> %34, %41
  %43 = bitcast <4 x float> %22 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fsub <4 x float> %22, %45
  %47 = fmul <4 x float> %22, %34
  %48 = fmul <4 x float> %37, %41
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fmul <4 x float> %42, %37
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %38, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %38, %42
  %55 = fadd <4 x float> %54, %53
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = bitcast <4 x float> %47 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %45, %41
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %42, %45
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %46, %41
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %46, %42
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %47, %58
  %71 = fadd <4 x float> %69, %70
  %72 = fmul <4 x float> %47, %33
  %73 = fsub <4 x float> %27, %72
  %74 = fmul <4 x float> %34, %73
  %75 = fadd <4 x float> %74, %71
  %76 = fmul <4 x float> %47, %47
  %77 = fmul <4 x float> %76, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %78 = fadd <4 x float> %77, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %79 = fmul <4 x float> %76, %78
  %80 = fadd <4 x float> %79, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %81 = bitcast <16 x i8> %21 to <4 x i32>
  %82 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %81) #6
  %83 = bitcast <4 x float> %82 to <2 x i64>
  %84 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fsub <4 x float> %82, %85
  %87 = fmul <4 x float> %82, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %85, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %85, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %86, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %86, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %82, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %100 = fadd <4 x float> %99, %98
  %101 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %47, %102
  %104 = fmul <4 x float> %47, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %105 = bitcast <4 x float> %104 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fmul <4 x float> %102, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %109 = fadd <4 x float> %108, %107
  %110 = fmul <4 x float> %103, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %111 = fadd <4 x float> %110, %109
  %112 = fmul <4 x float> %102, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %47, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %75, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %119 = fadd <4 x float> %117, %118
  %120 = fadd <4 x float> %87, %104
  %121 = fsub <4 x float> %87, %120
  %122 = fadd <4 x float> %104, %121
  %123 = fadd <4 x float> %100, %122
  %124 = fadd <4 x float> %123, %119
  %125 = fmul <4 x float> %47, %76
  %126 = fmul <4 x float> %125, %80
  %127 = fadd <4 x float> %120, %126
  %128 = fsub <4 x float> %120, %127
  %129 = fadd <4 x float> %126, %128
  %130 = fadd <4 x float> %129, %124
  %131 = fadd <4 x float> %127, %130
  %132 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %133 = sext <4 x i1> %132 to <4 x i32>
  %134 = bitcast <4 x i32> %133 to <4 x float>
  %135 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %131, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %134) #6
  %136 = fcmp ult <4 x float> %6, zeroinitializer
  %137 = sext <4 x i1> %136 to <4 x i32>
  %138 = bitcast <4 x i32> %137 to <4 x float>
  %139 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %135, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %138) #6
  %140 = fcmp oeq <4 x float> %6, zeroinitializer
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <4 x float>
  %143 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %139, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %142) #6
  ret <4 x float> %143
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log2f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fsub <4 x float> %22, %23
  %25 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %24
  %26 = fsub <4 x float> %16, %23
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fadd <4 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %32 = fsub <4 x float> %16, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %35 = bitcast <4 x float> %28 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %28, %37
  %39 = bitcast <4 x float> %34 to <2 x i64>
  %40 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = fsub <4 x float> %34, %41
  %43 = bitcast <4 x float> %22 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fsub <4 x float> %22, %45
  %47 = fmul <4 x float> %22, %34
  %48 = fmul <4 x float> %37, %41
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fmul <4 x float> %42, %37
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %38, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %38, %42
  %55 = fadd <4 x float> %54, %53
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = bitcast <4 x float> %47 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %45, %41
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %42, %45
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %46, %41
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %46, %42
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %47, %58
  %71 = fadd <4 x float> %69, %70
  %72 = fmul <4 x float> %47, %33
  %73 = fsub <4 x float> %27, %72
  %74 = fmul <4 x float> %34, %73
  %75 = fadd <4 x float> %74, %71
  %76 = fmul <4 x float> %47, %47
  %77 = fmul <4 x float> %76, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %78 = fadd <4 x float> %77, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %79 = fmul <4 x float> %76, %78
  %80 = fadd <4 x float> %79, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %81 = bitcast <16 x i8> %21 to <4 x i32>
  %82 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %81) #6
  %83 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fsub <4 x float> %47, %84
  %86 = fmul <4 x float> %47, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = xor <2 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fmul <4 x float> %84, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %85, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %93 = fadd <4 x float> %92, %91
  %94 = fmul <4 x float> %84, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %85, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %97 = fadd <4 x float> %96, %95
  %98 = fmul <4 x float> %47, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %99 = fadd <4 x float> %98, %97
  %100 = fmul <4 x float> %75, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %101 = fadd <4 x float> %99, %100
  %102 = fadd <4 x float> %82, %86
  %103 = fsub <4 x float> %102, %82
  %104 = fsub <4 x float> %102, %103
  %105 = fsub <4 x float> %82, %104
  %106 = fsub <4 x float> %86, %103
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %107, %101
  %109 = fmul <4 x float> %47, %76
  %110 = fmul <4 x float> %109, %80
  %111 = fadd <4 x float> %102, %110
  %112 = fsub <4 x float> %111, %102
  %113 = fsub <4 x float> %111, %112
  %114 = fsub <4 x float> %102, %113
  %115 = fsub <4 x float> %110, %112
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %116, %108
  %118 = fadd <4 x float> %111, %117
  %119 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %118, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %121) #6
  %123 = fcmp ult <4 x float> %6, zeroinitializer
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %122, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %125) #6
  %127 = fcmp oeq <4 x float> %6, zeroinitializer
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = bitcast <4 x i32> %128 to <4 x float>
  %130 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %126, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %129) #6
  ret <4 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log2f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fdiv <4 x float> %22, %23
  %25 = fmul <4 x float> %24, %24
  %26 = fmul <4 x float> %25, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %27 = fadd <4 x float> %26, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %28 = fmul <4 x float> %25, %27
  %29 = fadd <4 x float> %28, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %30 = fmul <4 x float> %24, %25
  %31 = bitcast <16 x i8> %21 to <4 x i32>
  %32 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %31) #6
  %33 = fmul <4 x float> %24, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %30, %29
  %36 = fadd <4 x float> %34, %35
  %37 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <4 x float>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %36, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %39) #6
  %41 = fcmp ult <4 x float> %6, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %43) #6
  %45 = fcmp oeq <4 x float> %6, zeroinitializer
  %46 = sext <4 x i1> %45 to <4 x i32>
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %47) #6
  ret <4 x float> %48
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_log1pf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fcmp olt <4 x float> %2, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = fmul <4 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %5, <4 x float> %6) #6
  %8 = fmul <4 x float> %7, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = and <4 x i32> %10, <i32 255, i32 255, i32 255, i32 255>
  %12 = add nsw <4 x i32> %11, <i32 -127, i32 -127, i32 -127, i32 -127>
  %13 = shl nuw nsw <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %14 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %13
  %15 = bitcast <4 x i32> %14 to <4 x float>
  %16 = fadd <4 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %17 = fmul <4 x float> %15, %0
  %18 = fadd <4 x float> %17, %16
  %19 = add nsw <4 x i32> %11, <i32 -191, i32 -191, i32 -191, i32 -191>
  %20 = bitcast <4 x i32> %12 to <16 x i8>
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = bitcast <4 x i32> %4 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> %21, <16 x i8> %22) #6
  %24 = bitcast <16 x i8> %23 to <4 x i32>
  %25 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %24) #6
  %26 = bitcast <4 x float> %25 to <2 x i64>
  %27 = and <2 x i64> %26, <i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <2 x i64> %27 to <4 x float>
  %29 = fsub <4 x float> %25, %28
  %30 = fmul <4 x float> %25, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %31 = bitcast <4 x float> %30 to <2 x i64>
  %32 = xor <2 x i64> %31, <i64 -9223372034707292160, i64 -9223372034707292160>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fmul <4 x float> %28, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %28, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %29, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %29, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %25, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %43 = fadd <4 x float> %42, %41
  %44 = fadd <4 x float> %18, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %45 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %44
  %46 = fadd <4 x float> %18, %45
  %47 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %44
  %48 = bitcast <4 x float> %44 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %44, %50
  %52 = bitcast <4 x float> %47 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %47, %54
  %56 = bitcast <4 x float> %18 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %18, %58
  %60 = fmul <4 x float> %18, %47
  %61 = fmul <4 x float> %50, %54
  %62 = fadd <4 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <4 x float> %55, %50
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %51, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %51, %55
  %68 = fadd <4 x float> %67, %66
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = bitcast <4 x float> %60 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %58, %54
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %55, %58
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %59, %54
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %59, %55
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %60, %71
  %84 = fadd <4 x float> %82, %83
  %85 = fmul <4 x float> %60, %46
  %86 = fsub <4 x float> zeroinitializer, %85
  %87 = fmul <4 x float> %47, %86
  %88 = fadd <4 x float> %87, %84
  %89 = fmul <4 x float> %60, %60
  %90 = fmul <4 x float> %89, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %91 = fadd <4 x float> %90, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %92 = fmul <4 x float> %89, %91
  %93 = fadd <4 x float> %92, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %94 = fmul <4 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <4 x float> %88, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <4 x float> %30, %94
  %97 = fsub <4 x float> %30, %96
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %43, %98
  %100 = fadd <4 x float> %99, %95
  %101 = fmul <4 x float> %60, %89
  %102 = fmul <4 x float> %101, %93
  %103 = fadd <4 x float> %96, %102
  %104 = fsub <4 x float> %96, %103
  %105 = fadd <4 x float> %102, %104
  %106 = fadd <4 x float> %105, %100
  %107 = fadd <4 x float> %103, %106
  %108 = fcmp ogt <4 x float> %0, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = bitcast <4 x i32> %109 to <4 x float>
  %111 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %107, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %110) #6
  %112 = fcmp olt <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = bitcast <4 x float> %111 to <2 x i64>
  %116 = or <2 x i64> %115, %114
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fcmp oeq <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %119 = sext <4 x i1> %118 to <4 x i32>
  %120 = bitcast <4 x i32> %119 to <4 x float>
  %121 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %117, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %120) #6
  %122 = bitcast <4 x float> %0 to <4 x i32>
  %123 = icmp eq <4 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %121, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %125) #6
  ret <4 x float> %126
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_fabsf4_sse4(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  ret <4 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_copysignf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <4 x float>
  ret <4 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmaxf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %0, <4 x float> %1) #6
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %0, <4 x float> %6) #6
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fminf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %0, <4 x float> %1) #6
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %0, <4 x float> %6) #6
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fdimf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fsub <4 x float> %0, %1
  %4 = fcmp olt <4 x float> %3, zeroinitializer
  %5 = fcmp oeq <4 x float> %0, %1
  %6 = or <4 x i1> %4, %5
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %3, <4 x float> zeroinitializer, <4 x float> %8) #6
  ret <4 x float> %9
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_truncf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 11) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_floorf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp olt <4 x float> %4, zeroinitializer
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %0 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %14 = fcmp oge <4 x float> %12, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %15 = or <4 x i1> %14, %13
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = fsub <4 x float> %0, %9
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %0, <4 x float> %23) #6
  ret <4 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_ceilf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp ole <4 x float> %4, zeroinitializer
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fadd <4 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %7, <4 x float> %4, <4 x float> %8) #6
  %10 = bitcast <4 x float> %0 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %14 = fcmp oge <4 x float> %12, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %15 = or <4 x i1> %14, %13
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = fsub <4 x float> %0, %9
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %0, <4 x float> %23) #6
  ret <4 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_roundf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %2, %4
  %6 = fcmp ole <4 x float> %2, zeroinitializer
  %7 = fcmp oeq <4 x float> %5, zeroinitializer
  %8 = and <4 x i1> %7, %6
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = fadd <4 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %11 = bitcast <4 x i32> %9 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %10, <4 x float> %11) #6
  %13 = fcmp olt <4 x float> %5, zeroinitializer
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = fadd <4 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = bitcast <4 x i32> %14 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %15, <4 x float> %16) #6
  %18 = fcmp oeq <4 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> zeroinitializer, <4 x float> %20) #6
  %22 = bitcast <4 x float> %0 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fcmp oeq <4 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = fcmp oge <4 x float> %24, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %27 = or <4 x i1> %26, %25
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = fsub <4 x float> %21, %17
  %30 = bitcast <4 x float> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 9223372034707292159, i64 9223372034707292159>
  %32 = and <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %33 = or <2 x i64> %31, %32
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = bitcast <4 x i32> %28 to <4 x float>
  %36 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %34, <4 x float> %0, <4 x float> %35) #6
  ret <4 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_rintf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmaf4_sse4(<4 x float>, <4 x float>, <4 x float>) local_unnamed_addr #0 {
  %4 = fmul <4 x float> %0, %1
  %5 = fadd <4 x float> %4, %2
  %6 = bitcast <4 x float> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %1, <4 x float> %14, <4 x float> %12) #6
  %16 = fmul <4 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %16, <4 x float> %12) #6
  %18 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <4 x float> %12) #6
  %19 = fcmp ogt <4 x float> %8, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %20 = sext <4 x i1> %19 to <4 x i32>
  %21 = fmul <4 x float> %13, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %22 = bitcast <4 x i32> %20 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %21, <4 x float> %22) #6
  %24 = fmul <4 x float> %15, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %25 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %24, <4 x float> %22) #6
  %26 = fmul <4 x float> %17, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %27 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %17, <4 x float> %26, <4 x float> %22) #6
  %28 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %18, <4 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <4 x float> %22) #6
  %29 = bitcast <4 x float> %23 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %23, %31
  %33 = bitcast <4 x float> %25 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fsub <4 x float> %25, %35
  %37 = fmul <4 x float> %23, %25
  %38 = bitcast <4 x float> %37 to <2 x i64>
  %39 = xor <2 x i64> %38, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fmul <4 x float> %31, %35
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %32, %35
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %36, %31
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %32, %36
  %48 = fadd <4 x float> %47, %46
  %49 = fadd <4 x float> %37, %27
  %50 = fsub <4 x float> %49, %37
  %51 = fsub <4 x float> %49, %50
  %52 = fsub <4 x float> %37, %51
  %53 = fsub <4 x float> %27, %50
  %54 = fadd <4 x float> %53, %52
  %55 = fadd <4 x float> %54, %48
  %56 = fcmp oeq <4 x float> %23, zeroinitializer
  %57 = fcmp oeq <4 x float> %25, zeroinitializer
  %58 = or <4 x i1> %57, %56
  %59 = sext <4 x i1> %58 to <4 x i32>
  %60 = fadd <4 x float> %49, %55
  %61 = bitcast <4 x i32> %59 to <4 x float>
  %62 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %60, <4 x float> %27, <4 x float> %61) #6
  %63 = bitcast <4 x float> %27 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fcmp oeq <4 x float> %65, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %67 = sext <4 x i1> %66 to <4 x i32>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = and <2 x i64> %29, <i64 9223372034707292159, i64 9223372034707292159>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = fcmp oeq <4 x float> %70, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %72 = and <2 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fcmp oeq <4 x float> %73, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %75 = fcmp uno <4 x float> %25, %23
  %76 = or <4 x i1> %75, %71
  %77 = or <4 x i1> %76, %74
  %78 = sext <4 x i1> %77 to <4 x i32>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %81 = and <2 x i64> %80, %68
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %27, <4 x float> %82) #6
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 9223372034707292159, i64 9223372034707292159>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fcmp oeq <4 x float> %86, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %88 = fcmp uno <4 x float> %83, zeroinitializer
  %89 = or <4 x i1> %87, %88
  %90 = sext <4 x i1> %89 to <4 x i32>
  %91 = fmul <4 x float> %28, %62
  %92 = bitcast <4 x i32> %90 to <4 x float>
  %93 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %91, <4 x float> %83, <4 x float> %92) #6
  ret <4 x float> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_u05sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, zeroinitializer
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = bitcast <4 x i32> %3 to <4 x float>
  %5 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %4) #6
  %6 = fcmp olt <4 x float> %5, <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %5, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %9 = bitcast <4 x i32> %7 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %8, <4 x float> %9) #6
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float> <float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000>, <4 x float> %9) #6
  %12 = fcmp ogt <4 x float> %10, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %13 = sext <4 x i1> %12 to <4 x i32>
  %14 = fmul <4 x float> %10, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %15 = bitcast <4 x i32> %13 to <4 x float>
  %16 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %14, <4 x float> %15) #6
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %11, <4 x float> <float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000>, <4 x float> %15) #6
  %18 = fadd <4 x float> %16, <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>
  %19 = bitcast <4 x float> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> <i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174>, %20
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = fmul <4 x float> %16, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = fmul <4 x float> %23, %22
  %25 = fmul <4 x float> %24, %22
  %26 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %25
  %27 = fmul <4 x float> %26, %22
  %28 = fmul <4 x float> %23, %27
  %29 = fmul <4 x float> %27, %28
  %30 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %29
  %31 = fmul <4 x float> %27, %30
  %32 = fmul <4 x float> %23, %31
  %33 = fmul <4 x float> %31, %32
  %34 = fsub <4 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %33
  %35 = fmul <4 x float> %31, %34
  %36 = fmul <4 x float> %16, %35
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %36, %39
  %41 = fmul <4 x float> %36, %36
  %42 = bitcast <4 x float> %41 to <2 x i64>
  %43 = xor <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = fmul <4 x float> %39, %39
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %40, %39
  %48 = fadd <4 x float> %47, %46
  %49 = fadd <4 x float> %47, %48
  %50 = fmul <4 x float> %40, %40
  %51 = fadd <4 x float> %50, %49
  %52 = fadd <4 x float> %16, %41
  %53 = fsub <4 x float> %52, %16
  %54 = fsub <4 x float> %52, %53
  %55 = fsub <4 x float> %16, %54
  %56 = fsub <4 x float> %41, %53
  %57 = fadd <4 x float> %56, %55
  %58 = fadd <4 x float> %57, %51
  %59 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %36
  %60 = bitcast <4 x float> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fsub <4 x float> %59, %62
  %64 = fmul <4 x float> %39, %62
  %65 = fadd <4 x float> %64, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %66 = fmul <4 x float> %63, %39
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %40, %62
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %40, %63
  %71 = fadd <4 x float> %70, %69
  %72 = xor <2 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fmul <4 x float> %71, %73
  %75 = bitcast <4 x float> %52 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %52, %77
  %79 = fmul <4 x float> %59, %52
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %62, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %78, %62
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %63, %77
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %63, %78
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %52, %74
  %92 = fadd <4 x float> %90, %91
  %93 = fmul <4 x float> %59, %58
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %79, %94
  %96 = fmul <4 x float> %17, %95
  %97 = fcmp oeq <4 x float> %16, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %98 = sext <4 x i1> %97 to <4 x i32>
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %96, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %99) #6
  %101 = fcmp oeq <4 x float> %16, zeroinitializer
  %102 = sext <4 x i1> %101 to <4 x i32>
  %103 = bitcast <4 x i32> %102 to <4 x float>
  %104 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %100, <4 x float> %16, <4 x float> %103) #6
  ret <4 x float> %104
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sqrtf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %0) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_hypotf4_u05sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fcmp olt <4 x float> %10, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = fmul <4 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %14 = bitcast <4 x i32> %12 to <4 x float>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %13, <4 x float> %14) #6
  %16 = fmul <4 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %16, <4 x float> %14) #6
  %18 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %19 = bitcast <4 x float> %17 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %17, %21
  %23 = bitcast <4 x float> %18 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 -17587891081216, i64 -17587891081216>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fsub <4 x float> %18, %25
  %27 = bitcast <4 x float> %15 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %15, %29
  %31 = fmul <4 x float> %15, %18
  %32 = fmul <4 x float> %21, %25
  %33 = fadd <4 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fmul <4 x float> %26, %21
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %22, %25
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %22, %26
  %39 = fadd <4 x float> %38, %37
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = bitcast <4 x float> %31 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fmul <4 x float> %29, %25
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %26, %29
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %30, %25
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %30, %26
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %31, %42
  %55 = fadd <4 x float> %53, %54
  %56 = fmul <4 x float> %31, zeroinitializer
  %57 = fsub <4 x float> zeroinitializer, %56
  %58 = fmul <4 x float> %18, %57
  %59 = fadd <4 x float> %58, %55
  %60 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> %31, %61
  %63 = fmul <4 x float> %31, %31
  %64 = bitcast <4 x float> %63 to <2 x i64>
  %65 = xor <2 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fmul <4 x float> %61, %61
  %68 = fadd <4 x float> %67, %66
  %69 = fadd <4 x float> %61, %61
  %70 = fmul <4 x float> %69, %62
  %71 = fadd <4 x float> %70, %68
  %72 = fmul <4 x float> %62, %62
  %73 = fadd <4 x float> %72, %71
  %74 = fadd <4 x float> %59, %59
  %75 = fmul <4 x float> %31, %74
  %76 = fadd <4 x float> %73, %75
  %77 = fadd <4 x float> %63, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <4 x float> %77, %63
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %63, %79
  %81 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fadd <4 x float> %77, %83
  %85 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %84) #6
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -17587891081216, i64 -17587891081216>
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = fsub <4 x float> %85, %88
  %90 = fmul <4 x float> %85, %85
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %88, %88
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %89, %88
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %96, %97
  %99 = fmul <4 x float> %89, %89
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %90, %77
  %102 = fsub <4 x float> %101, %77
  %103 = fsub <4 x float> %101, %102
  %104 = fsub <4 x float> %77, %103
  %105 = fsub <4 x float> %90, %102
  %106 = fadd <4 x float> %105, %104
  %107 = fadd <4 x float> %100, %83
  %108 = fadd <4 x float> %106, %107
  %109 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %85
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -17587891081216, i64 -17587891081216>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fsub <4 x float> %109, %112
  %114 = fmul <4 x float> %88, %112
  %115 = fadd <4 x float> %114, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %116 = fmul <4 x float> %113, %88
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %89, %112
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %89, %113
  %121 = fadd <4 x float> %120, %119
  %122 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <2 x i64> %122 to <4 x float>
  %124 = fmul <4 x float> %121, %123
  %125 = bitcast <4 x float> %101 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 -17587891081216, i64 -17587891081216>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fsub <4 x float> %101, %127
  %129 = fmul <4 x float> %109, %101
  %130 = bitcast <4 x float> %129 to <2 x i64>
  %131 = xor <2 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <2 x i64> %131 to <4 x float>
  %133 = fmul <4 x float> %112, %127
  %134 = fadd <4 x float> %133, %132
  %135 = fmul <4 x float> %128, %112
  %136 = fadd <4 x float> %135, %134
  %137 = fmul <4 x float> %113, %127
  %138 = fadd <4 x float> %137, %136
  %139 = fmul <4 x float> %113, %128
  %140 = fadd <4 x float> %139, %138
  %141 = fmul <4 x float> %101, %124
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %109, %108
  %144 = fadd <4 x float> %142, %143
  %145 = fmul <4 x float> %129, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %146 = fmul <4 x float> %144, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %147 = bitcast <4 x float> %145 to <2 x i64>
  %148 = and <2 x i64> %147, <i64 -17587891081216, i64 -17587891081216>
  %149 = bitcast <2 x i64> %148 to <4 x float>
  %150 = fsub <4 x float> %145, %149
  %151 = bitcast <4 x float> %10 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 -17587891081216, i64 -17587891081216>
  %153 = bitcast <2 x i64> %152 to <4 x float>
  %154 = fsub <4 x float> %10, %153
  %155 = fmul <4 x float> %10, %145
  %156 = bitcast <4 x float> %155 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372034707292160, i64 -9223372034707292160>
  %158 = bitcast <2 x i64> %157 to <4 x float>
  %159 = fmul <4 x float> %153, %149
  %160 = fadd <4 x float> %159, %158
  %161 = fmul <4 x float> %150, %153
  %162 = fadd <4 x float> %161, %160
  %163 = fmul <4 x float> %154, %149
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %154, %150
  %166 = fadd <4 x float> %165, %164
  %167 = fmul <4 x float> %10, %146
  %168 = fadd <4 x float> %166, %167
  %169 = fadd <4 x float> %155, %168
  %170 = fcmp uno <4 x float> %169, zeroinitializer
  %171 = sext <4 x i1> %170 to <4 x i32>
  %172 = bitcast <4 x i32> %171 to <4 x float>
  %173 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %169, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %172) #6
  %174 = fcmp oeq <4 x float> %9, zeroinitializer
  %175 = sext <4 x i1> %174 to <4 x i32>
  %176 = bitcast <4 x i32> %175 to <4 x float>
  %177 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %173, <4 x float> %10, <4 x float> %176) #6
  %178 = fcmp uno <4 x float> %8, %5
  %179 = sext <4 x i1> %178 to <4 x i32>
  %180 = bitcast <4 x i32> %179 to <4 x float>
  %181 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %177, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %180) #6
  %182 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %183 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %184 = or <4 x i1> %183, %182
  %185 = sext <4 x i1> %184 to <4 x i32>
  %186 = bitcast <4 x i32> %185 to <4 x float>
  %187 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %181, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %186) #6
  ret <4 x float> %187
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_hypotf4_u35sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fdiv <4 x float> %9, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %13) #6
  %15 = fmul <4 x float> %10, %14
  %16 = fcmp oeq <4 x float> %9, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %10, <4 x float> %18) #6
  %20 = fcmp uno <4 x float> %8, %5
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %19, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %22) #6
  %24 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %24
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %23, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %28) #6
  ret <4 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_nextafterf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x float> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = bitcast <4 x i32> %4 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = bitcast <4 x float> %9 to <4 x i32>
  %12 = ashr <4 x i32> %11, <i32 31, i32 31, i32 31, i32 31>
  %13 = fcmp ole <4 x float> %9, %1
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = xor <4 x i32> %12, %14
  %16 = xor <4 x i32> %11, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %17 = sub <4 x i32> zeroinitializer, %16
  %18 = bitcast <4 x float> %9 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %15 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fcmp une <4 x float> %9, %1
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <16 x i8> %21 to <4 x i32>
  %25 = add <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = bitcast <4 x i32> %23 to <16 x i8>
  %28 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %26, <16 x i8> %27) #6
  %29 = bitcast <16 x i8> %28 to <4 x i32>
  %30 = xor <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = sub <4 x i32> zeroinitializer, %30
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %28, <16 x i8> %32, <16 x i8> %20) #6
  %34 = bitcast <16 x i8> %33 to <4 x float>
  %35 = fcmp oeq <4 x float> %34, zeroinitializer
  %36 = fcmp une <4 x float> %9, zeroinitializer
  %37 = and <4 x i1> %35, %36
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = bitcast <4 x i32> %38 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %34, <4 x float> %40, <4 x float> %41) #6
  %43 = fcmp oeq <4 x float> %9, zeroinitializer
  %44 = fcmp oeq <4 x float> %1, zeroinitializer
  %45 = and <4 x i1> %43, %44
  %46 = sext <4 x i1> %45 to <4 x i32>
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> %1, <4 x float> %47) #6
  %49 = fcmp uno <4 x float> %9, %1
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <4 x float>
  %52 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %48, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %51) #6
  ret <4 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_frfrexpf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -9187343241974906881, i64 -9187343241974906881>
  %12 = or <2 x i64> %11, <i64 4539628425446424576, i64 4539628425446424576>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fcmp oeq <4 x float> %15, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <2 x i64> %18, <i64 9187343241974906880, i64 9187343241974906880>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = bitcast <4 x i32> %17 to <4 x float>
  %22 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %20, <4 x float> %21) #6
  %23 = fcmp oeq <4 x float> %9, zeroinitializer
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %9, <4 x float> %25) #6
  ret <4 x float> %26
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpf4_sse4(<4 x float>) local_unnamed_addr #2 {
  ret <2 x i64> zeroinitializer
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_fmodf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %14, <4 x float> %12) #6
  %16 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = bitcast <4 x float> %16 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %19 = bitcast <4 x i32> %18 to <4 x float>
  %20 = fcmp oeq <4 x float> %16, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %19, <4 x float> zeroinitializer, <4 x float> %22) #6
  %24 = fmul <4 x float> %15, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %25 = fmul <4 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %26 = bitcast <4 x float> %15 to <2 x i64>
  %27 = xor <2 x i64> %26, <i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = bitcast <2 x i64> %27 to <4 x float>
  %29 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %28, %30
  br label %32

; <label>:32:                                     ; preds = %32, %2
  %33 = phi i32 [ 0, %2 ], [ %89, %32 ]
  %34 = phi <4 x float> [ zeroinitializer, %2 ], [ %83, %32 ]
  %35 = phi <4 x float> [ %13, %2 ], [ %81, %32 ]
  %36 = bitcast <4 x float> %35 to <4 x i32>
  %37 = add <4 x i32> %36, <i32 -1, i32 -1, i32 -1, i32 -1>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fcmp oeq <4 x float> %35, zeroinitializer
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = bitcast <4 x i32> %40 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %38, <4 x float> zeroinitializer, <4 x float> %41) #6
  %43 = fmul <4 x float> %23, %42
  %44 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %43, i32 11) #6
  %45 = fcmp olt <4 x float> %35, %24
  %46 = fcmp ole <4 x float> %15, %35
  %47 = and <4 x i1> %46, %45
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %49) #6
  %51 = fcmp olt <4 x float> %35, %25
  %52 = and <4 x i1> %46, %51
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %50, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %54) #6
  %56 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %55, i32 11) #6
  %57 = bitcast <4 x float> %56 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %56, %59
  %61 = fmul <4 x float> %56, %28
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %60, %30
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %31, %59
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fadd <4 x float> %35, %61
  %74 = fsub <4 x float> %73, %35
  %75 = fsub <4 x float> %73, %74
  %76 = fsub <4 x float> %35, %75
  %77 = fsub <4 x float> %61, %74
  %78 = fadd <4 x float> %77, %76
  %79 = fadd <4 x float> %34, %72
  %80 = fadd <4 x float> %78, %79
  %81 = fadd <4 x float> %73, %80
  %82 = fsub <4 x float> %73, %81
  %83 = fadd <4 x float> %80, %82
  %84 = fcmp olt <4 x float> %81, %15
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = bitcast <4 x i32> %85 to <16 x i8>
  %87 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %86) #6
  %88 = icmp ne i32 %87, 65535
  %89 = add nuw nsw i32 %33, 1
  %90 = icmp ult i32 %89, 8
  %91 = and i1 %88, %90
  br i1 %91, label %32, label %92

; <label>:92:                                     ; preds = %32
  %93 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <4 x float> %12) #6
  %94 = fadd <4 x float> %81, %83
  %95 = fmul <4 x float> %93, %94
  %96 = fcmp oeq <4 x float> %94, %15
  %97 = sext <4 x i1> %96 to <4 x i32>
  %98 = bitcast <4 x i32> %97 to <4 x float>
  %99 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %95, <4 x float> zeroinitializer, <4 x float> %98) #6
  %100 = bitcast <4 x float> %99 to <2 x i64>
  %101 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = xor <2 x i64> %101, %100
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fcmp olt <4 x float> %13, %15
  %105 = sext <4 x i1> %104 to <4 x i32>
  %106 = bitcast <4 x i32> %105 to <4 x float>
  %107 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %103, <4 x float> %0, <4 x float> %106) #6
  %108 = fcmp oeq <4 x float> %15, zeroinitializer
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = bitcast <4 x i32> %109 to <4 x float>
  %111 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %107, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %110) #6
  ret <4 x float> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_remainderf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %14, <4 x float> %12) #6
  %16 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <4 x float> %12) #6
  %17 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %18 = fmul <4 x float> %15, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = fmul <4 x float> %15, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = bitcast <4 x float> %15 to <2 x i64>
  %21 = xor <2 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fsub <4 x float> %22, %24
  br label %26

; <label>:26:                                     ; preds = %2, %56
  %27 = phi i32 [ 0, %2 ], [ %106, %56 ]
  %28 = phi <2 x i64> [ zeroinitializer, %2 ], [ %79, %56 ]
  %29 = phi <4 x float> [ zeroinitializer, %2 ], [ %105, %56 ]
  %30 = phi <4 x float> [ %13, %2 ], [ %103, %56 ]
  %31 = fmul <4 x float> %17, %30
  %32 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %31, i32 8) #6
  %33 = bitcast <4 x float> %30 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fcmp ogt <4 x float> %18, %35
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %32, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %38) #6
  %40 = fcmp ogt <4 x float> %19, %35
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = fcmp oeq <4 x float> %19, %35
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  %46 = xor <2 x i64> %28, <i64 -1, i64 -1>
  %47 = and <2 x i64> %45, %46
  %48 = or <2 x i64> %47, %42
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> zeroinitializer, <4 x float> %49) #6
  %51 = fcmp oeq <4 x float> %50, zeroinitializer
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <16 x i8>
  %54 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %53) #6
  %55 = icmp eq i32 %54, 65535
  br i1 %55, label %108, label %56

; <label>:56:                                     ; preds = %26
  %57 = fmul <4 x float> %50, %22
  %58 = bitcast <4 x float> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fcmp oeq <4 x float> %60, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = and <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = xor <2 x i64> %63, <i64 -4647714812233515008, i64 -4647714812233515008>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fadd <4 x float> %50, %65
  %67 = bitcast <4 x i32> %62 to <4 x float>
  %68 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %50, <4 x float> %66, <4 x float> %67) #6
  %69 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %68) #6
  %70 = and <4 x i32> %69, <i32 1, i32 1, i32 1, i32 1>
  %71 = icmp ne <4 x i32> %70, zeroinitializer
  %72 = bitcast <4 x float> %68 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fcmp olt <4 x float> %74, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %76 = and <4 x i1> %75, %71
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = xor <2 x i64> %28, %78
  %80 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fsub <4 x float> %68, %81
  %83 = fmul <4 x float> %68, %22
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fmul <4 x float> %24, %81
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %82, %24
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %25, %81
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %25, %82
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %30, %83
  %96 = fsub <4 x float> %95, %30
  %97 = fsub <4 x float> %95, %96
  %98 = fsub <4 x float> %30, %97
  %99 = fsub <4 x float> %83, %96
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %29, %94
  %102 = fadd <4 x float> %100, %101
  %103 = fadd <4 x float> %95, %102
  %104 = fsub <4 x float> %95, %103
  %105 = fadd <4 x float> %102, %104
  %106 = add nuw nsw i32 %27, 1
  %107 = icmp ult i32 %106, 8
  br i1 %107, label %26, label %108

; <label>:108:                                    ; preds = %26, %56
  %109 = phi <4 x float> [ %30, %26 ], [ %103, %56 ]
  %110 = phi <4 x float> [ %29, %26 ], [ %105, %56 ]
  %111 = fadd <4 x float> %109, %110
  %112 = fmul <4 x float> %16, %111
  %113 = bitcast <4 x float> %112 to <2 x i64>
  %114 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %115 = xor <2 x i64> %114, %113
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %118 = sext <4 x i1> %117 to <4 x i32>
  %119 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %121) #6
  %123 = bitcast <4 x i32> %118 to <4 x float>
  %124 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %116, <4 x float> %122, <4 x float> %123) #6
  %125 = fcmp oeq <4 x float> %15, zeroinitializer
  %126 = sext <4 x i1> %125 to <4 x i32>
  %127 = bitcast <4 x i32> %126 to <4 x float>
  %128 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %124, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %127) #6
  ret <4 x float> %128
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_sinpif4_u05sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = bitcast <4 x i32> %9 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <4 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <4 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <4 x float> %28) #6
  %31 = fmul <4 x float> %29, %13
  %32 = fadd <4 x float> %30, %31
  %33 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <4 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <4 x float> %28) #6
  %34 = fmul <4 x float> %13, %32
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %13, %35
  %37 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <4 x float> %28) #6
  %38 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <4 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <4 x float> %28) #6
  %39 = fadd <4 x float> %37, %36
  %40 = fsub <4 x float> %39, %36
  %41 = fsub <4 x float> %39, %40
  %42 = fsub <4 x float> %36, %41
  %43 = fsub <4 x float> %37, %40
  %44 = fadd <4 x float> %43, %42
  %45 = fadd <4 x float> %38, %44
  %46 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %13, %47
  %49 = bitcast <4 x float> %39 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %39, %51
  %53 = fmul <4 x float> %13, %39
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %47, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %48, %51
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %52, %47
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %48, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %13, %45
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %39, %27
  %68 = fadd <4 x float> %67, %66
  %69 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <4 x float> %28) #6
  %70 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <4 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <4 x float> %28) #6
  %71 = fadd <4 x float> %69, %53
  %72 = fsub <4 x float> %71, %53
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %53, %73
  %75 = fsub <4 x float> %69, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %70, %68
  %78 = fadd <4 x float> %76, %77
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %13, <4 x float> %28) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %27, <4 x float> %28) #6
  %81 = bitcast <4 x float> %71 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %71, %83
  %85 = bitcast <4 x float> %79 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fsub <4 x float> %79, %87
  %89 = fmul <4 x float> %79, %71
  %90 = bitcast <4 x float> %89 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fmul <4 x float> %87, %83
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %84, %87
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %88, %83
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %88, %84
  %100 = fadd <4 x float> %99, %98
  %101 = fmul <4 x float> %80, %71
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %79, %78
  %104 = fadd <4 x float> %102, %103
  %105 = fadd <4 x float> %89, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = fsub <4 x float> %105, %89
  %107 = fsub <4 x float> %105, %106
  %108 = fsub <4 x float> %89, %107
  %109 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %110, %104
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %89, <4 x float> %105, <4 x float> %28) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %104, <4 x float> %111, <4 x float> %28) #6
  %114 = and <4 x i32> %6, <i32 4, i32 4, i32 4, i32 4>
  %115 = icmp ne <4 x i32> %114, zeroinitializer
  %116 = sext <4 x i1> %115 to <4 x i32>
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = and <2 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160>
  %119 = bitcast <4 x float> %112 to <2 x i64>
  %120 = xor <2 x i64> %118, %119
  %121 = bitcast <4 x float> %113 to <2 x i64>
  %122 = xor <2 x i64> %118, %121
  %123 = bitcast <2 x i64> %120 to <4 x float>
  %124 = bitcast <2 x i64> %122 to <4 x float>
  %125 = fadd <4 x float> %123, %124
  %126 = bitcast <4 x float> %0 to <4 x i32>
  %127 = icmp eq <4 x i32> %126, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = bitcast <4 x i32> %128 to <4 x float>
  %130 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %125, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %129) #6
  %131 = bitcast <4 x float> %0 to <2 x i64>
  %132 = and <2 x i64> %131, <i64 9223372034707292159, i64 9223372034707292159>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fcmp ogt <4 x float> %133, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %135 = sext <4 x i1> %134 to <4 x i32>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = bitcast <4 x float> %130 to <2 x i64>
  %138 = xor <2 x i64> %136, <i64 -1, i64 -1>
  %139 = and <2 x i64> %137, %138
  %140 = fcmp oeq <4 x float> %133, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <2 x i64>
  %143 = or <2 x i64> %139, %142
  %144 = bitcast <2 x i64> %143 to <4 x float>
  ret <4 x float> %144
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cospif4_u05sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = bitcast <4 x i32> %9 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <4 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <4 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <4 x float> %28) #6
  %31 = fmul <4 x float> %29, %13
  %32 = fadd <4 x float> %30, %31
  %33 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <4 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <4 x float> %28) #6
  %34 = fmul <4 x float> %13, %32
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %13, %35
  %37 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <4 x float> %28) #6
  %38 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <4 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <4 x float> %28) #6
  %39 = fadd <4 x float> %37, %36
  %40 = fsub <4 x float> %39, %36
  %41 = fsub <4 x float> %39, %40
  %42 = fsub <4 x float> %36, %41
  %43 = fsub <4 x float> %37, %40
  %44 = fadd <4 x float> %43, %42
  %45 = fadd <4 x float> %38, %44
  %46 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %13, %47
  %49 = bitcast <4 x float> %39 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %39, %51
  %53 = fmul <4 x float> %13, %39
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %47, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %48, %51
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %52, %47
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %48, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %13, %45
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %39, %27
  %68 = fadd <4 x float> %67, %66
  %69 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <4 x float> %28) #6
  %70 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <4 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <4 x float> %28) #6
  %71 = fadd <4 x float> %69, %53
  %72 = fsub <4 x float> %71, %53
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %53, %73
  %75 = fsub <4 x float> %69, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %70, %68
  %78 = fadd <4 x float> %76, %77
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %13, <4 x float> %28) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %27, <4 x float> %28) #6
  %81 = bitcast <4 x float> %71 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %71, %83
  %85 = bitcast <4 x float> %79 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fsub <4 x float> %79, %87
  %89 = fmul <4 x float> %79, %71
  %90 = bitcast <4 x float> %89 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fmul <4 x float> %87, %83
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %84, %87
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %88, %83
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %88, %84
  %100 = fadd <4 x float> %99, %98
  %101 = fmul <4 x float> %80, %71
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %79, %78
  %104 = fadd <4 x float> %102, %103
  %105 = fadd <4 x float> %89, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = fsub <4 x float> %105, %89
  %107 = fsub <4 x float> %105, %106
  %108 = fsub <4 x float> %89, %107
  %109 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %110, %104
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %89, <4 x float> %105, <4 x float> %28) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %104, <4 x float> %111, <4 x float> %28) #6
  %114 = add <4 x i32> %10, <i32 2, i32 2, i32 2, i32 2>
  %115 = and <4 x i32> %114, <i32 4, i32 4, i32 4, i32 4>
  %116 = icmp ne <4 x i32> %115, zeroinitializer
  %117 = sext <4 x i1> %116 to <4 x i32>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <4 x float> %112 to <2 x i64>
  %121 = xor <2 x i64> %119, %120
  %122 = bitcast <4 x float> %113 to <2 x i64>
  %123 = xor <2 x i64> %119, %122
  %124 = bitcast <2 x i64> %121 to <4 x float>
  %125 = bitcast <2 x i64> %123 to <4 x float>
  %126 = fadd <4 x float> %124, %125
  %127 = bitcast <4 x float> %0 to <2 x i64>
  %128 = and <2 x i64> %127, <i64 9223372034707292159, i64 9223372034707292159>
  %129 = bitcast <2 x i64> %128 to <4 x float>
  %130 = fcmp ogt <4 x float> %129, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %131 = sext <4 x i1> %130 to <4 x i32>
  %132 = bitcast <4 x i32> %131 to <4 x float>
  %133 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %126, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %132) #6
  %134 = fcmp oeq <4 x float> %129, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %135 = sext <4 x i1> %134 to <4 x i32>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = bitcast <4 x float> %133 to <2 x i64>
  %138 = or <2 x i64> %137, %136
  %139 = bitcast <2 x i64> %138 to <4 x float>
  ret <4 x float> %139
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_tgammaf4_u10sse4(<4 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 16
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <4 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x float>, <4 x float>* %6, align 16
  %8 = fadd <4 x float> %5, %7
  %9 = fmul <4 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %9) #6
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fmul <4 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <4 x float> %5, %12
  %14 = fsub <4 x float> %13, %5
  %15 = fsub <4 x float> %13, %14
  %16 = fsub <4 x float> %5, %15
  %17 = fsub <4 x float> %12, %14
  %18 = fadd <4 x float> %17, %16
  %19 = fadd <4 x float> %7, %18
  %20 = fmul <4 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <4 x float> %20, %13
  %22 = fsub <4 x float> %21, %13
  %23 = fsub <4 x float> %21, %22
  %24 = fsub <4 x float> %13, %23
  %25 = fsub <4 x float> %20, %22
  %26 = fadd <4 x float> %25, %24
  %27 = fadd <4 x float> %26, %19
  %28 = fmul <4 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <4 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <4 x float> %21, %29
  %31 = fadd <4 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <4 x float> %21, %31
  %33 = fadd <4 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <4 x float> %21 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = fsub <4 x float> %21, %36
  %38 = bitcast <4 x float> %33 to <2 x i64>
  %39 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fsub <4 x float> %33, %40
  %42 = fmul <4 x float> %21, %33
  %43 = bitcast <4 x float> %42 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fmul <4 x float> %36, %40
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %37, %40
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %41, %36
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %37, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %27, %33
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %42, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %57 = fsub <4 x float> %56, %42
  %58 = fsub <4 x float> %56, %57
  %59 = fsub <4 x float> %42, %58
  %60 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %57
  %61 = fadd <4 x float> %60, %59
  %62 = fadd <4 x float> %61, %55
  %63 = bitcast <4 x float> %56 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %56, %65
  %67 = fmul <4 x float> %21, %56
  %68 = bitcast <4 x float> %67 to <2 x i64>
  %69 = xor <2 x i64> %68, <i64 -9223372034707292160, i64 -9223372034707292160>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = fmul <4 x float> %36, %65
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %37, %65
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %66, %36
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %37, %66
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %21, %62
  %80 = fadd <4 x float> %78, %79
  %81 = fmul <4 x float> %27, %56
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %84 = fsub <4 x float> %83, %67
  %85 = fsub <4 x float> %83, %84
  %86 = fsub <4 x float> %67, %85
  %87 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %84
  %88 = fadd <4 x float> %87, %86
  %89 = fadd <4 x float> %88, %82
  %90 = fmul <4 x float> %21, %21
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %36, %36
  %95 = fadd <4 x float> %94, %93
  %96 = fadd <4 x float> %36, %36
  %97 = fmul <4 x float> %96, %37
  %98 = fadd <4 x float> %97, %95
  %99 = fmul <4 x float> %37, %37
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %27, %27
  %102 = fmul <4 x float> %21, %101
  %103 = fadd <4 x float> %102, %100
  %104 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <2 x i64> %104 to <4 x float>
  %106 = fsub <4 x float> %90, %105
  %107 = bitcast <4 x float> %83 to <2 x i64>
  %108 = and <2 x i64> %107, <i64 -17587891081216, i64 -17587891081216>
  %109 = bitcast <2 x i64> %108 to <4 x float>
  %110 = fsub <4 x float> %83, %109
  %111 = fmul <4 x float> %90, %83
  %112 = bitcast <4 x float> %111 to <2 x i64>
  %113 = xor <2 x i64> %112, <i64 -9223372034707292160, i64 -9223372034707292160>
  %114 = bitcast <2 x i64> %113 to <4 x float>
  %115 = fmul <4 x float> %105, %109
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %106, %109
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %110, %105
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %106, %110
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %90, %89
  %124 = fadd <4 x float> %122, %123
  %125 = fmul <4 x float> %103, %83
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %111
  %128 = fsub <4 x float> %127, %21
  %129 = fsub <4 x float> %127, %128
  %130 = fsub <4 x float> %21, %129
  %131 = fsub <4 x float> %111, %128
  %132 = fadd <4 x float> %131, %130
  %133 = fadd <4 x float> %27, %126
  %134 = fadd <4 x float> %132, %133
  %135 = fadd <4 x float> %127, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %135
  %137 = fadd <4 x float> %127, %136
  %138 = fadd <4 x float> %137, %134
  %139 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %140 = shl <4 x i32> %139, <i32 23, i32 23, i32 23, i32 23>
  %141 = add <4 x i32> %140, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %142 = bitcast <4 x i32> %141 to <4 x float>
  %143 = fmul <4 x float> %135, %142
  %144 = sub <4 x i32> %10, %139
  %145 = shl <4 x i32> %144, <i32 23, i32 23, i32 23, i32 23>
  %146 = add <4 x i32> %145, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %147 = bitcast <4 x i32> %146 to <4 x float>
  %148 = fmul <4 x float> %143, %147
  %149 = fmul <4 x float> %138, %142
  %150 = fmul <4 x float> %149, %147
  %151 = fcmp olt <4 x float> %5, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %152 = sext <4 x i1> %151 to <4 x i32>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = bitcast <4 x float> %148 to <2 x i64>
  %155 = xor <2 x i64> %153, <i64 -1, i64 -1>
  %156 = and <2 x i64> %154, %155
  %157 = bitcast <4 x float> %150 to <2 x i64>
  %158 = and <2 x i64> %157, %155
  %159 = bitcast <2 x i64> %156 to <4 x float>
  %160 = bitcast <2 x i64> %158 to <4 x float>
  %161 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %162 = load <4 x float>, <4 x float>* %161, align 16
  %163 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %164 = load <4 x float>, <4 x float>* %163, align 16
  %165 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %166 = bitcast <2 x i64> %165 to <4 x float>
  %167 = fsub <4 x float> %159, %166
  %168 = bitcast <4 x float> %162 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -17587891081216, i64 -17587891081216>
  %170 = bitcast <2 x i64> %169 to <4 x float>
  %171 = fsub <4 x float> %162, %170
  %172 = fmul <4 x float> %162, %159
  %173 = bitcast <4 x float> %172 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <2 x i64> %174 to <4 x float>
  %176 = fmul <4 x float> %170, %166
  %177 = fadd <4 x float> %176, %175
  %178 = fmul <4 x float> %167, %170
  %179 = fadd <4 x float> %178, %177
  %180 = fmul <4 x float> %171, %166
  %181 = fadd <4 x float> %180, %179
  %182 = fmul <4 x float> %171, %167
  %183 = fadd <4 x float> %182, %181
  %184 = fmul <4 x float> %164, %159
  %185 = fadd <4 x float> %184, %183
  %186 = fmul <4 x float> %162, %160
  %187 = fadd <4 x float> %185, %186
  %188 = fadd <4 x float> %172, %187
  %189 = fcmp oeq <4 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %190 = fcmp olt <4 x float> %0, zeroinitializer
  %191 = sext <4 x i1> %190 to <4 x i32>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 11) #6
  %194 = fcmp oeq <4 x float> %193, %0
  %195 = and <4 x i1> %194, %190
  %196 = or <4 x i1> %195, %189
  %197 = sext <4 x i1> %196 to <4 x i32>
  %198 = bitcast <4 x i32> %197 to <2 x i64>
  %199 = bitcast <4 x float> %0 to <2 x i64>
  %200 = and <2 x i64> %199, <i64 9223372034707292159, i64 9223372034707292159>
  %201 = bitcast <2 x i64> %200 to <4 x float>
  %202 = fcmp oeq <4 x float> %201, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %203 = fcmp uno <4 x float> %0, zeroinitializer
  %204 = or <4 x i1> %202, %203
  %205 = sext <4 x i1> %204 to <4 x i32>
  %206 = bitcast <4 x i32> %205 to <2 x i64>
  %207 = xor <2 x i64> %206, <i64 -1, i64 -1>
  %208 = and <2 x i64> %207, %192
  %209 = fcmp uno <4 x float> %188, zeroinitializer
  %210 = sext <4 x i1> %209 to <4 x i32>
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = and <2 x i64> %208, %211
  %213 = or <2 x i64> %212, %198
  %214 = bitcast <2 x i64> %213 to <4 x float>
  %215 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %188, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %214) #6
  %216 = fcmp oeq <4 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %217 = sext <4 x i1> %216 to <4 x i32>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = or <2 x i64> %207, %218
  %220 = fcmp oge <4 x float> %0, <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>
  %221 = sext <4 x i1> %220 to <4 x i32>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = and <2 x i64> %219, %222
  %224 = fcmp oeq <4 x float> %0, zeroinitializer
  %225 = fcmp ogt <4 x float> %0, <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>
  %226 = or <4 x i1> %225, %224
  %227 = fcmp uno <4 x float> %215, zeroinitializer
  %228 = or <4 x i1> %226, %227
  %229 = sext <4 x i1> %228 to <4 x i32>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = and <2 x i64> %223, %230
  %232 = and <2 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160>
  %233 = or <2 x i64> %232, <i64 9187343241974906880, i64 9187343241974906880>
  %234 = bitcast <2 x i64> %233 to <4 x float>
  %235 = bitcast <2 x i64> %231 to <4 x float>
  %236 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %215, <4 x float> %234, <4 x float> %235) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <4 x float> %236
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <4 x float>) unnamed_addr #3 {
  %3 = bitcast <4 x float> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fcmp olt <4 x float> %1, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = xor <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = fadd <4 x float> %11, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = fadd <4 x float> %12, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fsub <4 x float> %12, %13
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %16 = fsub <4 x float> %11, %13
  %17 = fadd <4 x float> %16, %15
  %18 = bitcast <4 x i32> %9 to <4 x float>
  %19 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %1, <4 x float> %12, <4 x float> %18) #6
  %20 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %17, <4 x float> %18) #6
  %21 = bitcast <4 x i32> %7 to <4 x float>
  %22 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %19, <4 x float> zeroinitializer, <4 x float> %21) #6
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %20, <4 x float> zeroinitializer, <4 x float> %21) #6
  %24 = fcmp oge <4 x float> %22, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %25 = fcmp ole <4 x float> %22, <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>
  %26 = and <4 x i1> %25, %24
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = fcmp oge <4 x float> %22, <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = fadd <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <4 x float> %30, %22
  %32 = fsub <4 x float> %30, %31
  %33 = fsub <4 x float> %22, %32
  %34 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <4 x float> %34, %33
  %36 = fadd <4 x float> %23, %35
  %37 = bitcast <4 x float> %30 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %30, %39
  %41 = bitcast <4 x float> %22 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %22, %43
  %45 = fmul <4 x float> %22, %30
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fmul <4 x float> %43, %39
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %40, %43
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %44, %39
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %44, %40
  %56 = fadd <4 x float> %55, %54
  %57 = fmul <4 x float> %30, %23
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %22, %36
  %60 = fadd <4 x float> %59, %58
  %61 = fadd <4 x float> %45, %60
  %62 = fsub <4 x float> %45, %61
  %63 = fadd <4 x float> %60, %62
  %64 = fadd <4 x float> %22, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %65 = fsub <4 x float> %64, %22
  %66 = fsub <4 x float> %64, %65
  %67 = fsub <4 x float> %22, %66
  %68 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %65
  %69 = fadd <4 x float> %68, %67
  %70 = fadd <4 x float> %23, %69
  %71 = bitcast <4 x float> %64 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fsub <4 x float> %64, %73
  %75 = bitcast <4 x float> %61 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %77 = bitcast <2 x i64> %76 to <4 x float>
  %78 = fsub <4 x float> %61, %77
  %79 = fmul <4 x float> %64, %61
  %80 = bitcast <4 x float> %79 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = fmul <4 x float> %73, %77
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %74, %77
  %86 = fadd <4 x float> %85, %84
  %87 = fmul <4 x float> %78, %73
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %74, %78
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %64, %63
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %70, %61
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %79, %94
  %96 = fsub <4 x float> %79, %95
  %97 = fadd <4 x float> %94, %96
  %98 = fcmp ole <4 x float> %22, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %99 = and <4 x i1> %98, %28
  %100 = sext <4 x i1> %99 to <4 x i32>
  %101 = bitcast <4 x i32> %100 to <4 x float>
  %102 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %95, <4 x float> %101) #6
  %103 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %97, <4 x float> %101) #6
  %104 = fadd <4 x float> %22, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %105 = fsub <4 x float> %104, %22
  %106 = fsub <4 x float> %104, %105
  %107 = fsub <4 x float> %22, %106
  %108 = fsub <4 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %105
  %109 = fadd <4 x float> %108, %107
  %110 = fadd <4 x float> %23, %109
  %111 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %104, <4 x float> %101) #6
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %23, <4 x float> %110, <4 x float> %101) #6
  %113 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %111
  %114 = bitcast <4 x i32> %27 to <4 x float>
  %115 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %114) #6
  %116 = fadd <4 x float> %111, %115
  %117 = fsub <4 x float> %116, %111
  %118 = fsub <4 x float> %116, %117
  %119 = fsub <4 x float> %111, %118
  %120 = fsub <4 x float> %115, %117
  %121 = fadd <4 x float> %120, %119
  %122 = fadd <4 x float> %112, %121
  %123 = fadd <4 x float> %116, %122
  %124 = bitcast <4 x i32> %29 to <4 x float>
  %125 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %123, <4 x float> %113, <4 x float> %124) #6
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000>, <4 x float> <float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000>, <4 x float> %114) #6
  %127 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %126, <4 x float> <float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000>, <4 x float> %124) #6
  %128 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000>, <4 x float> <float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000>, <4 x float> %114) #6
  %129 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %128, <4 x float> <float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000>, <4 x float> %124) #6
  %130 = fmul <4 x float> %125, %127
  %131 = fadd <4 x float> %130, %129
  %132 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000>, <4 x float> <float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000>, <4 x float> %114) #6
  %133 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %132, <4 x float> <float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000>, <4 x float> %124) #6
  %134 = fmul <4 x float> %125, %131
  %135 = fadd <4 x float> %134, %133
  %136 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000>, <4 x float> <float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000>, <4 x float> %114) #6
  %137 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %136, <4 x float> <float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000>, <4 x float> %124) #6
  %138 = fmul <4 x float> %125, %135
  %139 = fadd <4 x float> %138, %137
  %140 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000>, <4 x float> <float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000>, <4 x float> %114) #6
  %141 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %140, <4 x float> <float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000>, <4 x float> %124) #6
  %142 = fmul <4 x float> %125, %139
  %143 = fadd <4 x float> %142, %141
  %144 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000>, <4 x float> <float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000>, <4 x float> %114) #6
  %145 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %144, <4 x float> <float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000>, <4 x float> %124) #6
  %146 = fmul <4 x float> %125, %143
  %147 = fadd <4 x float> %146, %145
  %148 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000>, <4 x float> <float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000>, <4 x float> %114) #6
  %149 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %148, <4 x float> <float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000>, <4 x float> %124) #6
  %150 = fmul <4 x float> %125, %147
  %151 = fadd <4 x float> %150, %149
  %152 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000>, <4 x float> <float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000>, <4 x float> %114) #6
  %153 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %152, <4 x float> <float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000>, <4 x float> %124) #6
  %154 = fmul <4 x float> %125, %151
  %155 = fadd <4 x float> %154, %153
  %156 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000>, <4 x float> <float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000>, <4 x float> %114) #6
  %157 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %156, <4 x float> <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>, <4 x float> %124) #6
  %158 = fmul <4 x float> %125, %155
  %159 = fadd <4 x float> %158, %157
  %160 = fadd <4 x float> %111, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %161 = fsub <4 x float> %160, %111
  %162 = fsub <4 x float> %160, %161
  %163 = fsub <4 x float> %111, %162
  %164 = fsub <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %161
  %165 = fadd <4 x float> %164, %163
  %166 = fadd <4 x float> %112, %165
  %167 = fmul <4 x float> %111, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %168 = fcmp olt <4 x float> %167, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = fmul <4 x float> %167, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %171 = bitcast <4 x i32> %169 to <4 x float>
  %172 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %167, <4 x float> %170, <4 x float> %171) #6
  %173 = bitcast <4 x float> %172 to <4 x i32>
  %174 = lshr <4 x i32> %173, <i32 23, i32 23, i32 23, i32 23>
  %175 = bitcast <4 x i32> %169 to <16 x i8>
  %176 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %175) #6
  %177 = and <4 x i32> %174, <i32 255, i32 255, i32 255, i32 255>
  %178 = bitcast <16 x i8> %176 to <4 x i32>
  %179 = sub <4 x i32> %177, %178
  %180 = shl <4 x i32> %179, <i32 23, i32 23, i32 23, i32 23>
  %181 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %180
  %182 = bitcast <4 x i32> %181 to <4 x float>
  %183 = fmul <4 x float> %111, %182
  %184 = fmul <4 x float> %112, %182
  %185 = fadd <4 x float> %183, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %186 = fsub <4 x float> %185, %183
  %187 = fsub <4 x float> %185, %186
  %188 = fsub <4 x float> %183, %187
  %189 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %186
  %190 = fadd <4 x float> %189, %188
  %191 = fadd <4 x float> %184, %190
  %192 = fadd <4 x float> %183, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %193 = fsub <4 x float> %192, %183
  %194 = fsub <4 x float> %192, %193
  %195 = fsub <4 x float> %183, %194
  %196 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %193
  %197 = fadd <4 x float> %196, %195
  %198 = fadd <4 x float> %184, %197
  %199 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %192
  %200 = bitcast <4 x float> %192 to <2 x i64>
  %201 = and <2 x i64> %200, <i64 -17587891081216, i64 -17587891081216>
  %202 = bitcast <2 x i64> %201 to <4 x float>
  %203 = fsub <4 x float> %192, %202
  %204 = bitcast <4 x float> %199 to <2 x i64>
  %205 = and <2 x i64> %204, <i64 -17587891081216, i64 -17587891081216>
  %206 = bitcast <2 x i64> %205 to <4 x float>
  %207 = fsub <4 x float> %199, %206
  %208 = bitcast <4 x float> %185 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -17587891081216, i64 -17587891081216>
  %210 = bitcast <2 x i64> %209 to <4 x float>
  %211 = fsub <4 x float> %185, %210
  %212 = fmul <4 x float> %185, %199
  %213 = fmul <4 x float> %202, %206
  %214 = fadd <4 x float> %213, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %215 = fmul <4 x float> %207, %202
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %203, %206
  %218 = fadd <4 x float> %217, %216
  %219 = fmul <4 x float> %203, %207
  %220 = fadd <4 x float> %219, %218
  %221 = bitcast <4 x float> %220 to <2 x i64>
  %222 = xor <2 x i64> %221, <i64 -9223372034707292160, i64 -9223372034707292160>
  %223 = bitcast <2 x i64> %222 to <4 x float>
  %224 = bitcast <4 x float> %212 to <2 x i64>
  %225 = xor <2 x i64> %224, <i64 -9223372034707292160, i64 -9223372034707292160>
  %226 = bitcast <2 x i64> %225 to <4 x float>
  %227 = fmul <4 x float> %210, %206
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %207, %210
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %211, %206
  %232 = fadd <4 x float> %231, %230
  %233 = fmul <4 x float> %211, %207
  %234 = fadd <4 x float> %233, %232
  %235 = fmul <4 x float> %212, %223
  %236 = fadd <4 x float> %234, %235
  %237 = fmul <4 x float> %212, %198
  %238 = fsub <4 x float> %191, %237
  %239 = fmul <4 x float> %199, %238
  %240 = fadd <4 x float> %239, %236
  %241 = and <2 x i64> %224, <i64 -17587891081216, i64 -17587891081216>
  %242 = bitcast <2 x i64> %241 to <4 x float>
  %243 = fsub <4 x float> %212, %242
  %244 = fmul <4 x float> %212, %212
  %245 = bitcast <4 x float> %244 to <2 x i64>
  %246 = xor <2 x i64> %245, <i64 -9223372034707292160, i64 -9223372034707292160>
  %247 = bitcast <2 x i64> %246 to <4 x float>
  %248 = fmul <4 x float> %242, %242
  %249 = fadd <4 x float> %248, %247
  %250 = fadd <4 x float> %242, %242
  %251 = fmul <4 x float> %250, %243
  %252 = fadd <4 x float> %251, %249
  %253 = fmul <4 x float> %243, %243
  %254 = fadd <4 x float> %253, %252
  %255 = fadd <4 x float> %240, %240
  %256 = fmul <4 x float> %212, %255
  %257 = fadd <4 x float> %254, %256
  %258 = fmul <4 x float> %244, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %259 = fadd <4 x float> %258, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %260 = fmul <4 x float> %244, %259
  %261 = fadd <4 x float> %260, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %262 = fmul <4 x float> %244, %261
  %263 = fadd <4 x float> %262, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %264 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %179) #6
  %265 = bitcast <4 x float> %264 to <2 x i64>
  %266 = and <2 x i64> %265, <i64 -17587891081216, i64 -17587891081216>
  %267 = bitcast <2 x i64> %266 to <4 x float>
  %268 = fsub <4 x float> %264, %267
  %269 = fmul <4 x float> %264, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %270 = bitcast <4 x float> %269 to <2 x i64>
  %271 = xor <2 x i64> %270, <i64 -9223372034707292160, i64 -9223372034707292160>
  %272 = bitcast <2 x i64> %271 to <4 x float>
  %273 = fmul <4 x float> %267, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %274 = fadd <4 x float> %273, %272
  %275 = fmul <4 x float> %267, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %276 = fadd <4 x float> %275, %274
  %277 = fmul <4 x float> %268, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %278 = fadd <4 x float> %277, %276
  %279 = fmul <4 x float> %268, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %264, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %282 = fadd <4 x float> %281, %280
  %283 = fmul <4 x float> %212, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %284 = fmul <4 x float> %240, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %285 = fadd <4 x float> %269, %283
  %286 = fsub <4 x float> %269, %285
  %287 = fadd <4 x float> %283, %286
  %288 = fadd <4 x float> %282, %287
  %289 = fadd <4 x float> %288, %284
  %290 = and <2 x i64> %245, <i64 -17587891081216, i64 -17587891081216>
  %291 = bitcast <2 x i64> %290 to <4 x float>
  %292 = fsub <4 x float> %244, %291
  %293 = fmul <4 x float> %212, %244
  %294 = bitcast <4 x float> %293 to <2 x i64>
  %295 = xor <2 x i64> %294, <i64 -9223372034707292160, i64 -9223372034707292160>
  %296 = bitcast <2 x i64> %295 to <4 x float>
  %297 = fmul <4 x float> %242, %291
  %298 = fadd <4 x float> %297, %296
  %299 = fmul <4 x float> %292, %242
  %300 = fadd <4 x float> %299, %298
  %301 = fmul <4 x float> %243, %291
  %302 = fadd <4 x float> %301, %300
  %303 = fmul <4 x float> %243, %292
  %304 = fadd <4 x float> %303, %302
  %305 = fmul <4 x float> %244, %240
  %306 = fadd <4 x float> %304, %305
  %307 = fmul <4 x float> %212, %257
  %308 = fadd <4 x float> %306, %307
  %309 = and <2 x i64> %294, <i64 -17587891081216, i64 -17587891081216>
  %310 = bitcast <2 x i64> %309 to <4 x float>
  %311 = fsub <4 x float> %293, %310
  %312 = bitcast <4 x float> %263 to <2 x i64>
  %313 = and <2 x i64> %312, <i64 -17587891081216, i64 -17587891081216>
  %314 = bitcast <2 x i64> %313 to <4 x float>
  %315 = fsub <4 x float> %263, %314
  %316 = fmul <4 x float> %293, %263
  %317 = bitcast <4 x float> %316 to <2 x i64>
  %318 = xor <2 x i64> %317, <i64 -9223372034707292160, i64 -9223372034707292160>
  %319 = bitcast <2 x i64> %318 to <4 x float>
  %320 = fmul <4 x float> %310, %314
  %321 = fadd <4 x float> %320, %319
  %322 = fmul <4 x float> %311, %314
  %323 = fadd <4 x float> %322, %321
  %324 = fmul <4 x float> %315, %310
  %325 = fadd <4 x float> %324, %323
  %326 = fmul <4 x float> %311, %315
  %327 = fadd <4 x float> %326, %325
  %328 = fmul <4 x float> %263, %308
  %329 = fadd <4 x float> %327, %328
  %330 = fadd <4 x float> %285, %316
  %331 = fsub <4 x float> %285, %330
  %332 = fadd <4 x float> %316, %331
  %333 = fadd <4 x float> %332, %289
  %334 = fadd <4 x float> %333, %329
  %335 = bitcast <4 x float> %160 to <2 x i64>
  %336 = and <2 x i64> %335, <i64 -17587891081216, i64 -17587891081216>
  %337 = bitcast <2 x i64> %336 to <4 x float>
  %338 = fsub <4 x float> %160, %337
  %339 = bitcast <4 x float> %330 to <2 x i64>
  %340 = and <2 x i64> %339, <i64 -17587891081216, i64 -17587891081216>
  %341 = bitcast <2 x i64> %340 to <4 x float>
  %342 = fsub <4 x float> %330, %341
  %343 = fmul <4 x float> %160, %330
  %344 = bitcast <4 x float> %343 to <2 x i64>
  %345 = xor <2 x i64> %344, <i64 -9223372034707292160, i64 -9223372034707292160>
  %346 = bitcast <2 x i64> %345 to <4 x float>
  %347 = fmul <4 x float> %337, %341
  %348 = fadd <4 x float> %347, %346
  %349 = fmul <4 x float> %338, %341
  %350 = fadd <4 x float> %349, %348
  %351 = fmul <4 x float> %342, %337
  %352 = fadd <4 x float> %351, %350
  %353 = fmul <4 x float> %338, %342
  %354 = fadd <4 x float> %353, %352
  %355 = fmul <4 x float> %160, %334
  %356 = fadd <4 x float> %354, %355
  %357 = fmul <4 x float> %166, %330
  %358 = fadd <4 x float> %357, %356
  %359 = bitcast <4 x float> %111 to <2 x i64>
  %360 = xor <2 x i64> %359, <i64 -9223372034707292160, i64 -9223372034707292160>
  %361 = bitcast <4 x float> %112 to <2 x i64>
  %362 = xor <2 x i64> %361, <i64 -9223372034707292160, i64 -9223372034707292160>
  %363 = bitcast <2 x i64> %360 to <4 x float>
  %364 = bitcast <2 x i64> %362 to <4 x float>
  %365 = fadd <4 x float> %343, %363
  %366 = fsub <4 x float> %365, %343
  %367 = fsub <4 x float> %365, %366
  %368 = fsub <4 x float> %343, %367
  %369 = fsub <4 x float> %363, %366
  %370 = fadd <4 x float> %369, %368
  %371 = fadd <4 x float> %358, %364
  %372 = fadd <4 x float> %370, %371
  %373 = fadd <4 x float> %365, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %374 = fsub <4 x float> %373, %365
  %375 = fsub <4 x float> %373, %374
  %376 = fsub <4 x float> %365, %375
  %377 = fsub <4 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %374
  %378 = fadd <4 x float> %377, %376
  %379 = fadd <4 x float> %372, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %380 = fadd <4 x float> %378, %379
  %381 = bitcast <4 x float> %159 to <2 x i64>
  %382 = and <2 x i64> %381, <i64 -17587891081216, i64 -17587891081216>
  %383 = bitcast <2 x i64> %382 to <4 x float>
  %384 = fsub <4 x float> %159, %383
  %385 = bitcast <4 x float> %125 to <2 x i64>
  %386 = and <2 x i64> %385, <i64 -17587891081216, i64 -17587891081216>
  %387 = bitcast <2 x i64> %386 to <4 x float>
  %388 = fsub <4 x float> %125, %387
  %389 = fmul <4 x float> %125, %159
  %390 = bitcast <4 x float> %389 to <2 x i64>
  %391 = xor <2 x i64> %390, <i64 -9223372034707292160, i64 -9223372034707292160>
  %392 = bitcast <2 x i64> %391 to <4 x float>
  %393 = fmul <4 x float> %387, %383
  %394 = fadd <4 x float> %393, %392
  %395 = fmul <4 x float> %384, %387
  %396 = fadd <4 x float> %395, %394
  %397 = fmul <4 x float> %388, %383
  %398 = fadd <4 x float> %397, %396
  %399 = fmul <4 x float> %388, %384
  %400 = fadd <4 x float> %399, %398
  %401 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000>, <4 x float> <float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000>, <4 x float> %114) #6
  %402 = fadd <4 x float> %389, %401
  %403 = fsub <4 x float> %402, %389
  %404 = fsub <4 x float> %402, %403
  %405 = fsub <4 x float> %389, %404
  %406 = fsub <4 x float> %401, %403
  %407 = fadd <4 x float> %406, %405
  %408 = fadd <4 x float> %407, %400
  %409 = bitcast <4 x float> %402 to <2 x i64>
  %410 = and <2 x i64> %409, <i64 -17587891081216, i64 -17587891081216>
  %411 = bitcast <2 x i64> %410 to <4 x float>
  %412 = fsub <4 x float> %402, %411
  %413 = fmul <4 x float> %125, %402
  %414 = bitcast <4 x float> %413 to <2 x i64>
  %415 = xor <2 x i64> %414, <i64 -9223372034707292160, i64 -9223372034707292160>
  %416 = bitcast <2 x i64> %415 to <4 x float>
  %417 = fmul <4 x float> %387, %411
  %418 = fadd <4 x float> %417, %416
  %419 = fmul <4 x float> %412, %387
  %420 = fadd <4 x float> %419, %418
  %421 = fmul <4 x float> %388, %411
  %422 = fadd <4 x float> %421, %420
  %423 = fmul <4 x float> %388, %412
  %424 = fadd <4 x float> %423, %422
  %425 = fmul <4 x float> %125, %408
  %426 = fadd <4 x float> %425, %424
  %427 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000>, <4 x float> <float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000>, <4 x float> %114) #6
  %428 = fadd <4 x float> %427, %413
  %429 = fsub <4 x float> %428, %413
  %430 = fsub <4 x float> %428, %429
  %431 = fsub <4 x float> %413, %430
  %432 = fsub <4 x float> %427, %429
  %433 = fadd <4 x float> %432, %431
  %434 = fadd <4 x float> %433, %426
  %435 = bitcast <4 x float> %428 to <2 x i64>
  %436 = and <2 x i64> %435, <i64 -17587891081216, i64 -17587891081216>
  %437 = bitcast <2 x i64> %436 to <4 x float>
  %438 = fsub <4 x float> %428, %437
  %439 = fmul <4 x float> %125, %428
  %440 = bitcast <4 x float> %439 to <2 x i64>
  %441 = xor <2 x i64> %440, <i64 -9223372034707292160, i64 -9223372034707292160>
  %442 = bitcast <2 x i64> %441 to <4 x float>
  %443 = fmul <4 x float> %387, %437
  %444 = fadd <4 x float> %443, %442
  %445 = fmul <4 x float> %438, %387
  %446 = fadd <4 x float> %445, %444
  %447 = fmul <4 x float> %388, %437
  %448 = fadd <4 x float> %447, %446
  %449 = fmul <4 x float> %388, %438
  %450 = fadd <4 x float> %449, %448
  %451 = fmul <4 x float> %125, %434
  %452 = fadd <4 x float> %450, %451
  %453 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000>, <4 x float> <float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000>, <4 x float> %114) #6
  %454 = fadd <4 x float> %453, %439
  %455 = fsub <4 x float> %454, %439
  %456 = fsub <4 x float> %454, %455
  %457 = fsub <4 x float> %439, %456
  %458 = fsub <4 x float> %453, %455
  %459 = fadd <4 x float> %458, %457
  %460 = fadd <4 x float> %459, %452
  %461 = bitcast <4 x float> %454 to <2 x i64>
  %462 = and <2 x i64> %461, <i64 -17587891081216, i64 -17587891081216>
  %463 = bitcast <2 x i64> %462 to <4 x float>
  %464 = fsub <4 x float> %454, %463
  %465 = fmul <4 x float> %125, %454
  %466 = bitcast <4 x float> %465 to <2 x i64>
  %467 = xor <2 x i64> %466, <i64 -9223372034707292160, i64 -9223372034707292160>
  %468 = bitcast <2 x i64> %467 to <4 x float>
  %469 = fmul <4 x float> %387, %463
  %470 = fadd <4 x float> %469, %468
  %471 = fmul <4 x float> %464, %387
  %472 = fadd <4 x float> %471, %470
  %473 = fmul <4 x float> %388, %463
  %474 = fadd <4 x float> %473, %472
  %475 = fmul <4 x float> %388, %464
  %476 = fadd <4 x float> %475, %474
  %477 = fmul <4 x float> %125, %460
  %478 = fadd <4 x float> %476, %477
  %479 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %465, <4 x float> %373, <4 x float> %124) #6
  %480 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %478, <4 x float> %380, <4 x float> %124) #6
  %481 = fadd <4 x float> %389, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %482 = fsub <4 x float> %481, %389
  %483 = fsub <4 x float> %481, %482
  %484 = fsub <4 x float> %389, %483
  %485 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %482
  %486 = fadd <4 x float> %485, %484
  %487 = fadd <4 x float> %486, %400
  %488 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %481, <4 x float> %124) #6
  %489 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %487, <4 x float> %124) #6
  %490 = bitcast <4 x float> %479 to <2 x i64>
  %491 = xor <2 x i64> %490, <i64 -9223372034707292160, i64 -9223372034707292160>
  %492 = bitcast <4 x float> %480 to <2 x i64>
  %493 = xor <2 x i64> %492, <i64 -9223372034707292160, i64 -9223372034707292160>
  %494 = bitcast <2 x i64> %491 to <4 x float>
  %495 = bitcast <2 x i64> %493 to <4 x float>
  %496 = fadd <4 x float> %494, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %497 = fadd <4 x float> %496, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %498 = fsub <4 x float> %496, %497
  %499 = fsub <4 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %498
  %500 = fsub <4 x float> %494, %497
  %501 = fadd <4 x float> %500, %499
  %502 = fadd <4 x float> %495, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %503 = fadd <4 x float> %502, %501
  %504 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %479, <4 x float> %496, <4 x float> %18) #6
  %505 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %480, <4 x float> %503, <4 x float> %18) #6
  %506 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %504, <4 x float> <float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000>, <4 x float> %21) #6
  %507 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %505, <4 x float> <float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000>, <4 x float> %21) #6
  %508 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %488, <4 x float> %102, <4 x float> %18) #6
  %509 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %489, <4 x float> %103, <4 x float> %18) #6
  %510 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %508, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %21) #6
  %511 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %509, <4 x float> zeroinitializer, <4 x float> %21) #6
  %512 = bitcast <4 x i32> %9 to <16 x i8>
  %513 = xor <16 x i8> %512, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %514 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %513) #6
  %515 = icmp eq i32 %514, 65535
  br i1 %515, label %668, label %516

; <label>:516:                                    ; preds = %2
  %517 = fmul <4 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %518 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %517) #6
  %519 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %518) #6
  %520 = fmul <4 x float> %519, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %521 = fsub <4 x float> %1, %520
  %522 = fmul <4 x float> %521, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %523 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %522) #6
  %524 = lshr <4 x i32> %523, <i32 31, i32 31, i32 31, i32 31>
  %525 = xor <4 x i32> %524, <i32 1, i32 1, i32 1, i32 1>
  %526 = add <4 x i32> %525, %523
  %527 = and <4 x i32> %526, <i32 2, i32 2, i32 2, i32 2>
  %528 = icmp ne <4 x i32> %527, zeroinitializer
  %529 = sext <4 x i1> %528 to <4 x i32>
  %530 = and <4 x i32> %526, <i32 -2, i32 -2, i32 -2, i32 -2>
  %531 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %530) #6
  %532 = fsub <4 x float> %522, %531
  %533 = fmul <4 x float> %532, %532
  %534 = bitcast <4 x float> %532 to <2 x i64>
  %535 = and <2 x i64> %534, <i64 -17587891081216, i64 -17587891081216>
  %536 = bitcast <2 x i64> %535 to <4 x float>
  %537 = fsub <4 x float> %532, %536
  %538 = bitcast <4 x float> %533 to <2 x i64>
  %539 = xor <2 x i64> %538, <i64 -9223372034707292160, i64 -9223372034707292160>
  %540 = bitcast <2 x i64> %539 to <4 x float>
  %541 = fmul <4 x float> %536, %536
  %542 = fadd <4 x float> %541, %540
  %543 = fmul <4 x float> %537, %536
  %544 = fadd <4 x float> %543, %542
  %545 = fadd <4 x float> %543, %544
  %546 = fmul <4 x float> %537, %537
  %547 = fadd <4 x float> %546, %545
  %548 = bitcast <4 x i32> %529 to <4 x float>
  %549 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <4 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <4 x float> %548) #6
  %550 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <4 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <4 x float> %548) #6
  %551 = fmul <4 x float> %549, %533
  %552 = fadd <4 x float> %550, %551
  %553 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <4 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <4 x float> %548) #6
  %554 = fmul <4 x float> %533, %552
  %555 = fadd <4 x float> %553, %554
  %556 = fmul <4 x float> %533, %555
  %557 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <4 x float> %548) #6
  %558 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <4 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <4 x float> %548) #6
  %559 = fadd <4 x float> %557, %556
  %560 = fsub <4 x float> %559, %556
  %561 = fsub <4 x float> %559, %560
  %562 = fsub <4 x float> %556, %561
  %563 = fsub <4 x float> %557, %560
  %564 = fadd <4 x float> %563, %562
  %565 = fadd <4 x float> %558, %564
  %566 = and <2 x i64> %538, <i64 -17587891081216, i64 -17587891081216>
  %567 = bitcast <2 x i64> %566 to <4 x float>
  %568 = fsub <4 x float> %533, %567
  %569 = bitcast <4 x float> %559 to <2 x i64>
  %570 = and <2 x i64> %569, <i64 -17587891081216, i64 -17587891081216>
  %571 = bitcast <2 x i64> %570 to <4 x float>
  %572 = fsub <4 x float> %559, %571
  %573 = fmul <4 x float> %533, %559
  %574 = bitcast <4 x float> %573 to <2 x i64>
  %575 = xor <2 x i64> %574, <i64 -9223372034707292160, i64 -9223372034707292160>
  %576 = bitcast <2 x i64> %575 to <4 x float>
  %577 = fmul <4 x float> %567, %571
  %578 = fadd <4 x float> %577, %576
  %579 = fmul <4 x float> %568, %571
  %580 = fadd <4 x float> %579, %578
  %581 = fmul <4 x float> %572, %567
  %582 = fadd <4 x float> %581, %580
  %583 = fmul <4 x float> %568, %572
  %584 = fadd <4 x float> %583, %582
  %585 = fmul <4 x float> %533, %565
  %586 = fadd <4 x float> %585, %584
  %587 = fmul <4 x float> %559, %547
  %588 = fadd <4 x float> %587, %586
  %589 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <4 x float> %548) #6
  %590 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <4 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <4 x float> %548) #6
  %591 = fadd <4 x float> %589, %573
  %592 = fsub <4 x float> %591, %573
  %593 = fsub <4 x float> %591, %592
  %594 = fsub <4 x float> %573, %593
  %595 = fsub <4 x float> %589, %592
  %596 = fadd <4 x float> %595, %594
  %597 = fadd <4 x float> %590, %588
  %598 = fadd <4 x float> %596, %597
  %599 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %532, <4 x float> %533, <4 x float> %548) #6
  %600 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %547, <4 x float> %548) #6
  %601 = bitcast <4 x float> %591 to <2 x i64>
  %602 = and <2 x i64> %601, <i64 -17587891081216, i64 -17587891081216>
  %603 = bitcast <2 x i64> %602 to <4 x float>
  %604 = fsub <4 x float> %591, %603
  %605 = bitcast <4 x float> %599 to <2 x i64>
  %606 = and <2 x i64> %605, <i64 -17587891081216, i64 -17587891081216>
  %607 = bitcast <2 x i64> %606 to <4 x float>
  %608 = fsub <4 x float> %599, %607
  %609 = fmul <4 x float> %599, %591
  %610 = bitcast <4 x float> %609 to <2 x i64>
  %611 = xor <2 x i64> %610, <i64 -9223372034707292160, i64 -9223372034707292160>
  %612 = bitcast <2 x i64> %611 to <4 x float>
  %613 = fmul <4 x float> %607, %603
  %614 = fadd <4 x float> %613, %612
  %615 = fmul <4 x float> %604, %607
  %616 = fadd <4 x float> %615, %614
  %617 = fmul <4 x float> %608, %603
  %618 = fadd <4 x float> %617, %616
  %619 = fmul <4 x float> %608, %604
  %620 = fadd <4 x float> %619, %618
  %621 = fmul <4 x float> %600, %591
  %622 = fadd <4 x float> %621, %620
  %623 = fmul <4 x float> %599, %598
  %624 = fadd <4 x float> %622, %623
  %625 = fadd <4 x float> %609, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %626 = fsub <4 x float> %625, %609
  %627 = fsub <4 x float> %625, %626
  %628 = fsub <4 x float> %609, %627
  %629 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %626
  %630 = fadd <4 x float> %629, %628
  %631 = fadd <4 x float> %630, %624
  %632 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %609, <4 x float> %625, <4 x float> %548) #6
  %633 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %624, <4 x float> %631, <4 x float> %548) #6
  %634 = and <4 x i32> %526, <i32 4, i32 4, i32 4, i32 4>
  %635 = icmp ne <4 x i32> %634, zeroinitializer
  %636 = sext <4 x i1> %635 to <4 x i32>
  %637 = bitcast <4 x i32> %636 to <2 x i64>
  %638 = and <2 x i64> %637, <i64 -9223372034707292160, i64 -9223372034707292160>
  %639 = bitcast <4 x float> %632 to <2 x i64>
  %640 = xor <2 x i64> %638, %639
  %641 = bitcast <4 x float> %633 to <2 x i64>
  %642 = xor <2 x i64> %638, %641
  %643 = bitcast <2 x i64> %640 to <4 x float>
  %644 = bitcast <2 x i64> %642 to <4 x float>
  %645 = bitcast <4 x float> %488 to <2 x i64>
  %646 = and <2 x i64> %645, <i64 -17587891081216, i64 -17587891081216>
  %647 = bitcast <2 x i64> %646 to <4 x float>
  %648 = fsub <4 x float> %488, %647
  %649 = and <2 x i64> %640, <i64 -17587891081216, i64 -17587891081216>
  %650 = bitcast <2 x i64> %649 to <4 x float>
  %651 = fsub <4 x float> %643, %650
  %652 = fmul <4 x float> %488, %643
  %653 = bitcast <4 x float> %652 to <2 x i64>
  %654 = xor <2 x i64> %653, <i64 -9223372034707292160, i64 -9223372034707292160>
  %655 = bitcast <2 x i64> %654 to <4 x float>
  %656 = fmul <4 x float> %647, %650
  %657 = fadd <4 x float> %656, %655
  %658 = fmul <4 x float> %648, %650
  %659 = fadd <4 x float> %658, %657
  %660 = fmul <4 x float> %651, %647
  %661 = fadd <4 x float> %660, %659
  %662 = fmul <4 x float> %648, %651
  %663 = fadd <4 x float> %662, %661
  %664 = fmul <4 x float> %488, %644
  %665 = fadd <4 x float> %664, %663
  %666 = fmul <4 x float> %489, %643
  %667 = fadd <4 x float> %666, %665
  br label %668

; <label>:668:                                    ; preds = %2, %516
  %669 = phi <4 x float> [ %652, %516 ], [ %111, %2 ]
  %670 = phi <4 x float> [ %667, %516 ], [ %112, %2 ]
  %671 = fmul <4 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %672 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %102, <4 x float> %669, <4 x float> %18) #6
  %673 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %103, <4 x float> %670, <4 x float> %18) #6
  %674 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %672, <4 x float> %671, <4 x float> %21) #6
  %675 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %673, <4 x float> zeroinitializer, <4 x float> %21) #6
  %676 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %674
  %677 = bitcast <4 x float> %674 to <2 x i64>
  %678 = and <2 x i64> %677, <i64 -17587891081216, i64 -17587891081216>
  %679 = bitcast <2 x i64> %678 to <4 x float>
  %680 = fsub <4 x float> %674, %679
  %681 = bitcast <4 x float> %676 to <2 x i64>
  %682 = and <2 x i64> %681, <i64 -17587891081216, i64 -17587891081216>
  %683 = bitcast <2 x i64> %682 to <4 x float>
  %684 = fsub <4 x float> %676, %683
  %685 = bitcast <4 x float> %510 to <2 x i64>
  %686 = and <2 x i64> %685, <i64 -17587891081216, i64 -17587891081216>
  %687 = bitcast <2 x i64> %686 to <4 x float>
  %688 = fsub <4 x float> %510, %687
  %689 = fmul <4 x float> %510, %676
  %690 = fmul <4 x float> %679, %683
  %691 = fadd <4 x float> %690, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %692 = fmul <4 x float> %684, %679
  %693 = fadd <4 x float> %692, %691
  %694 = fmul <4 x float> %680, %683
  %695 = fadd <4 x float> %694, %693
  %696 = fmul <4 x float> %680, %684
  %697 = fadd <4 x float> %696, %695
  %698 = bitcast <4 x float> %697 to <2 x i64>
  %699 = xor <2 x i64> %698, <i64 -9223372034707292160, i64 -9223372034707292160>
  %700 = bitcast <2 x i64> %699 to <4 x float>
  %701 = bitcast <4 x float> %689 to <2 x i64>
  %702 = xor <2 x i64> %701, <i64 -9223372034707292160, i64 -9223372034707292160>
  %703 = bitcast <2 x i64> %702 to <4 x float>
  %704 = fmul <4 x float> %687, %683
  %705 = fadd <4 x float> %704, %703
  %706 = fmul <4 x float> %684, %687
  %707 = fadd <4 x float> %706, %705
  %708 = fmul <4 x float> %688, %683
  %709 = fadd <4 x float> %708, %707
  %710 = fmul <4 x float> %688, %684
  %711 = fadd <4 x float> %710, %709
  %712 = fmul <4 x float> %689, %700
  %713 = fadd <4 x float> %711, %712
  %714 = fmul <4 x float> %675, %689
  %715 = fsub <4 x float> %511, %714
  %716 = fmul <4 x float> %676, %715
  %717 = fadd <4 x float> %716, %713
  %718 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 0
  store <4 x float> %506, <4 x float>* %718, align 16
  %719 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  store <4 x float> %507, <4 x float>* %719, align 16
  %720 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <4 x float> %689, <4 x float>* %720, align 16
  %721 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <4 x float> %717, <4 x float>* %721, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_lgammaf4_u10sse4(<4 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 16
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <4 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x float>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <4 x float>
  %14 = bitcast <2 x i64> %12 to <4 x float>
  %15 = fmul <4 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = fcmp olt <4 x float> %15, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = fmul <4 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %19 = bitcast <4 x i32> %17 to <4 x float>
  %20 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %18, <4 x float> %19) #6
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <4 x i32> %17 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %23) #6
  %25 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %24 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %29 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %28
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = fmul <4 x float> %13, %30
  %32 = fmul <4 x float> %14, %30
  %33 = fadd <4 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <4 x float> %33, %31
  %35 = fsub <4 x float> %33, %34
  %36 = fsub <4 x float> %31, %35
  %37 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %34
  %38 = fadd <4 x float> %37, %36
  %39 = fadd <4 x float> %32, %38
  %40 = fadd <4 x float> %31, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %41 = fsub <4 x float> %40, %31
  %42 = fsub <4 x float> %40, %41
  %43 = fsub <4 x float> %31, %42
  %44 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %45 = fadd <4 x float> %44, %43
  %46 = fadd <4 x float> %32, %45
  %47 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %40
  %48 = bitcast <4 x float> %40 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %40, %50
  %52 = bitcast <4 x float> %47 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %47, %54
  %56 = bitcast <4 x float> %33 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %33, %58
  %60 = fmul <4 x float> %33, %47
  %61 = fmul <4 x float> %50, %54
  %62 = fadd <4 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <4 x float> %55, %50
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %51, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %51, %55
  %68 = fadd <4 x float> %67, %66
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = bitcast <4 x float> %60 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %58, %54
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %55, %58
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %59, %54
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %59, %55
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %60, %71
  %84 = fadd <4 x float> %82, %83
  %85 = fmul <4 x float> %60, %46
  %86 = fsub <4 x float> %39, %85
  %87 = fmul <4 x float> %47, %86
  %88 = fadd <4 x float> %87, %84
  %89 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fsub <4 x float> %60, %90
  %92 = fmul <4 x float> %60, %60
  %93 = bitcast <4 x float> %92 to <2 x i64>
  %94 = xor <2 x i64> %93, <i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fmul <4 x float> %90, %90
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %90, %90
  %99 = fmul <4 x float> %98, %91
  %100 = fadd <4 x float> %99, %97
  %101 = fmul <4 x float> %91, %91
  %102 = fadd <4 x float> %101, %100
  %103 = fadd <4 x float> %88, %88
  %104 = fmul <4 x float> %60, %103
  %105 = fadd <4 x float> %102, %104
  %106 = fmul <4 x float> %92, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %107 = fadd <4 x float> %106, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %108 = fmul <4 x float> %92, %107
  %109 = fadd <4 x float> %108, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %110 = fmul <4 x float> %92, %109
  %111 = fadd <4 x float> %110, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %112 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %27) #6
  %113 = bitcast <4 x float> %112 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %115 = bitcast <2 x i64> %114 to <4 x float>
  %116 = fsub <4 x float> %112, %115
  %117 = fmul <4 x float> %112, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %118 = bitcast <4 x float> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = fmul <4 x float> %115, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %115, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %124 = fadd <4 x float> %123, %122
  %125 = fmul <4 x float> %116, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %126 = fadd <4 x float> %125, %124
  %127 = fmul <4 x float> %116, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %128 = fadd <4 x float> %127, %126
  %129 = fmul <4 x float> %112, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %132 = fmul <4 x float> %88, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %133 = fadd <4 x float> %117, %131
  %134 = fsub <4 x float> %117, %133
  %135 = fadd <4 x float> %131, %134
  %136 = fadd <4 x float> %130, %135
  %137 = fadd <4 x float> %136, %132
  %138 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %139 = bitcast <2 x i64> %138 to <4 x float>
  %140 = fsub <4 x float> %92, %139
  %141 = fmul <4 x float> %60, %92
  %142 = bitcast <4 x float> %141 to <2 x i64>
  %143 = xor <2 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <2 x i64> %143 to <4 x float>
  %145 = fmul <4 x float> %90, %139
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %140, %90
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %91, %139
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %91, %140
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %92, %88
  %154 = fadd <4 x float> %152, %153
  %155 = fmul <4 x float> %60, %105
  %156 = fadd <4 x float> %154, %155
  %157 = and <2 x i64> %142, <i64 -17587891081216, i64 -17587891081216>
  %158 = bitcast <2 x i64> %157 to <4 x float>
  %159 = fsub <4 x float> %141, %158
  %160 = bitcast <4 x float> %111 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 -17587891081216, i64 -17587891081216>
  %162 = bitcast <2 x i64> %161 to <4 x float>
  %163 = fsub <4 x float> %111, %162
  %164 = fmul <4 x float> %141, %111
  %165 = bitcast <4 x float> %164 to <2 x i64>
  %166 = xor <2 x i64> %165, <i64 -9223372034707292160, i64 -9223372034707292160>
  %167 = bitcast <2 x i64> %166 to <4 x float>
  %168 = fmul <4 x float> %158, %162
  %169 = fadd <4 x float> %168, %167
  %170 = fmul <4 x float> %159, %162
  %171 = fadd <4 x float> %170, %169
  %172 = fmul <4 x float> %163, %158
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %159, %163
  %175 = fadd <4 x float> %174, %173
  %176 = fmul <4 x float> %111, %156
  %177 = fadd <4 x float> %175, %176
  %178 = fadd <4 x float> %133, %164
  %179 = fsub <4 x float> %133, %178
  %180 = fadd <4 x float> %164, %179
  %181 = fadd <4 x float> %180, %137
  %182 = fadd <4 x float> %181, %177
  %183 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %184 = load <4 x float>, <4 x float>* %183, align 16
  %185 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %186 = load <4 x float>, <4 x float>* %185, align 16
  %187 = fadd <4 x float> %184, %178
  %188 = fsub <4 x float> %187, %184
  %189 = fsub <4 x float> %187, %188
  %190 = fsub <4 x float> %184, %189
  %191 = fsub <4 x float> %178, %188
  %192 = fadd <4 x float> %191, %190
  %193 = fadd <4 x float> %186, %182
  %194 = fadd <4 x float> %192, %193
  %195 = fadd <4 x float> %187, %194
  %196 = bitcast <4 x float> %0 to <2 x i64>
  %197 = and <2 x i64> %196, <i64 9223372034707292159, i64 9223372034707292159>
  %198 = bitcast <2 x i64> %197 to <4 x float>
  %199 = fcmp oeq <4 x float> %198, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %200 = fcmp ole <4 x float> %0, zeroinitializer
  %201 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 11) #6
  %202 = fcmp oeq <4 x float> %201, %0
  %203 = and <4 x i1> %202, %200
  %204 = fcmp uno <4 x float> %0, zeroinitializer
  %205 = or <4 x i1> %199, %204
  %206 = sext <4 x i1> %205 to <4 x i32>
  %207 = bitcast <4 x i32> %206 to <2 x i64>
  %208 = xor <2 x i64> %207, <i64 -1, i64 -1>
  %209 = fcmp uno <4 x float> %195, zeroinitializer
  %210 = sext <4 x i1> %209 to <4 x i32>
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = and <2 x i64> %211, %208
  %213 = or <4 x i1> %203, %199
  %214 = sext <4 x i1> %213 to <4 x i32>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = or <2 x i64> %212, %215
  %217 = bitcast <2 x i64> %216 to <4 x float>
  %218 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %195, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %217) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <4 x float> %218
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_erff4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fcmp olt <4 x float> %4, <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>
  %8 = sext <4 x i1> %7 to <4 x i32>
  %9 = fcmp olt <4 x float> %4, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %4, %4
  %12 = bitcast <4 x i32> %6 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %11, <4 x float> %12) #6
  %14 = bitcast <4 x i32> %8 to <4 x float>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>, <4 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <4 x float> %14) #6
  %16 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <4 x float> %12) #6
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>, <4 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <4 x float> %14) #6
  %18 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %17, <4 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <4 x float> %12) #6
  %19 = fmul <4 x float> %13, %16
  %20 = fadd <4 x float> %19, %18
  %21 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>, <4 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <4 x float> %14) #6
  %22 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %21, <4 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <4 x float> %12) #6
  %23 = fmul <4 x float> %13, %20
  %24 = fadd <4 x float> %23, %22
  %25 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>, <4 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <4 x float> %14) #6
  %26 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %25, <4 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <4 x float> %12) #6
  %27 = fmul <4 x float> %13, %24
  %28 = fadd <4 x float> %27, %26
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>, <4 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <4 x float> %14) #6
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %29, <4 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <4 x float> %12) #6
  %31 = fmul <4 x float> %13, %28
  %32 = fadd <4 x float> %31, %30
  %33 = bitcast <4 x float> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fsub <4 x float> %32, %35
  %37 = bitcast <4 x float> %13 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %13, %39
  %41 = fmul <4 x float> %13, %32
  %42 = bitcast <4 x float> %41 to <2 x i64>
  %43 = xor <2 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = fmul <4 x float> %39, %35
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %36, %39
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %40, %35
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %40, %36
  %52 = fadd <4 x float> %51, %50
  %53 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>, <4 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <4 x float> %14) #6
  %54 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>, <4 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <4 x float> %14) #6
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %53, <4 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <4 x float> %12) #6
  %56 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %54, <4 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <4 x float> %12) #6
  %57 = fadd <4 x float> %41, %55
  %58 = fsub <4 x float> %57, %41
  %59 = fsub <4 x float> %57, %58
  %60 = fsub <4 x float> %41, %59
  %61 = fsub <4 x float> %55, %58
  %62 = fadd <4 x float> %61, %60
  %63 = fadd <4 x float> %56, %52
  %64 = fadd <4 x float> %62, %63
  %65 = bitcast <4 x float> %57 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %67 = bitcast <2 x i64> %66 to <4 x float>
  %68 = fsub <4 x float> %57, %67
  %69 = fmul <4 x float> %13, %57
  %70 = bitcast <4 x float> %69 to <2 x i64>
  %71 = xor <2 x i64> %70, <i64 -9223372034707292160, i64 -9223372034707292160>
  %72 = bitcast <2 x i64> %71 to <4 x float>
  %73 = fmul <4 x float> %39, %67
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %68, %39
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %40, %67
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %40, %68
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %13, %64
  %82 = fadd <4 x float> %81, %80
  %83 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>, <4 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <4 x float> %14) #6
  %84 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>, <4 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <4 x float> %14) #6
  %85 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %83, <4 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <4 x float> %12) #6
  %86 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %84, <4 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <4 x float> %12) #6
  %87 = fadd <4 x float> %69, %85
  %88 = fsub <4 x float> %87, %69
  %89 = fsub <4 x float> %87, %88
  %90 = fsub <4 x float> %69, %89
  %91 = fsub <4 x float> %85, %88
  %92 = fadd <4 x float> %91, %90
  %93 = fadd <4 x float> %86, %82
  %94 = fadd <4 x float> %92, %93
  %95 = bitcast <4 x float> %87 to <2 x i64>
  %96 = and <2 x i64> %95, <i64 -17587891081216, i64 -17587891081216>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fsub <4 x float> %87, %97
  %99 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = fsub <4 x float> %4, %100
  %102 = fmul <4 x float> %87, %4
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = bitcast <2 x i64> %104 to <4 x float>
  %106 = fmul <4 x float> %100, %97
  %107 = fadd <4 x float> %106, %105
  %108 = fmul <4 x float> %98, %100
  %109 = fadd <4 x float> %108, %107
  %110 = fmul <4 x float> %101, %97
  %111 = fadd <4 x float> %110, %109
  %112 = fmul <4 x float> %101, %98
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %94, %4
  %115 = fadd <4 x float> %114, %113
  %116 = fadd <4 x float> %102, %115
  %117 = fmul <4 x float> %116, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %118 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %117) #6
  %119 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %118) #6
  %120 = fmul <4 x float> %119, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %121 = fadd <4 x float> %102, %120
  %122 = fsub <4 x float> %121, %102
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %102, %123
  %125 = fsub <4 x float> %120, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %126, %115
  %128 = fmul <4 x float> %119, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %129 = fadd <4 x float> %128, %121
  %130 = fsub <4 x float> %129, %121
  %131 = fsub <4 x float> %129, %130
  %132 = fsub <4 x float> %121, %131
  %133 = fsub <4 x float> %128, %130
  %134 = fadd <4 x float> %133, %132
  %135 = fadd <4 x float> %134, %127
  %136 = fmul <4 x float> %129, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %137 = fadd <4 x float> %136, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %138 = fmul <4 x float> %129, %137
  %139 = fadd <4 x float> %138, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %140 = fmul <4 x float> %129, %139
  %141 = fadd <4 x float> %140, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %142 = bitcast <4 x float> %129 to <2 x i64>
  %143 = and <2 x i64> %142, <i64 -17587891081216, i64 -17587891081216>
  %144 = bitcast <2 x i64> %143 to <4 x float>
  %145 = fsub <4 x float> %129, %144
  %146 = bitcast <4 x float> %141 to <2 x i64>
  %147 = and <2 x i64> %146, <i64 -17587891081216, i64 -17587891081216>
  %148 = bitcast <2 x i64> %147 to <4 x float>
  %149 = fsub <4 x float> %141, %148
  %150 = fmul <4 x float> %129, %141
  %151 = bitcast <4 x float> %150 to <2 x i64>
  %152 = xor <2 x i64> %151, <i64 -9223372034707292160, i64 -9223372034707292160>
  %153 = bitcast <2 x i64> %152 to <4 x float>
  %154 = fmul <4 x float> %144, %148
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %145, %148
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %149, %144
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %145, %149
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %135, %141
  %163 = fadd <4 x float> %162, %161
  %164 = fadd <4 x float> %150, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %165 = fsub <4 x float> %164, %150
  %166 = fsub <4 x float> %164, %165
  %167 = fsub <4 x float> %150, %166
  %168 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %165
  %169 = fadd <4 x float> %168, %167
  %170 = fadd <4 x float> %169, %163
  %171 = bitcast <4 x float> %164 to <2 x i64>
  %172 = and <2 x i64> %171, <i64 -17587891081216, i64 -17587891081216>
  %173 = bitcast <2 x i64> %172 to <4 x float>
  %174 = fsub <4 x float> %164, %173
  %175 = fmul <4 x float> %129, %164
  %176 = bitcast <4 x float> %175 to <2 x i64>
  %177 = xor <2 x i64> %176, <i64 -9223372034707292160, i64 -9223372034707292160>
  %178 = bitcast <2 x i64> %177 to <4 x float>
  %179 = fmul <4 x float> %144, %173
  %180 = fadd <4 x float> %179, %178
  %181 = fmul <4 x float> %145, %173
  %182 = fadd <4 x float> %181, %180
  %183 = fmul <4 x float> %174, %144
  %184 = fadd <4 x float> %183, %182
  %185 = fmul <4 x float> %145, %174
  %186 = fadd <4 x float> %185, %184
  %187 = fmul <4 x float> %129, %170
  %188 = fadd <4 x float> %186, %187
  %189 = fmul <4 x float> %135, %164
  %190 = fadd <4 x float> %189, %188
  %191 = fadd <4 x float> %175, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %192 = fsub <4 x float> %191, %175
  %193 = fsub <4 x float> %191, %192
  %194 = fsub <4 x float> %175, %193
  %195 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %192
  %196 = fadd <4 x float> %195, %194
  %197 = fadd <4 x float> %196, %190
  %198 = fmul <4 x float> %129, %129
  %199 = bitcast <4 x float> %198 to <2 x i64>
  %200 = xor <2 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160>
  %201 = bitcast <2 x i64> %200 to <4 x float>
  %202 = fmul <4 x float> %144, %144
  %203 = fadd <4 x float> %202, %201
  %204 = fadd <4 x float> %144, %144
  %205 = fmul <4 x float> %204, %145
  %206 = fadd <4 x float> %205, %203
  %207 = fmul <4 x float> %145, %145
  %208 = fadd <4 x float> %207, %206
  %209 = fadd <4 x float> %135, %135
  %210 = fmul <4 x float> %129, %209
  %211 = fadd <4 x float> %208, %210
  %212 = and <2 x i64> %199, <i64 -17587891081216, i64 -17587891081216>
  %213 = bitcast <2 x i64> %212 to <4 x float>
  %214 = fsub <4 x float> %198, %213
  %215 = bitcast <4 x float> %191 to <2 x i64>
  %216 = and <2 x i64> %215, <i64 -17587891081216, i64 -17587891081216>
  %217 = bitcast <2 x i64> %216 to <4 x float>
  %218 = fsub <4 x float> %191, %217
  %219 = fmul <4 x float> %198, %191
  %220 = bitcast <4 x float> %219 to <2 x i64>
  %221 = xor <2 x i64> %220, <i64 -9223372034707292160, i64 -9223372034707292160>
  %222 = bitcast <2 x i64> %221 to <4 x float>
  %223 = fmul <4 x float> %213, %217
  %224 = fadd <4 x float> %223, %222
  %225 = fmul <4 x float> %214, %217
  %226 = fadd <4 x float> %225, %224
  %227 = fmul <4 x float> %218, %213
  %228 = fadd <4 x float> %227, %226
  %229 = fmul <4 x float> %214, %218
  %230 = fadd <4 x float> %229, %228
  %231 = fmul <4 x float> %198, %197
  %232 = fadd <4 x float> %230, %231
  %233 = fmul <4 x float> %211, %191
  %234 = fadd <4 x float> %233, %232
  %235 = fadd <4 x float> %129, %219
  %236 = fsub <4 x float> %235, %129
  %237 = fsub <4 x float> %235, %236
  %238 = fsub <4 x float> %129, %237
  %239 = fsub <4 x float> %219, %236
  %240 = fadd <4 x float> %239, %238
  %241 = fadd <4 x float> %135, %234
  %242 = fadd <4 x float> %240, %241
  %243 = fadd <4 x float> %235, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %244 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %243
  %245 = fadd <4 x float> %235, %244
  %246 = fadd <4 x float> %245, %242
  %247 = ashr <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %248 = shl <4 x i32> %247, <i32 23, i32 23, i32 23, i32 23>
  %249 = add <4 x i32> %248, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %250 = bitcast <4 x i32> %249 to <4 x float>
  %251 = fmul <4 x float> %243, %250
  %252 = sub <4 x i32> %118, %247
  %253 = shl <4 x i32> %252, <i32 23, i32 23, i32 23, i32 23>
  %254 = add <4 x i32> %253, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %255 = bitcast <4 x i32> %254 to <4 x float>
  %256 = fmul <4 x float> %251, %255
  %257 = fmul <4 x float> %246, %250
  %258 = fmul <4 x float> %257, %255
  %259 = fcmp olt <4 x float> %102, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %260 = sext <4 x i1> %259 to <4 x i32>
  %261 = bitcast <4 x i32> %260 to <2 x i64>
  %262 = bitcast <4 x float> %256 to <2 x i64>
  %263 = xor <2 x i64> %261, <i64 -1, i64 -1>
  %264 = and <2 x i64> %262, %263
  %265 = bitcast <4 x float> %258 to <2 x i64>
  %266 = and <2 x i64> %265, %263
  %267 = xor <2 x i64> %264, <i64 -9223372034707292160, i64 -9223372034707292160>
  %268 = xor <2 x i64> %266, <i64 -9223372034707292160, i64 -9223372034707292160>
  %269 = bitcast <2 x i64> %267 to <4 x float>
  %270 = bitcast <2 x i64> %268 to <4 x float>
  %271 = fadd <4 x float> %269, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %272 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %271
  %273 = fadd <4 x float> %272, %269
  %274 = fadd <4 x float> %273, %270
  %275 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %271, <4 x float> %102, <4 x float> %12) #6
  %276 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %274, <4 x float> %115, <4 x float> %12) #6
  %277 = fadd <4 x float> %275, %276
  %278 = bitcast <4 x i32> %10 to <4 x float>
  %279 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %277, <4 x float> %278) #6
  %280 = bitcast <4 x float> %279 to <2 x i64>
  %281 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %282 = xor <2 x i64> %281, %280
  %283 = bitcast <2 x i64> %282 to <4 x float>
  %284 = fcmp uno <4 x float> %4, zeroinitializer
  %285 = sext <4 x i1> %284 to <4 x i32>
  %286 = bitcast <4 x i32> %285 to <4 x float>
  %287 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %283, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %286) #6
  ret <4 x float> %287
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_erfcf4_u15sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fcmp olt <4 x float> %4, <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>
  %8 = sext <4 x i1> %7 to <4 x i32>
  %9 = fcmp olt <4 x float> %4, <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fcmp olt <4 x float> %4, <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %14 = and <2 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fsub <4 x float> %4, %15
  %17 = bitcast <4 x float> %13 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 -17587891081216, i64 -17587891081216>
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = fsub <4 x float> %13, %19
  %21 = fmul <4 x float> %15, %19
  %22 = fadd <4 x float> %21, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fmul <4 x float> %20, %15
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %16, %19
  %26 = fadd <4 x float> %25, %24
  %27 = fmul <4 x float> %16, %20
  %28 = fadd <4 x float> %27, %26
  %29 = bitcast <4 x float> %28 to <2 x i64>
  %30 = xor <2 x i64> %29, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = xor <2 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fadd <4 x float> %19, %33
  %35 = fadd <4 x float> %20, %34
  %36 = fmul <4 x float> %19, zeroinitializer
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %20, zeroinitializer
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %13, %31
  %41 = fadd <4 x float> %39, %40
  %42 = fmul <4 x float> %13, zeroinitializer
  %43 = fsub <4 x float> zeroinitializer, %42
  %44 = fmul <4 x float> %13, %43
  %45 = fadd <4 x float> %44, %41
  %46 = bitcast <4 x i32> %8 to <4 x float>
  %47 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %4, <4 x float> %46) #6
  %48 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %45, <4 x float> zeroinitializer, <4 x float> %46) #6
  %49 = bitcast <4 x i32> %10 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000>, <4 x float> <float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000>, <4 x float> %49) #6
  %51 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %50, <4 x float> <float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000>, <4 x float> %46) #6
  %52 = bitcast <4 x i32> %6 to <4 x float>
  %53 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %51, <4 x float> <float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000>, <4 x float> %52) #6
  %54 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000>, <4 x float> <float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000>, <4 x float> %49) #6
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %54, <4 x float> <float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000>, <4 x float> %46) #6
  %56 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %55, <4 x float> <float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000>, <4 x float> %52) #6
  %57 = fmul <4 x float> %47, %53
  %58 = fadd <4 x float> %57, %56
  %59 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000>, <4 x float> <float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000>, <4 x float> %49) #6
  %60 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %59, <4 x float> <float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000>, <4 x float> %46) #6
  %61 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %60, <4 x float> <float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000>, <4 x float> %52) #6
  %62 = fmul <4 x float> %47, %58
  %63 = fadd <4 x float> %62, %61
  %64 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000>, <4 x float> <float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000>, <4 x float> %49) #6
  %65 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %64, <4 x float> <float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000>, <4 x float> %46) #6
  %66 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %65, <4 x float> <float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000>, <4 x float> %52) #6
  %67 = fmul <4 x float> %47, %63
  %68 = fadd <4 x float> %67, %66
  %69 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000>, <4 x float> <float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000>, <4 x float> %49) #6
  %70 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %69, <4 x float> <float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000>, <4 x float> %46) #6
  %71 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %70, <4 x float> <float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000>, <4 x float> %52) #6
  %72 = fmul <4 x float> %47, %68
  %73 = fadd <4 x float> %72, %71
  %74 = bitcast <4 x float> %47 to <2 x i64>
  %75 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fsub <4 x float> %47, %76
  %78 = bitcast <4 x float> %73 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -17587891081216, i64 -17587891081216>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = fsub <4 x float> %73, %80
  %82 = fmul <4 x float> %47, %73
  %83 = bitcast <4 x float> %82 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fmul <4 x float> %76, %80
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %77, %80
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %81, %76
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %77, %81
  %93 = fadd <4 x float> %92, %91
  %94 = fmul <4 x float> %48, %73
  %95 = fadd <4 x float> %94, %93
  %96 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000>, <4 x float> <float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000>, <4 x float> %49) #6
  %97 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000>, <4 x float> <float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000>, <4 x float> %49) #6
  %98 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %96, <4 x float> <float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000>, <4 x float> %46) #6
  %99 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %97, <4 x float> <float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000>, <4 x float> %46) #6
  %100 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %98, <4 x float> <float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000>, <4 x float> %52) #6
  %101 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %99, <4 x float> <float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000>, <4 x float> %52) #6
  %102 = fadd <4 x float> %82, %100
  %103 = fsub <4 x float> %102, %82
  %104 = fsub <4 x float> %102, %103
  %105 = fsub <4 x float> %82, %104
  %106 = fsub <4 x float> %100, %103
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %101, %95
  %109 = fadd <4 x float> %107, %108
  %110 = bitcast <4 x float> %102 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -17587891081216, i64 -17587891081216>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fsub <4 x float> %102, %112
  %114 = fmul <4 x float> %47, %102
  %115 = bitcast <4 x float> %114 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372034707292160, i64 -9223372034707292160>
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fmul <4 x float> %76, %112
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %113, %76
  %121 = fadd <4 x float> %120, %119
  %122 = fmul <4 x float> %77, %112
  %123 = fadd <4 x float> %122, %121
  %124 = fmul <4 x float> %77, %113
  %125 = fadd <4 x float> %124, %123
  %126 = fmul <4 x float> %48, %102
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %47, %109
  %129 = fadd <4 x float> %128, %127
  %130 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000>, <4 x float> <float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000>, <4 x float> %49) #6
  %131 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000>, <4 x float> <float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000>, <4 x float> %49) #6
  %132 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %130, <4 x float> <float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000>, <4 x float> %46) #6
  %133 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %131, <4 x float> <float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000>, <4 x float> %46) #6
  %134 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %132, <4 x float> <float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000>, <4 x float> %52) #6
  %135 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %133, <4 x float> <float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000>, <4 x float> %52) #6
  %136 = fadd <4 x float> %114, %134
  %137 = fsub <4 x float> %136, %114
  %138 = fsub <4 x float> %136, %137
  %139 = fsub <4 x float> %114, %138
  %140 = fsub <4 x float> %134, %137
  %141 = fadd <4 x float> %140, %139
  %142 = fadd <4 x float> %135, %129
  %143 = fadd <4 x float> %141, %142
  %144 = bitcast <4 x float> %136 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <2 x i64> %145 to <4 x float>
  %147 = fsub <4 x float> %136, %146
  %148 = fmul <4 x float> %47, %136
  %149 = bitcast <4 x float> %148 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <2 x i64> %150 to <4 x float>
  %152 = fmul <4 x float> %76, %146
  %153 = fadd <4 x float> %152, %151
  %154 = fmul <4 x float> %147, %76
  %155 = fadd <4 x float> %154, %153
  %156 = fmul <4 x float> %77, %146
  %157 = fadd <4 x float> %156, %155
  %158 = fmul <4 x float> %77, %147
  %159 = fadd <4 x float> %158, %157
  %160 = fmul <4 x float> %48, %136
  %161 = fadd <4 x float> %160, %159
  %162 = fmul <4 x float> %47, %143
  %163 = fadd <4 x float> %162, %161
  %164 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000>, <4 x float> <float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000>, <4 x float> %49) #6
  %165 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000>, <4 x float> <float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000>, <4 x float> %49) #6
  %166 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %164, <4 x float> <float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000>, <4 x float> %46) #6
  %167 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %165, <4 x float> <float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000>, <4 x float> %46) #6
  %168 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %166, <4 x float> <float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000>, <4 x float> %52) #6
  %169 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %167, <4 x float> <float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000>, <4 x float> %52) #6
  %170 = fadd <4 x float> %148, %168
  %171 = fsub <4 x float> %170, %148
  %172 = fsub <4 x float> %170, %171
  %173 = fsub <4 x float> %148, %172
  %174 = fsub <4 x float> %168, %171
  %175 = fadd <4 x float> %174, %173
  %176 = fadd <4 x float> %169, %163
  %177 = fadd <4 x float> %175, %176
  %178 = or <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %179 = bitcast <2 x i64> %178 to <4 x float>
  %180 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %179, <4 x float> %170, <4 x float> %46) #6
  %181 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %177, <4 x float> %46) #6
  %182 = bitcast <4 x float> %180 to <2 x i64>
  %183 = and <2 x i64> %182, <i64 -17587891081216, i64 -17587891081216>
  %184 = bitcast <2 x i64> %183 to <4 x float>
  %185 = fsub <4 x float> %180, %184
  %186 = fmul <4 x float> %180, %4
  %187 = bitcast <4 x float> %186 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 -9223372034707292160, i64 -9223372034707292160>
  %189 = bitcast <2 x i64> %188 to <4 x float>
  %190 = fmul <4 x float> %15, %184
  %191 = fadd <4 x float> %190, %189
  %192 = fmul <4 x float> %185, %15
  %193 = fadd <4 x float> %192, %191
  %194 = fmul <4 x float> %16, %184
  %195 = fadd <4 x float> %194, %193
  %196 = fmul <4 x float> %16, %185
  %197 = fadd <4 x float> %196, %195
  %198 = fmul <4 x float> %181, %4
  %199 = fadd <4 x float> %198, %197
  %200 = fadd <4 x float> %170, %186
  %201 = fsub <4 x float> %200, %186
  %202 = fsub <4 x float> %200, %201
  %203 = fsub <4 x float> %186, %202
  %204 = fsub <4 x float> %170, %201
  %205 = fadd <4 x float> %204, %203
  %206 = fadd <4 x float> %177, %199
  %207 = fadd <4 x float> %205, %206
  %208 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %200, <4 x float> %186, <4 x float> %46) #6
  %209 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %207, <4 x float> %199, <4 x float> %46) #6
  %210 = fadd <4 x float> %208, %209
  %211 = fmul <4 x float> %210, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %212 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %211) #6
  %213 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %212) #6
  %214 = fmul <4 x float> %213, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %215 = fadd <4 x float> %208, %214
  %216 = fsub <4 x float> %215, %208
  %217 = fsub <4 x float> %215, %216
  %218 = fsub <4 x float> %208, %217
  %219 = fsub <4 x float> %214, %216
  %220 = fadd <4 x float> %219, %218
  %221 = fadd <4 x float> %209, %220
  %222 = fmul <4 x float> %213, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %223 = fadd <4 x float> %222, %215
  %224 = fsub <4 x float> %223, %215
  %225 = fsub <4 x float> %223, %224
  %226 = fsub <4 x float> %215, %225
  %227 = fsub <4 x float> %222, %224
  %228 = fadd <4 x float> %227, %226
  %229 = fadd <4 x float> %228, %221
  %230 = fmul <4 x float> %223, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %231 = fadd <4 x float> %230, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %232 = fmul <4 x float> %223, %231
  %233 = fadd <4 x float> %232, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %234 = fmul <4 x float> %223, %233
  %235 = fadd <4 x float> %234, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %236 = bitcast <4 x float> %223 to <2 x i64>
  %237 = and <2 x i64> %236, <i64 -17587891081216, i64 -17587891081216>
  %238 = bitcast <2 x i64> %237 to <4 x float>
  %239 = fsub <4 x float> %223, %238
  %240 = bitcast <4 x float> %235 to <2 x i64>
  %241 = and <2 x i64> %240, <i64 -17587891081216, i64 -17587891081216>
  %242 = bitcast <2 x i64> %241 to <4 x float>
  %243 = fsub <4 x float> %235, %242
  %244 = fmul <4 x float> %223, %235
  %245 = bitcast <4 x float> %244 to <2 x i64>
  %246 = xor <2 x i64> %245, <i64 -9223372034707292160, i64 -9223372034707292160>
  %247 = bitcast <2 x i64> %246 to <4 x float>
  %248 = fmul <4 x float> %238, %242
  %249 = fadd <4 x float> %248, %247
  %250 = fmul <4 x float> %239, %242
  %251 = fadd <4 x float> %250, %249
  %252 = fmul <4 x float> %243, %238
  %253 = fadd <4 x float> %252, %251
  %254 = fmul <4 x float> %239, %243
  %255 = fadd <4 x float> %254, %253
  %256 = fmul <4 x float> %229, %235
  %257 = fadd <4 x float> %256, %255
  %258 = fadd <4 x float> %244, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %259 = fsub <4 x float> %258, %244
  %260 = fsub <4 x float> %258, %259
  %261 = fsub <4 x float> %244, %260
  %262 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %259
  %263 = fadd <4 x float> %262, %261
  %264 = fadd <4 x float> %263, %257
  %265 = bitcast <4 x float> %258 to <2 x i64>
  %266 = and <2 x i64> %265, <i64 -17587891081216, i64 -17587891081216>
  %267 = bitcast <2 x i64> %266 to <4 x float>
  %268 = fsub <4 x float> %258, %267
  %269 = fmul <4 x float> %223, %258
  %270 = bitcast <4 x float> %269 to <2 x i64>
  %271 = xor <2 x i64> %270, <i64 -9223372034707292160, i64 -9223372034707292160>
  %272 = bitcast <2 x i64> %271 to <4 x float>
  %273 = fmul <4 x float> %238, %267
  %274 = fadd <4 x float> %273, %272
  %275 = fmul <4 x float> %239, %267
  %276 = fadd <4 x float> %275, %274
  %277 = fmul <4 x float> %268, %238
  %278 = fadd <4 x float> %277, %276
  %279 = fmul <4 x float> %239, %268
  %280 = fadd <4 x float> %279, %278
  %281 = fmul <4 x float> %223, %264
  %282 = fadd <4 x float> %280, %281
  %283 = fmul <4 x float> %229, %258
  %284 = fadd <4 x float> %283, %282
  %285 = fadd <4 x float> %269, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %286 = fsub <4 x float> %285, %269
  %287 = fsub <4 x float> %285, %286
  %288 = fsub <4 x float> %269, %287
  %289 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %286
  %290 = fadd <4 x float> %289, %288
  %291 = fadd <4 x float> %290, %284
  %292 = fmul <4 x float> %223, %223
  %293 = bitcast <4 x float> %292 to <2 x i64>
  %294 = xor <2 x i64> %293, <i64 -9223372034707292160, i64 -9223372034707292160>
  %295 = bitcast <2 x i64> %294 to <4 x float>
  %296 = fmul <4 x float> %238, %238
  %297 = fadd <4 x float> %296, %295
  %298 = fadd <4 x float> %238, %238
  %299 = fmul <4 x float> %298, %239
  %300 = fadd <4 x float> %299, %297
  %301 = fmul <4 x float> %239, %239
  %302 = fadd <4 x float> %301, %300
  %303 = fadd <4 x float> %229, %229
  %304 = fmul <4 x float> %223, %303
  %305 = fadd <4 x float> %304, %302
  %306 = and <2 x i64> %293, <i64 -17587891081216, i64 -17587891081216>
  %307 = bitcast <2 x i64> %306 to <4 x float>
  %308 = fsub <4 x float> %292, %307
  %309 = bitcast <4 x float> %285 to <2 x i64>
  %310 = and <2 x i64> %309, <i64 -17587891081216, i64 -17587891081216>
  %311 = bitcast <2 x i64> %310 to <4 x float>
  %312 = fsub <4 x float> %285, %311
  %313 = fmul <4 x float> %292, %285
  %314 = bitcast <4 x float> %313 to <2 x i64>
  %315 = xor <2 x i64> %314, <i64 -9223372034707292160, i64 -9223372034707292160>
  %316 = bitcast <2 x i64> %315 to <4 x float>
  %317 = fmul <4 x float> %307, %311
  %318 = fadd <4 x float> %317, %316
  %319 = fmul <4 x float> %308, %311
  %320 = fadd <4 x float> %319, %318
  %321 = fmul <4 x float> %312, %307
  %322 = fadd <4 x float> %321, %320
  %323 = fmul <4 x float> %308, %312
  %324 = fadd <4 x float> %323, %322
  %325 = fmul <4 x float> %292, %291
  %326 = fadd <4 x float> %324, %325
  %327 = fmul <4 x float> %305, %285
  %328 = fadd <4 x float> %327, %326
  %329 = fadd <4 x float> %223, %313
  %330 = fsub <4 x float> %329, %223
  %331 = fsub <4 x float> %329, %330
  %332 = fsub <4 x float> %223, %331
  %333 = fsub <4 x float> %313, %330
  %334 = fadd <4 x float> %333, %332
  %335 = fadd <4 x float> %229, %328
  %336 = fadd <4 x float> %334, %335
  %337 = fadd <4 x float> %329, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %338 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %337
  %339 = fadd <4 x float> %329, %338
  %340 = fadd <4 x float> %339, %336
  %341 = ashr <4 x i32> %212, <i32 1, i32 1, i32 1, i32 1>
  %342 = shl <4 x i32> %341, <i32 23, i32 23, i32 23, i32 23>
  %343 = add <4 x i32> %342, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %344 = bitcast <4 x i32> %343 to <4 x float>
  %345 = fmul <4 x float> %337, %344
  %346 = sub <4 x i32> %212, %341
  %347 = shl <4 x i32> %346, <i32 23, i32 23, i32 23, i32 23>
  %348 = add <4 x i32> %347, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %349 = bitcast <4 x i32> %348 to <4 x float>
  %350 = fmul <4 x float> %345, %349
  %351 = fmul <4 x float> %340, %344
  %352 = fmul <4 x float> %351, %349
  %353 = fcmp olt <4 x float> %208, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %354 = sext <4 x i1> %353 to <4 x i32>
  %355 = bitcast <4 x i32> %354 to <2 x i64>
  %356 = bitcast <4 x float> %350 to <2 x i64>
  %357 = xor <2 x i64> %355, <i64 -1, i64 -1>
  %358 = and <2 x i64> %356, %357
  %359 = bitcast <4 x float> %352 to <2 x i64>
  %360 = and <2 x i64> %359, %357
  %361 = bitcast <2 x i64> %358 to <4 x float>
  %362 = bitcast <2 x i64> %360 to <4 x float>
  %363 = and <2 x i64> %358, <i64 -17587891081216, i64 -17587891081216>
  %364 = bitcast <2 x i64> %363 to <4 x float>
  %365 = fsub <4 x float> %361, %364
  %366 = fmul <4 x float> %47, %361
  %367 = bitcast <4 x float> %366 to <2 x i64>
  %368 = xor <2 x i64> %367, <i64 -9223372034707292160, i64 -9223372034707292160>
  %369 = bitcast <2 x i64> %368 to <4 x float>
  %370 = fmul <4 x float> %76, %364
  %371 = fadd <4 x float> %370, %369
  %372 = fmul <4 x float> %365, %76
  %373 = fadd <4 x float> %372, %371
  %374 = fmul <4 x float> %77, %364
  %375 = fadd <4 x float> %374, %373
  %376 = fmul <4 x float> %77, %365
  %377 = fadd <4 x float> %376, %375
  %378 = fmul <4 x float> %48, %361
  %379 = fadd <4 x float> %378, %377
  %380 = fmul <4 x float> %47, %362
  %381 = fadd <4 x float> %379, %380
  %382 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %366, <4 x float> %361, <4 x float> %46) #6
  %383 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %381, <4 x float> %362, <4 x float> %46) #6
  %384 = fadd <4 x float> %382, %383
  %385 = bitcast <4 x i32> %12 to <4 x float>
  %386 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %384, <4 x float> %385) #6
  %387 = bitcast <4 x float> %0 to <4 x i32>
  %388 = ashr <4 x i32> %387, <i32 31, i32 31, i32 31, i32 31>
  %389 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %386
  %390 = bitcast <4 x i32> %388 to <4 x float>
  %391 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %386, <4 x float> %389, <4 x float> %390) #6
  %392 = fcmp uno <4 x float> %0, zeroinitializer
  %393 = sext <4 x i1> %392 to <4 x i32>
  %394 = bitcast <4 x i32> %393 to <4 x float>
  %395 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %391, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %394) #6
  ret <4 x float> %395
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif4_u05sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = bitcast <4 x float> %10 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = fsub <4 x float> %10, %14
  %16 = bitcast <4 x float> %11 to <2 x i64>
  %17 = xor <2 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = bitcast <2 x i64> %17 to <4 x float>
  %19 = fmul <4 x float> %14, %14
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %15, %14
  %22 = fadd <4 x float> %21, %20
  %23 = fadd <4 x float> %21, %22
  %24 = fmul <4 x float> %15, %15
  %25 = fadd <4 x float> %24, %23
  %26 = fmul <4 x float> %11, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %27 = fadd <4 x float> %26, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %28 = fmul <4 x float> %11, %27
  %29 = fadd <4 x float> %28, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %30 = fmul <4 x float> %11, %29
  %31 = fadd <4 x float> %30, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %32 = fsub <4 x float> %31, %30
  %33 = fsub <4 x float> %31, %32
  %34 = fsub <4 x float> %30, %33
  %35 = fsub <4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %32
  %36 = fadd <4 x float> %35, %34
  %37 = fadd <4 x float> %36, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %38 = and <2 x i64> %16, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %11, %39
  %41 = bitcast <4 x float> %31 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <2 x i64> %42 to <4 x float>
  %44 = fsub <4 x float> %31, %43
  %45 = fmul <4 x float> %11, %31
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fmul <4 x float> %39, %43
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %40, %43
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %44, %39
  %54 = fadd <4 x float> %53, %52
  %55 = fmul <4 x float> %40, %44
  %56 = fadd <4 x float> %55, %54
  %57 = fmul <4 x float> %11, %37
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %31, %25
  %60 = fadd <4 x float> %59, %58
  %61 = fadd <4 x float> %45, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %62 = fsub <4 x float> %61, %45
  %63 = fsub <4 x float> %61, %62
  %64 = fsub <4 x float> %45, %63
  %65 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %62
  %66 = fadd <4 x float> %65, %64
  %67 = fadd <4 x float> %60, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %68 = fadd <4 x float> %66, %67
  %69 = bitcast <4 x float> %61 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> %61, %71
  %73 = fmul <4 x float> %10, %61
  %74 = bitcast <4 x float> %73 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <2 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %14, %71
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %72, %14
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %15, %71
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %15, %72
  %84 = fadd <4 x float> %83, %82
  %85 = fmul <4 x float> %10, %68
  %86 = fadd <4 x float> %84, %85
  %87 = fadd <4 x float> %73, %86
  %88 = bitcast <4 x float> %1 to <4 x i32>
  %89 = icmp eq <4 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = sext <4 x i1> %89 to <4 x i32>
  %91 = bitcast <4 x i32> %90 to <4 x float>
  %92 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %87, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %91) #6
  %93 = fmul <4 x float> %11, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %94 = fadd <4 x float> %93, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %95 = fmul <4 x float> %11, %94
  %96 = fadd <4 x float> %95, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %97 = fmul <4 x float> %11, %96
  %98 = fadd <4 x float> %97, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %99 = fsub <4 x float> %98, %97
  %100 = fsub <4 x float> %98, %99
  %101 = fsub <4 x float> %97, %100
  %102 = fsub <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %99
  %103 = fadd <4 x float> %102, %101
  %104 = fadd <4 x float> %103, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %105 = bitcast <4 x float> %98 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fsub <4 x float> %98, %107
  %109 = fmul <4 x float> %11, %98
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fmul <4 x float> %39, %107
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %40, %107
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %108, %39
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %40, %108
  %120 = fadd <4 x float> %119, %118
  %121 = fmul <4 x float> %11, %104
  %122 = fadd <4 x float> %121, %120
  %123 = fmul <4 x float> %98, %25
  %124 = fadd <4 x float> %123, %122
  %125 = fadd <4 x float> %109, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %126 = fsub <4 x float> %125, %109
  %127 = fsub <4 x float> %125, %126
  %128 = fsub <4 x float> %109, %127
  %129 = fsub <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %126
  %130 = fadd <4 x float> %129, %128
  %131 = fadd <4 x float> %124, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %132 = fadd <4 x float> %130, %131
  %133 = bitcast <4 x float> %125 to <2 x i64>
  %134 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fsub <4 x float> %125, %135
  %137 = fmul <4 x float> %11, %125
  %138 = bitcast <4 x float> %137 to <2 x i64>
  %139 = xor <2 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <2 x i64> %139 to <4 x float>
  %141 = fmul <4 x float> %39, %135
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %136, %39
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %40, %135
  %146 = fadd <4 x float> %145, %144
  %147 = fmul <4 x float> %40, %136
  %148 = fadd <4 x float> %147, %146
  %149 = fmul <4 x float> %25, %125
  %150 = fadd <4 x float> %149, %148
  %151 = fmul <4 x float> %11, %132
  %152 = fadd <4 x float> %150, %151
  %153 = fadd <4 x float> %137, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %154 = fsub <4 x float> %153, %137
  %155 = fsub <4 x float> %153, %154
  %156 = fsub <4 x float> %137, %155
  %157 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %154
  %158 = fadd <4 x float> %157, %156
  %159 = fadd <4 x float> %158, %152
  %160 = fadd <4 x float> %153, %159
  %161 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %162 = icmp eq <4 x i32> %161, zeroinitializer
  %163 = sext <4 x i1> %162 to <4 x i32>
  %164 = bitcast <4 x i32> %163 to <4 x float>
  %165 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %160, <4 x float> %92, <4 x float> %164) #6
  %166 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %92, <4 x float> %160, <4 x float> %164) #6
  %167 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %168 = icmp ne <4 x i32> %167, zeroinitializer
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = and <2 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <4 x float> %165 to <2 x i64>
  %173 = xor <2 x i64> %171, %172
  %174 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %175 = and <4 x i32> %174, <i32 4, i32 4, i32 4, i32 4>
  %176 = icmp ne <4 x i32> %175, zeroinitializer
  %177 = sext <4 x i1> %176 to <4 x i32>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = and <2 x i64> %178, <i64 -9223372034707292160, i64 -9223372034707292160>
  %180 = bitcast <4 x float> %166 to <2 x i64>
  %181 = xor <2 x i64> %179, %180
  %182 = bitcast <4 x float> %1 to <2 x i64>
  %183 = and <2 x i64> %182, <i64 9223372034707292159, i64 9223372034707292159>
  %184 = bitcast <2 x i64> %183 to <4 x float>
  %185 = fcmp ogt <4 x float> %184, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %186 = sext <4 x i1> %185 to <4 x i32>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 -1, i64 -1>
  %189 = and <2 x i64> %173, %188
  %190 = and <2 x i64> %181, %188
  %191 = fcmp oeq <4 x float> %184, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %192 = sext <4 x i1> %191 to <4 x i32>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  %194 = or <2 x i64> %189, %193
  %195 = or <2 x i64> %190, %193
  %196 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %196, align 16, !alias.scope !31
  %197 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %198 = bitcast <4 x float>* %197 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %198, align 16, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif4_u35sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = fmul <4 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %8) #6
  %10 = fsub <4 x float> %3, %9
  %11 = fmul <4 x float> %10, %10
  %12 = fmul <4 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <4 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <4 x float> %10, %17
  %19 = fmul <4 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <4 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <4 x float> %11, %20
  %22 = fadd <4 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <4 x float> %11, %22
  %24 = fadd <4 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <4 x float> %11, %24
  %26 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> %18, <4 x float> %30) #6
  %32 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %18, <4 x float> %26, <4 x float> %30) #6
  %33 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %34 = icmp ne <4 x i32> %33, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x float> %31 to <2 x i64>
  %39 = xor <2 x i64> %37, %38
  %40 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %41 = and <4 x i32> %40, <i32 4, i32 4, i32 4, i32 4>
  %42 = icmp ne <4 x i32> %41, zeroinitializer
  %43 = sext <4 x i1> %42 to <4 x i32>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = bitcast <4 x float> %32 to <2 x i64>
  %47 = xor <2 x i64> %45, %46
  %48 = bitcast <4 x float> %1 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 9223372034707292159, i64 9223372034707292159>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fcmp ogt <4 x float> %50, <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -1, i64 -1>
  %55 = and <2 x i64> %39, %54
  %56 = and <2 x i64> %47, %54
  %57 = fcmp oeq <4 x float> %50, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = or <2 x i64> %55, %59
  %61 = or <2 x i64> %56, %59
  %62 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 16, !alias.scope !34
  %63 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %64 = bitcast <4 x float>* %63 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %64, align 16, !alias.scope !34
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modff4_sse4(%struct.vfloat2* noalias nocapture sret, <4 x float>) local_unnamed_addr #3 {
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %1, %4
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp ogt <4 x float> %8, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = bitcast <4 x i32> %10 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> zeroinitializer, <4 x float> %11) #6
  %13 = bitcast <4 x float> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372034707292159, i64 9223372034707292159>
  %15 = and <2 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160>
  %16 = or <2 x i64> %14, %15
  %17 = fsub <4 x float> %1, %12
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = or <2 x i64> %19, %15
  %21 = bitcast %struct.vfloat2* %0 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %21, align 16, !alias.scope !37
  %22 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %23 = bitcast <4 x float>* %22 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %23, align 16, !alias.scope !37
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <4 x i32>
  %3 = ashr <4 x i32> %2, <i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <4 x i32> %3 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 8589934594, i64 8589934594>
  %6 = bitcast <4 x float> %0 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = bitcast <2 x i64> %5 to <4 x i32>
  %10 = add <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %11 = fcmp ogt <4 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = bitcast <2 x i64> %5 to <16 x i8>
  %14 = bitcast <4 x i32> %10 to <16 x i8>
  %15 = bitcast <4 x i32> %12 to <16 x i8>
  %16 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %13, <16 x i8> %14, <16 x i8> %15) #6
  %17 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %8
  %18 = bitcast <4 x i32> %12 to <4 x float>
  %19 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %17, <4 x float> %18) #6
  %20 = fmul <4 x float> %19, %19
  %21 = fmul <4 x float> %20, %20
  %22 = fmul <4 x float> %21, %21
  %23 = fmul <4 x float> %20, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %24 = fadd <4 x float> %23, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %25 = fmul <4 x float> %20, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %26 = fadd <4 x float> %25, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %27 = fmul <4 x float> %21, %24
  %28 = fadd <4 x float> %26, %27
  %29 = fmul <4 x float> %20, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %30 = fadd <4 x float> %29, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %31 = fmul <4 x float> %20, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %32 = fadd <4 x float> %31, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %33 = fmul <4 x float> %21, %30
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %22, %28
  %36 = fadd <4 x float> %34, %35
  %37 = fmul <4 x float> %20, %36
  %38 = fmul <4 x float> %19, %37
  %39 = fadd <4 x float> %19, %38
  %40 = bitcast <16 x i8> %16 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 1, i32 1, i32 1, i32 1>
  %42 = icmp ne <4 x i32> %41, zeroinitializer
  %43 = sext <4 x i1> %42 to <4 x i32>
  %44 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %39
  %45 = bitcast <4 x i32> %43 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %44, <4 x float> %45) #6
  %47 = and <4 x i32> %40, <i32 2, i32 2, i32 2, i32 2>
  %48 = icmp ne <4 x i32> %47, zeroinitializer
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <4 x float> %46 to <2 x i64>
  %53 = xor <2 x i64> %51, %52
  %54 = bitcast <2 x i64> %53 to <4 x float>
  ret <4 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atan2f4_u35sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <4 x i32>
  %7 = ashr <4 x i32> %6, <i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <4 x i32> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -4294967298, i64 -4294967298>
  %10 = bitcast <4 x float> %1 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = fcmp olt <4 x float> %12, %5
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <2 x i64> %9 to <16 x i8>
  %18 = bitcast <4 x i32> %14 to <16 x i8>
  %19 = bitcast <4 x i32> %16 to <16 x i8>
  %20 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %17, <16 x i8> %18, <16 x i8> %19) #6
  %21 = or <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %22, <4 x float> %23) #6
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %12, <4 x float> %5) #6
  %26 = fdiv <4 x float> %24, %25
  %27 = fmul <4 x float> %26, %26
  %28 = fmul <4 x float> %27, %27
  %29 = fmul <4 x float> %28, %28
  %30 = fmul <4 x float> %27, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %31 = fadd <4 x float> %30, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %32 = fmul <4 x float> %27, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %33 = fadd <4 x float> %32, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %34 = fmul <4 x float> %28, %31
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %27, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %37 = fadd <4 x float> %36, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %38 = fmul <4 x float> %27, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %39 = fadd <4 x float> %38, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %40 = fmul <4 x float> %28, %37
  %41 = fadd <4 x float> %39, %40
  %42 = fmul <4 x float> %29, %35
  %43 = fadd <4 x float> %41, %42
  %44 = fmul <4 x float> %27, %43
  %45 = fmul <4 x float> %26, %44
  %46 = fadd <4 x float> %26, %45
  %47 = bitcast <16 x i8> %20 to <4 x i32>
  %48 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %47) #6
  %49 = fmul <4 x float> %48, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %50 = fadd <4 x float> %49, %46
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = fcmp oeq <4 x float> %1, zeroinitializer
  %59 = or <4 x i1> %55, %58
  %60 = sext <4 x i1> %59 to <4 x i32>
  %61 = or <2 x i64> %52, <i64 4596222329050697691, i64 4596222329050697691>
  %62 = and <2 x i64> %61, %57
  %63 = bitcast <2 x i64> %62 to <4 x float>
  %64 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %63
  %65 = bitcast <4 x i32> %60 to <4 x float>
  %66 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %54, <4 x float> %64, <4 x float> %65) #6
  %67 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i32>
  %69 = or <2 x i64> %52, <i64 4560193532023345115, i64 4560193532023345115>
  %70 = and <2 x i64> %69, %57
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %71
  %73 = bitcast <4 x i32> %68 to <4 x float>
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %66, <4 x float> %72, <4 x float> %73) #6
  %75 = fcmp oeq <4 x float> %0, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = and <2 x i64> %8, <i64 4632251126078050267, i64 4632251126078050267>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = bitcast <4 x i32> %76 to <4 x float>
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> %78, <4 x float> %79) #6
  %81 = fcmp uno <4 x float> %0, %1
  %82 = sext <4 x i1> %81 to <4 x i32>
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = bitcast <4 x float> %80 to <2 x i64>
  %85 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = xor <2 x i64> %85, %84
  %87 = or <2 x i64> %86, %83
  %88 = bitcast <2 x i64> %87 to <4 x float>
  ret <4 x float> %88
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x i32> %6 to <4 x float>
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %7, <4 x float> %10) #6
  %12 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %4, <4 x float> %10) #6
  %14 = fmul <4 x float> %11, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %15 = fadd <4 x float> %14, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %22 = fmul <4 x float> %11, %13
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %13, %23
  %25 = fmul <4 x float> %24, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %26 = fadd <4 x float> %25, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %27 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> %24, <4 x float> %10) #6
  %28 = bitcast <4 x float> %27 to <2 x i64>
  %29 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = xor <2 x i64> %29, %28
  %31 = bitcast <2 x i64> %30 to <4 x float>
  ret <4 x float> %31
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acosf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %0, %0
  %9 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fmul <4 x float> %9, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %11 = bitcast <4 x i32> %6 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %8, <4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %12) #6
  %14 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %4, <4 x float> %11) #6
  %15 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <4 x float>
  %18 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %14, <4 x float> zeroinitializer, <4 x float> %17) #6
  %19 = fmul <4 x float> %12, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %20 = fadd <4 x float> %19, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %21 = fmul <4 x float> %12, %20
  %22 = fadd <4 x float> %21, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %23 = fmul <4 x float> %12, %22
  %24 = fadd <4 x float> %23, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %25 = fmul <4 x float> %12, %24
  %26 = fadd <4 x float> %25, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %27 = fmul <4 x float> %12, %18
  %28 = fmul <4 x float> %27, %26
  %29 = bitcast <4 x float> %18 to <2 x i64>
  %30 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = xor <2 x i64> %30, %29
  %32 = bitcast <2 x i64> %31 to <4 x float>
  %33 = bitcast <4 x float> %28 to <2 x i64>
  %34 = xor <2 x i64> %30, %33
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fadd <4 x float> %32, %35
  %37 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %36
  %38 = fadd <4 x float> %18, %28
  %39 = fmul <4 x float> %38, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %37, <4 x float> %11) #6
  %41 = fcmp olt <4 x float> %0, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %45 = and <2 x i64> %44, %43
  %46 = bitcast <4 x float> %40 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = fadd <4 x float> %48, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %50 = bitcast <2 x i64> %45 to <4 x float>
  %51 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> %49, <4 x float> %50) #6
  ret <4 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atan2f4_u10sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = tail call <4 x float> @Sleef_atan2f4_u10sse4(<4 x float> %0, <4 x float> %1)
  ret <4 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, %0
  %8 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <4 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = bitcast <4 x i32> %6 to <4 x float>
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %7, <4 x float> %10) #6
  %12 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %11) #6
  %13 = bitcast <4 x float> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fsub <4 x float> %12, %15
  %17 = fmul <4 x float> %12, %12
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %15, %15
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %16, %15
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %16, %16
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %11, %17
  %29 = fsub <4 x float> %28, %11
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> %11, %30
  %32 = fsub <4 x float> %17, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fadd <4 x float> %33, %27
  %35 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %36 = bitcast <4 x float> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %38 = bitcast <2 x i64> %37 to <4 x float>
  %39 = fsub <4 x float> %35, %38
  %40 = fmul <4 x float> %15, %38
  %41 = fadd <4 x float> %40, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %42 = fmul <4 x float> %39, %15
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %16, %38
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %16, %39
  %47 = fadd <4 x float> %46, %45
  %48 = xor <2 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = fmul <4 x float> %47, %49
  %51 = bitcast <4 x float> %28 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -17587891081216, i64 -17587891081216>
  %53 = bitcast <2 x i64> %52 to <4 x float>
  %54 = fsub <4 x float> %28, %53
  %55 = fmul <4 x float> %35, %28
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fmul <4 x float> %38, %53
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %54, %38
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %39, %53
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %39, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %28, %50
  %68 = fadd <4 x float> %66, %67
  %69 = fmul <4 x float> %35, %34
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = fmul <4 x float> %70, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %73 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %71, <4 x float> %4, <4 x float> %10) #6
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %72, <4 x float> zeroinitializer, <4 x float> %10) #6
  %75 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <4 x float>
  %78 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %73, <4 x float> zeroinitializer, <4 x float> %77) #6
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> zeroinitializer, <4 x float> %77) #6
  %80 = fmul <4 x float> %11, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %81 = fadd <4 x float> %80, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %82 = fmul <4 x float> %11, %81
  %83 = fadd <4 x float> %82, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %84 = fmul <4 x float> %11, %83
  %85 = fadd <4 x float> %84, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %86 = fmul <4 x float> %11, %85
  %87 = fadd <4 x float> %86, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %88 = fmul <4 x float> %11, %78
  %89 = fmul <4 x float> %88, %87
  %90 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %78
  %91 = fsub <4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %90
  %92 = fsub <4 x float> %91, %78
  %93 = fadd <4 x float> %92, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %94 = fsub <4 x float> %93, %79
  %95 = fsub <4 x float> %90, %89
  %96 = fsub <4 x float> %90, %95
  %97 = fsub <4 x float> %96, %89
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %78, %89
  %100 = fadd <4 x float> %95, %98
  %101 = fmul <4 x float> %100, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %102 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %101, <4 x float> %99, <4 x float> %10) #6
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = xor <2 x i64> %104, %103
  %106 = bitcast <2 x i64> %105 to <4 x float>
  ret <4 x float> %106
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acosf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = fmul <4 x float> %0, %0
  %9 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fmul <4 x float> %9, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %11 = bitcast <4 x i32> %6 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %8, <4 x float> %11) #6
  %13 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %12) #6
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %13, %16
  %18 = fmul <4 x float> %13, %13
  %19 = bitcast <4 x float> %18 to <2 x i64>
  %20 = xor <2 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fmul <4 x float> %16, %16
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %17, %16
  %25 = fadd <4 x float> %24, %23
  %26 = fadd <4 x float> %24, %25
  %27 = fmul <4 x float> %17, %17
  %28 = fadd <4 x float> %27, %26
  %29 = fadd <4 x float> %12, %18
  %30 = fsub <4 x float> %29, %12
  %31 = fsub <4 x float> %29, %30
  %32 = fsub <4 x float> %12, %31
  %33 = fsub <4 x float> %18, %30
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %34, %28
  %36 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fsub <4 x float> %36, %39
  %41 = fmul <4 x float> %16, %39
  %42 = fadd <4 x float> %41, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fmul <4 x float> %40, %16
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %17, %39
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %17, %40
  %48 = fadd <4 x float> %47, %46
  %49 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fmul <4 x float> %48, %50
  %52 = bitcast <4 x float> %29 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %29, %54
  %56 = fmul <4 x float> %36, %29
  %57 = bitcast <4 x float> %56 to <2 x i64>
  %58 = xor <2 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fmul <4 x float> %39, %54
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %55, %39
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %40, %54
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %40, %55
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %29, %51
  %69 = fadd <4 x float> %67, %68
  %70 = fmul <4 x float> %36, %35
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %56, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %73 = fmul <4 x float> %71, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %74 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %72, <4 x float> %4, <4 x float> %11) #6
  %75 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %73, <4 x float> zeroinitializer, <4 x float> %11) #6
  %76 = fcmp oeq <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <4 x float>
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %74, <4 x float> zeroinitializer, <4 x float> %78) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %75, <4 x float> zeroinitializer, <4 x float> %78) #6
  %81 = fmul <4 x float> %12, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %82 = fadd <4 x float> %81, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %83 = fmul <4 x float> %12, %82
  %84 = fadd <4 x float> %83, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %85 = fmul <4 x float> %12, %84
  %86 = fadd <4 x float> %85, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %87 = fmul <4 x float> %12, %86
  %88 = fadd <4 x float> %87, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %89 = fmul <4 x float> %12, %79
  %90 = fmul <4 x float> %89, %88
  %91 = bitcast <4 x float> %79 to <2 x i64>
  %92 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = xor <2 x i64> %92, %91
  %94 = bitcast <2 x i64> %93 to <4 x float>
  %95 = bitcast <4 x float> %90 to <2 x i64>
  %96 = xor <2 x i64> %92, %95
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = fadd <4 x float> %94, %97
  %99 = fsub <4 x float> %94, %98
  %100 = fadd <4 x float> %99, %97
  %101 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %98
  %102 = fsub <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %101
  %103 = fsub <4 x float> %102, %98
  %104 = fadd <4 x float> %103, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %105 = fsub <4 x float> %104, %100
  %106 = fadd <4 x float> %79, %90
  %107 = fsub <4 x float> %79, %106
  %108 = fadd <4 x float> %90, %107
  %109 = fadd <4 x float> %80, %108
  %110 = fmul <4 x float> %106, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %111 = fmul <4 x float> %109, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %110, <4 x float> %101, <4 x float> %11) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %111, <4 x float> %105, <4 x float> %11) #6
  %114 = fcmp olt <4 x float> %0, zeroinitializer
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %118 = and <2 x i64> %117, %116
  %119 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %112
  %120 = fsub <4 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %119
  %121 = fsub <4 x float> %120, %112
  %122 = fadd <4 x float> %121, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %123 = fsub <4 x float> %122, %113
  %124 = bitcast <2 x i64> %118 to <4 x float>
  %125 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %112, <4 x float> %119, <4 x float> %124) #6
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %113, <4 x float> %123, <4 x float> %124) #6
  %127 = fadd <4 x float> %125, %126
  ret <4 x float> %127
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp ogt <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> %7) #6
  %9 = bitcast <4 x i32> %6 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %9) #6
  %11 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %9) #6
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %4, <4 x float> %9) #6
  %13 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fsub <4 x float> %13, %20
  %22 = bitcast <4 x float> %10 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fsub <4 x float> %10, %24
  %26 = fmul <4 x float> %10, %13
  %27 = fmul <4 x float> %16, %20
  %28 = fadd <4 x float> %27, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %29 = fmul <4 x float> %21, %16
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %17, %20
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %17, %21
  %34 = fadd <4 x float> %33, %32
  %35 = bitcast <4 x float> %34 to <2 x i64>
  %36 = xor <2 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = bitcast <4 x float> %26 to <2 x i64>
  %39 = xor <2 x i64> %38, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fmul <4 x float> %24, %20
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %21, %24
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %25, %20
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %25, %21
  %48 = fadd <4 x float> %47, %46
  %49 = fmul <4 x float> %26, %37
  %50 = fadd <4 x float> %48, %49
  %51 = fmul <4 x float> %26, zeroinitializer
  %52 = fsub <4 x float> %11, %51
  %53 = fmul <4 x float> %13, %52
  %54 = fadd <4 x float> %53, %50
  %55 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fsub <4 x float> %26, %56
  %58 = fmul <4 x float> %26, %26
  %59 = bitcast <4 x float> %58 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %56, %56
  %63 = fadd <4 x float> %62, %61
  %64 = fadd <4 x float> %56, %56
  %65 = fmul <4 x float> %64, %57
  %66 = fadd <4 x float> %65, %63
  %67 = fmul <4 x float> %57, %57
  %68 = fadd <4 x float> %67, %66
  %69 = fadd <4 x float> %54, %54
  %70 = fmul <4 x float> %26, %69
  %71 = fadd <4 x float> %68, %70
  %72 = fadd <4 x float> %58, %71
  %73 = fsub <4 x float> %58, %72
  %74 = fadd <4 x float> %71, %73
  %75 = fmul <4 x float> %72, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %76 = fadd <4 x float> %75, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %77 = fmul <4 x float> %72, %76
  %78 = fadd <4 x float> %77, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %79 = fmul <4 x float> %72, %78
  %80 = fadd <4 x float> %79, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %81 = fmul <4 x float> %72, %80
  %82 = fadd <4 x float> %81, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %83 = fmul <4 x float> %72, %82
  %84 = fadd <4 x float> %83, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %85 = fmul <4 x float> %72, %84
  %86 = fadd <4 x float> %85, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %87 = fmul <4 x float> %72, %86
  %88 = fadd <4 x float> %87, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %89 = fmul <4 x float> %72, %88
  %90 = fadd <4 x float> %89, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %91 = fsub <4 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %90
  %92 = fadd <4 x float> %89, %91
  %93 = bitcast <4 x float> %72 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %95 = bitcast <2 x i64> %94 to <4 x float>
  %96 = fsub <4 x float> %72, %95
  %97 = bitcast <4 x float> %90 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %90, %99
  %101 = fmul <4 x float> %72, %90
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = fmul <4 x float> %95, %99
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %96, %99
  %108 = fadd <4 x float> %107, %106
  %109 = fmul <4 x float> %100, %95
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %96, %100
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %72, %92
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %74, %90
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %101, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %118 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %117
  %119 = fadd <4 x float> %101, %118
  %120 = fadd <4 x float> %119, %116
  %121 = bitcast <4 x float> %117 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 -17587891081216, i64 -17587891081216>
  %123 = bitcast <2 x i64> %122 to <4 x float>
  %124 = fsub <4 x float> %117, %123
  %125 = fmul <4 x float> %26, %117
  %126 = bitcast <4 x float> %125 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = bitcast <2 x i64> %127 to <4 x float>
  %129 = fmul <4 x float> %56, %123
  %130 = fadd <4 x float> %129, %128
  %131 = fmul <4 x float> %57, %123
  %132 = fadd <4 x float> %131, %130
  %133 = fmul <4 x float> %124, %56
  %134 = fadd <4 x float> %133, %132
  %135 = fmul <4 x float> %57, %124
  %136 = fadd <4 x float> %135, %134
  %137 = fmul <4 x float> %26, %120
  %138 = fadd <4 x float> %136, %137
  %139 = fmul <4 x float> %54, %117
  %140 = fadd <4 x float> %139, %138
  %141 = bitcast <16 x i8> %8 to <4 x i32>
  %142 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %141) #6
  %143 = bitcast <4 x float> %142 to <2 x i64>
  %144 = and <2 x i64> %143, <i64 -17587891081216, i64 -17587891081216>
  %145 = bitcast <2 x i64> %144 to <4 x float>
  %146 = fsub <4 x float> %142, %145
  %147 = fmul <4 x float> %142, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %148 = bitcast <4 x float> %147 to <2 x i64>
  %149 = xor <2 x i64> %148, <i64 -9223372034707292160, i64 -9223372034707292160>
  %150 = bitcast <2 x i64> %149 to <4 x float>
  %151 = fmul <4 x float> %145, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %152 = fadd <4 x float> %151, %150
  %153 = fmul <4 x float> %145, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %154 = fadd <4 x float> %153, %152
  %155 = fmul <4 x float> %146, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %156 = fadd <4 x float> %155, %154
  %157 = fmul <4 x float> %146, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %158 = fadd <4 x float> %157, %156
  %159 = fmul <4 x float> %142, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %147, %125
  %162 = fsub <4 x float> %147, %161
  %163 = fadd <4 x float> %125, %162
  %164 = fadd <4 x float> %160, %163
  %165 = fadd <4 x float> %164, %140
  %166 = fadd <4 x float> %161, %165
  %167 = fcmp oeq <4 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %168 = sext <4 x i1> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <4 x float>
  %170 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %166, <4 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <4 x float> %169) #6
  %171 = bitcast <4 x float> %170 to <2 x i64>
  %172 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %173 = xor <2 x i64> %172, %171
  %174 = bitcast <2 x i64> %173 to <4 x float>
  ret <4 x float> %174
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_logf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fdiv <4 x float> %22, %23
  %25 = fmul <4 x float> %24, %24
  %26 = fmul <4 x float> %25, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %27 = fadd <4 x float> %26, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %28 = fmul <4 x float> %25, %27
  %29 = fadd <4 x float> %28, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %30 = fmul <4 x float> %25, %29
  %31 = fadd <4 x float> %30, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %32 = fmul <4 x float> %25, %31
  %33 = fadd <4 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <16 x i8> %21 to <4 x i32>
  %35 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %34) #6
  %36 = fmul <4 x float> %35, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %37 = fmul <4 x float> %24, %33
  %38 = fadd <4 x float> %36, %37
  %39 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = bitcast <4 x i32> %40 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %38, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %41) #6
  %43 = fcmp ult <4 x float> %6, zeroinitializer
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %45) #6
  %47 = fcmp oeq <4 x float> %6, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %46, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %49) #6
  ret <4 x float> %50
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_expf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fmul <4 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <4 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <4 x float> %8, %8
  %20 = fmul <4 x float> %19, %18
  %21 = fadd <4 x float> %8, %20
  %22 = fadd <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <4 x i32> %25 to <4 x float>
  %27 = fmul <4 x float> %22, %26
  %28 = sub <4 x i32> %3, %23
  %29 = shl <4 x i32> %28, <i32 23, i32 23, i32 23, i32 23>
  %30 = add <4 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = fmul <4 x float> %27, %31
  %33 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %34 = sext <4 x i1> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = bitcast <4 x float> %32 to <2 x i64>
  %37 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %38 = and <2 x i64> %36, %37
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fcmp ogt <4 x float> %0, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %42) #6
  ret <4 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cbrtf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <4 x i32> %6 to <16 x i8>
  %13 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %12) #6
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = bitcast <16 x i8> %13 to <4 x i32>
  %16 = sub <4 x i32> %14, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = xor <4 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = shl <4 x i32> %19, <i32 23, i32 23, i32 23, i32 23>
  %21 = add <4 x i32> %20, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = fmul <4 x float> %22, %0
  %24 = sub <4 x i32> %18, %19
  %25 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %26 = add <4 x i32> %25, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = fmul <4 x float> %23, %27
  %29 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %17) #6
  %30 = fadd <4 x float> %29, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %31 = fmul <4 x float> %30, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %31) #6
  %33 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %32) #6
  %34 = fmul <4 x float> %33, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %35 = fsub <4 x float> %30, %34
  %36 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %35) #6
  %37 = icmp eq <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <4 x float>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <4 x float> %39) #6
  %41 = icmp eq <4 x i32> %36, <i32 2, i32 2, i32 2, i32 2>
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <4 x float> %43) #6
  %45 = add <4 x i32> %32, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %46 = ashr <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = add <4 x i32> %47, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %44, %49
  %51 = sub <4 x i32> %45, %46
  %52 = shl <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = add <4 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %50, %54
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = bitcast <4 x float> %28 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <2 x i64> %58, %56
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = and <2 x i64> %57, <i64 9223372034707292159, i64 9223372034707292159>
  %62 = bitcast <2 x i64> %61 to <4 x float>
  %63 = fmul <4 x float> %62, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %64 = fadd <4 x float> %63, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %65 = fmul <4 x float> %64, %62
  %66 = fadd <4 x float> %65, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %67 = fmul <4 x float> %66, %62
  %68 = fadd <4 x float> %67, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %69 = fmul <4 x float> %68, %62
  %70 = fadd <4 x float> %69, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %71 = fmul <4 x float> %70, %62
  %72 = fadd <4 x float> %71, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %73 = fmul <4 x float> %72, %62
  %74 = fmul <4 x float> %72, %73
  %75 = fmul <4 x float> %74, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %76 = fmul <4 x float> %72, %74
  %77 = fadd <4 x float> %76, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %78 = fmul <4 x float> %75, %77
  %79 = fsub <4 x float> %74, %78
  %80 = fmul <4 x float> %79, %60
  ret <4 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cbrtf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_cbrtf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_logf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %22) #6
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %23, %26
  %28 = fmul <4 x float> %23, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %29 = bitcast <4 x float> %28 to <2 x i64>
  %30 = xor <2 x i64> %29, <i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fmul <4 x float> %26, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %33 = fadd <4 x float> %32, %31
  %34 = fmul <4 x float> %26, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %27, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %27, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %23, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %43 = fadd <4 x float> %42, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %44 = fsub <4 x float> %42, %43
  %45 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %44
  %46 = fsub <4 x float> %16, %43
  %47 = fadd <4 x float> %46, %45
  %48 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fsub <4 x float> %48, %49
  %51 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %50
  %52 = fsub <4 x float> %16, %49
  %53 = fadd <4 x float> %52, %51
  %54 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %48
  %55 = bitcast <4 x float> %48 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %57 = bitcast <2 x i64> %56 to <4 x float>
  %58 = fsub <4 x float> %48, %57
  %59 = bitcast <4 x float> %54 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> %54, %61
  %63 = bitcast <4 x float> %42 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fsub <4 x float> %42, %65
  %67 = fmul <4 x float> %42, %54
  %68 = fmul <4 x float> %57, %61
  %69 = fadd <4 x float> %68, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %70 = fmul <4 x float> %62, %57
  %71 = fadd <4 x float> %70, %69
  %72 = fmul <4 x float> %58, %61
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %58, %62
  %75 = fadd <4 x float> %74, %73
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = xor <2 x i64> %76, <i64 -9223372034707292160, i64 -9223372034707292160>
  %78 = bitcast <2 x i64> %77 to <4 x float>
  %79 = bitcast <4 x float> %67 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fmul <4 x float> %65, %61
  %83 = fadd <4 x float> %82, %81
  %84 = fmul <4 x float> %62, %65
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %66, %61
  %87 = fadd <4 x float> %86, %85
  %88 = fmul <4 x float> %66, %62
  %89 = fadd <4 x float> %88, %87
  %90 = fmul <4 x float> %67, %78
  %91 = fadd <4 x float> %89, %90
  %92 = fmul <4 x float> %67, %53
  %93 = fsub <4 x float> %47, %92
  %94 = fmul <4 x float> %54, %93
  %95 = fadd <4 x float> %94, %91
  %96 = fmul <4 x float> %67, %67
  %97 = fmul <4 x float> %96, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %98 = fadd <4 x float> %97, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %99 = fmul <4 x float> %96, %98
  %100 = fadd <4 x float> %99, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %101 = fmul <4 x float> %67, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %102 = fmul <4 x float> %95, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %103 = fadd <4 x float> %28, %101
  %104 = fsub <4 x float> %28, %103
  %105 = fadd <4 x float> %101, %104
  %106 = fadd <4 x float> %41, %105
  %107 = fadd <4 x float> %106, %102
  %108 = fmul <4 x float> %67, %96
  %109 = fmul <4 x float> %108, %100
  %110 = fadd <4 x float> %103, %109
  %111 = fsub <4 x float> %103, %110
  %112 = fadd <4 x float> %109, %111
  %113 = fadd <4 x float> %112, %107
  %114 = fadd <4 x float> %110, %113
  %115 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %116 = sext <4 x i1> %115 to <4 x i32>
  %117 = bitcast <4 x i32> %116 to <4 x float>
  %118 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %114, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %117) #6
  %119 = fcmp ult <4 x float> %6, zeroinitializer
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %118, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %121) #6
  %123 = fcmp oeq <4 x float> %6, zeroinitializer
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %122, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %125) #6
  ret <4 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_powf4_u10sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = tail call <4 x float> @Sleef_powf4_u10sse4(<4 x float> %0, <4 x float> %1)
  ret <4 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_sinhf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_coshf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_coshf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_tanhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_tanhf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinhf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, %11
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <4 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <4 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <4 x float> %12, %17
  %21 = fadd <4 x float> %19, %20
  %22 = fmul <4 x float> %13, %15
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %12, %23
  %25 = fadd <4 x float> %11, %24
  %26 = icmp eq <4 x i32> %6, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = fadd <4 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fmul <4 x float> %28, %32
  %34 = sub <4 x i32> %6, %29
  %35 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %36 to <4 x float>
  %38 = fmul <4 x float> %33, %37
  %39 = fadd <4 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = bitcast <4 x i32> %27 to <4 x float>
  %41 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> %25, <4 x float> %40) #6
  %42 = fadd <4 x float> %41, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %43 = fadd <4 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %44 = fdiv <4 x float> %42, %43
  %45 = fmul <4 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %46 = fmul <4 x float> %45, %44
  %47 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %48 = fcmp uno <4 x float> %46, zeroinitializer
  %49 = or <4 x i1> %48, %47
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <4 x float>
  %52 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %46, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %51) #6
  %53 = bitcast <4 x float> %52 to <2 x i64>
  %54 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = xor <2 x i64> %54, %53
  %56 = fcmp uno <4 x float> %0, zeroinitializer
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = or <2 x i64> %55, %58
  %60 = bitcast <2 x i64> %59 to <4 x float>
  ret <4 x float> %60
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_coshf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %5) #6
  %7 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %6) #6
  %8 = fmul <4 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <4 x float> %8, %4
  %10 = fmul <4 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <4 x float> %10, %9
  %12 = fmul <4 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <4 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <4 x float> %11, %13
  %15 = fadd <4 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <4 x float> %11, %15
  %17 = fadd <4 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <4 x float> %11, %17
  %19 = fadd <4 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <4 x float> %11, %19
  %21 = fadd <4 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <4 x float> %11, %11
  %23 = fmul <4 x float> %22, %21
  %24 = fadd <4 x float> %11, %23
  %25 = fadd <4 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = sub <4 x i32> %6, %26
  %32 = shl <4 x i32> %31, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = fmul <4 x float> %30, %34
  %36 = fcmp olt <4 x float> %4, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = bitcast <4 x float> %35 to <2 x i64>
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %39, %40
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = fcmp ogt <4 x float> %4, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %45) #6
  %47 = fdiv <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %46
  %48 = fmul <4 x float> %46, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %49 = fadd <4 x float> %48, %47
  %50 = fcmp ogt <4 x float> %4, <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>
  %51 = fcmp uno <4 x float> %49, zeroinitializer
  %52 = or <4 x i1> %51, %50
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %49, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %54) #6
  %56 = fcmp uno <4 x float> %0, zeroinitializer
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = bitcast <4 x float> %55 to <2 x i64>
  %60 = or <2 x i64> %59, %58
  %61 = bitcast <2 x i64> %60 to <4 x float>
  ret <4 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_tanhf4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fmul <4 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <4 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %6) #6
  %8 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %7) #6
  %9 = fmul <4 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <4 x float> %5, %9
  %11 = fmul <4 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <4 x float> %11, %10
  %13 = fmul <4 x float> %12, %12
  %14 = fmul <4 x float> %13, %13
  %15 = fmul <4 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <4 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <4 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <4 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <4 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <4 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <4 x float> %13, %18
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %14, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %13, %24
  %26 = fadd <4 x float> %12, %25
  %27 = icmp eq <4 x i32> %7, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = fadd <4 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %30 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %31 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %32 = add <4 x i32> %31, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = fmul <4 x float> %29, %33
  %35 = sub <4 x i32> %7, %30
  %36 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fmul <4 x float> %34, %38
  %40 = fadd <4 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = bitcast <4 x i32> %28 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> %26, <4 x float> %41) #6
  %43 = fadd <4 x float> %42, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fdiv <4 x float> %42, %43
  %45 = fcmp ogt <4 x float> %4, <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>
  %46 = fcmp uno <4 x float> %44, zeroinitializer
  %47 = or <4 x i1> %46, %45
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %49) #6
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = and <2 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160>
  %53 = xor <2 x i64> %52, %51
  %54 = fcmp uno <4 x float> %0, zeroinitializer
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = or <2 x i64> %53, %56
  %58 = bitcast <2 x i64> %57 to <4 x float>
  ret <4 x float> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_asinhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_asinhf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_acoshf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_acoshf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_atanhf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_atanhf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp2f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = fsub <4 x float> %0, %2
  %5 = fmul <4 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <4 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <4 x float> %4, %6
  %8 = fadd <4 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <4 x float> %4, %8
  %10 = fadd <4 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <4 x float> %4, %10
  %12 = fadd <4 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <4 x float> %4, %12
  %14 = fadd <4 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <2 x i64> %16 to <4 x float>
  %18 = fsub <4 x float> %14, %17
  %19 = bitcast <4 x float> %4 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %4, %21
  %23 = fmul <4 x float> %4, %14
  %24 = bitcast <4 x float> %23 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fmul <4 x float> %21, %17
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %18, %21
  %30 = fadd <4 x float> %29, %28
  %31 = fmul <4 x float> %22, %17
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %22, %18
  %34 = fadd <4 x float> %33, %32
  %35 = fadd <4 x float> %23, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %37 = fadd <4 x float> %23, %36
  %38 = fadd <4 x float> %37, %34
  %39 = fadd <4 x float> %35, %38
  %40 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %41 = shl <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = add <4 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = fmul <4 x float> %39, %43
  %45 = sub <4 x i32> %3, %40
  %46 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <4 x i32> %47 to <4 x float>
  %49 = fmul <4 x float> %44, %48
  %50 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <4 x float>
  %53 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %49, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %52) #6
  %54 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = bitcast <4 x float> %53 to <2 x i64>
  %58 = xor <2 x i64> %56, <i64 -1, i64 -1>
  %59 = and <2 x i64> %57, %58
  %60 = bitcast <2 x i64> %59 to <4 x float>
  ret <4 x float> %60
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp2f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2) #6
  %4 = fsub <4 x float> %0, %2
  %5 = fmul <4 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <4 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <4 x float> %4, %6
  %8 = fadd <4 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <4 x float> %4, %8
  %10 = fadd <4 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <4 x float> %4, %10
  %12 = fadd <4 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <4 x float> %4, %12
  %14 = fadd <4 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = fmul <4 x float> %4, %14
  %16 = fadd <4 x float> %15, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %18 = shl <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %19 = add <4 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %20
  %22 = sub <4 x i32> %3, %17
  %23 = shl <4 x i32> %22, <i32 23, i32 23, i32 23, i32 23>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = fmul <4 x float> %21, %25
  %27 = fcmp oge <4 x float> %0, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %26, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %29) #6
  %31 = fcmp olt <4 x float> %0, <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = bitcast <4 x float> %30 to <2 x i64>
  %35 = xor <2 x i64> %33, <i64 -1, i64 -1>
  %36 = and <2 x i64> %34, %35
  %37 = bitcast <2 x i64> %36 to <4 x float>
  ret <4 x float> %37
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp10f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fmul <4 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %10 = fadd <4 x float> %9, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %19 = fmul <4 x float> %8, %18
  %20 = fadd <4 x float> %19, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %21 = fsub <4 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %20
  %22 = fadd <4 x float> %19, %21
  %23 = fadd <4 x float> %22, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %24 = bitcast <4 x float> %20 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %20, %26
  %28 = bitcast <4 x float> %8 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %8, %30
  %32 = fmul <4 x float> %8, %20
  %33 = bitcast <4 x float> %32 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fmul <4 x float> %30, %26
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %27, %30
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %31, %26
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %27
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %8, %23
  %45 = fadd <4 x float> %44, %43
  %46 = fadd <4 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46
  %48 = fadd <4 x float> %32, %47
  %49 = fadd <4 x float> %48, %45
  %50 = fadd <4 x float> %46, %49
  %51 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %52 = shl <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = add <4 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %50, %54
  %56 = sub <4 x i32> %4, %51
  %57 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %58 = add <4 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = fmul <4 x float> %55, %59
  %61 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <4 x float>
  %64 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %60, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %63) #6
  %65 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %66 = sext <4 x i1> %65 to <4 x i32>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = bitcast <4 x float> %64 to <2 x i64>
  %69 = xor <2 x i64> %67, <i64 -1, i64 -1>
  %70 = and <2 x i64> %68, %69
  %71 = bitcast <2 x i64> %70 to <4 x float>
  ret <4 x float> %71
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_exp10f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = fmul <4 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <4 x float> %5, %0
  %7 = fmul <4 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <4 x float> %7, %6
  %9 = fmul <4 x float> %8, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %10 = fadd <4 x float> %9, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %11 = fmul <4 x float> %8, %10
  %12 = fadd <4 x float> %11, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %13 = fmul <4 x float> %8, %12
  %14 = fadd <4 x float> %13, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %15 = fmul <4 x float> %8, %14
  %16 = fadd <4 x float> %15, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %17 = fmul <4 x float> %8, %16
  %18 = fadd <4 x float> %17, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %19 = fmul <4 x float> %8, %18
  %20 = fadd <4 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %22 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %23 = add <4 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <4 x i32> %23 to <4 x float>
  %25 = fmul <4 x float> %20, %24
  %26 = sub <4 x i32> %4, %21
  %27 = shl <4 x i32> %26, <i32 23, i32 23, i32 23, i32 23>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %25, %29
  %31 = fcmp ogt <4 x float> %0, <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %30, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %33) #6
  %35 = fcmp olt <4 x float> %0, <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = bitcast <4 x float> %34 to <2 x i64>
  %39 = xor <2 x i64> %37, <i64 -1, i64 -1>
  %40 = and <2 x i64> %38, %39
  %41 = bitcast <2 x i64> %40 to <4 x float>
  ret <4 x float> %41
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_expm1f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, zeroinitializer
  %3 = fmul <4 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %3) #6
  %5 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %4) #6
  %6 = fmul <4 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <4 x float> %6, %0
  %8 = fsub <4 x float> %7, %0
  %9 = fsub <4 x float> %7, %8
  %10 = fsub <4 x float> %0, %9
  %11 = fsub <4 x float> %6, %8
  %12 = fadd <4 x float> %11, %10
  %13 = fadd <4 x float> %12, zeroinitializer
  %14 = fmul <4 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <4 x float> %14, %7
  %16 = fsub <4 x float> %15, %7
  %17 = fsub <4 x float> %15, %16
  %18 = fsub <4 x float> %7, %17
  %19 = fsub <4 x float> %14, %16
  %20 = fadd <4 x float> %19, %18
  %21 = fadd <4 x float> %20, %13
  %22 = fmul <4 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <4 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <4 x float> %15, %23
  %25 = fadd <4 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <4 x float> %15, %25
  %27 = fadd <4 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <4 x float> %15 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %15, %30
  %32 = bitcast <4 x float> %27 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = fsub <4 x float> %27, %34
  %36 = fmul <4 x float> %15, %27
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = fmul <4 x float> %30, %34
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %31, %34
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %35, %30
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %31, %35
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %21, %27
  %49 = fadd <4 x float> %48, %47
  %50 = fadd <4 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <4 x float> %50, %36
  %52 = fsub <4 x float> %50, %51
  %53 = fsub <4 x float> %36, %52
  %54 = fsub <4 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <4 x float> %54, %53
  %56 = fadd <4 x float> %55, %49
  %57 = bitcast <4 x float> %50 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %50, %59
  %61 = fmul <4 x float> %15, %50
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %31, %59
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %60, %30
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %15, %56
  %74 = fadd <4 x float> %72, %73
  %75 = fmul <4 x float> %21, %50
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <4 x float> %77, %61
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %61, %79
  %81 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fmul <4 x float> %15, %15
  %85 = bitcast <4 x float> %84 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fmul <4 x float> %30, %30
  %89 = fadd <4 x float> %88, %87
  %90 = fadd <4 x float> %30, %30
  %91 = fmul <4 x float> %90, %31
  %92 = fadd <4 x float> %91, %89
  %93 = fmul <4 x float> %31, %31
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %21, %21
  %96 = fmul <4 x float> %15, %95
  %97 = fadd <4 x float> %96, %94
  %98 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <2 x i64> %98 to <4 x float>
  %100 = fsub <4 x float> %84, %99
  %101 = bitcast <4 x float> %77 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fsub <4 x float> %77, %103
  %105 = fmul <4 x float> %84, %77
  %106 = bitcast <4 x float> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = fmul <4 x float> %99, %103
  %110 = fadd <4 x float> %109, %108
  %111 = fmul <4 x float> %100, %103
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %104, %99
  %114 = fadd <4 x float> %113, %112
  %115 = fmul <4 x float> %100, %104
  %116 = fadd <4 x float> %115, %114
  %117 = fmul <4 x float> %84, %83
  %118 = fadd <4 x float> %116, %117
  %119 = fmul <4 x float> %97, %77
  %120 = fadd <4 x float> %119, %118
  %121 = fadd <4 x float> %15, %105
  %122 = fsub <4 x float> %121, %15
  %123 = fsub <4 x float> %121, %122
  %124 = fsub <4 x float> %15, %123
  %125 = fsub <4 x float> %105, %122
  %126 = fadd <4 x float> %125, %124
  %127 = fadd <4 x float> %21, %120
  %128 = fadd <4 x float> %126, %127
  %129 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <4 x float> %121, %130
  %132 = fadd <4 x float> %131, %128
  %133 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %134 = shl <4 x i32> %133, <i32 23, i32 23, i32 23, i32 23>
  %135 = add <4 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = fmul <4 x float> %129, %136
  %138 = sub <4 x i32> %4, %133
  %139 = shl <4 x i32> %138, <i32 23, i32 23, i32 23, i32 23>
  %140 = add <4 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <4 x i32> %140 to <4 x float>
  %142 = fmul <4 x float> %137, %141
  %143 = fmul <4 x float> %132, %136
  %144 = fmul <4 x float> %143, %141
  %145 = fcmp olt <4 x float> %0, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %146 = sext <4 x i1> %145 to <4 x i32>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = bitcast <4 x float> %142 to <2 x i64>
  %149 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %150 = and <2 x i64> %148, %149
  %151 = bitcast <4 x float> %144 to <2 x i64>
  %152 = and <2 x i64> %151, %149
  %153 = bitcast <2 x i64> %150 to <4 x float>
  %154 = bitcast <2 x i64> %152 to <4 x float>
  %155 = fadd <4 x float> %153, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %156 = fsub <4 x float> %155, %153
  %157 = fsub <4 x float> %155, %156
  %158 = fsub <4 x float> %153, %157
  %159 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %156
  %160 = fadd <4 x float> %159, %158
  %161 = fadd <4 x float> %160, %154
  %162 = fadd <4 x float> %155, %161
  %163 = fcmp ogt <4 x float> %0, <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <4 x float>
  %166 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %162, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %165) #6
  %167 = fcmp olt <4 x float> %0, <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>
  %168 = sext <4 x i1> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <4 x float>
  %170 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %166, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %169) #6
  %171 = bitcast <4 x float> %0 to <4 x i32>
  %172 = icmp eq <4 x i32> %171, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <4 x float>
  %175 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %170, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %174) #6
  ret <4 x float> %175
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log10f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fsub <4 x float> %22, %23
  %25 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %24
  %26 = fsub <4 x float> %16, %23
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fadd <4 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %32 = fsub <4 x float> %16, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %35 = bitcast <4 x float> %28 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %28, %37
  %39 = bitcast <4 x float> %34 to <2 x i64>
  %40 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = fsub <4 x float> %34, %41
  %43 = bitcast <4 x float> %22 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fsub <4 x float> %22, %45
  %47 = fmul <4 x float> %22, %34
  %48 = fmul <4 x float> %37, %41
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fmul <4 x float> %42, %37
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %38, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %38, %42
  %55 = fadd <4 x float> %54, %53
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = bitcast <4 x float> %47 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %45, %41
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %42, %45
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %46, %41
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %46, %42
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %47, %58
  %71 = fadd <4 x float> %69, %70
  %72 = fmul <4 x float> %47, %33
  %73 = fsub <4 x float> %27, %72
  %74 = fmul <4 x float> %34, %73
  %75 = fadd <4 x float> %74, %71
  %76 = fmul <4 x float> %47, %47
  %77 = fmul <4 x float> %76, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %78 = fadd <4 x float> %77, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %79 = fmul <4 x float> %76, %78
  %80 = fadd <4 x float> %79, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %81 = bitcast <16 x i8> %21 to <4 x i32>
  %82 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %81) #6
  %83 = bitcast <4 x float> %82 to <2 x i64>
  %84 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = fsub <4 x float> %82, %85
  %87 = fmul <4 x float> %82, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <2 x i64> %89 to <4 x float>
  %91 = fmul <4 x float> %85, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %85, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %86, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %86, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %82, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %100 = fadd <4 x float> %99, %98
  %101 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <2 x i64> %101 to <4 x float>
  %103 = fsub <4 x float> %47, %102
  %104 = fmul <4 x float> %47, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %105 = bitcast <4 x float> %104 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = fmul <4 x float> %102, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %109 = fadd <4 x float> %108, %107
  %110 = fmul <4 x float> %103, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %111 = fadd <4 x float> %110, %109
  %112 = fmul <4 x float> %102, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %113 = fadd <4 x float> %112, %111
  %114 = fmul <4 x float> %103, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %115 = fadd <4 x float> %114, %113
  %116 = fmul <4 x float> %47, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %75, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %119 = fadd <4 x float> %117, %118
  %120 = fadd <4 x float> %87, %104
  %121 = fsub <4 x float> %87, %120
  %122 = fadd <4 x float> %104, %121
  %123 = fadd <4 x float> %100, %122
  %124 = fadd <4 x float> %123, %119
  %125 = fmul <4 x float> %47, %76
  %126 = fmul <4 x float> %125, %80
  %127 = fadd <4 x float> %120, %126
  %128 = fsub <4 x float> %120, %127
  %129 = fadd <4 x float> %126, %128
  %130 = fadd <4 x float> %129, %124
  %131 = fadd <4 x float> %127, %130
  %132 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %133 = sext <4 x i1> %132 to <4 x i32>
  %134 = bitcast <4 x i32> %133 to <4 x float>
  %135 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %131, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %134) #6
  %136 = fcmp ult <4 x float> %6, zeroinitializer
  %137 = sext <4 x i1> %136 to <4 x i32>
  %138 = bitcast <4 x i32> %137 to <4 x float>
  %139 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %135, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %138) #6
  %140 = fcmp oeq <4 x float> %6, zeroinitializer
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <4 x float>
  %143 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %139, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %142) #6
  ret <4 x float> %143
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log2f4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fsub <4 x float> %22, %23
  %25 = fsub <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %24
  %26 = fsub <4 x float> %16, %23
  %27 = fadd <4 x float> %26, %25
  %28 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fadd <4 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fsub <4 x float> %28, %29
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %32 = fsub <4 x float> %16, %29
  %33 = fadd <4 x float> %32, %31
  %34 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %35 = bitcast <4 x float> %28 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <2 x i64> %36 to <4 x float>
  %38 = fsub <4 x float> %28, %37
  %39 = bitcast <4 x float> %34 to <2 x i64>
  %40 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = fsub <4 x float> %34, %41
  %43 = bitcast <4 x float> %22 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fsub <4 x float> %22, %45
  %47 = fmul <4 x float> %22, %34
  %48 = fmul <4 x float> %37, %41
  %49 = fadd <4 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fmul <4 x float> %42, %37
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %38, %41
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %38, %42
  %55 = fadd <4 x float> %54, %53
  %56 = bitcast <4 x float> %55 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = bitcast <4 x float> %47 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fmul <4 x float> %45, %41
  %63 = fadd <4 x float> %62, %61
  %64 = fmul <4 x float> %42, %45
  %65 = fadd <4 x float> %64, %63
  %66 = fmul <4 x float> %46, %41
  %67 = fadd <4 x float> %66, %65
  %68 = fmul <4 x float> %46, %42
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %47, %58
  %71 = fadd <4 x float> %69, %70
  %72 = fmul <4 x float> %47, %33
  %73 = fsub <4 x float> %27, %72
  %74 = fmul <4 x float> %34, %73
  %75 = fadd <4 x float> %74, %71
  %76 = fmul <4 x float> %47, %47
  %77 = fmul <4 x float> %76, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %78 = fadd <4 x float> %77, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %79 = fmul <4 x float> %76, %78
  %80 = fadd <4 x float> %79, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %81 = bitcast <16 x i8> %21 to <4 x i32>
  %82 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %81) #6
  %83 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = fsub <4 x float> %47, %84
  %86 = fmul <4 x float> %47, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = xor <2 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = fmul <4 x float> %84, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %91 = fadd <4 x float> %90, %89
  %92 = fmul <4 x float> %85, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %93 = fadd <4 x float> %92, %91
  %94 = fmul <4 x float> %84, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %85, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %97 = fadd <4 x float> %96, %95
  %98 = fmul <4 x float> %47, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %99 = fadd <4 x float> %98, %97
  %100 = fmul <4 x float> %75, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %101 = fadd <4 x float> %99, %100
  %102 = fadd <4 x float> %82, %86
  %103 = fsub <4 x float> %102, %82
  %104 = fsub <4 x float> %102, %103
  %105 = fsub <4 x float> %82, %104
  %106 = fsub <4 x float> %86, %103
  %107 = fadd <4 x float> %106, %105
  %108 = fadd <4 x float> %107, %101
  %109 = fmul <4 x float> %47, %76
  %110 = fmul <4 x float> %109, %80
  %111 = fadd <4 x float> %102, %110
  %112 = fsub <4 x float> %111, %102
  %113 = fsub <4 x float> %111, %112
  %114 = fsub <4 x float> %102, %113
  %115 = fsub <4 x float> %110, %112
  %116 = fadd <4 x float> %115, %114
  %117 = fadd <4 x float> %116, %108
  %118 = fadd <4 x float> %111, %117
  %119 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %118, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %121) #6
  %123 = fcmp ult <4 x float> %6, zeroinitializer
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %122, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %125) #6
  %127 = fcmp oeq <4 x float> %6, zeroinitializer
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = bitcast <4 x i32> %128 to <4 x float>
  %130 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %126, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %129) #6
  ret <4 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log2f4_u35sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fcmp olt <4 x float> %0, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = fmul <4 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = bitcast <4 x i32> %3 to <4 x float>
  %6 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %4, <4 x float> %5) #6
  %7 = fmul <4 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <4 x float> %7 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 23, i32 23, i32 23, i32 23>
  %10 = and <4 x i32> %9, <i32 255, i32 255, i32 255, i32 255>
  %11 = add nsw <4 x i32> %10, <i32 -127, i32 -127, i32 -127, i32 -127>
  %12 = shl nuw nsw <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <4 x float> %6 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %15 = sub <4 x i32> %14, %12
  %16 = bitcast <4 x i32> %15 to <4 x float>
  %17 = add nsw <4 x i32> %10, <i32 -191, i32 -191, i32 -191, i32 -191>
  %18 = bitcast <4 x i32> %11 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %3 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fadd <4 x float> %16, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fadd <4 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = fdiv <4 x float> %22, %23
  %25 = fmul <4 x float> %24, %24
  %26 = fmul <4 x float> %25, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %27 = fadd <4 x float> %26, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %28 = fmul <4 x float> %25, %27
  %29 = fadd <4 x float> %28, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %30 = fmul <4 x float> %24, %25
  %31 = bitcast <16 x i8> %21 to <4 x i32>
  %32 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %31) #6
  %33 = fmul <4 x float> %24, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %34 = fadd <4 x float> %32, %33
  %35 = fmul <4 x float> %30, %29
  %36 = fadd <4 x float> %34, %35
  %37 = fcmp oeq <4 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <4 x float>
  %40 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %36, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %39) #6
  %41 = fcmp ult <4 x float> %6, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %40, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %43) #6
  %45 = fcmp oeq <4 x float> %6, zeroinitializer
  %46 = sext <4 x i1> %45 to <4 x i32>
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %47) #6
  ret <4 x float> %48
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_log1pf4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fcmp olt <4 x float> %2, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = fmul <4 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %5, <4 x float> %6) #6
  %8 = fmul <4 x float> %7, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %9 = bitcast <4 x float> %8 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 23, i32 23, i32 23, i32 23>
  %11 = and <4 x i32> %10, <i32 255, i32 255, i32 255, i32 255>
  %12 = add nsw <4 x i32> %11, <i32 -127, i32 -127, i32 -127, i32 -127>
  %13 = shl nuw nsw <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %14 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %13
  %15 = bitcast <4 x i32> %14 to <4 x float>
  %16 = fadd <4 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %17 = fmul <4 x float> %15, %0
  %18 = fadd <4 x float> %17, %16
  %19 = add nsw <4 x i32> %11, <i32 -191, i32 -191, i32 -191, i32 -191>
  %20 = bitcast <4 x i32> %12 to <16 x i8>
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = bitcast <4 x i32> %4 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> %21, <16 x i8> %22) #6
  %24 = bitcast <16 x i8> %23 to <4 x i32>
  %25 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %24) #6
  %26 = bitcast <4 x float> %25 to <2 x i64>
  %27 = and <2 x i64> %26, <i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <2 x i64> %27 to <4 x float>
  %29 = fsub <4 x float> %25, %28
  %30 = fmul <4 x float> %25, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %31 = bitcast <4 x float> %30 to <2 x i64>
  %32 = xor <2 x i64> %31, <i64 -9223372034707292160, i64 -9223372034707292160>
  %33 = bitcast <2 x i64> %32 to <4 x float>
  %34 = fmul <4 x float> %28, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %28, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %29, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %39 = fadd <4 x float> %38, %37
  %40 = fmul <4 x float> %29, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %25, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %43 = fadd <4 x float> %42, %41
  %44 = fadd <4 x float> %18, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %45 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %44
  %46 = fadd <4 x float> %18, %45
  %47 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %44
  %48 = bitcast <4 x float> %44 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <2 x i64> %49 to <4 x float>
  %51 = fsub <4 x float> %44, %50
  %52 = bitcast <4 x float> %47 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = fsub <4 x float> %47, %54
  %56 = bitcast <4 x float> %18 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = fsub <4 x float> %18, %58
  %60 = fmul <4 x float> %18, %47
  %61 = fmul <4 x float> %50, %54
  %62 = fadd <4 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <4 x float> %55, %50
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %51, %54
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %51, %55
  %68 = fadd <4 x float> %67, %66
  %69 = bitcast <4 x float> %68 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = bitcast <2 x i64> %70 to <4 x float>
  %72 = bitcast <4 x float> %60 to <2 x i64>
  %73 = xor <2 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fmul <4 x float> %58, %54
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %55, %58
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %59, %54
  %80 = fadd <4 x float> %79, %78
  %81 = fmul <4 x float> %59, %55
  %82 = fadd <4 x float> %81, %80
  %83 = fmul <4 x float> %60, %71
  %84 = fadd <4 x float> %82, %83
  %85 = fmul <4 x float> %60, %46
  %86 = fsub <4 x float> zeroinitializer, %85
  %87 = fmul <4 x float> %47, %86
  %88 = fadd <4 x float> %87, %84
  %89 = fmul <4 x float> %60, %60
  %90 = fmul <4 x float> %89, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %91 = fadd <4 x float> %90, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %92 = fmul <4 x float> %89, %91
  %93 = fadd <4 x float> %92, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %94 = fmul <4 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %95 = fmul <4 x float> %88, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %96 = fadd <4 x float> %30, %94
  %97 = fsub <4 x float> %30, %96
  %98 = fadd <4 x float> %94, %97
  %99 = fadd <4 x float> %43, %98
  %100 = fadd <4 x float> %99, %95
  %101 = fmul <4 x float> %60, %89
  %102 = fmul <4 x float> %101, %93
  %103 = fadd <4 x float> %96, %102
  %104 = fsub <4 x float> %96, %103
  %105 = fadd <4 x float> %102, %104
  %106 = fadd <4 x float> %105, %100
  %107 = fadd <4 x float> %103, %106
  %108 = fcmp ogt <4 x float> %0, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = bitcast <4 x i32> %109 to <4 x float>
  %111 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %107, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %110) #6
  %112 = fcmp olt <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = bitcast <4 x float> %111 to <2 x i64>
  %116 = or <2 x i64> %115, %114
  %117 = bitcast <2 x i64> %116 to <4 x float>
  %118 = fcmp oeq <4 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %119 = sext <4 x i1> %118 to <4 x i32>
  %120 = bitcast <4 x i32> %119 to <4 x float>
  %121 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %117, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %120) #6
  %122 = bitcast <4 x float> %0 to <4 x i32>
  %123 = icmp eq <4 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %121, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %125) #6
  ret <4 x float> %126
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fabsf4_sse4(<4 x float>) local_unnamed_addr #2 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  ret <4 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x float> @Sleef_cinz_copysignf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #2 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <4 x float>
  ret <4 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmaxf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %0, <4 x float> %1) #6
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %0, <4 x float> %6) #6
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fminf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x float> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %0, <4 x float> %1) #6
  %6 = bitcast <4 x i32> %4 to <4 x float>
  %7 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %0, <4 x float> %6) #6
  ret <4 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fdimf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fsub <4 x float> %0, %1
  %4 = fcmp olt <4 x float> %3, zeroinitializer
  %5 = fcmp oeq <4 x float> %0, %1
  %6 = or <4 x i1> %4, %5
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = bitcast <4 x i32> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %3, <4 x float> zeroinitializer, <4 x float> %8) #6
  ret <4 x float> %9
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_truncf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 11) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_floorf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp olt <4 x float> %4, zeroinitializer
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fadd <4 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %4, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %0 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %14 = fcmp oge <4 x float> %12, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %15 = or <4 x i1> %14, %13
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = fsub <4 x float> %0, %9
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %0, <4 x float> %23) #6
  ret <4 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_ceilf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %0) #6
  %3 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %2) #6
  %4 = fsub <4 x float> %0, %3
  %5 = fcmp ole <4 x float> %4, zeroinitializer
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fadd <4 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %7, <4 x float> %4, <4 x float> %8) #6
  %10 = bitcast <4 x float> %0 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = fcmp oeq <4 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %14 = fcmp oge <4 x float> %12, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %15 = or <4 x i1> %14, %13
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = fsub <4 x float> %0, %9
  %18 = bitcast <4 x float> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = bitcast <4 x i32> %16 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %0, <4 x float> %23) #6
  ret <4 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_roundf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fadd <4 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %3) #6
  %5 = fsub <4 x float> %2, %4
  %6 = fcmp ole <4 x float> %2, zeroinitializer
  %7 = fcmp oeq <4 x float> %5, zeroinitializer
  %8 = and <4 x i1> %7, %6
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = fadd <4 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %11 = bitcast <4 x i32> %9 to <4 x float>
  %12 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %10, <4 x float> %11) #6
  %13 = fcmp olt <4 x float> %5, zeroinitializer
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = fadd <4 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = bitcast <4 x i32> %14 to <4 x float>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %15, <4 x float> %16) #6
  %18 = fcmp oeq <4 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> zeroinitializer, <4 x float> %20) #6
  %22 = bitcast <4 x float> %0 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fcmp oeq <4 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = fcmp oge <4 x float> %24, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %27 = or <4 x i1> %26, %25
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = fsub <4 x float> %21, %17
  %30 = bitcast <4 x float> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 9223372034707292159, i64 9223372034707292159>
  %32 = and <2 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160>
  %33 = or <2 x i64> %31, %32
  %34 = bitcast <2 x i64> %33 to <4 x float>
  %35 = bitcast <4 x i32> %28 to <4 x float>
  %36 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %34, <4 x float> %0, <4 x float> %35) #6
  ret <4 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_rintf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %0, i32 8) #6
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmaf4_sse4(<4 x float>, <4 x float>, <4 x float>) local_unnamed_addr #0 {
  %4 = fmul <4 x float> %0, %1
  %5 = fadd <4 x float> %4, %2
  %6 = bitcast <4 x float> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %1, <4 x float> %14, <4 x float> %12) #6
  %16 = fmul <4 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %2, <4 x float> %16, <4 x float> %12) #6
  %18 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <4 x float> %12) #6
  %19 = fcmp ogt <4 x float> %8, <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>
  %20 = sext <4 x i1> %19 to <4 x i32>
  %21 = fmul <4 x float> %13, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %22 = bitcast <4 x i32> %20 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %21, <4 x float> %22) #6
  %24 = fmul <4 x float> %15, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %25 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %24, <4 x float> %22) #6
  %26 = fmul <4 x float> %17, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %27 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %17, <4 x float> %26, <4 x float> %22) #6
  %28 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %18, <4 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <4 x float> %22) #6
  %29 = bitcast <4 x float> %23 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = fsub <4 x float> %23, %31
  %33 = bitcast <4 x float> %25 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fsub <4 x float> %25, %35
  %37 = fmul <4 x float> %23, %25
  %38 = bitcast <4 x float> %37 to <2 x i64>
  %39 = xor <2 x i64> %38, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = fmul <4 x float> %31, %35
  %42 = fadd <4 x float> %41, %40
  %43 = fmul <4 x float> %32, %35
  %44 = fadd <4 x float> %43, %42
  %45 = fmul <4 x float> %36, %31
  %46 = fadd <4 x float> %45, %44
  %47 = fmul <4 x float> %32, %36
  %48 = fadd <4 x float> %47, %46
  %49 = fadd <4 x float> %37, %27
  %50 = fsub <4 x float> %49, %37
  %51 = fsub <4 x float> %49, %50
  %52 = fsub <4 x float> %37, %51
  %53 = fsub <4 x float> %27, %50
  %54 = fadd <4 x float> %53, %52
  %55 = fadd <4 x float> %54, %48
  %56 = fcmp oeq <4 x float> %23, zeroinitializer
  %57 = fcmp oeq <4 x float> %25, zeroinitializer
  %58 = or <4 x i1> %57, %56
  %59 = sext <4 x i1> %58 to <4 x i32>
  %60 = fadd <4 x float> %49, %55
  %61 = bitcast <4 x i32> %59 to <4 x float>
  %62 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %60, <4 x float> %27, <4 x float> %61) #6
  %63 = bitcast <4 x float> %27 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fcmp oeq <4 x float> %65, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %67 = sext <4 x i1> %66 to <4 x i32>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = and <2 x i64> %29, <i64 9223372034707292159, i64 9223372034707292159>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = fcmp oeq <4 x float> %70, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %72 = and <2 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159>
  %73 = bitcast <2 x i64> %72 to <4 x float>
  %74 = fcmp oeq <4 x float> %73, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %75 = fcmp uno <4 x float> %25, %23
  %76 = or <4 x i1> %71, %75
  %77 = or <4 x i1> %76, %74
  %78 = sext <4 x i1> %77 to <4 x i32>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %81 = and <2 x i64> %80, %68
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %27, <4 x float> %82) #6
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 9223372034707292159, i64 9223372034707292159>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fcmp oeq <4 x float> %86, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %88 = fcmp uno <4 x float> %83, zeroinitializer
  %89 = or <4 x i1> %87, %88
  %90 = sext <4 x i1> %89 to <4 x i32>
  %91 = fmul <4 x float> %28, %62
  %92 = bitcast <4 x i32> %90 to <4 x float>
  %93 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %91, <4 x float> %83, <4 x float> %92) #6
  ret <4 x float> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_hypotf4_u05sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fcmp olt <4 x float> %10, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = fmul <4 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %14 = bitcast <4 x i32> %12 to <4 x float>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %9, <4 x float> %13, <4 x float> %14) #6
  %16 = fmul <4 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %17 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %10, <4 x float> %16, <4 x float> %14) #6
  %18 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %19 = bitcast <4 x float> %17 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = fsub <4 x float> %17, %21
  %23 = bitcast <4 x float> %18 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 -17587891081216, i64 -17587891081216>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fsub <4 x float> %18, %25
  %27 = bitcast <4 x float> %15 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <2 x i64> %28 to <4 x float>
  %30 = fsub <4 x float> %15, %29
  %31 = fmul <4 x float> %15, %18
  %32 = fmul <4 x float> %21, %25
  %33 = fadd <4 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fmul <4 x float> %26, %21
  %35 = fadd <4 x float> %34, %33
  %36 = fmul <4 x float> %22, %25
  %37 = fadd <4 x float> %36, %35
  %38 = fmul <4 x float> %22, %26
  %39 = fadd <4 x float> %38, %37
  %40 = bitcast <4 x float> %39 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = bitcast <4 x float> %31 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = fmul <4 x float> %29, %25
  %47 = fadd <4 x float> %46, %45
  %48 = fmul <4 x float> %26, %29
  %49 = fadd <4 x float> %48, %47
  %50 = fmul <4 x float> %30, %25
  %51 = fadd <4 x float> %50, %49
  %52 = fmul <4 x float> %30, %26
  %53 = fadd <4 x float> %52, %51
  %54 = fmul <4 x float> %31, %42
  %55 = fadd <4 x float> %53, %54
  %56 = fmul <4 x float> %31, zeroinitializer
  %57 = fsub <4 x float> zeroinitializer, %56
  %58 = fmul <4 x float> %18, %57
  %59 = fadd <4 x float> %58, %55
  %60 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <2 x i64> %60 to <4 x float>
  %62 = fsub <4 x float> %31, %61
  %63 = fmul <4 x float> %31, %31
  %64 = bitcast <4 x float> %63 to <2 x i64>
  %65 = xor <2 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160>
  %66 = bitcast <2 x i64> %65 to <4 x float>
  %67 = fmul <4 x float> %61, %61
  %68 = fadd <4 x float> %67, %66
  %69 = fadd <4 x float> %61, %61
  %70 = fmul <4 x float> %69, %62
  %71 = fadd <4 x float> %70, %68
  %72 = fmul <4 x float> %62, %62
  %73 = fadd <4 x float> %72, %71
  %74 = fadd <4 x float> %59, %59
  %75 = fmul <4 x float> %31, %74
  %76 = fadd <4 x float> %73, %75
  %77 = fadd <4 x float> %63, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %78 = fsub <4 x float> %77, %63
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> %63, %79
  %81 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %76
  %84 = fadd <4 x float> %77, %83
  %85 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %84) #6
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -17587891081216, i64 -17587891081216>
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = fsub <4 x float> %85, %88
  %90 = fmul <4 x float> %85, %85
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fmul <4 x float> %88, %88
  %95 = fadd <4 x float> %94, %93
  %96 = fmul <4 x float> %89, %88
  %97 = fadd <4 x float> %96, %95
  %98 = fadd <4 x float> %96, %97
  %99 = fmul <4 x float> %89, %89
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %90, %77
  %102 = fsub <4 x float> %101, %77
  %103 = fsub <4 x float> %101, %102
  %104 = fsub <4 x float> %77, %103
  %105 = fsub <4 x float> %90, %102
  %106 = fadd <4 x float> %105, %104
  %107 = fadd <4 x float> %100, %83
  %108 = fadd <4 x float> %106, %107
  %109 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %85
  %110 = bitcast <4 x float> %109 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -17587891081216, i64 -17587891081216>
  %112 = bitcast <2 x i64> %111 to <4 x float>
  %113 = fsub <4 x float> %109, %112
  %114 = fmul <4 x float> %88, %112
  %115 = fadd <4 x float> %114, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %116 = fmul <4 x float> %113, %88
  %117 = fadd <4 x float> %116, %115
  %118 = fmul <4 x float> %89, %112
  %119 = fadd <4 x float> %118, %117
  %120 = fmul <4 x float> %89, %113
  %121 = fadd <4 x float> %120, %119
  %122 = xor <2 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <2 x i64> %122 to <4 x float>
  %124 = fmul <4 x float> %121, %123
  %125 = bitcast <4 x float> %101 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 -17587891081216, i64 -17587891081216>
  %127 = bitcast <2 x i64> %126 to <4 x float>
  %128 = fsub <4 x float> %101, %127
  %129 = fmul <4 x float> %109, %101
  %130 = bitcast <4 x float> %129 to <2 x i64>
  %131 = xor <2 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <2 x i64> %131 to <4 x float>
  %133 = fmul <4 x float> %112, %127
  %134 = fadd <4 x float> %133, %132
  %135 = fmul <4 x float> %128, %112
  %136 = fadd <4 x float> %135, %134
  %137 = fmul <4 x float> %113, %127
  %138 = fadd <4 x float> %137, %136
  %139 = fmul <4 x float> %113, %128
  %140 = fadd <4 x float> %139, %138
  %141 = fmul <4 x float> %101, %124
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %109, %108
  %144 = fadd <4 x float> %142, %143
  %145 = fmul <4 x float> %129, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %146 = fmul <4 x float> %144, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %147 = bitcast <4 x float> %145 to <2 x i64>
  %148 = and <2 x i64> %147, <i64 -17587891081216, i64 -17587891081216>
  %149 = bitcast <2 x i64> %148 to <4 x float>
  %150 = fsub <4 x float> %145, %149
  %151 = bitcast <4 x float> %10 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 -17587891081216, i64 -17587891081216>
  %153 = bitcast <2 x i64> %152 to <4 x float>
  %154 = fsub <4 x float> %10, %153
  %155 = fmul <4 x float> %10, %145
  %156 = bitcast <4 x float> %155 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372034707292160, i64 -9223372034707292160>
  %158 = bitcast <2 x i64> %157 to <4 x float>
  %159 = fmul <4 x float> %153, %149
  %160 = fadd <4 x float> %159, %158
  %161 = fmul <4 x float> %150, %153
  %162 = fadd <4 x float> %161, %160
  %163 = fmul <4 x float> %154, %149
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %154, %150
  %166 = fadd <4 x float> %165, %164
  %167 = fmul <4 x float> %10, %146
  %168 = fadd <4 x float> %166, %167
  %169 = fadd <4 x float> %155, %168
  %170 = fcmp uno <4 x float> %169, zeroinitializer
  %171 = sext <4 x i1> %170 to <4 x i32>
  %172 = bitcast <4 x i32> %171 to <4 x float>
  %173 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %169, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %172) #6
  %174 = fcmp oeq <4 x float> %9, zeroinitializer
  %175 = sext <4 x i1> %174 to <4 x i32>
  %176 = bitcast <4 x i32> %175 to <4 x float>
  %177 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %173, <4 x float> %10, <4 x float> %176) #6
  %178 = fcmp uno <4 x float> %8, %5
  %179 = sext <4 x i1> %178 to <4 x i32>
  %180 = bitcast <4 x i32> %179 to <4 x float>
  %181 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %177, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %180) #6
  %182 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %183 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %184 = or <4 x i1> %183, %182
  %185 = sext <4 x i1> %184 to <4 x i32>
  %186 = bitcast <4 x i32> %185 to <4 x float>
  %187 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %181, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %186) #6
  ret <4 x float> %187
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_hypotf4_u35sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %8) #6
  %10 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %8) #6
  %11 = fdiv <4 x float> %9, %10
  %12 = fmul <4 x float> %11, %11
  %13 = fadd <4 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float> %13) #6
  %15 = fmul <4 x float> %10, %14
  %16 = fcmp oeq <4 x float> %9, zeroinitializer
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = bitcast <4 x i32> %17 to <4 x float>
  %19 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %15, <4 x float> %10, <4 x float> %18) #6
  %20 = fcmp uno <4 x float> %8, %5
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %19, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %22) #6
  %24 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %24
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %23, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %28) #6
  ret <4 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_nextafterf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x float> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = bitcast <4 x float> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = bitcast <4 x i32> %4 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = bitcast <4 x float> %9 to <4 x i32>
  %12 = ashr <4 x i32> %11, <i32 31, i32 31, i32 31, i32 31>
  %13 = fcmp ole <4 x float> %9, %1
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = xor <4 x i32> %12, %14
  %16 = xor <4 x i32> %11, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %17 = sub <4 x i32> zeroinitializer, %16
  %18 = bitcast <4 x float> %9 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = bitcast <4 x i32> %15 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #6
  %22 = fcmp une <4 x float> %9, %1
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <16 x i8> %21 to <4 x i32>
  %25 = add <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = bitcast <4 x i32> %23 to <16 x i8>
  %28 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %26, <16 x i8> %27) #6
  %29 = bitcast <16 x i8> %28 to <4 x i32>
  %30 = xor <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = sub <4 x i32> zeroinitializer, %30
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %28, <16 x i8> %32, <16 x i8> %20) #6
  %34 = bitcast <16 x i8> %33 to <4 x float>
  %35 = fcmp oeq <4 x float> %34, zeroinitializer
  %36 = fcmp une <4 x float> %9, zeroinitializer
  %37 = and <4 x i1> %35, %36
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %40 = bitcast <2 x i64> %39 to <4 x float>
  %41 = bitcast <4 x i32> %38 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %34, <4 x float> %40, <4 x float> %41) #6
  %43 = fcmp oeq <4 x float> %9, zeroinitializer
  %44 = fcmp oeq <4 x float> %1, zeroinitializer
  %45 = and <4 x i1> %43, %44
  %46 = sext <4 x i1> %45 to <4 x i32>
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %42, <4 x float> %1, <4 x float> %47) #6
  %49 = fcmp uno <4 x float> %9, %1
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <4 x float>
  %52 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %48, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %51) #6
  ret <4 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_frfrexpf4_sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = bitcast <4 x float> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <2 x i64> %3 to <4 x float>
  %5 = fcmp olt <4 x float> %4, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %6 = sext <4 x i1> %5 to <4 x i32>
  %7 = fmul <4 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %8 = bitcast <4 x i32> %6 to <4 x float>
  %9 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> %7, <4 x float> %8) #6
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -9187343241974906881, i64 -9187343241974906881>
  %12 = or <2 x i64> %11, <i64 4539628425446424576, i64 4539628425446424576>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = and <2 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159>
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = fcmp oeq <4 x float> %15, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %17 = sext <4 x i1> %16 to <4 x i32>
  %18 = and <2 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <2 x i64> %18, <i64 9187343241974906880, i64 9187343241974906880>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = bitcast <4 x i32> %17 to <4 x float>
  %22 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %13, <4 x float> %20, <4 x float> %21) #6
  %23 = fcmp oeq <4 x float> %9, zeroinitializer
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast <4 x i32> %24 to <4 x float>
  %26 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %22, <4 x float> %9, <4 x float> %25) #6
  ret <4 x float> %26
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fmodf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %14, <4 x float> %12) #6
  %16 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = bitcast <4 x float> %16 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %19 = bitcast <4 x i32> %18 to <4 x float>
  %20 = fcmp oeq <4 x float> %16, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %19, <4 x float> zeroinitializer, <4 x float> %22) #6
  %24 = fmul <4 x float> %15, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %25 = fmul <4 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %26 = bitcast <4 x float> %15 to <2 x i64>
  %27 = xor <2 x i64> %26, <i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = bitcast <2 x i64> %27 to <4 x float>
  %29 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = fsub <4 x float> %28, %30
  br label %32

; <label>:32:                                     ; preds = %32, %2
  %33 = phi i32 [ 0, %2 ], [ %89, %32 ]
  %34 = phi <4 x float> [ zeroinitializer, %2 ], [ %83, %32 ]
  %35 = phi <4 x float> [ %13, %2 ], [ %81, %32 ]
  %36 = bitcast <4 x float> %35 to <4 x i32>
  %37 = add <4 x i32> %36, <i32 -1, i32 -1, i32 -1, i32 -1>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fcmp oeq <4 x float> %35, zeroinitializer
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = bitcast <4 x i32> %40 to <4 x float>
  %42 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %38, <4 x float> zeroinitializer, <4 x float> %41) #6
  %43 = fmul <4 x float> %23, %42
  %44 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %43, i32 11) #6
  %45 = fcmp olt <4 x float> %35, %24
  %46 = fcmp ole <4 x float> %15, %35
  %47 = and <4 x i1> %46, %45
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %44, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %49) #6
  %51 = fcmp olt <4 x float> %35, %25
  %52 = and <4 x i1> %46, %51
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %50, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %54) #6
  %56 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %55, i32 11) #6
  %57 = bitcast <4 x float> %56 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %56, %59
  %61 = fmul <4 x float> %56, %28
  %62 = bitcast <4 x float> %61 to <2 x i64>
  %63 = xor <2 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <2 x i64> %63 to <4 x float>
  %65 = fmul <4 x float> %30, %59
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %60, %30
  %68 = fadd <4 x float> %67, %66
  %69 = fmul <4 x float> %31, %59
  %70 = fadd <4 x float> %69, %68
  %71 = fmul <4 x float> %31, %60
  %72 = fadd <4 x float> %71, %70
  %73 = fadd <4 x float> %35, %61
  %74 = fsub <4 x float> %73, %35
  %75 = fsub <4 x float> %73, %74
  %76 = fsub <4 x float> %35, %75
  %77 = fsub <4 x float> %61, %74
  %78 = fadd <4 x float> %77, %76
  %79 = fadd <4 x float> %34, %72
  %80 = fadd <4 x float> %78, %79
  %81 = fadd <4 x float> %73, %80
  %82 = fsub <4 x float> %73, %81
  %83 = fadd <4 x float> %80, %82
  %84 = fcmp olt <4 x float> %81, %15
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = bitcast <4 x i32> %85 to <16 x i8>
  %87 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %86) #6
  %88 = icmp ne i32 %87, 65535
  %89 = add nuw nsw i32 %33, 1
  %90 = icmp ult i32 %89, 8
  %91 = and i1 %90, %88
  br i1 %91, label %32, label %92

; <label>:92:                                     ; preds = %32
  %93 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <4 x float> %12) #6
  %94 = fadd <4 x float> %81, %83
  %95 = fmul <4 x float> %94, %93
  %96 = fcmp oeq <4 x float> %94, %15
  %97 = sext <4 x i1> %96 to <4 x i32>
  %98 = bitcast <4 x i32> %97 to <4 x float>
  %99 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %95, <4 x float> zeroinitializer, <4 x float> %98) #6
  %100 = bitcast <4 x float> %99 to <2 x i64>
  %101 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = xor <2 x i64> %101, %100
  %103 = bitcast <2 x i64> %102 to <4 x float>
  %104 = fcmp olt <4 x float> %13, %15
  %105 = sext <4 x i1> %104 to <4 x i32>
  %106 = bitcast <4 x i32> %105 to <4 x float>
  %107 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %103, <4 x float> %0, <4 x float> %106) #6
  %108 = fcmp oeq <4 x float> %15, zeroinitializer
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = bitcast <4 x i32> %109 to <4 x float>
  %111 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %107, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %110) #6
  ret <4 x float> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_remainderf4_sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = bitcast <4 x float> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = fcmp olt <4 x float> %8, <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>
  %10 = sext <4 x i1> %9 to <4 x i32>
  %11 = fmul <4 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %12 = bitcast <4 x i32> %10 to <4 x float>
  %13 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %11, <4 x float> %12) #6
  %14 = fmul <4 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %15 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %8, <4 x float> %14, <4 x float> %12) #6
  %16 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <4 x float> %12) #6
  %17 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %18 = fmul <4 x float> %15, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = fmul <4 x float> %15, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = bitcast <4 x float> %15 to <2 x i64>
  %21 = xor <2 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = fsub <4 x float> %22, %24
  br label %26

; <label>:26:                                     ; preds = %56, %2
  %27 = phi i32 [ 0, %2 ], [ %106, %56 ]
  %28 = phi <2 x i64> [ zeroinitializer, %2 ], [ %79, %56 ]
  %29 = phi <4 x float> [ zeroinitializer, %2 ], [ %105, %56 ]
  %30 = phi <4 x float> [ %13, %2 ], [ %103, %56 ]
  %31 = fmul <4 x float> %17, %30
  %32 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %31, i32 8) #6
  %33 = bitcast <4 x float> %30 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = fcmp ogt <4 x float> %18, %35
  %37 = sext <4 x i1> %36 to <4 x i32>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %32, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %38) #6
  %40 = fcmp ogt <4 x float> %19, %35
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = fcmp oeq <4 x float> %19, %35
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  %46 = xor <2 x i64> %28, <i64 -1, i64 -1>
  %47 = and <2 x i64> %45, %46
  %48 = or <2 x i64> %47, %42
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %39, <4 x float> zeroinitializer, <4 x float> %49) #6
  %51 = fcmp oeq <4 x float> %50, zeroinitializer
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <16 x i8>
  %54 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %53) #6
  %55 = icmp eq i32 %54, 65535
  br i1 %55, label %108, label %56

; <label>:56:                                     ; preds = %26
  %57 = fmul <4 x float> %50, %22
  %58 = bitcast <4 x float> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = fcmp oeq <4 x float> %60, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = and <2 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = xor <2 x i64> %63, <i64 -4647714812233515008, i64 -4647714812233515008>
  %65 = bitcast <2 x i64> %64 to <4 x float>
  %66 = fadd <4 x float> %50, %65
  %67 = bitcast <4 x i32> %62 to <4 x float>
  %68 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %50, <4 x float> %66, <4 x float> %67) #6
  %69 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %68) #6
  %70 = and <4 x i32> %69, <i32 1, i32 1, i32 1, i32 1>
  %71 = icmp ne <4 x i32> %70, zeroinitializer
  %72 = bitcast <4 x float> %68 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 9223372034707292159, i64 9223372034707292159>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = fcmp olt <4 x float> %74, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %76 = and <4 x i1> %75, %71
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = xor <2 x i64> %28, %78
  %80 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = fsub <4 x float> %68, %81
  %83 = fmul <4 x float> %68, %22
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fmul <4 x float> %24, %81
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %82, %24
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %25, %81
  %92 = fadd <4 x float> %91, %90
  %93 = fmul <4 x float> %25, %82
  %94 = fadd <4 x float> %93, %92
  %95 = fadd <4 x float> %30, %83
  %96 = fsub <4 x float> %95, %30
  %97 = fsub <4 x float> %95, %96
  %98 = fsub <4 x float> %30, %97
  %99 = fsub <4 x float> %83, %96
  %100 = fadd <4 x float> %99, %98
  %101 = fadd <4 x float> %29, %94
  %102 = fadd <4 x float> %100, %101
  %103 = fadd <4 x float> %95, %102
  %104 = fsub <4 x float> %95, %103
  %105 = fadd <4 x float> %102, %104
  %106 = add nuw nsw i32 %27, 1
  %107 = icmp ult i32 %106, 8
  br i1 %107, label %26, label %108

; <label>:108:                                    ; preds = %26, %56
  %109 = phi <4 x float> [ %30, %26 ], [ %103, %56 ]
  %110 = phi <4 x float> [ %29, %26 ], [ %105, %56 ]
  %111 = fadd <4 x float> %109, %110
  %112 = fmul <4 x float> %16, %111
  %113 = bitcast <4 x float> %112 to <2 x i64>
  %114 = and <2 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160>
  %115 = xor <2 x i64> %114, %113
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = fcmp oeq <4 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %118 = sext <4 x i1> %117 to <4 x i32>
  %119 = fcmp oeq <4 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <4 x i1> %119 to <4 x i32>
  %121 = bitcast <4 x i32> %120 to <4 x float>
  %122 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %0, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %121) #6
  %123 = bitcast <4 x i32> %118 to <4 x float>
  %124 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %116, <4 x float> %122, <4 x float> %123) #6
  %125 = fcmp oeq <4 x float> %15, zeroinitializer
  %126 = sext <4 x i1> %125 to <4 x i32>
  %127 = bitcast <4 x i32> %126 to <4 x float>
  %128 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %124, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> %127) #6
  ret <4 x float> %128
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_sinpif4_u05sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = bitcast <4 x i32> %9 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <4 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <4 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <4 x float> %28) #6
  %31 = fmul <4 x float> %29, %13
  %32 = fadd <4 x float> %30, %31
  %33 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <4 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <4 x float> %28) #6
  %34 = fmul <4 x float> %13, %32
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %13, %35
  %37 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <4 x float> %28) #6
  %38 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <4 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <4 x float> %28) #6
  %39 = fadd <4 x float> %37, %36
  %40 = fsub <4 x float> %39, %36
  %41 = fsub <4 x float> %39, %40
  %42 = fsub <4 x float> %36, %41
  %43 = fsub <4 x float> %37, %40
  %44 = fadd <4 x float> %43, %42
  %45 = fadd <4 x float> %38, %44
  %46 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %13, %47
  %49 = bitcast <4 x float> %39 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %39, %51
  %53 = fmul <4 x float> %13, %39
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %47, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %48, %51
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %52, %47
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %48, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %13, %45
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %39, %27
  %68 = fadd <4 x float> %67, %66
  %69 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <4 x float> %28) #6
  %70 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <4 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <4 x float> %28) #6
  %71 = fadd <4 x float> %69, %53
  %72 = fsub <4 x float> %71, %53
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %53, %73
  %75 = fsub <4 x float> %69, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %70, %68
  %78 = fadd <4 x float> %76, %77
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %13, <4 x float> %28) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %27, <4 x float> %28) #6
  %81 = bitcast <4 x float> %71 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %71, %83
  %85 = bitcast <4 x float> %79 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fsub <4 x float> %79, %87
  %89 = fmul <4 x float> %79, %71
  %90 = bitcast <4 x float> %89 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fmul <4 x float> %87, %83
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %84, %87
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %88, %83
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %88, %84
  %100 = fadd <4 x float> %99, %98
  %101 = fmul <4 x float> %80, %71
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %79, %78
  %104 = fadd <4 x float> %102, %103
  %105 = fadd <4 x float> %89, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = fsub <4 x float> %105, %89
  %107 = fsub <4 x float> %105, %106
  %108 = fsub <4 x float> %89, %107
  %109 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %110, %104
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %89, <4 x float> %105, <4 x float> %28) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %104, <4 x float> %111, <4 x float> %28) #6
  %114 = and <4 x i32> %6, <i32 4, i32 4, i32 4, i32 4>
  %115 = icmp ne <4 x i32> %114, zeroinitializer
  %116 = sext <4 x i1> %115 to <4 x i32>
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = and <2 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160>
  %119 = bitcast <4 x float> %112 to <2 x i64>
  %120 = xor <2 x i64> %118, %119
  %121 = bitcast <4 x float> %113 to <2 x i64>
  %122 = xor <2 x i64> %118, %121
  %123 = bitcast <2 x i64> %120 to <4 x float>
  %124 = bitcast <2 x i64> %122 to <4 x float>
  %125 = fadd <4 x float> %123, %124
  %126 = bitcast <4 x float> %0 to <4 x i32>
  %127 = icmp eq <4 x i32> %126, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = bitcast <4 x i32> %128 to <4 x float>
  %130 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %125, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <4 x float> %129) #6
  %131 = bitcast <4 x float> %0 to <2 x i64>
  %132 = and <2 x i64> %131, <i64 9223372034707292159, i64 9223372034707292159>
  %133 = bitcast <2 x i64> %132 to <4 x float>
  %134 = fcmp ogt <4 x float> %133, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %135 = sext <4 x i1> %134 to <4 x i32>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = bitcast <4 x float> %130 to <2 x i64>
  %138 = xor <2 x i64> %136, <i64 -1, i64 -1>
  %139 = and <2 x i64> %137, %138
  %140 = fcmp oeq <4 x float> %133, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = sext <4 x i1> %140 to <4 x i32>
  %142 = bitcast <4 x i32> %141 to <2 x i64>
  %143 = or <2 x i64> %139, %142
  %144 = bitcast <2 x i64> %143 to <4 x float>
  ret <4 x float> %144
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_cospif4_u05sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = fmul <4 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %10) #6
  %12 = fsub <4 x float> %2, %11
  %13 = fmul <4 x float> %12, %12
  %14 = bitcast <4 x float> %12 to <2 x i64>
  %15 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %12, %16
  %18 = bitcast <4 x float> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = fmul <4 x float> %16, %16
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %17, %16
  %24 = fadd <4 x float> %23, %22
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, %17
  %27 = fadd <4 x float> %26, %25
  %28 = bitcast <4 x i32> %9 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <4 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <4 x float> %28) #6
  %30 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <4 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <4 x float> %28) #6
  %31 = fmul <4 x float> %29, %13
  %32 = fadd <4 x float> %30, %31
  %33 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <4 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <4 x float> %28) #6
  %34 = fmul <4 x float> %13, %32
  %35 = fadd <4 x float> %33, %34
  %36 = fmul <4 x float> %13, %35
  %37 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <4 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <4 x float> %28) #6
  %38 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <4 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <4 x float> %28) #6
  %39 = fadd <4 x float> %37, %36
  %40 = fsub <4 x float> %39, %36
  %41 = fsub <4 x float> %39, %40
  %42 = fsub <4 x float> %36, %41
  %43 = fsub <4 x float> %37, %40
  %44 = fadd <4 x float> %43, %42
  %45 = fadd <4 x float> %38, %44
  %46 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <2 x i64> %46 to <4 x float>
  %48 = fsub <4 x float> %13, %47
  %49 = bitcast <4 x float> %39 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = fsub <4 x float> %39, %51
  %53 = fmul <4 x float> %13, %39
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <2 x i64> %55 to <4 x float>
  %57 = fmul <4 x float> %47, %51
  %58 = fadd <4 x float> %57, %56
  %59 = fmul <4 x float> %48, %51
  %60 = fadd <4 x float> %59, %58
  %61 = fmul <4 x float> %52, %47
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %48, %52
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %13, %45
  %66 = fadd <4 x float> %65, %64
  %67 = fmul <4 x float> %39, %27
  %68 = fadd <4 x float> %67, %66
  %69 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <4 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <4 x float> %28) #6
  %70 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <4 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <4 x float> %28) #6
  %71 = fadd <4 x float> %69, %53
  %72 = fsub <4 x float> %71, %53
  %73 = fsub <4 x float> %71, %72
  %74 = fsub <4 x float> %53, %73
  %75 = fsub <4 x float> %69, %72
  %76 = fadd <4 x float> %75, %74
  %77 = fadd <4 x float> %70, %68
  %78 = fadd <4 x float> %76, %77
  %79 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %12, <4 x float> %13, <4 x float> %28) #6
  %80 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> zeroinitializer, <4 x float> %27, <4 x float> %28) #6
  %81 = bitcast <4 x float> %71 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = fsub <4 x float> %71, %83
  %85 = bitcast <4 x float> %79 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <2 x i64> %86 to <4 x float>
  %88 = fsub <4 x float> %79, %87
  %89 = fmul <4 x float> %79, %71
  %90 = bitcast <4 x float> %89 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <2 x i64> %91 to <4 x float>
  %93 = fmul <4 x float> %87, %83
  %94 = fadd <4 x float> %93, %92
  %95 = fmul <4 x float> %84, %87
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %88, %83
  %98 = fadd <4 x float> %97, %96
  %99 = fmul <4 x float> %88, %84
  %100 = fadd <4 x float> %99, %98
  %101 = fmul <4 x float> %80, %71
  %102 = fadd <4 x float> %101, %100
  %103 = fmul <4 x float> %79, %78
  %104 = fadd <4 x float> %102, %103
  %105 = fadd <4 x float> %89, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = fsub <4 x float> %105, %89
  %107 = fsub <4 x float> %105, %106
  %108 = fsub <4 x float> %89, %107
  %109 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106
  %110 = fadd <4 x float> %109, %108
  %111 = fadd <4 x float> %110, %104
  %112 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %89, <4 x float> %105, <4 x float> %28) #6
  %113 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %104, <4 x float> %111, <4 x float> %28) #6
  %114 = add <4 x i32> %10, <i32 2, i32 2, i32 2, i32 2>
  %115 = and <4 x i32> %114, <i32 4, i32 4, i32 4, i32 4>
  %116 = icmp ne <4 x i32> %115, zeroinitializer
  %117 = sext <4 x i1> %116 to <4 x i32>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <4 x float> %112 to <2 x i64>
  %121 = xor <2 x i64> %119, %120
  %122 = bitcast <4 x float> %113 to <2 x i64>
  %123 = xor <2 x i64> %119, %122
  %124 = bitcast <2 x i64> %121 to <4 x float>
  %125 = bitcast <2 x i64> %123 to <4 x float>
  %126 = fadd <4 x float> %124, %125
  %127 = bitcast <4 x float> %0 to <2 x i64>
  %128 = and <2 x i64> %127, <i64 9223372034707292159, i64 9223372034707292159>
  %129 = bitcast <2 x i64> %128 to <4 x float>
  %130 = fcmp ogt <4 x float> %129, <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>
  %131 = sext <4 x i1> %130 to <4 x i32>
  %132 = bitcast <4 x i32> %131 to <4 x float>
  %133 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %126, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %132) #6
  %134 = fcmp oeq <4 x float> %129, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %135 = sext <4 x i1> %134 to <4 x i32>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = bitcast <4 x float> %133 to <2 x i64>
  %138 = or <2 x i64> %137, %136
  %139 = bitcast <2 x i64> %138 to <4 x float>
  ret <4 x float> %139
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_cinz_tgammaf4_u10sse4(<4 x float>) local_unnamed_addr #3 {
  %2 = tail call <4 x float> @Sleef_tgammaf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind uwtable
define <4 x float> @Sleef_cinz_lgammaf4_u10sse4(<4 x float>) local_unnamed_addr #3 {
  %2 = tail call <4 x float> @Sleef_lgammaf4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_erff4_u10sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_erff4_u10sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_erfcf4_u15sse4(<4 x float>) local_unnamed_addr #0 {
  %2 = tail call <4 x float> @Sleef_erfcf4_u15sse4(<4 x float> %0)
  ret <4 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x float> @Sleef_cinz_fastpowf4_u3500sse4(<4 x float>, <4 x float>) local_unnamed_addr #0 {
  %3 = bitcast <4 x float> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <2 x i64> %4 to <4 x float>
  %6 = fcmp olt <4 x float> %5, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = fmul <4 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = bitcast <4 x i32> %7 to <4 x float>
  %10 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %5, <4 x float> %8, <4 x float> %9) #6
  %11 = fmul <4 x float> %10, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %12 = bitcast <4 x float> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %17 = bitcast <4 x float> %10 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = sub <4 x i32> %18, %16
  %20 = bitcast <4 x i32> %19 to <4 x float>
  %21 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = bitcast <4 x i32> %21 to <16 x i8>
  %24 = bitcast <4 x i32> %7 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %22, <16 x i8> %23, <16 x i8> %24) #6
  %26 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fdiv <4 x float> %26, %27
  %29 = fmul <4 x float> %28, %28
  %30 = fmul <4 x float> %29, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %31 = fadd <4 x float> %30, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %32 = fmul <4 x float> %29, %31
  %33 = fadd <4 x float> %32, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %34 = fmul <4 x float> %29, %33
  %35 = fadd <4 x float> %34, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %36 = fmul <4 x float> %29, %35
  %37 = fadd <4 x float> %36, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = bitcast <16 x i8> %25 to <4 x i32>
  %39 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %38) #6
  %40 = fmul <4 x float> %39, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %41 = fmul <4 x float> %28, %37
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %42, %1
  %44 = fmul <4 x float> %43, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %44) #6
  %46 = tail call <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32> %45) #6
  %47 = fmul <4 x float> %46, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %48 = fadd <4 x float> %47, %43
  %49 = fmul <4 x float> %46, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %50, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %52 = fadd <4 x float> %51, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %53 = fmul <4 x float> %50, %52
  %54 = fadd <4 x float> %53, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %55 = fmul <4 x float> %50, %54
  %56 = fadd <4 x float> %55, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %57 = fmul <4 x float> %50, %56
  %58 = fadd <4 x float> %57, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %59 = fmul <4 x float> %50, %58
  %60 = fadd <4 x float> %59, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <4 x float> %50, %50
  %62 = fadd <4 x float> %50, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %63 = fmul <4 x float> %61, %60
  %64 = fadd <4 x float> %62, %63
  %65 = ashr <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %66 = shl <4 x i32> %65, <i32 23, i32 23, i32 23, i32 23>
  %67 = add <4 x i32> %66, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %68 = bitcast <4 x i32> %67 to <4 x float>
  %69 = fmul <4 x float> %64, %68
  %70 = sub <4 x i32> %45, %65
  %71 = shl <4 x i32> %70, <i32 23, i32 23, i32 23, i32 23>
  %72 = add <4 x i32> %71, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %73 = bitcast <4 x i32> %72 to <4 x float>
  %74 = fmul <4 x float> %69, %73
  %75 = fcmp olt <4 x float> %43, <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = bitcast <4 x float> %74 to <2 x i64>
  %79 = xor <2 x i64> %77, <i64 -1, i64 -1>
  %80 = and <2 x i64> %78, %79
  %81 = bitcast <2 x i64> %80 to <4 x float>
  %82 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1, i32 11) #6
  %83 = fcmp oeq <4 x float> %82, %1
  %84 = bitcast <4 x float> %1 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 9223372034707292159, i64 9223372034707292159>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = fcmp ogt <4 x float> %86, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %88 = or <4 x i1> %83, %87
  %89 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1) #6
  %90 = and <4 x i32> %89, <i32 1, i32 1, i32 1, i32 1>
  %91 = icmp ne <4 x i32> %90, zeroinitializer
  %92 = fcmp olt <4 x float> %86, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %93 = and <4 x i1> %88, %92
  %94 = and <4 x i1> %93, %91
  %95 = bitcast <4 x float> %0 to <4 x i32>
  %96 = ashr <4 x i32> %95, <i32 31, i32 31, i32 31, i32 31>
  %97 = xor <2 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160>
  %98 = bitcast <2 x i64> %97 to <4 x float>
  %99 = bitcast <4 x i32> %96 to <4 x float>
  %100 = select <4 x i1> %94, <4 x float> %99, <4 x float> zeroinitializer
  %101 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %81, <4 x float> %98, <4 x float> %100) #6
  %102 = fcmp oeq <4 x float> %0, zeroinitializer
  %103 = sext <4 x i1> %102 to <4 x i32>
  %104 = bitcast <4 x i32> %103 to <4 x float>
  %105 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %101, <4 x float> zeroinitializer, <4 x float> %104) #6
  %106 = fcmp oeq <4 x float> %1, zeroinitializer
  %107 = sext <4 x i1> %106 to <4 x i32>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %105, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %108) #6
  ret <4 x float> %109
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf4_sse4(i32) local_unnamed_addr #3 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %22

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %9 = load i32, i32* %8, align 4, !tbaa !40
  %10 = and i32 %9, 67108864
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %14 = load i32, i32* %13, align 8, !tbaa !40
  %15 = and i32 %14, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %12
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %18 = load i32, i32* %13, align 8, !tbaa !40
  %19 = and i32 %18, 524288
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 0, i32 3
  br label %22

; <label>:22:                                     ; preds = %17, %12, %5, %1
  %23 = phi i32 [ 0, %1 ], [ 0, %12 ], [ 0, %5 ], [ %21, %17 ]
  ret i32 %23
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf4_sse4(i32) local_unnamed_addr #2 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.blendvps(<4 x float>, <4 x float>, <4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.round.ps(<4 x float>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.sqrt.ps(<4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #4

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #5

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempif: argument 0"}
!9 = distinct !{!9, !"rempif"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempif: argument 0"}
!12 = distinct !{!12, !"rempif"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempif: argument 0"}
!15 = distinct !{!15, !"rempif"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempif: argument 0"}
!18 = distinct !{!18, !"rempif"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempif: argument 0"}
!21 = distinct !{!21, !"rempif"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempif: argument 0"}
!24 = distinct !{!24, !"rempif"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempif: argument 0"}
!27 = distinct !{!27, !"rempif"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempif: argument 0"}
!30 = distinct !{!30, !"rempif"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospif4_u05sse4: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospif4_u05sse4"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_sincospif4_u35sse4: argument 0"}
!36 = distinct !{!36, !"Sleef_sincospif4_u35sse4"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"Sleef_modff4_sse4: argument 0"}
!39 = distinct !{!39, !"Sleef_modff4_sse4"}
!40 = !{!41, !41, i64 0}
!41 = !{!"int", !5, i64 0}
